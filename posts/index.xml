<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>Posts on Luis Miguens Blog</title>
        <link>https://blog.miguens.one/posts/</link>
        <description>Recent content in Posts on Luis Miguens Blog</description>
        <generator>Hugo -- gohugo.io</generator>
        <language>en</language>
        <lastBuildDate>Fri, 11 Jul 2025 00:00:00 +0000</lastBuildDate>
        <atom:link href="https://blog.miguens.one/posts/index.xml" rel="self" type="application/rss+xml" />
        
        <item>
            <title>Parallel Algorithms in C&#43;&#43;17 – Execution Policies, Advantages, and Limitations</title>
            <link>https://blog.miguens.one/posts/2025/07/parallel-algorithms-in-c-17-execution-policies-advantages-and-limitations/</link>
            <pubDate>Fri, 11 Jul 2025 00:00:00 +0000</pubDate>
            
            <guid>https://blog.miguens.one/posts/2025/07/parallel-algorithms-in-c-17-execution-policies-advantages-and-limitations/</guid>
            <description>&lt;p&gt;Modern C++ embraces the reality of multicore processors by providing high-level tools for parallelism. The C++17 standard introduced &lt;em&gt;parallel algorithms&lt;/em&gt;, essentially parallelised versions of existing STL algorithms, to help programs take advantage of multiple cores for improved performance. In this post, we explore how C++17 parallel algorithms work, focusing on the &lt;strong&gt;execution policies&lt;/strong&gt; (&lt;code&gt;std::execution::seq&lt;/code&gt;, &lt;code&gt;par&lt;/code&gt;, and &lt;code&gt;par_unseq&lt;/code&gt;), with examples of their use. We also discuss the performance benefits of parallel execution and critically examine the limitations – including overhead, portability, and scenarios where parallelism may not pay off. The tone is analytical and formal, with a viewpoint that whilst parallelism is powerful, it must be applied judiciously.&lt;/p&gt;</description>
            <content type="html"><![CDATA[<p>Modern C++ embraces the reality of multicore processors by providing high-level tools for parallelism. The C++17 standard introduced <em>parallel algorithms</em>, essentially parallelised versions of existing STL algorithms, to help programs take advantage of multiple cores for improved performance. In this post, we explore how C++17 parallel algorithms work, focusing on the <strong>execution policies</strong> (<code>std::execution::seq</code>, <code>par</code>, and <code>par_unseq</code>), with examples of their use. We also discuss the performance benefits of parallel execution and critically examine the limitations – including overhead, portability, and scenarios where parallelism may not pay off. The tone is analytical and formal, with a viewpoint that whilst parallelism is powerful, it must be applied judiciously.</p>
<h2 id="execution-policies-in-c17-standard-algorithms">Execution Policies in C++17 Standard Algorithms</h2>
<p>Parallel algorithms in C++17 are enabled by <em>execution policies</em>, defined in the <code>&lt;execution&gt;</code> header. These policy objects are passed as the first argument to a standard algorithm call, indicating how the algorithm is allowed to execute. C++17 defines three such policies:</p>
<ul>
<li><strong><code>std::execution::seq</code> (sequenced)</strong> – Execute the algorithm strictly sequentially (no parallelism). This is equivalent to the usual serial execution and is the default if no policy is specified.</li>
<li><strong><code>std::execution::par</code> (parallel)</strong> – Allow the algorithm to execute in parallel across threads (multiple threads may divide the work). However, execution within each thread remains sequential (no inter-thread vectorisation).</li>
<li><strong><code>std::execution::par_unseq</code> (parallel unsequenced)</strong> – Allow full parallelism: multiple threads and unsequenced execution (vectorisation) within threads. This gives the implementation freedom to reorder and vectorise operations in addition to using multiple threads. (For completeness, C++20 later added <code>std::execution::unseq</code> for vectorisation without multithreading, but we will focus on the C++17 policies.)</li>
</ul>
<p>Using an execution policy is straightforward: you simply include <code>&lt;execution&gt;</code> and pass the policy to the algorithm call. The library provides overloads of many standard algorithms that take an <code>ExecutionPolicy</code> parameter. The only change from a normal call is this extra first argument, which makes it easy to upgrade a sequential algorithm to run in parallel. For example, here we use <code>std::transform</code> to square a range of numbers in parallel:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-cpp" data-lang="cpp"><span style="display:flex;"><span><span style="color:#75715e">#include</span> <span style="color:#75715e">&lt;vector&gt;</span><span style="color:#75715e">
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">#include</span> <span style="color:#75715e">&lt;execution&gt;</span><span style="color:#75715e">
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">#include</span> <span style="color:#75715e">&lt;algorithm&gt;</span><span style="color:#75715e">
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">// ... (initialize a std::vector&lt;int&gt; data with values)
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>std<span style="color:#f92672">::</span>vector<span style="color:#f92672">&lt;</span><span style="color:#66d9ef">int</span><span style="color:#f92672">&gt;</span> result(data.size());
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">// Parallel transform: square each element in data, store in result.
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>std<span style="color:#f92672">::</span>transform(std<span style="color:#f92672">::</span>execution<span style="color:#f92672">::</span>par_unseq,
</span></span><span style="display:flex;"><span>               data.begin(), data.end(),
</span></span><span style="display:flex;"><span>               result.begin(),
</span></span><span style="display:flex;"><span>               [](<span style="color:#66d9ef">int</span> x) { <span style="color:#66d9ef">return</span> x <span style="color:#f92672">*</span> x; });
</span></span></code></pre></div><p>In this snippet, the only difference from a traditional <code>std::transform</code> call is the <code>std::execution::par_unseq</code> policy specified as the first argument. This hints to the library that it may perform the transformation in parallel and with vectorised instructions, dividing work among threads as appropriate. The code remains clear and declarative – we express <em>what</em> to do (square each element) while the library decides <em>how</em> to do it in parallel. Similarly, we can sort a large container with minimal changes to the call:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-cpp" data-lang="cpp"><span style="display:flex;"><span>std<span style="color:#f92672">::</span>vector<span style="color:#f92672">&lt;</span><span style="color:#66d9ef">double</span><span style="color:#f92672">&gt;</span> bigData <span style="color:#f92672">=</span> <span style="color:#75715e">/* ... */</span>;
</span></span><span style="display:flex;"><span><span style="color:#75715e">// Sequential sort:
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>std<span style="color:#f92672">::</span>sort(bigData.begin(), bigData.end());
</span></span><span style="display:flex;"><span><span style="color:#75715e">// Parallel sort using multiple threads:
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>std<span style="color:#f92672">::</span>sort(std<span style="color:#f92672">::</span>execution<span style="color:#f92672">::</span>par, bigData.begin(), bigData.end());
</span></span></code></pre></div><p>By simply adding <code>std::execution::par</code>, the sorting algorithm is permitted to utilise multiple threads to sort the data, which can greatly accelerate sorting of big datasets (e.g. millions of elements) without any further code changes. If no execution policy is given, the call defaults to the sequenced (<code>seq</code>) behavior, so explicitly using <code>seq</code> is mainly for clarity or to force sequential execution when desired.</p>
<p><strong>Algorithm support:</strong> Most standard algorithms that make sense to parallelise have overloads for execution policies. This includes algorithms like <code>std::for_each</code>, <code>std::transform</code>, <code>std::copy</code>, sorting algorithms (<code>std::sort</code>, <code>std::stable_sort</code>), partitioning and searching algorithms, and new algorithms introduced in C++17 such as <code>std::reduce</code> (a parallel-friendly alternative to <code>std::accumulate</code>). Not every algorithm is parallelised (for example, <code>std::accumulate</code> itself remains sequential to guarantee left-to-right order, whereas <code>std::reduce</code> allows arbitrary grouping for parallelism), but the library covers a broad set of common computations with parallel counterparts.</p>
<p><strong>Requirements and safety:</strong> It is the programmer’s responsibility to ensure that the operation used in a parallel algorithm is safe for concurrent execution. In practice, this means the functor or lambda you pass should not introduce <em>data races</em> – e.g. writing to shared variables without synchronisation – and should not rely on element processing order. Under <code>par</code> policy, invocations run concurrently on different threads, so they must obey the usual rules of concurrent code (multiple readers or one writer per memory location, no unsynchronised data sharing). Under <code>par_unseq</code>, the requirements are even stricter: the callable must be <em>vectorisation-safe</em>. In other words, it cannot perform operations that inherently require a strict sequence or mutual exclusion, such as acquiring locks or other synchronisation primitives. If code uses a mutex or other blocking synchronization inside a <code>par_unseq</code> algorithm, it could lead to deadlocks or undefined behavior, since the policy permits the implementation to interleave operations without the usual sequential ordering. <strong>Rule of thumb:</strong> if your functor would cause data races when executed in parallel, stick to <code>seq</code> (or fix the data sharing); if it uses something like locks or I/O that cannot be safely vectorised, prefer <code>par</code> over <code>par_unseq</code>. When in doubt, using the <code>par</code> policy is safer, as it forbids certain aggressive optimisations but still allows multi-threading.</p>
<p>Finally, note that exceptions thrown inside parallel algorithms are <em>not</em> propagated in the usual way. The C++17 standard dictates that if a user-provided operation invoked by a standard algorithm with a parallel policy throws an exception, the program will call <code>std::terminate</code> (effectively aborting). This design avoids complex error-handling across threads, but it means you should avoid throwing exceptions from within the algorithm’s functors. Any needed error handling should be done by other means (e.g. use atomic flags or pre-validation of data) because a thrown exception will end the whole program when using <code>par</code>/<code>par_unseq</code>.</p>
<h2 id="advantages-of-using-c17-parallel-algorithms">Advantages of Using C++17 Parallel Algorithms</h2>
<p>Using parallel execution policies can significantly improve performance in compute-intensive scenarios by utilising the full power of modern CPUs. Instead of being limited to a single thread, algorithms like sort, transform, or reduce can engage multiple cores and even vector units, potentially executing many operations simultaneously. This <em>data-parallel</em> approach can yield near-linear speedups relative to sequential execution, in ideal cases, as workload is divided among threads. The standard library’s goal for adding parallel algorithms was exactly to enable such performance gains with minimal effort. Developers no longer need to rewrite algorithms with low-level threading primitives; you can achieve parallel execution by tweaking one line of code. This high-level approach also lets the library apply optimisations automatically. For example, with the <code>par_unseq</code> policy, an implementation might utilise SIMD instructions (vectorising operations on contiguous data) and even adjust workload distribution dynamically (work-stealing scheduling) to maximise throughput. These optimisations happen behind the scenes, potentially improving performance beyond what a naïve manual threading might accomplish, especially for algorithms that can be efficiently vectorised (such as element-wise transformations).</p>
<p>Another major benefit is <strong>ease of use and integration</strong>. Parallel algorithms are designed to be a drop-in replacement for their sequential counterparts: the code using them looks virtually identical to the original. As demonstrated earlier, converting a serial algorithm call to a parallel one is as simple as adding an execution policy parameter. This preserves code clarity and maintainability – the algorithm’s intent and structure remain explicit, and one does not have to refactor logic into low-level thread management code. It lowers the barrier to entry for parallel programming; developers can leverage multicore hardware without delving into threads, mutexes, and condition variables. In a sense, the execution policy approach is <em>declarative</em>: you declare that an algorithm <em>may</em> run in parallel, and the library takes care of <em>how</em>. This can lead to fewer bugs than hand-written threading, since the library implementation handles the tricky parts of splitting work and synchronising results. The consistency of using standard algorithms also means you are using well-tested components, and your code remains portable standard C++.</p>
<p>Because this functionality is part of the ISO C++ standard, it is (in principle) portable across compilers and platforms. A code using <code>std::for_each(std::execution::par, ...)</code> should compile and run with parallelism on any conforming C++17 implementation that supports the feature. There is no dependency on proprietary frameworks or non-standard extensions – you express parallelism in pure ISO C++, which is important for longevity and portability of code (assuming support is present on the target platform). In practice, major compilers have caught up: modern GCC, Clang, and MSVC all support C++17 parallel algorithms (GCC since roughly version 10, Clang since version 11, and MSVC since VS 2017 updates). This broad support means developers can increasingly rely on these features in production code across different environments.</p>
<p>Finally, parallel algorithms often compose cleanly with other standard library features. For example, one can generate data, sort it in parallel, then use <code>std::reduce</code> to compute a result, all using the STL interface. This promotes an <em>algorithmic</em> style of programming where performance-critical loops are handled by the library. The result is usually both concise and efficient, leveraging well-understood idioms instead of custom loop-and-thread code.</p>
<h2 id="limitations-and-when-not-to-use-parallel-policies">Limitations and When Not to Use Parallel Policies</h2>
<p>Despite their appeal, C++17 parallel algorithms are not a magic solution and come with important limitations. Developers should consider the following caveats and scenarios where using <code>par</code> or <code>par_unseq</code> may be counterproductive:</p>
<ul>
<li>
<p><strong>Overhead and Small Tasks:</strong> Parallelism introduces overhead – spawning threads, synchronising their results, and managing workloads all incur costs. If the amount of work in the algorithm is small (for example, iterating over a short range or doing a very cheap operation per element), these overheads can outweigh the benefits. In such cases, a parallel algorithm might even run <em>slower</em> than the sequential version. As a rule, you need a sufficiently large <code>N</code> or expensive computations to amortise the parallel overhead. Amdahl’s Law reminds us that the speedup from parallelism is limited by any remaining serial portion and by coordination costs. Empirically, it’s known that for very small loops or trivial operations, the sequential execution will likely be fastest. The standard guidance is to benchmark and ensure the parallel version is actually an improvement. If the loop’s total work is minimal, or if you only have a few elements, stick with <code>seq</code> – parallelism “does not come for free”.</p>
</li>
<li>
<p><strong>Contention and False Sharing:</strong> Related to overhead, if the algorithm’s work involves contended resources, parallelising can backfire. For example, if each iteration of a loop writes to the same global variable or performs I/O to a single device (like printing to console or writing to one file), multiple threads will contend and serialize on that resource. The Microsoft C++ team notes that additional parallelism can create contention on external resources like disk I/O, limiting any speed gains. Similarly, parallel threads operating on data that lies close in memory can suffer performance degradation due to false sharing (cache contention). In such scenarios, the theoretical parallel speedup is nullified by the bottleneck, and using a sequential approach (or redesigning the workload to avoid contention) is preferable.</p>
</li>
<li>
<p><strong>Non-random-access Iterators:</strong> C++17 parallel algorithms are most effective with random-access iterators (e.g. arrays, vectors) where the number of elements is known and they can be evenly partitioned. If you attempt to use them with linked lists or other non-contiguous sequences, the benefits may be limited or nonexistent. Some implementations may even refrain from parallelising algorithms on linked lists because the overhead of chasing pointers in multiple threads can outweigh any gains. The MSVC documentation cautions that parallelisation is “not always faster, particularly for non-random-access iterators”. In other words, if an algorithm is going to end up doing serial work anyway (like traversing a list node by node), adding threads doesn’t help. Know your data structures – a parallel algorithm on a <code>std::list</code> is unlikely to speed things up, whereas on a <code>std::vector</code> it very well might.</p>
</li>
<li>
<p><strong>Thread Safety and Correctness:</strong> The introduction of execution policies does not free you from reasoning about thread safety. <strong>The library does not automatically make your operations safe</strong> – it only provides the framework for parallel execution. If your functor or predicate writes to shared data or modifies the range in unintended ways, you can still have data races and undefined behavior. For example, doing a <code>std::for_each(std::execution::par, vec.begin(), vec.end(), f)</code> where <code>f</code> appends to the same vector will wreak havoc. The onus is on the developer to ensure the work done per element is independent or properly synchronised. In many cases, dependencies in the computation will <em>force</em> sequential execution for correctness. In such cases, you have no choice but to use <code>seq</code>. As noted earlier, even using locks inside a <code>par_unseq</code> algorithm is disallowed – it can lead to deadlock because the execution order is unsequenced. In summary, <em>correctness trumps speed</em>: you should prefer sequential execution (or redesign the algorithm) if parallel execution would introduce races or inconsistent results.</p>
</li>
<li>
<p><strong>Debugging Difficulty:</strong> Parallel algorithms can be harder to debug than their sequential counterparts. When you add an execution policy, the execution order becomes non-deterministic (especially with <code>par_unseq</code>). This can complicate debugging because breakpoints or logging statements may behave differently, and race conditions might cause intermittent failures. Also, using standard algorithms means the actual looping is happening inside the library – you can’t easily step through each iteration in a debugger. If you suspect a logic bug inside the operation, it might be simpler to run it sequentially first. The simplicity of a sequential execution is often helpful for initial implementation and debugging. Only once it’s correct should you consider parallelising the code. This is in line with a common approach: <em>get it right with <code>seq</code>, then optimise with <code>par</code> if needed</em>. Furthermore, tools for debugging multi-threaded execution (like thread sanitizers) might not directly trace into the internals of parallel STL algorithms, so figuring out concurrency issues can be tricky. Be prepared for this added complexity when opting for <code>par</code> or <code>par_unseq</code>.</p>
</li>
<li>
<p><strong>Exception Handling and Termination:</strong> As mentioned, if something goes wrong inside a parallel algorithm (e.g. an exception is thrown), the program will call <code>std::terminate</code>. This behaviour is by design, but it means you lose the ability to catch and handle exceptions at the call site. This is a limitation to be mindful of – for instance, if your functor performs an operation that might throw (say, converting a string to number, which could throw on bad input), you won’t be able to catch that exception normally. In a sequential algorithm, you could catch exceptions around the loop; in a parallel algorithm, you cannot (the program will simply terminate unless you have a global terminate handler). Thus, any potentially throwing operation should either be avoided or wrapped in a try/catch inside the functor itself (catching internally and handling error by other means). The lack of graceful error propagation is a trade-off to simplify implementations, but it’s a semantic difference from sequential code that can surprise the unwary.</p>
</li>
<li>
<p><strong>Portability and Implementation Variance:</strong> Although parallel algorithms are standardized, the standard deliberately does not mandate how they are implemented. This means that the performance characteristics – and even the availability of true parallelism – can vary between library implementations. In the early days of C++17, not all standard libraries provided an implementation of parallel execution policies; for example, GCC’s libstdc++ did not have support until version 9/10 and required certain builds, and Clang’s libc++ followed later. Even today, an implementation is allowed to fall back to sequential execution if it cannot parallelise a given call. In fact, a poorly optimised implementation might use a thread pool or task scheduler that doesn’t scale well, yielding less speedup than expected. There are also differences in how <code>par_unseq</code> is utilised: some standard libraries (such as MSVC’s as of C++17) implemented <code>par</code> and <code>par_unseq</code> in the same way internally, meaning no additional vectorisation benefits were realised. In contrast, other compilers or special platforms might take advantage of <code>par_unseq</code> to enable explicit SIMD instructions. The bottom line is that performance is not uniform across platforms – you should test on the platforms you care about. <em>Portability</em> here also extends to hardware: the execution policies are meant to be general enough to allow execution on GPUs or other accelerators, but using them doesn’t magically offload computation to a GPU unless you are using a toolchain that supports that (for example, some compilers like NVCC or special libraries could map <code>par</code> to GPU kernels). For typical CPU use, ensure that your target compiler+library actually supports the parallel algorithms and that any required support libraries (like threading backends) are present. If not, your code may compile but always run sequentially, or fail to compile altogether.</p>
</li>
<li>
<p><strong>Compilation Overhead:</strong> A lesser-known drawback is that including <code>&lt;execution&gt;</code> and using parallel algorithms can increase <strong>compile times</strong> and binary size. The parallel algorithms feature is template-heavy and may pull in concurrency support code under the hood. Lucian Teodorescu notes that parallel algorithms can add significant compile-time overhead in some cases. This might matter in large projects or for developers concerned with compilation performance. It’s not a show-stopper, but worth noting if you observe a slowdown in build times after adopting parallel algorithms.</p>
</li>
</ul>
<h2 id="conclusion">Conclusion</h2>
<p>Parallel algorithms in C++17 provide a powerful, high-level mechanism to exploit concurrency directly within the standard library. The ability to simply apply <code>std::execution::par</code> or <code>par_unseq</code> to an existing algorithm call and potentially gain a substantial speedup is a notable advancement in the language’s capabilities. In the author’s view, this feature embodies the modern C++ approach: <strong>embracing efficiency while preserving abstraction</strong>. We no longer have to drop down to low-level threads for many common data-processing tasks; instead, we express <em>what</em> we want done, and let the library decide <em>how to do it concurrently</em>. This leads to code that is both efficient and expressive.</p>
<p>That said, parallel algorithms are not a silver bullet. As we’ve analysed, one must apply them with <em>prudence</em>. Not every problem will benefit from parallel execution, and in some cases it can be detrimental. It remains crucial to <strong>measure</strong> performance and ensure that parallelism is actually helping for your particular workload and environment. A thoughtful developer will consider factors like data size, algorithm complexity, and hardware topology before blindly parallelising every algorithm call. In essence, C++17’s parallel execution policies give us a powerful tool in the toolbox, but it’s up to us to use the right tool for the job. Used appropriately, they can greatly improve application performance on modern CPUs without sacrificing code clarity. Used inappropriately, they can introduce complexity and overhead for little gain. The arrival of parallel algorithms in the standard is a positive step that moves C++ in the direction of higher-level concurrency, but it does not absolve us from thinking carefully about <em>when</em> and <em>how</em> to leverage parallelism.</p>
<p>In summary, <strong>C++17 parallel algorithms</strong> enable elegant and potentially fast solutions by combining familiar STL patterns with the power of multicore execution. By understanding the execution policies and their constraints, we can write code that is both clean and scalable. Just remember that with great power comes great responsibility: profile, test, and ensure correctness when unleashing parallel execution in your programs. With that approach, the parallel STL can be a robust ally in building high-performance C++ software.</p>
<p><strong>References:</strong></p>
<ol>
<li>ISO C++ Standard (2017) – <em>Sections [algorithms.parallel]</em> (Parallel algorithms)</li>
<li>Cppreference – “Execution policy” (online reference)</li>
<li>Microsoft C++ Team Blog – <em>Using C++17 Parallel Algorithms for Better Performance</em> (2018)</li>
<li>Teodorescu, Lucian – <em>A Case Against Blind Use of C++ Parallel Algorithms</em>, ACCU Overload 161 (2021)</li>
<li>Stack Overflow – <em>Difference between execution policies and when to use them</em> (Philipp, 2017)</li>
<li>Stack Overflow – <em>C++ compiler support for std::execution</em> (2021)</li>
</ol>
]]></content>
        </item>
        
        <item>
            <title>Embracing Type Safety in C&#43;&#43;17: std::optional, std::variant, and std::any</title>
            <link>https://blog.miguens.one/posts/2025/07/embracing-type-safety-in-c-17-stdoptional-stdvariant-and-stdany/</link>
            <pubDate>Fri, 04 Jul 2025 00:00:00 +0000</pubDate>
            
            <guid>https://blog.miguens.one/posts/2025/07/embracing-type-safety-in-c-17-stdoptional-stdvariant-and-stdany/</guid>
            <description>&lt;p&gt;Modern C++ has placed increasing emphasis on &lt;strong&gt;type safety&lt;/strong&gt; and expressiveness. C++17 introduced three powerful utilities – &lt;strong&gt;&lt;code&gt;std::optional&lt;/code&gt;&lt;/strong&gt;, &lt;strong&gt;&lt;code&gt;std::variant&lt;/code&gt;&lt;/strong&gt;, and &lt;strong&gt;&lt;code&gt;std::any&lt;/code&gt;&lt;/strong&gt; – that enhance the language&amp;rsquo;s flexibility while making code safer and more self-documenting. These facilities allow programmers to represent &amp;ldquo;optional&amp;rdquo; values, to use type-safe unions for variant types, and to perform type erasure for arbitrary types, respectively, all with the rigour of compile-time type checking or controlled runtime checks. In this article, we delve into each of these C++17 features in detail, examining how they improve upon pre-C++17 techniques, demonstrate their usage with practical code examples, discuss real-world applications, and consider edge cases, performance implications, and pitfalls. We also touch on how C++20/C++23 have further refined these utilities, all while keeping a focus on C++17.&lt;/p&gt;</description>
            <content type="html"><![CDATA[<p>Modern C++ has placed increasing emphasis on <strong>type safety</strong> and expressiveness. C++17 introduced three powerful utilities – <strong><code>std::optional</code></strong>, <strong><code>std::variant</code></strong>, and <strong><code>std::any</code></strong> – that enhance the language&rsquo;s flexibility while making code safer and more self-documenting. These facilities allow programmers to represent &ldquo;optional&rdquo; values, to use type-safe unions for variant types, and to perform type erasure for arbitrary types, respectively, all with the rigour of compile-time type checking or controlled runtime checks. In this article, we delve into each of these C++17 features in detail, examining how they improve upon pre-C++17 techniques, demonstrate their usage with practical code examples, discuss real-world applications, and consider edge cases, performance implications, and pitfalls. We also touch on how C++20/C++23 have further refined these utilities, all while keeping a focus on C++17.</p>
<h2 id="type-safety-and-flexibility-in-modern-c">Type Safety and Flexibility in Modern C++</h2>
<p>One of the guiding principles of modern C++ design is to <strong>make incorrect code harder to write</strong>. Features like <code>std::optional</code>, <code>std::variant</code>, and <code>std::any</code> embody this principle by encoding intent in the type system. Instead of relying on raw pointers, primitive unions, or void pointers (which can lead to undefined behaviour or runtime errors), these abstractions provide <strong>explicit, expressive, and safe</strong> mechanisms for common programming scenarios:</p>
<ul>
<li><strong><code>std::optional</code></strong> expresses the <em>optional presence or absence</em> of a value of a given type. It forces the programmer to handle the &ldquo;no value&rdquo; case, rather than using ad-hoc signals like <code>nullptr</code> or sentinel values.</li>
<li><strong><code>std::variant</code></strong> enables a variable to hold one of several <em>alternative types</em> in a type-safe way. It’s essentially a discriminated union that knows which type is active, preventing mistakes like accessing the wrong member of a union.</li>
<li><strong><code>std::any</code></strong> provides a container for a value of <em>any type</em>, with runtime type checking. This is a type-safe alternative to <code>void*</code> for scenarios where the type might only be known at runtime (using <em>type erasure</em>).</li>
</ul>
<p>By leveraging these, C++17 code becomes <strong>more robust</strong> (less prone to type errors), <strong>more readable</strong> (the code clearly states intent, such as &ldquo;this function may not return a value&rdquo;), and often <strong>more efficient</strong> at runtime than naive approaches (due to avoiding unnecessary allocations or branches, as we&rsquo;ll discuss). Let’s explore each type in turn.</p>
<h2 id="stdoptional--expressing-optional-values-safely"><code>std::optional</code> – Expressing Optional Values Safely</h2>
<p><code>std::optional&lt;T&gt;</code> is a class template (defined in the <code>&lt;optional&gt;</code> header) that manages an optional contained value of type <code>T</code>. In simple terms, an <code>optional&lt;T&gt;</code> either contains a value of type <code>T</code> or it is <em>empty</em> (containing no value). This allows us to represent the concept of &ldquo;maybe a T&rdquo; explicitly in the type system. As the C++ reference states, <em>“The class template <code>std::optional</code> manages an optional contained value, i.e. a value that may or may not be present.”</em> In practice, this is often used for the return value of functions that may fail or otherwise not produce a value. Instead of resorting to output parameters, special return codes, or exceptions, a function can return <code>std::optional&lt;T&gt;</code> to indicate <em>“I either have a result of type T, or I have nothing.”</em></p>
<p><strong>Type Safety and Clarity:</strong> By using <code>std::optional</code>, we make the presence/absence of a value explicit. Callers must <strong>check</strong> whether the optional has a value before using it, typically via <code>optional::operator bool()</code> or <code>optional::has_value()</code>. This prevents errors like accidentally dereferencing a null pointer. It also improves readability: the intent is clear without needing to resort to comments or sentinel conventions. Indeed, <code>std::optional</code> is more expressive and safer than alternatives like a <code>std::pair&lt;T, bool&gt;</code> or a special out-of-band value, and it handles expensive-to-construct objects more gracefully. If an optional is disengaged (empty) and one tries to access the value, the library throws a <code>std::bad_optional_access</code> exception, rather than yielding undefined behaviour. This makes errors easier to catch and diagnose.</p>
<p><strong>Basic Usage Example:</strong> Consider a configuration lookup function that tries to find a configuration value by key and returns an integer if found. Prior to C++17, one might return a special value (e.g. <code>-1</code>) or use a pointer to indicate &ldquo;not found&rdquo;. With <code>std::optional&lt;int&gt;</code>, the function can directly express the possibility of no result:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-cpp" data-lang="cpp"><span style="display:flex;"><span><span style="color:#75715e">#include</span> <span style="color:#75715e">&lt;optional&gt;</span><span style="color:#75715e">
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">#include</span> <span style="color:#75715e">&lt;string&gt;</span><span style="color:#75715e">
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">#include</span> <span style="color:#75715e">&lt;unordered_map&gt;</span><span style="color:#75715e">
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">// A simple configuration map for illustration
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>std<span style="color:#f92672">::</span>unordered_map<span style="color:#f92672">&lt;</span>std<span style="color:#f92672">::</span>string, <span style="color:#66d9ef">int</span><span style="color:#f92672">&gt;</span> config <span style="color:#f92672">=</span> {
</span></span><span style="display:flex;"><span>    {<span style="color:#e6db74">&#34;max_retries&#34;</span>, <span style="color:#ae81ff">5</span>},
</span></span><span style="display:flex;"><span>    {<span style="color:#e6db74">&#34;timeout_seconds&#34;</span>, <span style="color:#ae81ff">60</span>}
</span></span><span style="display:flex;"><span>};
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>std<span style="color:#f92672">::</span>optional<span style="color:#f92672">&lt;</span><span style="color:#66d9ef">int</span><span style="color:#f92672">&gt;</span> getConfigInt(<span style="color:#66d9ef">const</span> std<span style="color:#f92672">::</span>string<span style="color:#f92672">&amp;</span> key) {
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">auto</span> it <span style="color:#f92672">=</span> config.find(key);
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">if</span> (it <span style="color:#f92672">!=</span> config.end())
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">return</span> it<span style="color:#f92672">-&gt;</span>second;           <span style="color:#75715e">// return a value
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>    <span style="color:#66d9ef">return</span> std<span style="color:#f92672">::</span>nullopt;             <span style="color:#75715e">// return an &#34;empty&#34; optional
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">int</span> <span style="color:#a6e22e">main</span>() {
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">auto</span> retries <span style="color:#f92672">=</span> getConfigInt(<span style="color:#e6db74">&#34;max_retries&#34;</span>);
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">if</span> (retries) {
</span></span><span style="display:flex;"><span>        <span style="color:#75715e">// Safe to dereference or access the value
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>        std<span style="color:#f92672">::</span>cout <span style="color:#f92672">&lt;&lt;</span> <span style="color:#e6db74">&#34;Max retries: &#34;</span> <span style="color:#f92672">&lt;&lt;</span> <span style="color:#f92672">*</span>retries <span style="color:#f92672">&lt;&lt;</span> <span style="color:#e6db74">&#34;</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">&#34;</span>;
</span></span><span style="display:flex;"><span>    } <span style="color:#66d9ef">else</span> {
</span></span><span style="display:flex;"><span>        std<span style="color:#f92672">::</span>cout <span style="color:#f92672">&lt;&lt;</span> <span style="color:#e6db74">&#34;Max retries not set.</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">&#34;</span>;
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#75715e">// Using value_or to provide a default if not present
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>    <span style="color:#66d9ef">int</span> timeout <span style="color:#f92672">=</span> getConfigInt(<span style="color:#e6db74">&#34;timeout_seconds&#34;</span>).value_or(<span style="color:#ae81ff">30</span>);
</span></span><span style="display:flex;"><span>    std<span style="color:#f92672">::</span>cout <span style="color:#f92672">&lt;&lt;</span> <span style="color:#e6db74">&#34;Timeout: &#34;</span> <span style="color:#f92672">&lt;&lt;</span> timeout <span style="color:#f92672">&lt;&lt;</span> <span style="color:#e6db74">&#34; seconds</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">&#34;</span>;
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>In this example, <code>getConfigInt</code> returns an <code>std::optional&lt;int&gt;</code>. The caller checks <code>if (retries)</code> to see if a value is present. The <code>*retries</code> syntax uses <code>optional::operator*()</code> to retrieve the contained value when it exists. This operator is provided for convenience and behaves like dereferencing a pointer (and indeed will throw <code>bad_optional_access</code> if no value is present, similar to how dereferencing a null pointer would be undefined). Alternatively, <code>value_or(30)</code> was used to get either the stored value or a default (<code>30</code> in this case) if the optional is empty. This style is clear and prevents common errors. The code reads almost like natural language: &ldquo;get config&hellip; if (it has value) use it, otherwise use default.&rdquo; The <strong>explicitness</strong> eliminates the need for magic numbers or separate flags.</p>
<p><strong>Memory and Performance:</strong> <code>std::optional&lt;T&gt;</code> typically holds a <code>T</code> object <strong>in-place</strong> (without additional allocation) and a small flag to indicate whether a value is present. The size of an <code>optional&lt;T&gt;</code> is roughly <code>sizeof(T) + 1</code> (with some padding for alignment). For instance, an <code>optional&lt;double&gt;</code> will hold the <code>double</code> directly and a boolean state. This makes it efficient – there’s no heap allocation and no indirection needed to access the value (unlike using a pointer). Additionally, an empty <code>optional</code> does <strong>not</strong> construct a <code>T</code> until a value is assigned, so it can represent &ldquo;nothing&rdquo; without incurring the cost of a default-constructed <code>T</code>. This is particularly useful for types that are expensive to initialise. In fact, the standard ensures that if an optional is disengaged, the storage for <code>T</code> is uninitialised, and only when a value is emplaced or assigned is the <code>T</code> constructed (and correspondingly destroyed on reset or destruction of the optional). Thus, optional <em>“handles expensive-to-construct objects well”</em> by only creating them when needed.</p>
<p><strong>Edge Cases and Pitfalls:</strong> While <code>std::optional</code> is straightforward, there are a few things to be mindful of:</p>
<ul>
<li>An optional must be checked for a value before using. If you call <code>.value()</code> or dereference an empty optional, a <code>std::bad_optional_access</code> will be thrown. This is safer than a null pointer dereference (which would be undefined behaviour), but it’s still a runtime error that should be avoided by proper checking (or using <code>value_or</code>, etc.). Make it a habit to handle the empty case, either with <code>if (opt)</code> or with the provided utility functions.</li>
<li><code>std::optional&lt;T&gt;</code> is <strong>not</strong> a drop-in replacement for <code>T*</code> in all cases. Notably, optional <em>does not allow</em> references or array types as the template parameter. You cannot have <code>optional&lt;SomeClass&amp;&gt;</code> directly (since references are not assignable or destructible in a way optional can manage). If you truly need an optional reference, you can use something like <code>std::optional&lt;std::reference_wrapper&lt;T&gt;&gt;</code> or simply a pointer. Usually, though, if you find yourself wanting an optional reference, it may indicate a design that can be refactored.</li>
<li>Copying or moving an optional will copy/move the contained <code>T</code> if there is one. This is usually fine, but keep in mind if <code>T</code> is a heavy object, copying an <code>optional&lt;T&gt;</code> involves copying that object. In such cases, consider passing references to optionals or using <code>std::optional&lt;some_ptr&gt;</code> to large structures to avoid deep copies. On the other hand, if <code>T</code> is cheap to move, <code>optional</code> is an excellent way to avoid heap allocations that a pointer might cause.</li>
<li><code>std::optional</code> provides relational operators (==, &lt;, etc.), which perform comparisons in a way that an empty optional is considered less than one with a value, etc. These are handy but be aware of the semantics (e.g., two disengaged optionals are equal). C++20 even added three-way comparison (<code>&lt;=&gt;</code>) support for optionals.</li>
<li>Monadic operations (in C++23): While C++17’s optional is somewhat minimal, C++23 introduced <em>monadic operations</em> like <code>optional::and_then</code>, <code>transform</code>, and <code>or_else</code>. These allow chaining operations on optional values in a functional style. For example, <code>opt.and_then(f)</code> executes a function <code>f</code> if the optional has a value, passing the contained value, and propagates an empty optional otherwise. These enhancements (available if you’re using C++23) can make handling optional values more concise, but even in C++17 one can achieve similar effects with manual checks or by utilising <code>value_or</code> and ternary operators.</li>
</ul>
<p><strong>Real-World Uses:</strong> <code>std::optional</code> is broadly useful wherever a value may be contextually optional. Common scenarios include configuration settings (a setting might not be provided, so use an optional), parsing (if a parse might fail, return an optional instead of a special value), and interactions with hardware or OS (where an API might return a value or indicate the absence of it). For instance, the filesystem library in C++17 uses <code>std::optional&lt;uintmax_t&gt;</code> for <code>file_size()</code> – it returns a size if available, but for directories (where size is not applicable) it returns an empty optional, rather than overloading the function or using an out parameter. Overall, <code>std::optional</code> increases clarity: the programmer and the compiler <em>know</em> when a value might not be there, and the code must handle that possibility.</p>
<h2 id="stdvariant--type-safe-unions-for-heterogeneous-data"><code>std::variant</code> – Type-Safe Unions for Heterogeneous Data</h2>
<p>While <code>std::optional</code> deals with <em>presence or absence</em> of one type, <strong><code>std::variant</code></strong> (defined in <code>&lt;variant&gt;</code>) deals with <em>one of many types</em>. It is often described as a &ldquo;type-safe union&rdquo; – indeed, the C++ standard reference defines <code>std::variant</code> as <em>“represents a type-safe union”</em>. A <code>std::variant&lt;...&gt;</code> can hold a value that <strong>alternates among a fixed set of types</strong> (known at compile time). For example, <code>std::variant&lt;int, std::string&gt;</code> can hold either an <code>int</code> or a <code>std::string</code> at any given time (one or the other, but not both). Unlike a traditional C <code>union</code>, the variant knows which type is currently active, and it will only allow you to access that active type, enforcing correctness at compile time or by throwing an exception if you attempt the wrong type access.</p>
<p><strong>Type Safety and Alternatives:</strong> <code>std::variant</code> addresses a common need: sometimes a variable or return type can naturally be one of a few alternatives. Prior to C++17, one might use a raw <code>union</code> plus a manual tag variable to track the current type, or use a base class with derived types (polymorphism) and <code>dynamic_cast</code> to figure out the actual type, or even abuse <code>void*</code>. All those approaches are error-prone or heavyweight:</p>
<ul>
<li>A raw union in C++ does not keep track of which member is active, and reading the wrong member is undefined behaviour. Moreover, unions cannot have non-trivial types without manual constructor/destructor management – they <em>“won’t call destructors of the underlying types”</em>, requiring the programmer to explicitly destroy and construct members when switching the active type. This is complex and bug-prone (leaking memory or calling the wrong destructor are common pitfalls). For example, if a union holds a <code>std::string</code> and a <code>std::vector&lt;int&gt;</code>, the programmer must manually <code>std::destroy</code> the active member and placement-new the new one when changing the type. Failing to do so correctly leads to memory leaks or double-destruction.</li>
<li>Using class inheritance (polymorphism) to allow a variable to take multiple forms requires heap allocation (for polymorphic objects) and incurs virtual dispatch. It also moves the type determination to runtime (via <code>dynamic_cast</code> or virtual methods) and typically cannot easily return stack-allocated alternatives. It’s often overkill when the set of types is known and limited.</li>
<li><code>void*</code> (or even <code>std::any</code>) could be used to store &ldquo;something of unknown type&rdquo;, but then it&rsquo;s on the programmer to remember what actual type was stored and to cast it back. With <code>void*</code> there’s no checking at all – a wrong cast is undefined behaviour, likely crashing the program.</li>
</ul>
<p>Enter <code>std::variant</code>: it solves these issues by providing an <strong>enumerated set of types</strong> with <strong>strictly enforced access</strong>. When you define <code>std::variant&lt;T1, T2, ..., Tn&gt;</code>, that variant can hold exactly one value, which is either a <code>T1</code> or a <code>T2</code> or &hellip; <code>Tn</code>. The active type is tracked internally (typically by storing an index of which alternative is active). The variant will call the constructor of the stored value when you assign, and call the destructor when the variant changes to hold a different type or is destroyed. This means all the manual work required with unions is handled for you – <em>the proper constructor/destructor is invoked as needed, and you always know which type is active</em>. In fact, if you try to access the wrong type, <code>std::get</code> will throw <code>std::bad_variant_access</code> if you guessed incorrectly, and <code>std::get_if</code> will return null – you have mechanisms to check safely.</p>
<p><strong>Basic Usage Example:</strong> Let’s illustrate <code>std::variant</code> with a practical scenario: suppose we have a configuration system where a configuration value could be one of a few types (say <code>int</code>, <code>bool</code>, or <code>std::string</code>). We can use a variant to represent such a value in a type-safe way:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-cpp" data-lang="cpp"><span style="display:flex;"><span><span style="color:#75715e">#include</span> <span style="color:#75715e">&lt;variant&gt;</span><span style="color:#75715e">
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">#include</span> <span style="color:#75715e">&lt;string&gt;</span><span style="color:#75715e">
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">#include</span> <span style="color:#75715e">&lt;iostream&gt;</span><span style="color:#75715e">
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">#include</span> <span style="color:#75715e">&lt;unordered_map&gt;</span><span style="color:#75715e">
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">using</span> ConfigValue <span style="color:#f92672">=</span> std<span style="color:#f92672">::</span>variant<span style="color:#f92672">&lt;</span><span style="color:#66d9ef">int</span>, <span style="color:#66d9ef">bool</span>, std<span style="color:#f92672">::</span>string<span style="color:#f92672">&gt;</span>;
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">// A map of configuration keys to variant values
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>std<span style="color:#f92672">::</span>unordered_map<span style="color:#f92672">&lt;</span>std<span style="color:#f92672">::</span>string, ConfigValue<span style="color:#f92672">&gt;</span> config <span style="color:#f92672">=</span> {
</span></span><span style="display:flex;"><span>    {<span style="color:#e6db74">&#34;max_connections&#34;</span>, <span style="color:#ae81ff">12</span>}, 
</span></span><span style="display:flex;"><span>    {<span style="color:#e6db74">&#34;enable_logging&#34;</span>, true}, 
</span></span><span style="display:flex;"><span>    {<span style="color:#e6db74">&#34;log_file&#34;</span>, std<span style="color:#f92672">::</span>string(<span style="color:#e6db74">&#34;logs/output.txt&#34;</span>)}
</span></span><span style="display:flex;"><span>};
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">void</span> <span style="color:#a6e22e">printConfigValue</span>(<span style="color:#66d9ef">const</span> std<span style="color:#f92672">::</span>string<span style="color:#f92672">&amp;</span> key) {
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">const</span> <span style="color:#66d9ef">auto</span> it <span style="color:#f92672">=</span> config.find(key);
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">if</span> (it <span style="color:#f92672">==</span> config.end()) {
</span></span><span style="display:flex;"><span>        std<span style="color:#f92672">::</span>cout <span style="color:#f92672">&lt;&lt;</span> key <span style="color:#f92672">&lt;&lt;</span> <span style="color:#e6db74">&#34; is not set.</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">&#34;</span>;
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">return</span>;
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">const</span> ConfigValue<span style="color:#f92672">&amp;</span> val <span style="color:#f92672">=</span> it<span style="color:#f92672">-&gt;</span>second;
</span></span><span style="display:flex;"><span>    <span style="color:#75715e">// Visit the variant to handle each possible type
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>    std<span style="color:#f92672">::</span>visit([](<span style="color:#66d9ef">auto</span><span style="color:#f92672">&amp;&amp;</span> arg){
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">using</span> T <span style="color:#f92672">=</span> std<span style="color:#f92672">::</span>decay_t<span style="color:#f92672">&lt;</span><span style="color:#66d9ef">decltype</span>(arg)<span style="color:#f92672">&gt;</span>;
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">if</span> <span style="color:#66d9ef">constexpr</span> (std<span style="color:#f92672">::</span>is_same_v<span style="color:#f92672">&lt;</span>T, <span style="color:#66d9ef">int</span><span style="color:#f92672">&gt;</span>)
</span></span><span style="display:flex;"><span>            std<span style="color:#f92672">::</span>cout <span style="color:#f92672">&lt;&lt;</span> <span style="color:#e6db74">&#34;int: &#34;</span> <span style="color:#f92672">&lt;&lt;</span> arg <span style="color:#f92672">&lt;&lt;</span> <span style="color:#e6db74">&#34;</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">&#34;</span>;
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">else</span> <span style="color:#66d9ef">if</span> <span style="color:#66d9ef">constexpr</span> (std<span style="color:#f92672">::</span>is_same_v<span style="color:#f92672">&lt;</span>T, <span style="color:#66d9ef">bool</span><span style="color:#f92672">&gt;</span>)
</span></span><span style="display:flex;"><span>            std<span style="color:#f92672">::</span>cout <span style="color:#f92672">&lt;&lt;</span> <span style="color:#e6db74">&#34;bool: &#34;</span> <span style="color:#f92672">&lt;&lt;</span> std<span style="color:#f92672">::</span>boolalpha <span style="color:#f92672">&lt;&lt;</span> arg <span style="color:#f92672">&lt;&lt;</span> <span style="color:#e6db74">&#34;</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">&#34;</span>;
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">else</span> <span style="color:#66d9ef">if</span> <span style="color:#66d9ef">constexpr</span> (std<span style="color:#f92672">::</span>is_same_v<span style="color:#f92672">&lt;</span>T, std<span style="color:#f92672">::</span>string<span style="color:#f92672">&gt;</span>)
</span></span><span style="display:flex;"><span>            std<span style="color:#f92672">::</span>cout <span style="color:#f92672">&lt;&lt;</span> <span style="color:#e6db74">&#34;string: &#34;</span> <span style="color:#f92672">&lt;&lt;</span> arg <span style="color:#f92672">&lt;&lt;</span> <span style="color:#e6db74">&#34;</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">&#34;</span>;
</span></span><span style="display:flex;"><span>    }, val);
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">int</span> <span style="color:#a6e22e">main</span>() {
</span></span><span style="display:flex;"><span>    printConfigValue(<span style="color:#e6db74">&#34;max_connections&#34;</span>);
</span></span><span style="display:flex;"><span>    printConfigValue(<span style="color:#e6db74">&#34;enable_logging&#34;</span>);
</span></span><span style="display:flex;"><span>    printConfigValue(<span style="color:#e6db74">&#34;log_file&#34;</span>);
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>In this example, <code>ConfigValue</code> is defined as <code>std::variant&lt;int, bool, std::string&gt;</code>. The <code>config</code> map holds values that can be any one of those three types. The function <code>printConfigValue</code> demonstrates accessing the variant: it uses <code>std::visit</code> with a lambda that has an <code>auto</code> parameter. This C++17 feature (<code>std::visit</code>) will call the lambda with the currently held value. Here we use a C++17 fold of <code>if constexpr</code> to detect the type of <code>arg</code> and act accordingly. The output will vary based on the type, e.g.:</p>
<pre tabindex="0"><code>max_connections -&gt; int: 12
enable_logging -&gt; bool: true
log_file -&gt; string: logs/output.txt
</code></pre><p>This approach is <em>fully type-safe</em>: if we add another type to the variant, the code inside <code>visit</code> will fail to compile if we don&rsquo;t handle it (in the above generic lambda approach, it actually <em>will</em> handle any type due to the <code>auto</code> and conditional, but one can also use overloaded function objects or explicit lambdas for each type). We can also access the variant in other ways:</p>
<ul>
<li><code>std::get&lt;T&gt;(variant)</code> returns a reference to the value if the variant currently holds type <code>T</code>, or throws <code>std::bad_variant_access</code> if not.</li>
<li><code>std::get&lt;I&gt;(variant)</code> returns the value by index (0-based index of the type in the template parameters), which can be useful in some generic contexts.</li>
<li><code>std::get_if&lt;T&gt;(&amp;variant)</code> returns a pointer to the value of type <code>T</code> if it’s active, or <code>nullptr</code> otherwise (this is a non-throwing way to query the active type).</li>
<li><code>variant.index()</code> tells you which alternative is active (by index), and <code>std::holds_alternative&lt;T&gt;(variant)</code> returns true if the variant currently holds type <code>T</code>.</li>
</ul>
<p><strong>Active State and Default Construction:</strong> A <code>std::variant</code> must always hold a value of one of its alternatives (except for a special <em>valueless</em> state discussed shortly). Unlike <code>std::optional</code>, a variant cannot be &ldquo;empty&rdquo; (no value) by design – there is no <code>variant::has_value()</code> because one of the types is <em>always</em> active. When you default-construct a variant, it <em>default-initialises the first alternative type</em> (index 0). If that type is not default-constructible, the variant itself won’t be default-constructible. To allow a variant to have an &ldquo;empty&rdquo; state, a common trick is to include an alternative like <code>std::monostate</code> (a trivial empty struct type provided by <code>&lt;variant&gt;</code>) as the first alternative. <code>std::monostate</code> is useful as a kind of &ldquo;null&rdquo; alternative – it’s a distinct type that carries no data. For example, <code>std::variant&lt;std::monostate, int, std::string&gt;</code> default-constructs to <code>monostate</code> (index 0, representing &ldquo;no value&rdquo;), and you can assign an <code>int</code> or <code>std::string</code> later. In many cases, though, you might not need <code>monostate</code> because you might always have a meaningful default. If not, <code>monostate</code> is a handy tool to explicitly represent a <em>valueless initial state</em>.</p>
<p><strong>Valueless-by-Exception State:</strong> Although a variant generally always holds one of its types, there is an exceptional situation where it can become <em>valueless</em>. If an exception is thrown during a type assignment (for instance, during a converting assignment where the new type&rsquo;s constructor throws after the old value has been destroyed), the variant is left without any active member. This is called the <em>valueless_by_exception</em> state. It’s rare and hard to achieve in practice, but it is detectable via <code>variant.valueless_by_exception()</code> returning true. If a variant is valueless, any attempt to get the value will throw <code>bad_variant_access</code>. One should generally design types and assignments such that this state is avoided (e.g., provide nothrow move constructors for types, or handle exceptions appropriately), but it&rsquo;s good to know the possibility exists. In well-behaved code, you might never encounter a valueless variant.</p>
<p><strong>Memory and Performance:</strong> A <code>std::variant</code> does not allocate on the heap. Internally, it can be thought of as a union of all the alternative types, plus a small discriminator (typically an index of type <code>size_t</code> or <code>uint8_t</code> depending on number of alternatives). The size of a variant is therefore at least the size of the largest alternative type, plus space for the index. There may also be alignment padding. For instance, if you have <code>variant&lt;int, double&gt;</code>, the size will likely be <code>sizeof(double) + some bytes</code> for the index (since <code>double</code> is larger than <code>int</code>). One of the advantages of variant over approaches like <code>any</code> is that this memory is statically determined – <strong>no dynamic memory allocation is needed for contained values</strong>. Accessing the value involves a type check, but because the set of types is known at compile time, tools like <code>std::visit</code> are able to use <em>compile-time dispatch</em> (often implemented with a table of function pointers or if-else chain under the hood). This means accessing a variant is generally a constant-time operation that is very efficient (comparable to a switch on an enum). The overhead is the switch on the discriminator and the cost of calling the visitor. In most cases, this overhead is negligible, and certainly far less than the cost of misused unions or the dynamic allocation overhead of polymorphic pointers. Also, since the variant alternatives are known, the compiler can often optimise away some checks or inline the visitation.</p>
<p><strong>Pitfalls and Gotchas:</strong> When using <code>std::variant</code>, keep the following in mind:</p>
<ul>
<li><strong>Exhaustive Visiting:</strong> If you use <code>std::visit</code> with a visitor that has an overload for each variant type, the compiler will ensure you handled all types. However, if your visitor is not exhaustive (say you used a lambda that takes <code>auto</code> to catch multiple types generically or you missed a type), you must be careful to handle all cases. Using <code>std::visit</code> with a structured binding of lambdas (an &ldquo;overloaded&rdquo; functor of lambdas for each type) is a common pattern to ensure completeness – if you miss an alternative, the code simply won’t compile. This is a strength of variant: it forces you (at compile time) to consider all possible types, preventing latent bugs. If you choose to use index-based access or <code>get_if</code>, be mindful to check the index or pointer result.</li>
<li><strong>Type Conversions:</strong> Variants have rules for converting constructors and assignments. For example, if you assign a value of a type that is not exactly one of the alternatives but convertible to one, it might invoke a converting constructor for an unexpected alternative. A classic surprise was <code>std::variant&lt;std::string, bool&gt; v = &quot;hello&quot;;</code> – in C++17, this could actually select the <code>bool</code> alternative, because string literals can convert to <code>bool</code> (the pointer-to-char literal converted to <code>bool</code> yields true). C++20/23 resolved this with a more sane converting constructor resolution, so now <code>&quot;hello&quot;</code> will construct the <code>std::string</code> alternative as expected. It’s worth knowing that if an input is convertible to multiple variant alternatives, there might be ambiguity or unexpected resolution, so sometimes an explicit <code>std::variant</code> constructor call with the desired type is clearer.</li>
<li><strong>No References or Arrays:</strong> Like optional, variant cannot directly hold reference types or C-style arrays. All alternatives must satisfy the requirements of <code>Destructible</code> (and must be object types). If you need to variant-hold a reference, you can wrap it in <code>std::reference_wrapper</code> or use pointers. Typically, value types are stored in variant.</li>
<li><strong>Duplicate Types:</strong> Interestingly, <code>std::variant</code> <em>can</em> hold the same type more than once (e.g., <code>std::variant&lt;int, int&gt;</code> is allowed). This is not often useful, but if it happens, note that the two alternatives are treated as distinct by index (so <code>get&lt;0&gt;</code> vs <code>get&lt;1&gt;</code> would refer to the first or second <code>int</code>). Avoid such design unless it’s really necessary for some meta-programming reason.</li>
<li><strong>Alternative Order Matters:</strong> The index order of types is determined by how you list them. This can affect which type is the &ldquo;first&rdquo; (for default construction) and also affects converting constructor resolution priority. It&rsquo;s usually intuitive (list types from most to least specific, perhaps), but be mindful that <code>variant&lt;int, double&gt;</code> is not the same type as <code>variant&lt;double, int&gt;</code> and their behaviour on default-init (and converting assignment from, say, <code>0</code>) will differ.</li>
<li><strong>Performance considerations:</strong> If your variant holds alternatives where one is significantly larger than the others, the variant’s size will be that of the largest. This could mean wasted space when holding a smaller alternative. In extreme cases (many large alternatives), this could impact memory usage. But in typical use (a handful of types of reasonable size), this is not an issue. Also, each access has to check a discriminator – in tight loops where millions of variant accesses occur, this overhead could be measurable. If you have such a scenario, you might reconsider the design (maybe separate vectors for each type, etc.), but for most purposes variants are plenty efficient.</li>
</ul>
<p><strong>Real-World Uses:</strong> <code>std::variant</code> shines in scenarios such as <strong>message handling systems</strong> or <strong>state machines</strong>. For example, if you are writing an event processing loop, you might have a <code>std::variant</code> that can hold any of several event structures. By using <code>std::visit</code>, you can dispatch the correct handler for each event type without needing a big chain of <code>dynamic_cast</code>s or manual tag comparisons. Another example is a compiler&rsquo;s abstract syntax tree node: it could be a variant of different node type structs (literal, binary_op, variable, etc.), allowing pattern-matching on node types with visitors. The C++ community has embraced variant for implementing algebraic data types – essentially, <code>std::variant</code> is a closed set sum type, akin to <code>std::optional</code> being a special case of a sum type (with two cases: value or none). A concrete illustration is implementing a <strong>finite state machine</strong>: one can define a variant of state types (as structs for each state) and then use visitors to transition between states based on events. This leads to very readable code that clearly enumerates possible states and transitions. In fact, one could model a simple traffic light or door lock state machine with a variant of states and visitors representing events (open, close, lock, unlock) that each produce a new state. This is typesafe – impossible to transition from a state that doesn’t support a given event because the visitor won&rsquo;t have a matching overload, catching errors at compile time.</p>
<p>In summary, <code>std::variant</code> provides <strong>flexible polymorphism without polymorphic classes</strong>. It gives the benefits of a union (no heap allocations, contiguous storage) while eliminating the unsafe parts (active member tracking and destruction are handled). The code is often more <strong>explicit</strong> than inheritance hierarchies, and certainly much safer and clearer than manual unions.</p>
<h2 id="stdany--type-erased-containers-for-arbitrary-values"><code>std::any</code> – Type-Erased Containers for Arbitrary Values</h2>
<p>There are situations where you genuinely need to store &ldquo;any type&rdquo; of data, without knowing the type at compile time. This is where <strong><code>std::any</code></strong> (from the <code>&lt;any&gt;</code> header) comes into play. <code>std::any</code> is a type-safe container for single values of arbitrary type. You can <strong>store</strong> a value of any copyable type in an <code>std::any</code> object, and later <strong>retrieve</strong> it (if you know the correct type to cast to). It employs <em>type erasure</em>: internally, it will allocate memory (if needed) to hold the object and remember the type information so that it can enforce correct casting. In essence, it’s like a safer alternative to <code>void*</code> that eliminates the risk of mismatched types – if you attempt to retrieve the wrong type, it will throw an exception rather than corrupt memory.</p>
<p><strong>Type Safety at Runtime:</strong> Unlike <code>optional</code> and <code>variant</code>, the types that <code>std::any</code> might hold are not fixed at compile time – it truly can be <em>anything</em>. This gives ultimate flexibility, but shifts type checking to runtime. When you store a value in an <code>any</code>, the object is type-erased (the <code>any</code> doesn’t expose what it is holding except via the <code>type()</code> method or by trying a cast). To get the value out, you use <code>std::any_cast&lt;T&gt;(any)</code> which will either return the value (or reference) if the stored object is of type <code>T</code>, or throw <code>std::bad_any_cast</code> if the types don’t match. This is type-safe in the sense that you won’t accidentally interpret data as the wrong type – you’ll get a runtime error instead.</p>
<p><strong>Basic Usage Example:</strong> Consider a scenario where we want a container that can hold heterogenous types – perhaps a vector that can hold ints, strings, doubles, etc., determined at runtime (maybe parsed from a scripting language or configuration where types vary). <code>std::any</code> makes this easy:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-cpp" data-lang="cpp"><span style="display:flex;"><span><span style="color:#75715e">#include</span> <span style="color:#75715e">&lt;any&gt;</span><span style="color:#75715e">
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">#include</span> <span style="color:#75715e">&lt;vector&gt;</span><span style="color:#75715e">
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">#include</span> <span style="color:#75715e">&lt;iostream&gt;</span><span style="color:#75715e">
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">#include</span> <span style="color:#75715e">&lt;typeinfo&gt;</span><span style="color:#75715e">
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">#include</span> <span style="color:#75715e">&lt;string&gt;</span><span style="color:#75715e">
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">int</span> <span style="color:#a6e22e">main</span>() {
</span></span><span style="display:flex;"><span>    std<span style="color:#f92672">::</span>vector<span style="color:#f92672">&lt;</span>std<span style="color:#f92672">::</span>any<span style="color:#f92672">&gt;</span> values;
</span></span><span style="display:flex;"><span>    values.push_back(<span style="color:#ae81ff">42</span>);                   <span style="color:#75715e">// int
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>    values.push_back(std<span style="color:#f92672">::</span>string(<span style="color:#e6db74">&#34;hello&#34;</span>)); <span style="color:#75715e">// string
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>    values.push_back(<span style="color:#ae81ff">3.14</span>);                 <span style="color:#75715e">// double (actually a double literal)
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">for</span> (<span style="color:#66d9ef">const</span> std<span style="color:#f92672">::</span>any<span style="color:#f92672">&amp;</span> v : values) {
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">if</span> (v.type() <span style="color:#f92672">==</span> <span style="color:#66d9ef">typeid</span>(<span style="color:#66d9ef">int</span>)) {
</span></span><span style="display:flex;"><span>            std<span style="color:#f92672">::</span>cout <span style="color:#f92672">&lt;&lt;</span> <span style="color:#e6db74">&#34;int: &#34;</span> <span style="color:#f92672">&lt;&lt;</span> std<span style="color:#f92672">::</span>any_cast<span style="color:#f92672">&lt;</span><span style="color:#66d9ef">int</span><span style="color:#f92672">&gt;</span>(v) <span style="color:#f92672">&lt;&lt;</span> <span style="color:#e6db74">&#34;</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">&#34;</span>;
</span></span><span style="display:flex;"><span>        } <span style="color:#66d9ef">else</span> <span style="color:#66d9ef">if</span> (v.type() <span style="color:#f92672">==</span> <span style="color:#66d9ef">typeid</span>(std<span style="color:#f92672">::</span>string)) {
</span></span><span style="display:flex;"><span>            std<span style="color:#f92672">::</span>cout <span style="color:#f92672">&lt;&lt;</span> <span style="color:#e6db74">&#34;string: &#34;</span> <span style="color:#f92672">&lt;&lt;</span> std<span style="color:#f92672">::</span>any_cast<span style="color:#f92672">&lt;</span>std<span style="color:#f92672">::</span>string<span style="color:#f92672">&gt;</span>(v) <span style="color:#f92672">&lt;&lt;</span> <span style="color:#e6db74">&#34;</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">&#34;</span>;
</span></span><span style="display:flex;"><span>        } <span style="color:#66d9ef">else</span> <span style="color:#66d9ef">if</span> (v.type() <span style="color:#f92672">==</span> <span style="color:#66d9ef">typeid</span>(<span style="color:#66d9ef">double</span>)) {
</span></span><span style="display:flex;"><span>            std<span style="color:#f92672">::</span>cout <span style="color:#f92672">&lt;&lt;</span> <span style="color:#e6db74">&#34;double: &#34;</span> <span style="color:#f92672">&lt;&lt;</span> std<span style="color:#f92672">::</span>any_cast<span style="color:#f92672">&lt;</span><span style="color:#66d9ef">double</span><span style="color:#f92672">&gt;</span>(v) <span style="color:#f92672">&lt;&lt;</span> <span style="color:#e6db74">&#34;</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">&#34;</span>;
</span></span><span style="display:flex;"><span>        }
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#75715e">// Example of incorrect any_cast
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>    <span style="color:#66d9ef">try</span> {
</span></span><span style="display:flex;"><span>        <span style="color:#75715e">// v[1] holds a string, so casting to int should throw
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>        <span style="color:#66d9ef">int</span> n <span style="color:#f92672">=</span> std<span style="color:#f92672">::</span>any_cast<span style="color:#f92672">&lt;</span><span style="color:#66d9ef">int</span><span style="color:#f92672">&gt;</span>(values[<span style="color:#ae81ff">1</span>]);
</span></span><span style="display:flex;"><span>    } <span style="color:#66d9ef">catch</span> (<span style="color:#66d9ef">const</span> std<span style="color:#f92672">::</span>bad_any_cast<span style="color:#f92672">&amp;</span> e) {
</span></span><span style="display:flex;"><span>        std<span style="color:#f92672">::</span>cerr <span style="color:#f92672">&lt;&lt;</span> <span style="color:#e6db74">&#34;Bad cast: &#34;</span> <span style="color:#f92672">&lt;&lt;</span> e.what() <span style="color:#f92672">&lt;&lt;</span> <span style="color:#e6db74">&#34;</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">&#34;</span>;
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>In this snippet, we create a <code>std::vector&lt;std::any&gt;</code> and push different typed values into it. We then iterate and use <code>any.type()</code> (which returns a <code>std::type_info</code>) to identify the type of each element in order to cast appropriately. This is admittedly not as neat as using <code>std::variant</code> with a fixed set of types (where <code>std::visit</code> would do it in one go), but in a scenario where you truly don&rsquo;t know the set of possible types (for example, a plugin system where plugins can insert arbitrary types), <code>std::any</code> is a suitable choice. The example also shows a failed <code>std::any_cast</code> – attempting to get an <code>int</code> out of an <code>any</code> that holds a <code>std::string</code> throws a <code>std::bad_any_cast</code>. Unlike a raw pointer cast, which would yield nonsense or crash, <code>std::any</code> detects the mismatch and safely alerts you.</p>
<p><strong>Storage and Performance:</strong> Under the hood, an <code>std::any</code> typically holds a pointer to a heap-allocated copy of the object you put into it (for larger objects), or it might use a small internal buffer for small objects (small object optimisation). The type information is stored as a <code>std::type_info</code> (from RTTI) or similar identifier. Because of this, there are some performance considerations:</p>
<ul>
<li>Copying an <code>std::any</code> requires copying the contained object (via its copy constructor). Therefore, the type you store in an <code>any</code> must be <strong>copy constructible</strong> (this is a requirement: only copyable types can be stored, since <code>std::any</code> itself is copyable). If you attempt to store a non-copyable type (like <code>std::unique_ptr&lt;T&gt;</code>), it won’t compile. The design is such that <code>std::any</code> has value semantics – if you copy the <code>any</code>, you get an independent copy of the held object.</li>
<li>Move-only types: Because of the above, move-only types can’t be directly stored by copying. However, you can still move them in (with <code>any.emplace</code> or constructing the any with <code>std::move(obj)</code>), but once in the <code>any</code>, you cannot copy the <code>any</code> (as it would attempt to copy the non-copyable content and fail at compile or runtime). In C++17, <code>std::any</code>&rsquo;s constructor template and <code>emplace</code> require the type to be CopyConstructible (there was discussion on possibly loosening this, but as of C++17 it’s a limitation).</li>
<li>Each <code>any</code> carries a type id and possibly a pointer, so it&rsquo;s larger than a raw pointer. Typically an <code>any</code> might be the size of three pointers (one for type info, one for small buffer or pointer to object, etc.). This is not huge, but if you use a lot of them, be mindful of memory overhead.</li>
<li>Accessing an <code>any</code> via <code>any_cast</code> involves checking the stored type id against the requested type. This is a runtime comparison (basically comparing <code>typeid(T)</code> of the template against the stored <code>typeid</code> of content). This is quite fast (essentially pointer comparison or string comparison of type info names, depending on implementation), but it’s not zero-cost. So, using <code>any</code> in performance-critical code (e.g., inner loops where millions of any_casts occur) would be ill-advised. It&rsquo;s meant more for flexibility at boundaries (like scripting interfaces, configuration storage, etc.), not for heavy computation on each element repeatedly.</li>
</ul>
<p><strong>Pitfalls and Best Practices:</strong></p>
<ul>
<li>Use <code>std::any</code> sparingly. Because it defers type checking to runtime, heavy use of <code>any</code> can make code less transparent. If you <em>do</em> know a fixed set of types, prefer <code>std::variant</code> for that situation. Reserve <code>std::any</code> for cases where the type list truly cannot be known or is open-ended (for example, a GUI property bag that can hold values of any type, or an instrumentation system carrying payloads of various plugin-defined types).</li>
<li>Always retrieve with the correct type. This sounds obvious, but it means the onus is on the programmer to keep track of what an <code>any</code> is supposed to hold. Misuses might not be caught until runtime (throwing an exception). Organise your code such that the logic &ldquo;knows&rdquo; the type before calling <code>any_cast</code>. Sometimes this involves storing type tags in parallel or encoding the information in the context (like using a key that implies the type).</li>
<li>If an <code>any</code> is empty (default constructed or after a reset), <code>any_cast</code> will throw as well. You can check <code>any.has_value()</code> before casting, similar to optional&rsquo;s <code>has_value</code> (and there’s <code>any.reset()</code> to clear it).</li>
<li><strong>No direct comparison:</strong> Unlike optional and variant, <code>std::any</code> does not provide comparison operators or a way to directly compare stored values (since the type is erased, you&rsquo;d have to know the type to compare meaningfully). You also cannot directly serialize an <code>any</code> without knowing what&rsquo;s inside. Essentially, <code>any</code> is a type-erased box – you need additional knowledge to use what&rsquo;s inside. Keep that in mind when designing APIs: an <code>any</code> is best used at the <em>boundaries</em> of a system (e.g., passing data through interfaces where compile-time coupling is not possible), and then quickly converted to a known type for use.</li>
<li>If you find yourself putting the same few types into an <code>any</code> repeatedly, reconsider using a variant. <code>std::any</code> is more for when you truly have <em>completely varied</em> types or want to allow future extension without changing code (at the cost of needing runtime checks).</li>
<li><strong>Exception safety:</strong> In theory, constructing or copying the contained object could throw, leaving the <code>any</code> in an empty state or propagating the exception. Typically this is not a problem unique to <code>any</code> – it just forwards exceptions from the type&rsquo;s constructors. <code>std::any</code> provides the basic exception guarantee: if a throw happens during an <code>any</code> assignment, the <code>any</code> is left unchanged.</li>
</ul>
<p><strong>Real-World Uses:</strong> A classic use-case for <code>std::any</code> is in implementing <strong>generic data storage or messaging where the set of types is open-ended</strong>. For example, consider an event system where events can carry a payload of arbitrary type, and listeners are expecting specific types. The event could store its payload in an <code>std::any</code>. Listeners would retrieve it with <code>any_cast</code> to the type they expect. Another example is a <strong>configuration system</strong> where config values might be of various types not known in advance – you could use <code>std::any</code> to hold the value, alongside maybe a description string of what type is expected. (If the types <em>are</em> known in advance, <code>std::variant</code> would be preferred, as discussed in the config example earlier, but if a plugin can introduce a new type of config value unknown to the core program, <code>std::any</code> could accommodate it.) The C++17 introduction of <code>std::any</code> was largely motivated by the existence of <code>boost::any</code> and the need for a safer alternative to void pointers in generic code. GUI frameworks, serialization libraries, and scripting language embeddings are all areas where <code>std::any</code> might appear.</p>
<p>To sum up, <code>std::any</code> offers <strong>maximum flexibility</strong> at the cost of compile-time type knowledge. It should be used when that flexibility is needed, and with discipline to manage types. It complements <code>std::optional</code> and <code>std::variant</code> – if optional is a maybe-value and variant is a one-of-several, then any is an <em>anything</em>. Each has its place in the C++ toolbox for achieving type-safe programming without sacrificing too much performance or clarity.</p>
<h2 id="practical-examples-and-applications">Practical Examples and Applications</h2>
<p>To see these utilities in action together, let’s sketch a couple of <strong>real-world inspired scenarios</strong>:</p>
<ul>
<li>
<p><strong>Configuration Parsing:</strong> Imagine a configuration file where each setting has a name and a value, and values can be of different types. Using <code>std::variant</code> or <code>std::any</code> can greatly simplify the design. As shown earlier, we could use <code>std::variant&lt;int, bool, std::string&gt;</code> for a config system with a fixed set of value types. If a certain configuration entry is optional, we can make the config map return an <code>optional&lt;ConfigValue&gt;</code> – for example, a function <code>std::optional&lt;ConfigValue&gt; getConfig(const std::string&amp; name)</code> that returns a value variant if the key exists, or <code>nullopt</code> if not. This explicitly forces the caller to handle the &ldquo;setting not found&rdquo; case, instead of, say, returning a default or sentinel. If the config values are very heterogeneous and not known ahead (perhaps user-defined types allowed), one could choose <code>std::map&lt;std::string, std::any&gt;</code> to store them. Then, each consumer of a particular config key would <code>any_cast</code> to the expected type. The combination of optional and variant here gives both safety and flexibility: optional for presence, variant for multiple known types, any for truly dynamic cases. In fact, using <code>std::variant</code> or <code>std::any</code> is a marked improvement over older techniques where people might have stored config values as <code>void*</code> along with a type tag, or used a union of possible types without safety. It was observed that <em>even <code>void*</code> was used to hold such unknown-type values</em>, but now one can “improve the design by using <code>std::variant</code> if we know all the possible types, or leverage <code>std::any</code>”.</p>
</li>
<li>
<p><strong>Message Handling System:</strong> Consider a distributed message bus or event system where messages of different types (with different payload structures) are passed through a single channel. Prior to C++17, one might define a base <code>Message</code> class and subclass it for each message type, using <code>dynamic_cast</code> or an enum to distinguish them. With C++17, you can define <code>using Message = std::variant&lt;MsgA, MsgB, MsgC&gt;</code> for all your message types. A consumer can use <code>std::visit</code> to handle each message type in a separate branch, and the compiler will ensure you covered all message variants. For optional parts of a message (say a field that may or may not be present), <code>std::optional</code> can be used within the message struct. For example, <code>struct MsgA { std::optional&lt;std::string&gt; comment; /*...*/ };</code> clearly indicates that <code>comment</code> might be absent. In more dynamic systems where new message types can be added at runtime (imagine a plugin introducing a new message), <code>std::any</code> might be used to carry the payload, with some external mechanism (like a message type registry) to know what type to cast to. However, in most systems, the set of message types is known at compile time, and <code>std::variant</code> excels there by giving compile-time type checking for the handlers. The result is code that is both efficient (no heap allocation for the polymorphism, unlike virtual inheritance) and safe (no bad casts – visitors ensure proper type handling).</p>
</li>
<li>
<p><strong>Data Processing Pipeline:</strong> In some data processing or ETL pipelines, data might be represented in a union-like structure as it flows between stages, especially if the pipeline can handle different data shapes (for example, a field that might be int or string depending on context). <code>std::variant</code> can represent this intermediate data. Each stage of the pipeline can pattern-match on the variant and process accordingly. If a stage optionally produces a result (maybe a filtering stage can drop data), it could return <code>std::optional&lt;DataVariant&gt;</code>. If a pipeline stage can yield a result in an unpredictable type (maybe scriptable stage), <code>std::any</code> might be used to hold that result until the next stage casts it to something expected. Designing such pipelines with these abstractions makes the flow of types explicit and eliminates classes of errors (e.g., one stage forgetting to check that the previous stage provided a value, or interpreting bytes as the wrong type).</p>
</li>
</ul>
<p>In all these scenarios, the overarching theme is that <strong>expressing the intent in the type system</strong> leads to clearer and safer code. By using <code>optional</code>, <code>variant</code>, and <code>any</code>, we document the <em>shape</em> of our data: whether it can be missing, whether it can take multiple forms, or whether it’s completely dynamic. This moves potential errors from runtime to compile time (in the case of optional and variant) or at least to controlled runtime (in the case of any, where a wrong cast throws an exception instead of corrupting memory).</p>
<h2 id="edge-cases-performance-and-pitfalls">Edge Cases, Performance, and Pitfalls</h2>
<p>To summarise the caveats and special considerations of each of these C++17 features, below is a breakdown of <strong>edge cases, performance implications, and potential pitfalls</strong> for each:</p>
<ul>
<li>
<p><strong><code>std::optional</code>:</strong> An optional is pretty lightweight (usually just one extra boolean flag). Performance is generally a non-issue, but be wary of copying large objects in optionals. Always check for presence before accessing; a mistaken access when empty throws a <code>bad_optional_access</code> – which is better than undefined behaviour, but still something to avoid in normal logic. Remember that optional cannot hold reference types or array types. If you need an optional reference, consider redesign or use pointer/reference_wrapper. Another subtle pitfall is that <code>optional&lt;bool&gt;</code> is not a substitute for the &ldquo;tri-state boolean&rdquo; (some languages have a nullable boolean); while it works for that, note that <code>optional&lt;bool&gt;</code> will be larger than a plain bool and you must still check it (so, no, you can’t directly do if(optional_bool) to mean true/false/missing without a check – <code>if(opt_bool)</code> only tells you if it&rsquo;s present, not its value). Also, be mindful that <code>optional</code>&rsquo;s implicit conversion to bool (for checking) can sometimes lead to slight ambiguities in overload resolution if you also have a bool overload; but those cases are rare. In terms of exception safety, optional is strong – if a constructor throws while emplacing a value in an optional, the optional remains empty. Optional&rsquo;s comparison operators make it easy to sort containers of optionals, but ensure you understand that an empty optional is treated as &lt; any value.</p>
</li>
<li>
<p><strong><code>std::variant</code>:</strong> The main edge case is the <em>valueless by exception</em> state as discussed – rare, but if one of your variant&rsquo;s types can throw during move or copy, be aware of exception safety. You can check <code>valueless_by_exception()</code> if needed. In practice, many variants hold simple types or types with nothrow moves, so this isn’t encountered. Another consideration is <em>visitor runtime cost</em>: using <code>std::visit</code> introduces an indirection (essentially a switch or jump) which is extremely fast, but if you have deeply nested variants or a chain of visitors it could add up. Still, it&rsquo;s usually negligible compared to any real work done inside the visitor. A pitfall to watch out for is using variant for types that don&rsquo;t naturally belong together – if you find yourself with a variant of 10+ types that are unrelated, you might be abusing it and making the code harder to maintain. Each addition of a type forces all visitations to handle it, which can increase code complexity. Try to keep variants to a reasonable number of alternatives that make sense in context. Also, as noted, if your variant alternatives have a large size disparity, you pay the cost in space for each variant instance. For example, <code>std::variant&lt;std::array&lt;int,1000&gt;, int&gt;</code> will be roughly the size of that 1000-int array (plus overhead) even when holding an <code>int</code>. If memory is a concern and usage of the large alternative is rare, an alternative design might be to use a pointer or a separate structure. But often this is not a major issue unless you have thousands of variant objects. Finally, be careful with variant&rsquo;s <em>converting constructors</em>: C++17 has a certain set of rules that might surprise, though C++20 made them more intuitive. When in doubt, explicitly construct the variant with the type you want (<code>variant&lt;Ts...&gt; var(std::in_place_type&lt;T&gt;, value)</code>) to avoid ambiguity.</p>
</li>
<li>
<p><strong><code>std::any</code>:</strong> The biggest pitfall is loss of compile-time checking. Overuse of <code>any</code> can lead to code where you only find out at runtime that you mixed up types. As a rule of thumb, confine <code>std::any</code> to the boundaries of your system. For instance, if you have a plugin API where plugins can return data of arbitrary type, accept <code>std::any</code> there, but internally, downcast to known types as soon as possible and work with those. Performance-wise, each <code>any</code> might incur a dynamic allocation (except for small trivially moveable objects where small-object optimization kicks in). This means storing large objects in an any could be costly. Also, any requires types to be copyable, which means you cannot directly store move-only types. If you must store something like a unique_ptr or a move-only lambda, you might wrap it in a <code>std::shared_ptr</code> or similar to satisfy copyability (or store a wrapper that holds it). This is a limitation to be aware of: <code>std::any</code> was intentionally designed this way to avoid complex behaviour on copying. Another issue is that <code>any</code>&rsquo;s type erasure uses RTTI (<code>typeid</code>), which is typically available in C++ builds, but if you disabled RTTI, <code>std::any</code> might not function (or you lose <code>any_cast</code> ability). This is rare, but worth noting in some embedded or strict environments. In terms of exceptions, incorrect <code>any_cast</code> throws <code>bad_any_cast</code> – always handle or avoid that by logic. And as with variant, storing extremely large disparate types in a single any and then copying it frequently can hurt performance due to allocations and copies. If you find yourself doing heavy operations on <code>any</code> in tight loops, consider refactoring the design (perhaps using templates or overloading to regain compile-time types).</p>
</li>
</ul>
<p>In summary, each of these features is designed to make common patterns safer. The trade-offs are usually minor – a small constant overhead for the safety they provide. By understanding their behaviour and limitations, one can use them effectively without performance surprises or bugs.</p>
<h2 id="comparison-to-pre-c17-approaches">Comparison to Pre-C++17 Approaches</h2>
<p>It’s instructive to briefly contrast how one would achieve similar goals <em>before C++17</em> (or in lower-level C-style code) versus using <code>optional</code>, <code>variant</code>, and <code>any</code>:</p>
<ul>
<li>
<p><strong>Without <code>std::optional</code>:</strong> One might use a raw pointer or a special flag/value to indicate &ldquo;no value&rdquo;. For example, returning a pointer that is <code>nullptr</code> if not found, or returning an <code>int</code> where <code>-1</code> means &ldquo;not found&rdquo;. Pointers introduce ambiguity (is a <code>nullptr</code> an error or just a null object?) and potential for misuse (forgetting to check for null). Sentinel values (like <code>-1</code>) can be even worse if that value might also be a valid data (leading to bugs where <code>-1</code> could be mistaken for actual data). Alternatively, a common pattern was to return a <code>std::pair&lt;T, bool&gt;</code> or an <code>std::tuple&lt;ErrorCode, T&gt;</code> to signal success or failure. These work but are less clear; for instance, <code>auto [val, ok] = func(); if (!ok) { ... }</code> is more cumbersome than <code>auto opt = func(); if (!opt) { ... }</code>. <strong>Boost.Optional</strong> was available and widely used in pre-C++17 code as a stop-gap; it offered nearly the same interface and semantics as <code>std::optional</code>. Now with the standard <code>optional</code>, there is no need for custom solutions – we have a clear, language-supported way to represent an optional value.</p>
</li>
<li>
<p><strong>Without <code>std::variant</code>:</strong> C++11 and earlier didn’t have a standard discriminated union. You either used a C-style <code>union</code> (with all the attendant problems discussed – manual tracking of active member, inability to hold complex types without manual construction, etc.) or you used polymorphic classes (an abstract base with derived types for each alternative). Polymorphism can be overkill if value semantics are desired, and it complicates object lifetimes (objects typically allocated on heap). Another approach was an ad-hoc struct that had all possible fields and an enum indicating which is valid, which is essentially a poor man&rsquo;s variant. Maintaining such code is error-prone (someone might set the enum to one thing but put data in another field, etc.). <strong>Boost.Variant</strong> existed to fill this gap pre-C++17 and had similar functionality (though without <code>std::visit</code> – Boost.Variant used either visitors via <code>boost::apply_visitor</code> or <code>boost::get</code>). Boost.Variant also lacked some of the constexpr capabilities that <code>std::variant</code> now has. In modern C++, there&rsquo;s almost no reason to use raw unions for variant-like purposes – <code>std::variant</code> covers the need in nearly all cases, except maybe very low-level bit reinterpretation tricks (and even those have safer alternatives).</p>
</li>
<li>
<p><strong>Without <code>std::any</code>:</strong> The old approach for &ldquo;hold anything&rdquo; was typically <code>void*</code> or something like a union of common types (which still fails for custom types) or using a base class <code>Any</code> with virtual cloning (a manual type erasure). <code>void*</code> is extremely unsafe because you lose all type information – the burden is entirely on the programmer to cast to the correct type, and if they get it wrong, it’s undefined behaviour (likely a crash or memory corruption). Debugging such issues is hard. Some frameworks introduced their own any-like containers; for instance, Qt has a <code>QVariant</code> (which despite the name, is more like a type-safe union of a fixed set of Qt types) and Boost introduced <code>boost::any</code>. <strong>Boost.Any</strong> was essentially the reference implementation that inspired <code>std::any</code>. It provided type erasure and <code>boost::any_cast</code>. The standard <code>std::any</code> is very similar but benefits from being in <code>&lt;any&gt;</code> and carefully specified. Using <code>std::any</code> over raw <code>void*</code> is hugely beneficial in terms of safety – you get a runtime check on type mismatch and you avoid the immediate need for heap allocations or custom new/delete for arbitrary data (since <code>any</code> takes care of that internally with correct copying semantics). In performance-sensitive scenarios, templates (to keep types known) or variants (if types are limited) are still preferable, but when those aren’t feasible, <code>std::any</code> is the go-to.</p>
</li>
</ul>
<p>In essence, C++17 saved us from a lot of boilerplate and hazards. Where we used to have to choose between safety and convenience, we now have tools that offer both. Code that uses <code>optional</code>/<code>variant</code>/<code>any</code> is often <strong>shorter, clearer, and safer</strong> than the pre-C++17 equivalents. These features also integrate well with other modern C++ techniques – for instance, you can combine <code>std::optional</code> with ranges or algorithms (C++20 ranges even have <code>.transform()</code> for optionals to apply a function if present), and <code>std::variant</code> can be used in constexpr context from C++20 onwards, which makes it usable in compile-time computation or <code>constexpr</code> if/visit. The language and standard library are moving toward giving us higher-level abstractions that cost nothing at runtime but prevent entire classes of errors.</p>
<h2 id="enhancements-in-c20-and-c23">Enhancements in C++20 and C++23</h2>
<p>While our focus is on C++17, it&rsquo;s worth noting that subsequent standards have extended these facilities:</p>
<ul>
<li>
<p><strong><code>std::optional</code> in C++20/C++23:</strong> C++20 added comparisons (<code>operator&lt;=&gt;</code>) for optional, making them easily sortable. C++23 introduced the aforementioned monadic operations <code>and_then</code>, <code>transform</code>, and <code>or_else</code>, which were inspired by functional programming (they simplify chaining operations on optionals without deeply nested <code>if</code> statements). These improve ergonomics but do not change the fundamental performance or semantics of optional. Optional remains a straightforward struct with a value-or-not.</p>
</li>
<li>
<p><strong><code>std::variant</code> in C++20/C++23:</strong> C++20 made variants <em>constexpr-friendly</em>, meaning you can create and manipulate variants in constant expressions. This is useful for compile-time computations and metaprogramming. Additionally, as mentioned, C++20 fixed the converting constructor behaviour to be more intuitive. C++23 introduced some helper features, like visitation of variant types that are themselves variants (to ease handling nested variants), and a proposal to propagate triviality (so that a variant is trivially copyable if all alternatives are trivially copyable), which helps optimisers. Another C++23 improvement was allowing <code>std::visit</code> to accept lambdas that take base classes of variant types (if one alternative is derived from another&rsquo;s type). These are relatively minor refinements – the core functionality of variant as introduced in C++17 remains the same. It’s simply becoming more powerful and easier to use in more contexts.</p>
</li>
<li>
<p><strong><code>std::any</code> in C++20/C++23:</strong> There have been fewer changes here. <code>std::any</code> is largely unchanged since C++17. One notable addition in the standard library, however, is <code>std::any_cast</code> gaining support for arrays (C++23) in a limited form, and <code>std::make_any</code> factory function (added in C++17 after initial, and improved later). But fundamentally, <code>any</code> remains as it was. If anything, the community has realised that <code>std::any</code> should be used with care, and alternatives like using concepts or variants are preferred when possible.</p>
</li>
</ul>
<p>It’s also worth acknowledging that C++23 introduced <code>std::expected</code>, which is a type for error handling that combines the idea of an optional value <em>or</em> an error code (much like a simplified variant of value or error). This is another step in the direction of type-safe programming – giving a structured way to handle errors instead of relying on exceptions or output parameters. While <code>std::expected</code> is beyond our main topic, it fits the narrative: modern C++ continues the trend of providing strong, type-safe abstractions for scenarios that used to rely on convention or non-typesafe idioms.</p>
<p>The evolution of these features from Boost libraries to C++17 and minor tweaks in later standards shows a commitment in the C++ committee to <strong>type safety, clarity, and expressiveness</strong> without compromising performance. With each revision, they integrate more smoothly with the language&rsquo;s other features (e.g., constexpr, concepts, ranges).</p>
<h2 id="conclusion">Conclusion</h2>
<p>C++17’s <code>std::optional</code>, <code>std::variant</code>, and <code>std::any</code> represent significant strides toward more expressive and type-safe C++ programming. They enable us to model optional values, variant types, and dynamic types in a way that is <strong>clear</strong> in intent and <strong>safe</strong> in usage. By leveraging these constructs, developers can avoid a whole class of bugs – no more unchecked null pointers or unsafe unions or mysterious void pointer casts. The code becomes self-documenting: an <code>optional&lt;T&gt;</code> <em>shouts</em> “this <code>T</code> might not be here,” a <code>variant&lt;A,B&gt;</code> declares “it’s either A or B,” and an <code>any</code> signals “this could be anything, handle with care.”</p>
<p>We have seen through examples how these types can be applied to real-world tasks like configuration handling, message dispatch, and state management, leading to solutions that are both elegant and robust. We also discussed how they improve upon pre-C++17 techniques: where older code might rely on conventions and extensive comments to explain that &ldquo;we use -1 to mean not valid&rdquo; or maintain parallel enums alongside unions, modern C++ code can encode that directly in the type system, making the compiler our ally in catching mistakes.</p>
<p>In terms of performance, these features are crafted to impose minimal overhead. <code>std::optional</code> typically has the same performance as using a flag and separate value, but with nicer syntax. <code>std::variant</code> avoids allocations and uses only a small constant time dispatch, giving you the speed of a union with far better safety. <code>std::any</code> does have some overhead due to type erasure, but it’s a conscious trade-off for flexibility; and even then, it provides safety checks that raw approaches lack. For most applications, these are small costs for the huge gains in correctness and maintainability.</p>
<p>As C++ moves forward (with C++20, C++23, and beyond), the trend is clearly toward <strong>stronger static typing with more expressive power</strong>. Features like concepts, constexpr if, structured bindings, and these type-safe containers all reinforce the idea that we can write code that is both high-level and efficient. We can expect future proposals to continue in this vein – perhaps pattern matching in the language will make variants even easier to use, and more monadic utilities might appear for optional-like types. The direction is set: C++ is embracing techniques long proven in functional and high-level languages, but adapting them to the C++ ethos of zero-overhead abstractions.</p>
<p>In conclusion, mastering <code>std::optional</code>, <code>std::variant</code>, and <code>std::any</code> is essential for intermediate and advanced C++ programmers looking to write modern, robust software. These constructs allow us to express our intent directly in code, reduce bugs, and produce maintainable designs. By using them appropriately, we align with C++’s philosophy of making the <strong>type system</strong> work for us – resulting in programs that are not only safer and more correct, but also easier to understand. The inclusion of these facilities in C++17 was a big leap forward in <strong>type-safe programming</strong>, and using them will undoubtedly become second nature as we continue to modernise our C++ codebases.</p>
<p><strong>Sources:</strong></p>
<ul>
<li>C++ reference for <a href="https://en.cppreference.com/w/cpp/utility/optional"><code>std::optional</code></a> – definition and properties</li>
<li>C++ reference for <a href="https://en.cppreference.com/w/cpp/utility/variant"><code>std::variant</code></a> – definition and detailed behavior</li>
<li>C++ reference for <a href="https://en.cppreference.com/w/cpp/utility/any"><code>std::any</code></a> – definition and usage notes</li>
<li>Bjarne Stroustrup, <em>The C++ Programming Language (4th Edition)</em> – discussions on variant and optional in modern C++ design (for conceptual background).</li>
<li><strong>CppCoreGuidelines</strong> C.183 – <em>“Don’t use a union for type punning”</em> (and related discussion on union safety).</li>
<li>Andrzej Krzemienski, <em>“Everything You Need to Know About std::variant from C++17”</em> – <em>C++ Stories</em> blog (Jan 2023 update), which provides insightful examples (state machines, config parsing) and covers variant’s design and usage in depth.</li>
<li>Richard Smith, et al. – ISO C++ proposal papers P2231 (constexpr for variant) and others (for improvements in C++20/23).</li>
<li><strong>Boost</strong> documentation for <code>boost::optional</code>, <code>boost::variant</code>, <code>boost::any</code> – as historical reference points for these utilities prior to standardisation.</li>
</ul>
]]></content>
        </item>
        
        <item>
            <title>The Filesystem Library in C&#43;&#43;17: A Comprehensive Introduction</title>
            <link>https://blog.miguens.one/posts/2025/06/the-filesystem-library-in-c-17-a-comprehensive-introduction/</link>
            <pubDate>Mon, 30 Jun 2025 00:00:00 +0000</pubDate>
            
            <guid>https://blog.miguens.one/posts/2025/06/the-filesystem-library-in-c-17-a-comprehensive-introduction/</guid>
            <description>&lt;p&gt;In modern C++ development, managing files and directories is a common requirement – from reading configuration files to generating logs or processing batches of data files. Until C++17, the language lacked a standard, platform-neutral way to perform filesystem operations. C++ developers either resorted to operating system APIs or relied on third-party libraries, leading to non-portable code or extra dependencies. With C++17, the new &lt;strong&gt;&lt;code&gt;&amp;lt;filesystem&amp;gt;&lt;/code&gt;&lt;/strong&gt; library (in namespace &lt;code&gt;std::filesystem&lt;/code&gt;) filled this gap by providing a rich set of tools for files and directories. In this post, I will introduce the C++17 filesystem library, examine its historical background, detail its components, and demonstrate how to use it with code examples. Along the way, I will offer a critical perspective on its design decisions, impact, and limitations, using British English spelling and an analytical tone targeted at experienced C++ developers.&lt;/p&gt;</description>
            <content type="html"><![CDATA[<p>In modern C++ development, managing files and directories is a common requirement – from reading configuration files to generating logs or processing batches of data files. Until C++17, the language lacked a standard, platform-neutral way to perform filesystem operations. C++ developers either resorted to operating system APIs or relied on third-party libraries, leading to non-portable code or extra dependencies. With C++17, the new <strong><code>&lt;filesystem&gt;</code></strong> library (in namespace <code>std::filesystem</code>) filled this gap by providing a rich set of tools for files and directories. In this post, I will introduce the C++17 filesystem library, examine its historical background, detail its components, and demonstrate how to use it with code examples. Along the way, I will offer a critical perspective on its design decisions, impact, and limitations, using British English spelling and an analytical tone targeted at experienced C++ developers.</p>
<h2 id="historical-background-from-os-apis-to-boost-and-c17">Historical Background: From OS APIs to Boost and C++17</h2>
<p>Before C++17, there was no standard way to handle filesystem tasks in C++. Programmers managed files and directories either by calling C library functions or using OS-specific system calls. For example, on POSIX systems one might use <code>opendir()</code>/<code>readdir()</code> (from <code>&lt;dirent.h&gt;</code>) to iterate through directory contents, or <code>mkdir()</code> and <code>stat()</code> for creating directories and retrieving file info. On Windows, developers often called the Win32 API (such as <code>FindFirstFile</code>/<code>FindNextFile</code> for directory iteration, <code>CreateDirectory</code> for directories, etc.). This meant writing conditional code for each platform or limiting an application to a single operating system. Such approaches were error-prone and hindered code portability and maintainability.</p>
<p>A significant improvement came with the Boost C++ Libraries. The Boost project introduced <strong>Boost.Filesystem</strong> in 2003 as a portable C++ library for filesystem manipulation. Boost.Filesystem provided a C++ interface for paths, file status queries, and operations like directory traversal, abstracting away the differences between OS APIs. It quickly became popular, effectively serving as the <em>de facto</em> standard for C++ filesystem work. In fact, the C++17 filesystem library is directly based on Boost.Filesystem – the standards committee adopted Boost’s design almost verbatim. Prior to official standardization, these facilities were available as a Technical Specification (ISO/IEC TS 18822:2015) and even in an experimental form (e.g. <code>&lt;experimental/filesystem&gt;</code> in some C++14 implementations). By the time C++17 was released, the Filesystem Technical Specification had proven itself, and the committee merged it into the standard library. This historical context means that many C++ developers were already familiar with the library’s API (thanks to Boost), easing the transition. It also underscores that the C++17 filesystem library was not invented from scratch but rather <strong>standardised</strong> a well-tested solution.</p>
<h2 id="overview-of-the-c17-filesystem-library">Overview of the C++17 Filesystem Library</h2>
<p>The C++17 filesystem library (accessible via <code>#include &lt;filesystem&gt;</code>) provides a comprehensive set of types and functions to interact with the file system in a platform-agnostic manner. All functionality resides in the <code>std::filesystem</code> namespace (for older compilers implementing the Technical Specification it was in <code>std::experimental::filesystem</code>). In this post’s code examples, I will use an alias <code>fs</code> for <code>std::filesystem</code> to keep code concise. The library covers everything from path manipulation to iterating directories and performing file operations. At a high level, the key components of <code>std::filesystem</code> include:</p>
<ul>
<li><strong><code>std::filesystem::path</code></strong> – a class representing file or directory paths in a way that abstracts platform differences (e.g. directory separators, character encoding).</li>
<li><strong>Directory iterators</strong> – the types <code>std::filesystem::directory_iterator</code> and <code>std::filesystem::recursive_directory_iterator</code> for enumerating directory contents (yielding <code>directory_entry</code> objects for each file or subdirectory).</li>
<li><strong><code>std::filesystem::directory_entry</code></strong> – an object representing an entry in a directory (file or subdirectory) along with potentially cached file attributes for efficiency.</li>
<li><strong>File operations functions</strong> – a collection of free functions in <code>std::filesystem</code> for common tasks: creating and removing directories, copying and moving files, checking existence and file properties, querying or modifying permissions, etc.</li>
</ul>
<p>This design provides a <strong>cross-platform abstraction</strong>: code written with <code>&lt;filesystem&gt;</code> will work on Windows, Linux, or macOS without modification, as the library internally translates calls to the appropriate native system calls. Crucially, the library deals purely with the filesystem&rsquo;s <em>structure</em> (paths, directories, metadata) and does not perform I/O on file contents – you still use streams or OS APIs for reading/writing file data. In the following sections, we will delve into each major area of the filesystem library with examples.</p>
<h2 id="stdfilesystempath--path-representation-and-manipulation"><code>std::filesystem::path</code> – Path Representation and Manipulation</h2>
<p>At the core of the filesystem library is the <code>std::filesystem::path</code> class, which encapsulates a filesystem path (such as <code>&quot;C:\Users\Alice\file.txt&quot;</code> on Windows or <code>&quot;/home/alice/file.txt&quot;</code> on Linux). A <code>path</code> object handles the <strong>syntactic aspects</strong> of paths: it knows about different directory separators (<code>/</code> vs <code>\\</code>), root names (<code>C:</code> drive vs Unix root <code>/</code>), file extensions, etc., and provides convenient operations to manipulate these without string-handling errors. This abstraction spares developers from ad-hoc string concatenation and platform-specific quirks.</p>
<p>Key features of <code>std::filesystem::path</code> include the ability to <strong>construct</strong> paths from various string types (narrow, wide, or even UTF-8 strings on Windows), to <strong>combine</strong> paths using the <code>/</code> operator or the <code>append()</code> method, and to <strong>decompose</strong> paths into components (filename, extension, parent directory, etc.). For example, one can easily extract the filename or change the extension of a path using this class. Below is a demonstration of some common <code>path</code> operations:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-cpp" data-lang="cpp"><span style="display:flex;"><span><span style="color:#75715e">#include</span> <span style="color:#75715e">&lt;filesystem&gt;</span><span style="color:#75715e">
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">#include</span> <span style="color:#75715e">&lt;iostream&gt;</span><span style="color:#75715e">
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span><span style="color:#66d9ef">namespace</span> fs <span style="color:#f92672">=</span> std<span style="color:#f92672">::</span>filesystem;
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">int</span> <span style="color:#a6e22e">main</span>() {
</span></span><span style="display:flex;"><span>    fs<span style="color:#f92672">::</span>path p(<span style="color:#e6db74">&#34;/home/user/docs/report.txt&#34;</span>);
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    std<span style="color:#f92672">::</span>cout <span style="color:#f92672">&lt;&lt;</span> <span style="color:#e6db74">&#34;Path: &#34;</span> <span style="color:#f92672">&lt;&lt;</span> p.string() <span style="color:#f92672">&lt;&lt;</span> <span style="color:#e6db74">&#34;</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">&#34;</span>;
</span></span><span style="display:flex;"><span>    std<span style="color:#f92672">::</span>cout <span style="color:#f92672">&lt;&lt;</span> <span style="color:#e6db74">&#34;Filename: &#34;</span> <span style="color:#f92672">&lt;&lt;</span> p.filename().string() <span style="color:#f92672">&lt;&lt;</span> <span style="color:#e6db74">&#34;</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">&#34;</span>;
</span></span><span style="display:flex;"><span>    std<span style="color:#f92672">::</span>cout <span style="color:#f92672">&lt;&lt;</span> <span style="color:#e6db74">&#34;Extension: &#34;</span> <span style="color:#f92672">&lt;&lt;</span> p.extension().string() <span style="color:#f92672">&lt;&lt;</span> <span style="color:#e6db74">&#34;</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">&#34;</span>;
</span></span><span style="display:flex;"><span>    std<span style="color:#f92672">::</span>cout <span style="color:#f92672">&lt;&lt;</span> <span style="color:#e6db74">&#34;Parent directory: &#34;</span> <span style="color:#f92672">&lt;&lt;</span> p.parent_path().string() <span style="color:#f92672">&lt;&lt;</span> <span style="color:#e6db74">&#34;</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">&#34;</span>;
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#75715e">// Combining paths using operator/
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>    fs<span style="color:#f92672">::</span>path dir <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;/home/user/docs&#34;</span>;
</span></span><span style="display:flex;"><span>    fs<span style="color:#f92672">::</span>path file <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;report.txt&#34;</span>;
</span></span><span style="display:flex;"><span>    fs<span style="color:#f92672">::</span>path combined <span style="color:#f92672">=</span> dir <span style="color:#f92672">/</span> file;
</span></span><span style="display:flex;"><span>    std<span style="color:#f92672">::</span>cout <span style="color:#f92672">&lt;&lt;</span> <span style="color:#e6db74">&#34;Combined path: &#34;</span> <span style="color:#f92672">&lt;&lt;</span> combined.string() <span style="color:#f92672">&lt;&lt;</span> <span style="color:#e6db74">&#34;</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">&#34;</span>;
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">return</span> <span style="color:#ae81ff">0</span>;
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>In this code, we first construct a path <code>p</code> for <code>&quot;/home/user/docs/report.txt&quot;</code>. Using <code>p.filename()</code> yields the last component (<code>&quot;report.txt&quot;</code>), <code>p.extension()</code> gives the suffix (<code>&quot;.txt&quot;</code>), and <code>p.parent_path()</code> produces the directory path (<code>&quot;/home/user/docs&quot;</code>). We then show how to concatenate paths: using the <code>/</code> operator, <code>dir / file</code> automatically inserts the appropriate separator and produces <code>&quot;/home/user/docs/report.txt&quot;</code> as the combined path. All these operations respect the <strong>native format</strong> for the current platform – on Windows, for instance, constructing a path with forward slashes will still work, and printing it via <code>string()</code> will use backslashes. The <code>std::filesystem::path</code> class takes care of normalizing or converting separators as needed (without changing the meaning of the path). It also provides functions like <code>replace_filename</code> or <code>replace_extension</code> to modify parts of the path, and methods to obtain a string in a generic format (using <code>'/'</code> as separators) if needed.</p>
<p>Under the hood, <code>std::filesystem::path</code> stores the path in an implementation-defined way (typically as a sequence of characters or <code>wstring</code> on Windows), and supports comparison, hashing, and even lexical normalization. For example, you can compare two paths with <code>==</code> to check if they refer to the same location textually (note this does not check the filesystem content, just the path strings). Overall, <code>path</code> abstracts away a lot of tedious string handling, making code more readable and less error-prone when dealing with file paths.</p>
<h2 id="directory-iteration-with-directory_iterator">Directory Iteration with <code>directory_iterator</code></h2>
<p>Navigating through directory contents is a breeze with the <code>&lt;filesystem&gt;</code> library. The <code>std::filesystem::directory_iterator</code> provides an easy way to iterate over the files and subdirectories within a given directory. Similarly, <code>std::filesystem::recursive_directory_iterator</code> goes a step further by traversing subdirectories recursively (depth-first). These iterators present a uniform interface for directory traversal across platforms, replacing older approaches like platform-specific APIs or manual recursion with <code>opendir()</code>/<code>readdir()</code> on POSIX.</p>
<p>Using a directory iterator is straightforward. You create a <code>directory_iterator</code> object with a target path (the directory you want to list), and then you can use it in a range-based for loop. Each iteration gives you a <code>std::filesystem::directory_entry</code>, which represents one element in the directory (either a file or a subdirectory). The <code>directory_entry</code> can be queried for its path and file status information. Here’s an example that lists the contents of a directory:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-cpp" data-lang="cpp"><span style="display:flex;"><span><span style="color:#66d9ef">namespace</span> fs <span style="color:#f92672">=</span> std<span style="color:#f92672">::</span>filesystem;
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">// List all entries (files/directories) in the given directory
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>fs<span style="color:#f92672">::</span>path target <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;/home/user/docs&#34;</span>;
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">try</span> {
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">for</span> (<span style="color:#66d9ef">const</span> fs<span style="color:#f92672">::</span>directory_entry<span style="color:#f92672">&amp;</span> entry : fs<span style="color:#f92672">::</span>directory_iterator(target)) {
</span></span><span style="display:flex;"><span>        std<span style="color:#f92672">::</span>cout <span style="color:#f92672">&lt;&lt;</span> entry.path().string() <span style="color:#f92672">&lt;&lt;</span> <span style="color:#e6db74">&#34;</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">&#34;</span>;
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>} <span style="color:#66d9ef">catch</span> (<span style="color:#66d9ef">const</span> fs<span style="color:#f92672">::</span>filesystem_error<span style="color:#f92672">&amp;</span> ex) {
</span></span><span style="display:flex;"><span>    std<span style="color:#f92672">::</span>cerr <span style="color:#f92672">&lt;&lt;</span> <span style="color:#e6db74">&#34;Error accessing directory: &#34;</span> <span style="color:#f92672">&lt;&lt;</span> ex.what() <span style="color:#f92672">&lt;&lt;</span> <span style="color:#e6db74">&#34;</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">&#34;</span>;
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>In this snippet, we iterate through <code>/home/user/docs</code> and print each entry’s full path. We enclose the loop in a try/catch block because <code>directory_iterator</code> will throw a <code>filesystem_error</code> exception if, for instance, the directory cannot be opened (perhaps due to permission issues or if the path doesn’t exist). By catching <code>fs::filesystem_error</code>, we can handle such failures gracefully (for example, by logging an error message). The <code>directory_entry</code> we get in the loop has a member function <code>path()</code> that returns the <code>fs::path</code> of the entry. We call <code>.string()</code> on it to output it as a human-readable string.</p>
<p>If we needed to filter or inspect entries further, we could use additional functions from <code>&lt;filesystem&gt;</code>. For example, <code>fs::is_directory(entry.path())</code> will tell us if the current entry is itself a directory, and <code>fs::file_size(entry.path())</code> would give the size of a file (if it is a regular file). In fact, <code>directory_entry</code> has convenience methods like <code>is_directory()</code>, <code>is_regular_file()</code>, etc., that internally use cached metadata from the iteration (to avoid repeatedly querying the OS for the same info). This caching is a result of a C++17 refinement to improve performance when iterating. For recursive traversal, one can use <code>fs::recursive_directory_iterator</code> in a similar loop – it will iterate into subfolders automatically. If some subdirectories should be skipped (e.g., symbolic links to avoid infinite loops), options can be provided, but by default it will follow normal files and directories. The ability to traverse directories with a simple loop greatly simplifies tasks like searching for files with certain extensions, computing directory sizes, etc., in a portable manner.</p>
<h2 id="file-operations-creating-copying-moving-and-deleting">File Operations: Creating, Copying, Moving, and Deleting</h2>
<p>Beyond representing paths and iterating directories, the filesystem library provides a set of functions to perform common file and directory operations. These allow you to create or remove directories, copy or move files, and query properties like existence or file size – all through a consistent API. The functions are found in the <code>std::filesystem</code> namespace and typically take one or more <code>fs::path</code> arguments. Let’s highlight some of the most commonly used operations:</p>
<ul>
<li><strong>Creating directories</strong>: <code>fs::create_directory(path)</code> will create a single directory, and <code>fs::create_directories(path)</code> will create an entire directory hierarchy (any intermediate non-existent directories in the given path) in one call. Both return a boolean indicating whether a directory was created (they return <code>false</code> if the directory already existed).</li>
<li><strong>Checking existence</strong>: <code>fs::exists(path)</code> returns a boolean indicating whether the given file or directory exists in the filesystem. Similarly, <code>fs::is_regular_file(path)</code>, <code>fs::is_directory(path)</code>, <code>fs::is_symlink(path)</code>, etc., can be used to test the type of an existing filesystem object.</li>
<li><strong>Copying files or directories</strong>: <code>fs::copy(source, destination)</code> can copy a file or directory. By default, <code>copy</code> will copy a single file (overwriting the destination if it exists, unless you specify copy options), or it will error out if you try to copy a directory without specifying what to do. For copying directories with all their contents, you can pass a third argument such as <code>fs::copy_options::recursive</code> to copy everything recursively. The library also provides more fine-grained functions like <code>fs::copy_file</code> for copying files specifically.</li>
<li><strong>Moving/renaming</strong>: <code>fs::rename(old_path, new_path)</code> will rename a file or directory to a new name or move it to a new location (if on the same filesystem). This function is equivalent to the POSIX <code>rename</code> or Windows <code>MoveFile</code> – it’s an atomic rename if possible. Note that <code>rename</code> cannot move files across different drives or mount points on many systems; attempting to do so will throw an error, in which case you’d need to manually copy and then remove the original.</li>
<li><strong>Removing files or directories</strong>: <code>fs::remove(path)</code> deletes a file or an empty directory. It returns <code>true</code> if a file/directory was removed, <code>false</code> if nothing was done (e.g., the path didn’t exist). To delete a directory and all of its contents (files and subdirectories), there is <code>fs::remove_all(path)</code>, which recursively deletes everything under the given path. It returns a <code>uintmax_t</code> count of how many files and directories were removed, which is useful for logging or verification.</li>
</ul>
<p>Here’s a code example that ties a few of these operations together in a realistic sequence:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-cpp" data-lang="cpp"><span style="display:flex;"><span><span style="color:#75715e">#include</span> <span style="color:#75715e">&lt;filesystem&gt;</span><span style="color:#75715e">
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">#include</span> <span style="color:#75715e">&lt;fstream&gt;</span><span style="color:#75715e">
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">#include</span> <span style="color:#75715e">&lt;iostream&gt;</span><span style="color:#75715e">
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span><span style="color:#66d9ef">namespace</span> fs <span style="color:#f92672">=</span> std<span style="color:#f92672">::</span>filesystem;
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">int</span> <span style="color:#a6e22e">main</span>() {
</span></span><span style="display:flex;"><span>    <span style="color:#75715e">// Create a directory
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>    fs<span style="color:#f92672">::</span>create_directory(<span style="color:#e6db74">&#34;demo_dir&#34;</span>);
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#75715e">// Create a file inside the directory (using fstream)
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>    std<span style="color:#f92672">::</span>ofstream(<span style="color:#e6db74">&#34;demo_dir/hello.txt&#34;</span>) <span style="color:#f92672">&lt;&lt;</span> <span style="color:#e6db74">&#34;Hello Filesystem</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">&#34;</span>;
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#75715e">// Copy the file within the directory
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>    fs<span style="color:#f92672">::</span>copy(<span style="color:#e6db74">&#34;demo_dir/hello.txt&#34;</span>, <span style="color:#e6db74">&#34;demo_dir/hello_copy.txt&#34;</span>);
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#75715e">// Rename (move) the copied file
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>    fs<span style="color:#f92672">::</span>rename(<span style="color:#e6db74">&#34;demo_dir/hello_copy.txt&#34;</span>, <span style="color:#e6db74">&#34;demo_dir/hello_renamed.txt&#34;</span>);
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#75715e">// Remove the directory and all its content
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>    std<span style="color:#f92672">::</span>uintmax_t removed_count <span style="color:#f92672">=</span> fs<span style="color:#f92672">::</span>remove_all(<span style="color:#e6db74">&#34;demo_dir&#34;</span>);
</span></span><span style="display:flex;"><span>    std<span style="color:#f92672">::</span>cout <span style="color:#f92672">&lt;&lt;</span> <span style="color:#e6db74">&#34;Removed &#34;</span> <span style="color:#f92672">&lt;&lt;</span> removed_count <span style="color:#f92672">&lt;&lt;</span> <span style="color:#e6db74">&#34; files or directories</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">&#34;</span>;
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">return</span> <span style="color:#ae81ff">0</span>;
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>Let’s break down what happens here. We start by creating a new directory called <strong><code>demo_dir</code></strong> using <code>create_directory</code>. Next, we use an <code>&lt;fstream&gt;</code> to create and write to a file <code>hello.txt</code> inside that directory (strictly speaking, this step isn’t done by the filesystem library – we’re just using it to set up a file to demonstrate copying). Then we call <code>fs::copy</code> to duplicate <code>hello.txt</code> to a new file <code>hello_copy.txt</code> in the same directory. After that, <code>fs::rename</code> is used to rename (or move) <code>hello_copy.txt</code> to <code>hello_renamed.txt</code>. Finally, we remove the entire directory tree starting at <code>demo_dir</code> with <code>fs::remove_all</code>; this deletes <code>hello.txt</code>, <code>hello_renamed.txt</code>, and the directory <code>demo_dir</code> itself. The call returns the number of items removed (in this case, it should be 3: two files and one directory), which we print out.</p>
<p>All these operations will throw a <code>std::filesystem::filesystem_error</code> if they fail (for example, if the program lacks permission to write or if a file is open and cannot be removed). We can see how succinct and expressive this code is compared to what one might have to do using system-specific calls or older methods. For instance, copying a file portably in the past might require opening input and output file streams and manually looping to copy bytes, whereas <code>fs::copy</code> handles it (and even has options for copying metadata or handling symlinks). Likewise, removing a directory with contents would require recursive code without <code>remove_all</code>. The <code>&lt;filesystem&gt;</code> library thus significantly reduces the amount of code needed for common tasks and lowers the barrier to writing cross-platform code that manipulates files and directories. It’s worth noting that these functions map to operating system calls under the hood – for example, <code>create_directory</code> likely calls <code>mkdir</code> or <code>_mkdir</code>, <code>remove</code> calls <code>remove()</code>/<code>DeleteFile</code>, and so on. They are designed to be efficient and make use of the OS’s capabilities.</p>
<h2 id="file-status-and-attributes">File Status and Attributes</h2>
<p>In addition to creating or modifying files, programs often need to query <strong>metadata</strong> about files: Does a file exist? Is it a regular file or a directory or a symlink? How large is it? When was it last modified? The filesystem library provides functions to obtain this information easily. We’ve already used some of them above: <code>fs::exists</code>, <code>fs::is_directory</code>, <code>fs::is_regular_file</code>, and <code>fs::file_size</code>. There are a few more worth mentioning:</p>
<ul>
<li>
<p><strong><code>fs::status(path)</code></strong> and <strong><code>fs::symlink_status(path)</code></strong>: These return a <code>fs::file_status</code> object that holds the file type and permission bits for the given path. The difference is that <code>status</code> follows symlinks (so it gives info about the target of the link), whereas <code>symlink_status</code> gives info about the link itself if the path is a symlink. In practice, you often don’t need to call these explicitly if you use the convenience predicates (<code>is_directory</code> etc.), which internally call <code>status</code> or use cached info.</p>
</li>
<li>
<p><strong>Type checking functions</strong>: As noted, <code>fs::is_regular_file(p)</code>, <code>fs::is_directory(p)</code>, <code>fs::is_symlink(p)</code>, <code>fs::is_empty(p)</code> (checks if file is empty or directory has no contents), etc., allow quick inquiry of what a path represents. These are boolean functions that internally use <code>status(p).type()</code> to compare against <code>fs::file_type::regular</code> or <code>directory</code> and so on.</p>
</li>
<li>
<p><strong>File size and time</strong>: <code>fs::file_size(p)</code> returns the size of a regular file in bytes (as a <code>uintmax_t</code>). It will throw if used on a directory or non-regular file (you might want to check <code>is_regular_file</code> first). <code>fs::last_write_time(p)</code> returns a time point (<code>fs::file_time_type</code>) representing the last modification timestamp of the file or directory. You can convert this to a calendar time (e.g., <code>std::time_t</code>) if you need to display it, though the process is a bit clunky due to <code>file_time_type</code> possibly using a different clock. For example, one can do:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-cpp" data-lang="cpp"><span style="display:flex;"><span><span style="color:#66d9ef">auto</span> ftime <span style="color:#f92672">=</span> fs<span style="color:#f92672">::</span>last_write_time(p);
</span></span><span style="display:flex;"><span>std<span style="color:#f92672">::</span>time_t cftime <span style="color:#f92672">=</span> <span style="color:#66d9ef">decltype</span>(ftime)<span style="color:#f92672">::</span>clock<span style="color:#f92672">::</span>to_time_t(ftime);
</span></span></code></pre></div><p>(C++20 provides <code>file_time_type::clock::to_time_t</code> for conversions; on C++17, you might need an alternative approach if <code>file_time_type</code> isn’t system_clock.)</p>
</li>
<li>
<p><strong>Permissions</strong>: The library also supports querying and modifying file permissions. Every <code>fs::file_status</code> contains a <code>fs::perms</code> (an enumeration of permission bits similar to POSIX file permissions). You can call <code>fs::status(p).permissions()</code> to get the current permissions, and use <code>fs::permissions(p, newPerms)</code> to change them (with options to add/remove bits or replace them). This is a more advanced feature and is subject to platform support (e.g., Windows has a more complex ACL model, so <code>&lt;filesystem&gt;</code> maps the basic read/write/exec flags in a limited way).</p>
</li>
</ul>
<p>Below is a brief example showing how some of these queries might be used in practice:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-cpp" data-lang="cpp"><span style="display:flex;"><span>fs<span style="color:#f92672">::</span>path f <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;demo_dir/hello.txt&#34;</span>;
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">if</span> (fs<span style="color:#f92672">::</span>exists(f)) {
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">if</span> (fs<span style="color:#f92672">::</span>is_directory(f)) {
</span></span><span style="display:flex;"><span>        std<span style="color:#f92672">::</span>cout <span style="color:#f92672">&lt;&lt;</span> f.filename().string() <span style="color:#f92672">&lt;&lt;</span> <span style="color:#e6db74">&#34; is a directory</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">&#34;</span>;
</span></span><span style="display:flex;"><span>    } <span style="color:#66d9ef">else</span> <span style="color:#a6e22e">if</span> (fs<span style="color:#f92672">::</span>is_regular_file(f)) {
</span></span><span style="display:flex;"><span>        std<span style="color:#f92672">::</span>cout <span style="color:#f92672">&lt;&lt;</span> f.filename().string() <span style="color:#f92672">&lt;&lt;</span> <span style="color:#e6db74">&#34; is a file of &#34;</span>
</span></span><span style="display:flex;"><span>                  <span style="color:#f92672">&lt;&lt;</span> fs<span style="color:#f92672">::</span>file_size(f) <span style="color:#f92672">&lt;&lt;</span> <span style="color:#e6db74">&#34; bytes</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">&#34;</span>;
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>} <span style="color:#66d9ef">else</span> {
</span></span><span style="display:flex;"><span>    std<span style="color:#f92672">::</span>cout <span style="color:#f92672">&lt;&lt;</span> f.string() <span style="color:#f92672">&lt;&lt;</span> <span style="color:#e6db74">&#34; does not exist</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">&#34;</span>;
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>Assuming <code>demo_dir/hello.txt</code> exists (from the earlier example), this code will detect that it’s a regular file and print its size. We first check <code>fs::exists</code> to avoid handling exceptions in case the path is not present. Then <code>fs::is_directory</code> vs <code>is_regular_file</code> tells us what kind of object it is. We used <code>f.filename()</code> purely to print just the leaf name instead of the whole path. If the file were not present, it would print that information. In a real program, you might use these functions to decide how to handle a path (for example, traverse into it if it’s a directory, or open it if it’s a file).</p>
<p>All these querying functions throw <code>filesystem_error</code> on errors (for example, if you don’t have permission to access the path). You can also use overloads that take a <code>std::error_code&amp;</code> reference to get an error without exceptions. For instance, <code>fs::exists(p, ec)</code> will set <code>ec</code> to an error code instead of throwing, which can be useful in certain situations (like not wanting to use exceptions for control flow).</p>
<h2 id="error-handling-in-filesystem">Error Handling in <code>&lt;filesystem&gt;</code></h2>
<p>The filesystem library follows the convention used by many C++ standard library components: functions will throw exceptions to indicate errors, unless you use an overload that accepts a <code>std::error_code</code>. Specifically, most operations throw the exception type <code>std::filesystem::filesystem_error</code> on failure. This exception (a subclass of <code>std::system_error</code>) carries information about the error condition and the paths involved. For example, if you attempt to copy a file but the source doesn’t exist or the destination is not writable, a <code>filesystem_error</code> will be thrown describing the situation. As a developer, you can catch this exception to handle the error gracefully. For instance:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-cpp" data-lang="cpp"><span style="display:flex;"><span><span style="color:#66d9ef">try</span> {
</span></span><span style="display:flex;"><span>    fs<span style="color:#f92672">::</span>rename(<span style="color:#e6db74">&#34;nonexistent.txt&#34;</span>, <span style="color:#e6db74">&#34;newname.txt&#34;</span>);
</span></span><span style="display:flex;"><span>} <span style="color:#66d9ef">catch</span> (<span style="color:#66d9ef">const</span> fs<span style="color:#f92672">::</span>filesystem_error<span style="color:#f92672">&amp;</span> e) {
</span></span><span style="display:flex;"><span>    std<span style="color:#f92672">::</span>cerr <span style="color:#f92672">&lt;&lt;</span> <span style="color:#e6db74">&#34;Filesystem error: &#34;</span> <span style="color:#f92672">&lt;&lt;</span> e.what() <span style="color:#f92672">&lt;&lt;</span> <span style="color:#e6db74">&#34;</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">&#34;</span>;
</span></span><span style="display:flex;"><span>    <span style="color:#75715e">// e.code() contains the std::error_code
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>}
</span></span></code></pre></div><p>In the catch block, <code>e.what()</code> gives a message string and <code>e.code()</code> provides a platform-specific error code (e.g., POSIX <code>errno</code> wrapped in <code>std::error_code</code>). If you prefer to avoid exceptions, each operation typically has an alternative. For example, <code>fs::rename(old, new, error_code_var)</code> will set <code>error_code_var</code> to indicate success or failure instead of throwing. It’s then up to you to check that code. The dual approach (exceptions or error codes) is nice for flexibility: in scripts or small tools, you might use exceptions for brevity, whereas in large applications or performance-sensitive code, you might choose <code>std::error_code</code> to avoid the overhead of exceptions.</p>
<p>It’s important to note that certain conditions are not considered errors by these functions but still need attention – for instance, <code>fs::remove(path)</code> returning <code>false</code> simply means the file didn’t exist, which isn’t an exception case. So you should interpret the return values accordingly. The documentation and references (such as cppreference and the ISO C++ standard) detail which functions throw and what their return values signify. In summary, the <code>&lt;filesystem&gt;</code> library provides robust error handling mechanisms: <strong>exceptions by default and error codes on request</strong>, enabling you to write safe code that properly handles failure cases.</p>
<h2 id="impact-limitations-and-future-developments">Impact, Limitations, and Future Developments</h2>
<p>The adoption of the filesystem library into C++17 has had a notable impact on the way C++ code interacts with the operating system. In my experience, having <code>std::filesystem</code> readily available has significantly streamlined tasks that used to require either verbose C APIs or adding Boost as a dependency. The <strong>impact</strong> can be summarised as follows:</p>
<ul>
<li><strong>Productivity and clarity:</strong> Developers can accomplish common file operations with intuitive standard calls, leading to clearer and more self-documenting code. This encourages more direct handling of filesystem tasks (for example, writing a quick utility to organise files is now straightforward in pure C++). It also reduces the likelihood of bugs since the library functions handle edge cases (like platform-specific path syntax) that one might overlook in custom code.</li>
<li><strong>Portability:</strong> Code that uses <code>std::filesystem</code> is inherently portable across operating systems. This has lowered the barrier to writing cross-platform C++ tools and applications. Teams no longer need to write separate code paths or use preprocessor directives for different OSes when dealing with files. The library abstracts those differences (path separators, maximum path lengths, etc.) under a unified interface.</li>
<li><strong>Reduced dependencies:</strong> Projects that previously required Boost.Filesystem or other third-party libraries can now rely on the standard library alone. This simplifies build systems and is especially beneficial in environments where adding dependencies is undesirable. It’s also a boon for safety-conscious or constrained projects (like some embedded systems) that avoid external libraries.</li>
</ul>
<p>However, no addition to the language is without its <strong>limitations</strong> and criticisms. It&rsquo;s important to critically assess a few issues and constraints associated with <code>&lt;filesystem&gt;</code>:</p>
<ul>
<li><strong>Concurrent access and consistency:</strong> The filesystem library does not inherently manage concurrent modifications. If multiple threads or processes attempt to manipulate the same files or directories interleaved in time, race conditions can occur, potentially leading to undefined behavior. For example, iterating a directory while another thread deletes files in it may result in exceptions or missing entries. The standard notes that such scenarios are not safe – it is the programmer’s responsibility to synchronise filesystem operations at a higher level if needed. In practice, this is similar to using OS APIs: the library won’t prevent you from shooting yourself in the foot if you concurrently mutate the filesystem in unsynchronised ways.</li>
<li><strong>Platform-dependent behavior and support:</strong> While <code>std::filesystem</code> strives to be portable, it can only be as comprehensive as the underlying OS allows. Some features are not available on all filesystems. For instance, if you query or attempt to create a symbolic link on a filesystem that doesn’t support symlinks (like FAT32), you will get an error. The library functions report errors in these cases but cannot emulate unsupported features. Another example is path length limits on Windows – historically, Windows paths were limited to 260 characters (MAX_PATH). Early implementations of <code>&lt;filesystem&gt;</code> on Windows inherited this limitation (using fixed-size buffers of MAX_PATH length). Newer Windows 10 releases and updates to Visual C++ have addressed this by supporting long paths if enabled, and the library will utilize that support, but developers need to be aware that extremely long paths could still pose issues or require special prefixes (<code>&quot;\\\\?\\&quot;</code> syntax) to handle.</li>
<li><strong>Performance considerations:</strong> The convenience of <code>&lt;filesystem&gt;</code> may introduce some overhead. For example, constructing <code>fs::path</code> objects and using them is generally efficient, but there is some cost to the abstraction (memory allocation for path strings, etc.). In tight loops where millions of file operations are done, those costs accumulate. Similarly, <code>fs::recursive_directory_iterator</code> performing a deep traversal will call into the OS for each file; this is I/O-bound by nature, but developers should still be mindful of not doing more work than necessary (e.g., using <code>directory_options::skip_permission_denied</code> if appropriate, to avoid exceptions slowing down a large traversal when hitting protected files). That said, in most applications the bottleneck is the actual filesystem I/O, not the C++ abstraction overhead.</li>
<li><strong>Missing high-level features:</strong> The C++17 filesystem library focuses on fundamental operations. It does not provide higher-level utilities like file watching (monitoring changes to files/directories), nor does it include functions for reading/writing file contents – those remain the domain of <code>&lt;fstream&gt;</code> or third-party libraries. Some tasks still require platform-specific extensions or libraries (for example, getting detailed file metadata beyond basic attributes, or performing asynchronous file I/O). The current library is a lowest common denominator of what modern OSes offer, which is appropriate for the standard, but developers with special requirements might need to go beyond <code>std::filesystem</code>.</li>
</ul>
<p>Looking to the <strong>future</strong>, the filesystem library is expected to evolve only modestly, as it already covers the essentials. Potential future developments include improvements and extensions driven by real-world usage and performance needs. One area of interest is a concept called <strong><code>path_view</code></strong> (analogous to <code>string_view</code> but for file paths). A proposal for <code>std::filesystem::path_view</code> is under discussion, which would provide a lightweight, non-owning reference to a path string and could avoid some allocations when manipulating paths. This could address performance issues when code frequently converts between <code>std::string</code> and <code>fs::path</code>. Another possible improvement is making more of the filesystem library usable in constant expressions (i.e., <code>constexpr</code>), though interacting with an actual filesystem at compile-time is largely out of scope – still, things like constructing a <code>path</code> from a literal could become <code>constexpr</code> if the committee finds it useful and feasible.</p>
<p>We might also see better integration with other modern C++ features: for example, formatting library support (printing paths nicely with <code>std::format</code>), which is already partly addressed in C++20 and beyond. As operating systems evolve, the C++ standard may update <code>&lt;filesystem&gt;</code> to accommodate new types of filesystems or metadata (for instance, additional file attributes or new permission models). However, major leaps such as network filesystem abstractions or high-level file manipulation algorithms are likely to be left to external libraries or platform APIs for the foreseeable future.</p>
<p>In conclusion, the C++17 filesystem library represents a significant step forward in the language’s ability to interact with the operating system in a portable and programmer-friendly way. It has <strong>standardised</strong> decades-old practices and borrowed a well-vetted library (Boost.Filesystem) into the official toolkit of C++ developers. My assessment is that <code>&lt;filesystem&gt;</code> greatly improves the expressiveness and ease of writing C++ code that deals with files and directories. By eliminating a dependency on non-standard libraries and providing a first-class, uniform API, it has likely saved countless hours of developer time and reduced bugs. There are some caveats – especially regarding concurrency and platform quirks – and it’s not a one-size-fits-all solution for every low-level need. Yet, for the vast majority of applications, <code>std::filesystem</code> strikes an excellent balance between power and simplicity. As with any part of the standard, it will continue to be refined, but it has already become an indispensable component of modern C++ development. The inclusion of the filesystem library in C++17 can be seen as the language finally catching up with a long-standing practical need, and doing so in a manner that is elegant, robust, and aligned with the principles of C++ design. </p>
]]></content>
        </item>
        
        <item>
            <title>Template Argument Deduction for Class Templates in C&#43;&#43;17</title>
            <link>https://blog.miguens.one/posts/2025/06/template-argument-deduction-for-class-templates-in-c-17/</link>
            <pubDate>Thu, 26 Jun 2025 00:00:00 +0000</pubDate>
            
            <guid>https://blog.miguens.one/posts/2025/06/template-argument-deduction-for-class-templates-in-c-17/</guid>
            <description>&lt;h2 id=&#34;background-templates-in-c1114-and-the-need-for-change&#34;&gt;Background: Templates in C++11/14 and the Need for Change&lt;/h2&gt;
&lt;p&gt;Prior to C++17, when using class templates in C++, developers had to explicitly specify all template arguments for the class. The compiler did not deduce class template parameters from constructor arguments as it did for function templates. For example, constructing a &lt;code&gt;std::pair&lt;/code&gt; of two &lt;code&gt;int&lt;/code&gt; values required writing &lt;code&gt;std::pair&amp;lt;int, int&amp;gt; p(11, 22);&lt;/code&gt; – even though the compiler “already knows” the types of &lt;code&gt;11&lt;/code&gt; and &lt;code&gt;22&lt;/code&gt; are &lt;code&gt;int&lt;/code&gt;. In contrast, function templates benefited from &lt;em&gt;template argument deduction&lt;/em&gt; since C++98: given a function template like &lt;code&gt;sort(RanIt first, RanIt last)&lt;/code&gt;, the compiler can deduce the iterator type from the call &lt;code&gt;sort(v.begin(), v.end());&lt;/code&gt; without explicit template arguments. This discrepancy meant extra verbosity for class templates and led to &lt;em&gt;workarounds&lt;/em&gt;.&lt;/p&gt;</description>
            <content type="html"><![CDATA[<h2 id="background-templates-in-c1114-and-the-need-for-change">Background: Templates in C++11/14 and the Need for Change</h2>
<p>Prior to C++17, when using class templates in C++, developers had to explicitly specify all template arguments for the class. The compiler did not deduce class template parameters from constructor arguments as it did for function templates. For example, constructing a <code>std::pair</code> of two <code>int</code> values required writing <code>std::pair&lt;int, int&gt; p(11, 22);</code> – even though the compiler “already knows” the types of <code>11</code> and <code>22</code> are <code>int</code>. In contrast, function templates benefited from <em>template argument deduction</em> since C++98: given a function template like <code>sort(RanIt first, RanIt last)</code>, the compiler can deduce the iterator type from the call <code>sort(v.begin(), v.end());</code> without explicit template arguments. This discrepancy meant extra verbosity for class templates and led to <em>workarounds</em>.</p>
<p>To mitigate this, C++11/14 code often relied on helper factory functions (e.g. <code>std::make_pair</code>, <code>std::make_tuple</code>, <code>std::make_unique</code>) which are function templates that deduce the desired class template types and return an object. For instance, instead of specifying the template parameters for a <code>pair</code>, one could write <code>auto p = std::make_pair(11, 22);</code> to get a <code>std::pair&lt;int, int&gt;</code> without spelling out the types. While effective, these helper functions had drawbacks: they introduced extra indirection and template machinery (e.g. perfect forwarding and type decay in <code>std::make_pair</code>), incurred minor compile-time and debugging overhead (the compiler must instantiate and then optimize away the helper) and still added verbosity (the <code>make_...</code> prefix or the need for <code>auto</code> for a named variable). In summary, before C++17 <strong>class templates could not deduce their template arguments</strong> from constructor calls, making generic code more cumbersome than necessary.</p>
<h2 id="c17-introducing-class-template-argument-deduction-ctad">C++17: Introducing Class Template Argument Deduction (CTAD)</h2>
<p>C++17 addressed this longstanding issue by introducing <em>class template argument deduction</em> (CTAD) as a core language feature. In essence, the compiler can now deduce the template parameters of a class template from the constructor arguments, <strong>provided no explicit template argument list is given</strong>. This feature allows class templates to be used in a more intuitive way, similar to how function templates have always been used. <strong>C++17 allows you to simply write the class template name and initializer, and the compiler deduces the template arguments automatically</strong>. For example, one can now write <code>std::pair(11, 22)</code> instead of <code>std::pair&lt;int, int&gt;(11, 22)</code> – the two are equivalent in C++17. In other words, given only the class template name and constructor call, the compiler will determine that <code>11</code> and <code>22</code> are <code>int</code> and instantiate a <code>std::pair&lt;int, int&gt;</code> accordingly. This significantly reduces verbosity and improves code clarity.</p>
<p>So how does CTAD work? Under the hood, the compiler uses the types of constructor arguments to deduce the template parameters. Formally, when you create an object with a class template name and no <code>&lt;…&gt;</code> list, the compiler imagines a set of <em>fictional function templates</em> corresponding to each constructor of the class template. It then uses template argument deduction (as it would for function templates) to find which “constructor template” matches the given arguments and infers the template arguments for the class. In practice, you don’t see this process – you just get the instantiated class. The key point is that every template parameter must be deduced or have a default; if any template argument remains unknown and has no default, deduction will fail and the code won’t compile. Notably, if you <em>do</em> provide an explicit template argument list (even if partial), CTAD is disabled entirely. This means you cannot explicitly specify <em>some</em> template arguments and have the rest deduced in C++17 – it’s all-or-nothing deduction for class templates.</p>
<p><strong>Deduction Guides:</strong> In most cases, CTAD “just works” using constructors. However, there are scenarios where the compiler needs a bit of help. A <em>deduction guide</em> is a new C++17 mechanism that lets developers explicitly instruct the compiler how to deduce template parameters for certain argument patterns. The syntax resembles a function declaration with a trailing <code>-&gt;</code> return type indicating the class specialization to instantiate. <em>Implicit deduction guides</em> are automatically generated from constructors (including templated constructors) of the class template. In addition, developers can write <em>user-defined deduction guides</em> to handle special cases or improve deduction where the implicit rules don’t suffice. A deduction guide is essentially a hint to the compiler: “if you see a constructor call with parameters of types X, Y, …, then deduce the template arguments as T…, and instantiate <code>Class&lt;T...&gt;</code>”.</p>
<p>Why might we need user-defined guides? One common case in C++17 is <strong>class templates that are <em>aggregates</em></strong> (structs or classes with public data members and no user-defined constructors). Aggregates don’t have constructors for the compiler to examine, so the language cannot deduce their template parameters from initializer lists without help. For example, consider a simple aggregate:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-cpp" data-lang="cpp"><span style="display:flex;"><span><span style="color:#66d9ef">template</span><span style="color:#f92672">&lt;</span><span style="color:#66d9ef">class</span> <span style="color:#a6e22e">A</span>, <span style="color:#66d9ef">class</span> <span style="color:#a6e22e">B</span><span style="color:#f92672">&gt;</span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">struct</span> <span style="color:#a6e22e">Agg</span> { A a; B b; };
</span></span><span style="display:flex;"><span><span style="color:#75715e">// No constructors defined – Agg is an aggregate
</span></span></span></code></pre></div><p>In C++17, if we attempt to create an <code>Agg</code> with braces, the compiler won’t deduce <code>&lt;A, B&gt;</code> by default. We must provide a deduction guide or the code will fail to compile. We can add one like this:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-cpp" data-lang="cpp"><span style="display:flex;"><span><span style="color:#66d9ef">template</span><span style="color:#f92672">&lt;</span><span style="color:#66d9ef">class</span> <span style="color:#a6e22e">A</span>, <span style="color:#66d9ef">class</span> <span style="color:#a6e22e">B</span><span style="color:#f92672">&gt;</span>
</span></span><span style="display:flex;"><span>Agg(A, B) <span style="color:#f92672">-&gt;</span> Agg<span style="color:#f92672">&lt;</span>A, B<span style="color:#f92672">&gt;</span>;  <span style="color:#75715e">// guide to deduce Agg&lt;A,B&gt; from two constructor arguments
</span></span></span></code></pre></div><p>With this guide in place, <code>Agg agg{1, 2.0};</code> will deduce <code>A=int, B=double</code> resulting in an <code>Agg&lt;int, double&gt;</code>. (In C++20, the compiler becomes smarter – it can implicitly deduce aggregate class templates in many cases, eliminating the need for such guides. But in C++17, user-defined guides are typically required for aggregates.) Another use of custom guides is to handle conversions or non-trivial inference. For instance, one could write a non-templated guide <code>MyData(const char*) -&gt; MyData&lt;std::string&gt;;</code> so that <code>MyData md{&quot;hello&quot;}</code> deduces to <code>MyData&lt;std::string&gt;</code> instead of the default <code>MyData&lt;const char*&gt;</code>. This allows tailoring the deduction to more suitable types in specific situations.</p>
<p>The C++17 standard library itself provides many <strong>deduction guides</strong> for popular templates. The goal was to ensure that CTAD works intuitively for library types like containers, smart pointers, etc., even in tricky cases. For example, <code>std::vector</code> can deduce its <code>T</code> from an initializer_list or from iterator/value constructor arguments, <code>std::array</code> deduces both its element type and size, and <code>std::unique_ptr</code> uses guides to deduce the pointed type (distinguishing array pointers from single object pointers). All these guides are defined in the library headers so that you can use CTAD with standard types seamlessly. In general, <strong>non-aggregate class templates with at least one constructor don’t usually need manual guides</strong> – the constructors themselves drive deduction. It’s the cases of no constructors (pure aggregates) or wanting a different deduction than constructors provide that call for user-defined guides.</p>
<h2 id="examples-of-ctad-in-action">Examples of CTAD in Action</h2>
<p>Class template argument deduction greatly simplifies the syntax for creating objects of class templates. Here are several examples illustrating how it works in practice, compared to pre-C++17 code:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-cpp" data-lang="cpp"><span style="display:flex;"><span><span style="color:#75715e">#include</span> <span style="color:#75715e">&lt;utility&gt;</span><span style="color:#75715e">
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">#include</span> <span style="color:#75715e">&lt;tuple&gt;</span><span style="color:#75715e">
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">#include</span> <span style="color:#75715e">&lt;vector&gt;</span><span style="color:#75715e">
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">#include</span> <span style="color:#75715e">&lt;array&gt;</span><span style="color:#75715e">
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">#include</span> <span style="color:#75715e">&lt;memory&gt;</span><span style="color:#75715e">
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">#include</span> <span style="color:#75715e">&lt;string&gt;</span><span style="color:#75715e">
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">#include</span> <span style="color:#75715e">&lt;iostream&gt;</span><span style="color:#75715e">
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">#include</span> <span style="color:#75715e">&lt;type_traits&gt;</span><span style="color:#75715e">
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">// C++11/14 style – explicit template arguments or factory functions:
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>std<span style="color:#f92672">::</span>pair<span style="color:#f92672">&lt;</span><span style="color:#66d9ef">int</span>, <span style="color:#66d9ef">double</span><span style="color:#f92672">&gt;</span> p1(<span style="color:#ae81ff">42</span>, <span style="color:#ae81ff">3.14</span>);        <span style="color:#75715e">// explicitly specify &lt;int,double&gt;
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span><span style="color:#66d9ef">auto</span> p2 <span style="color:#f92672">=</span> std<span style="color:#f92672">::</span>make_pair(<span style="color:#ae81ff">42</span>, <span style="color:#ae81ff">3.14</span>);         <span style="color:#75715e">// use function template to deduce types
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">// C++17 style – CTAD automatically deduces the template arguments:
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>std<span style="color:#f92672">::</span>pair p3(<span style="color:#ae81ff">42</span>, <span style="color:#ae81ff">3.14</span>);                    <span style="color:#75715e">// deduces std::pair&lt;int, double&gt;:contentReference[oaicite:24]{index=24}
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>std<span style="color:#f92672">::</span>tuple t1(<span style="color:#ae81ff">10</span>, <span style="color:#ae81ff">15.5</span>, <span style="color:#e6db74">&#34;hello&#34;</span>);          <span style="color:#75715e">// deduces std::tuple&lt;int, double, const char*&gt;:contentReference[oaicite:25]{index=25}
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">// Deduction with container templates:
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>std<span style="color:#f92672">::</span>vector v <span style="color:#f92672">=</span> {<span style="color:#ae81ff">1</span>, <span style="color:#ae81ff">2</span>, <span style="color:#ae81ff">3</span>, <span style="color:#ae81ff">4</span>};              <span style="color:#75715e">// deduces std::vector&lt;int&gt; (T=int from init-list)
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>std<span style="color:#f92672">::</span>array arr <span style="color:#f92672">=</span> {std<span style="color:#f92672">::</span>string(<span style="color:#e6db74">&#34;A&#34;</span>), std<span style="color:#f92672">::</span>string(<span style="color:#e6db74">&#34;B&#34;</span>)}; 
</span></span><span style="display:flex;"><span>                                          <span style="color:#75715e">// deduces std::array&lt;std::string, 2&gt;
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">// CTAD with smart pointers:
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>std<span style="color:#f92672">::</span>unique_ptr ptr1(<span style="color:#66d9ef">new</span> <span style="color:#66d9ef">int</span>(<span style="color:#ae81ff">10</span>));        <span style="color:#75715e">// deduces std::unique_ptr&lt;int&gt;:contentReference[oaicite:26]{index=26}:contentReference[oaicite:27]{index=27}
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>std<span style="color:#f92672">::</span>unique_ptr ptr2(<span style="color:#66d9ef">new</span> <span style="color:#66d9ef">int</span>[<span style="color:#ae81ff">5</span>]);         <span style="color:#75715e">// deduces std::unique_ptr&lt;int[]&gt; (array version):contentReference[oaicite:28]{index=28}
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">// Custom class template example (aggregate):
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span><span style="color:#66d9ef">template</span><span style="color:#f92672">&lt;</span><span style="color:#66d9ef">typename</span> X, <span style="color:#66d9ef">typename</span> Y<span style="color:#f92672">&gt;</span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">struct</span> <span style="color:#a6e22e">Pair</span> { X first; Y second; };        <span style="color:#75715e">// aggregate, no constructors
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">// (In C++17, need a guide for aggregate deduction)
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span><span style="color:#66d9ef">template</span><span style="color:#f92672">&lt;</span><span style="color:#66d9ef">typename</span> X, <span style="color:#66d9ef">typename</span> Y<span style="color:#f92672">&gt;</span>
</span></span><span style="display:flex;"><span>Pair(X, Y) <span style="color:#f92672">-&gt;</span> Pair<span style="color:#f92672">&lt;</span>X, Y<span style="color:#f92672">&gt;</span>;                 <span style="color:#75715e">// guide: Pair(x,y) deduces Pair&lt;X,Y&gt;
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>
</span></span><span style="display:flex;"><span>Pair agg <span style="color:#f92672">=</span> {<span style="color:#ae81ff">123</span>, <span style="color:#ae81ff">7.89</span>};                   <span style="color:#75715e">// deduces Pair&lt;int, double&gt; from guide
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">// Verify some deduced types at compile time:
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span><span style="color:#66d9ef">static_assert</span>(std<span style="color:#f92672">::</span>is_same_v<span style="color:#f92672">&lt;</span><span style="color:#66d9ef">decltype</span>(p3), std<span style="color:#f92672">::</span>pair<span style="color:#f92672">&lt;</span><span style="color:#66d9ef">int</span>,<span style="color:#66d9ef">double</span><span style="color:#f92672">&gt;&gt;</span>);
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">static_assert</span>(std<span style="color:#f92672">::</span>is_same_v<span style="color:#f92672">&lt;</span><span style="color:#66d9ef">decltype</span>(t1), std<span style="color:#f92672">::</span>tuple<span style="color:#f92672">&lt;</span><span style="color:#66d9ef">int</span>,<span style="color:#66d9ef">double</span>,<span style="color:#66d9ef">const</span> <span style="color:#66d9ef">char</span><span style="color:#f92672">*&gt;&gt;</span>);
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">static_assert</span>(std<span style="color:#f92672">::</span>is_same_v<span style="color:#f92672">&lt;</span><span style="color:#66d9ef">decltype</span>(arr), std<span style="color:#f92672">::</span>array<span style="color:#f92672">&lt;</span>std<span style="color:#f92672">::</span>string,<span style="color:#ae81ff">2</span><span style="color:#f92672">&gt;&gt;</span>);
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">static_assert</span>(std<span style="color:#f92672">::</span>is_same_v<span style="color:#f92672">&lt;</span><span style="color:#66d9ef">decltype</span>(ptr2), std<span style="color:#f92672">::</span>unique_ptr<span style="color:#f92672">&lt;</span><span style="color:#66d9ef">int</span>[]<span style="color:#f92672">&gt;&gt;</span>);
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>std<span style="color:#f92672">::</span>cout <span style="color:#f92672">&lt;&lt;</span> <span style="color:#e6db74">&#34;p3 = {&#34;</span> <span style="color:#f92672">&lt;&lt;</span> p3.first <span style="color:#f92672">&lt;&lt;</span> <span style="color:#e6db74">&#34;, &#34;</span> <span style="color:#f92672">&lt;&lt;</span> p3.second <span style="color:#f92672">&lt;&lt;</span> <span style="color:#e6db74">&#34;}</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">&#34;</span>;
</span></span></code></pre></div><p>In the code above, <code>p3</code> is a <code>std::pair&lt;int,double&gt;</code> even though we wrote just <code>std::pair</code> – the compiler deduced the template arguments from the two constructor arguments (42 and 3.14). Likewise, <code>t1</code> becomes a <code>std::tuple&lt;int, double, const char*&gt;</code> by deducing each element type from the arguments given (notice that string literals yield <code>const char*</code> here). The commented static assertions illustrate the deduced types; these would pass at compile time, confirming the compiler’s decisions.</p>
<p>For the containers, <code>v</code> is deduced to <code>std::vector&lt;int&gt;</code> because we provided an initializer-list of <code>int</code>s. In C++14 you would have had to write <code>std::vector&lt;int&gt; v{…}</code> or rely on <code>auto</code>. With CTAD, the type <code>int</code> is inferred from the initializer list and the default allocator is applied for the second template parameter. Similarly, <code>arr</code> is deduced as <code>std::array&lt;std::string, 2&gt;</code> – here the deduction guide provided by the standard library uses the types of the two strings to determine that the array’s element type is <code>std::string</code> and the size is 2. Even mixed types can be handled: if we had <code>array arr2 = {1, 2u, 3u};</code>, the library’s guide uses <code>std::common_type_t</code> to deduce a common type (in this case <code>unsigned int</code>) and count 3 elements.</p>
<p>The <code>std::unique_ptr</code> examples demonstrate how CTAD works with smart pointers. <code>ptr1</code> is constructed from <code>new int(10)</code>, so the compiler deduces <code>T</code> as <code>int</code> and instantiates a <code>unique_ptr&lt;int&gt;</code> (the deleter uses the default). For <code>ptr2</code>, we pass <code>new int[5]</code> (an array of 5 ints). The standard library actually provides two deduction guides for <code>unique_ptr</code> – one for pointers to single objects and one for pointers to arrays. In this case, the pointer type looks like <code>int*</code> but the guide specifically maps it to <code>unique_ptr&lt;int[]&gt;</code> (array form) because <code>new int[5]</code> came from an array new-expression. As a result, <code>ptr2</code> is deduced to <code>std::unique_ptr&lt;int[]&gt;</code> without us specifying anything. This shows CTAD can even choose between overloads or specializations when guided appropriately by the library.</p>
<p>Finally, consider the custom <code>Pair</code> struct which is an aggregate (two public members, no constructors). In C++17, if we try to use <code>Pair agg = {123, 7.89};</code> without any help, the compiler wouldn’t deduce <code>&lt;int, double&gt;</code> on its own – CTAD for aggregates doesn’t kick in by default. We provided a user-defined deduction guide <code>Pair(X, Y) -&gt; Pair&lt;X,Y&gt;</code> to instruct the compiler that two constructor arguments of types X and Y should result in a <code>Pair&lt;X,Y&gt;</code>. With that guide in place, <code>agg</code> is successfully deduced as a <code>Pair&lt;int, double&gt;</code>. (This guide is essentially what the compiler <em>automatically</em> generates in C++20 for aggregates, but in C++17 we have to write it ourselves.)</p>
<h2 id="advantages-limitations-and-edge-cases-of-c17-ctad">Advantages, Limitations, and Edge Cases of C++17 CTAD</h2>
<p><strong>Benefits:</strong> The primary advantage of class template argument deduction is reduced verbosity and clearer code. By eliminating the need to redundantly specify template arguments that the compiler can infer, CTAD makes code more concise and expressive. This aligns with modern C++ style (e.g. using <code>auto</code> or template deduction elsewhere) to avoid repeating type information. It also avoids the need for many factory functions – you can construct objects of template classes directly and naturally. As noted earlier, reliance on helper templates like <code>make_pair</code> was <em>functional</em> but introduced extra layers of indirection and complexity. CTAD removes that burden: there’s no artificial function call, which can marginally improve compile times and make debugging easier (no stepping into <code>make_X</code> functions). In generic code, CTAD can improve template <em>composability</em>. For example, a function template can now return a class template object without the caller having to spell out the template arguments, making APIs more intuitive. Overall, C++17’s CTAD brings class templates closer to the ease-of-use of built-in types and function templates, increasing abstraction without cost.</p>
<p><strong>Limitations in C++17:</strong> Despite its usefulness, CTAD isn’t magic – it has some limitations and gotchas that developers should be aware of. One limitation is that <strong>partial deduction is not allowed</strong> – as mentioned, if you provide any template arguments explicitly, the compiler assumes you intend to specify all of them. For instance, <code>std::tuple&lt;int&gt; t(1, 2, 3);</code> is an error, because by specifying one template parameter, you turned off deduction for the others (and no matching constructor exists for <code>tuple&lt;int&gt;</code> with three arguments). The rule is all-or-none: either let CTAD deduce everything, or specify everything explicitly.</p>
<p>Another limitation in C++17 is with <strong>aggregate templates</strong>, which we’ve discussed. If a class template has no constructors (and is not a specialization with its own defaults), the compiler can’t deduce its parameters from an initializer list without a guide. This means in C++17 you may need to write user-defined deduction guides for your own aggregates to use them with CTAD. Failing to do so yields compiler errors for attempts at deduction. (C++20 fixes this by automatically generating guides for such cases, making the example <code>Agg{1,2.0}</code> work without manual intervention.)</p>
<p><strong>Potential ambiguity and complexity:</strong> In some scenarios, the presence of multiple constructors or deduction guides can lead to ambiguity or unexpected results. The compiler uses overload resolution to select the best deduction candidate. Usually the matching is straightforward (e.g. one constructor’s parameters fit the arguments best). But consider that CTAD also introduces an implicit <em>copy deduction</em> guide: a template that says <code>ClassName(ClassName&lt;T...&gt;) -&gt; ClassName&lt;T...&gt;</code> is always considered. This means that if you pass an object of the same template type into a class template’s constructor, the compiler prefers to deduce by “copying” that object’s exact template arguments rather than, say, using a more general templated constructor. In practice, this ensures that copy or move construction works as expected (you get the same specialization), but it can sometimes surprise developers if a templated constructor was meant to capture a broader range of types. The language rules resolve such conflicts by favoring the more specialized deduction candidate (often the implicit copy) over a user-defined guide or templated constructor.</p>
<p>Another edge case arises with <em>conversions</em>. CTAD will deduce types based on the constructor parameters and the arguments’ types or convertible types. If a conversion is needed to call a particular constructor, that constructor might not participate in deduction unless it’s a viable overload. For example, if you have a template constructor that takes a <code>T</code> and you pass an argument of a different type that can convert to <code>T</code>, the deduction will consider that conversion. In some cases, you might want to force a particular deduction – this is where a user-defined guide can override the default. The earlier example of mapping <code>const char*</code> to <code>std::string</code> is illustrative: normally, a template constructor <code>S(T)</code> would deduce <code>T</code> as <code>const char*</code> for a string literal, but by providing a guide, you can deduce it as <code>std::string</code> instead. Such guides have to be used judiciously to avoid conflicts, but they give library authors and users a way to fine-tune deduction.</p>
<p>One should also be mindful that CTAD infers template parameters purely from constructors and guides – it does <strong>not</strong> look at how the object is used later. This is usually intuitive, but in complex scenarios (especially involving templates within templates) you might encounter cases where the “obvious” deduction to a human isn’t done by the compiler because it has no contextual reason to do so. In those rare cases, you’d still need to specify template arguments or add a guide.</p>
<p>Finally, there’s a stylistic consideration: CTAD can make code <em>too</em> terse, to the point that the actual types become less obvious at a glance. Some codebases or developers might prefer explicit template arguments for clarity in public interfaces, or at least judicious use of CTAD. As with <code>auto</code>, the key is balance – CTAD is a tool that, when used appropriately, improves code, but it can be misused. That said, for most intermediate and advanced C++ developers, the benefits in reduced boilerplate outweigh the downside of having to sometimes infer the type mentally. Tools and IDEs nowadays can often show the deduced type to assist in readability.</p>
<h2 id="summary-and-future-considerations">Summary and Future Considerations</h2>
<p>C++17’s class template argument deduction is a powerful feature that makes templates more user-friendly and code more elegant. In this article, we saw how prior C++ standards required explicit template parameters for class templates and how C++17 changed the game by allowing the compiler to deduce those parameters from constructor arguments. We examined how deduction guides – implicit and user-defined – function as the mechanism enabling this deduction, and we walked through examples ranging from simple pairs and tuples to containers, smart pointers, and user-defined classes. CTAD bridges the gap between function templates and class templates, unifying the language’s ability to infer types and thus reducing verbosity and potential errors.</p>
<p>Looking beyond C++17, the evolution of template argument deduction has continued. C++20 built on C++17’s foundation by extending CTAD to <em>aggregates</em> automatically, so in many cases you no longer need to write explicit deduction guides for simple structs. C++20 also introduced <em>concepts</em> and <em>constraints</em>, which can be used in conjunction with CTAD to ensure that the deduced template arguments meet certain requirements (for example, you could constrain a deduction guide to only fire for particular types). These additions make template deduction more robust and expressive. As of C++23, no major new changes to CTAD have been introduced – the feature is now well-integrated into the language. Future standards may further refine template inference or address edge cases (the C++ committee has discussed interactions between CTAD and other features, and minor tweaks have been proposed to resolve quirks), but the core functionality is expected to remain as a reliable workhorse for C++ template programming.</p>
<p>In conclusion, template argument deduction for class templates is a welcome improvement from C++17 that simplifies template usage for programmers. It allows us to write code that is both <strong>safer</strong> (less chance of error by mismatched types) and <strong>cleaner</strong> (no redundant type specifications), exemplifying the modern C++ ethos of letting the compiler do the heavy lifting. By understanding its capabilities and limits, we can fully leverage CTAD to write more maintainable and expressive C++ code, all while citing the evidence of its effectiveness in both standard and user-defined templates.</p>
]]></content>
        </item>
        
        <item>
            <title>Inline Variables in C&#43;&#43;17: ODR-Safe Header Definitions</title>
            <link>https://blog.miguens.one/posts/2025/06/inline-variables-in-c-17-odr-safe-header-definitions/</link>
            <pubDate>Thu, 19 Jun 2025 00:00:00 +0000</pubDate>
            
            <guid>https://blog.miguens.one/posts/2025/06/inline-variables-in-c-17-odr-safe-header-definitions/</guid>
            <description>&lt;h2 id=&#34;introduction&#34;&gt;Introduction&lt;/h2&gt;
&lt;p&gt;C++17 introduced &lt;strong&gt;inline variables&lt;/strong&gt;, a feature designed to address a long-standing challenge in C++: defining variables in header files without violating the One Definition Rule (ODR). Before C++17, placing a global variable definition in a header and including it in multiple source files would violate ODR, leading to linker errors or undefined behaviour. Developers had to rely on workarounds like &lt;code&gt;extern&lt;/code&gt; declarations or the use of function templates and static variables to avoid multiple definitions. With inline variables, C++ now permits certain variables to be defined in headers (and included in multiple translation units) while treating those definitions as one single entity at link time. This article provides a detailed examination of inline variables, explaining what they are, how they work, why they were introduced, and their implications – both positive and negative – for C++ development.&lt;/p&gt;</description>
            <content type="html"><![CDATA[<h2 id="introduction">Introduction</h2>
<p>C++17 introduced <strong>inline variables</strong>, a feature designed to address a long-standing challenge in C++: defining variables in header files without violating the One Definition Rule (ODR). Before C++17, placing a global variable definition in a header and including it in multiple source files would violate ODR, leading to linker errors or undefined behaviour. Developers had to rely on workarounds like <code>extern</code> declarations or the use of function templates and static variables to avoid multiple definitions. With inline variables, C++ now permits certain variables to be defined in headers (and included in multiple translation units) while treating those definitions as one single entity at link time. This article provides a detailed examination of inline variables, explaining what they are, how they work, why they were introduced, and their implications – both positive and negative – for C++ development.</p>
<h2 id="what-are-inline-variables-in-c17">What Are Inline Variables in C++17?</h2>
<p>Inline variables are variables declared with the <code>inline</code> specifier, which gives them special linkage and ODR properties. In essence, an <strong>inline variable</strong> behaves similarly to an inline function: it can be defined in multiple translation units (for example, by being defined in a header file that is included by many source files), but the C++ program will treat those as one single definition. The C++17 standard specifies that if a variable is declared <code>inline</code>:</p>
<ul>
<li><strong>Multiple Definitions Allowed:</strong> You may have the <strong>same definition</strong> in different translation units (typically by including the same header). Such definitions must be identical in every translation unit. If they differ, the program is ill-formed (violating ODR) – no diagnostic required, meaning the compiler might not catch the error.</li>
<li><strong>Single Entity Linkage:</strong> All those definitions across translation units refer to <strong>one and the same variable</strong>. Notably, an inline variable has one unified address in the program, regardless of how many times the definition is present.</li>
<li><strong>Definition in Every Usage TU:</strong> The variable must be declared (and typically defined) <code>inline</code> in every translation unit where it is <em>odr-used</em>. ODR-use means the program requires the variable&rsquo;s definition (for example, taking its address or binding a reference to it). If any translation unit odr-uses the variable but does not see its inline definition, the program violates ODR.</li>
</ul>
<p>In more formal terms, the C++17 working draft N4659 (and the finalized standard) extended the ODR to allow multiple definitions for inline variables. Just as inline functions have been an exception to the &ldquo;one definition&rdquo; rule since C++98, now <strong>inline variables are an exception to ODR as well</strong>. The C++17 standard draft states that “an inline function or variable shall be defined in every translation unit in which it is odr-used” (<a href="https://timsong-cpp.github.io/cppwp/n4659/basic.def.odr#:~:text=Every%20program%20shall%20contain%20exactly,outside%20of%20a%20discarded%20statement">[basic.def.odr]</a>), and that there can be more than one definition of an inline variable in a program as long as each appears in a different translation unit and all definitions are identical. This effectively means the linker (or the compiler in link-time code generation models) will merge all these definitions into a single object in the final program.</p>
<p><strong>Key difference from regular (non-inline) variables:</strong> Normally, a non-inline variable with external linkage (e.g. a global variable) <em>must</em> be defined exactly once in the entire program. Putting its definition in a header would cause multiple definitions when the header is included in multiple source files, violating ODR. Inline variables, however, <em>relax</em> this by allowing the same definition to appear multiple times. The program behaves &ldquo;as if there is exactly one variable&rdquo; in the whole program, thus sidestepping the usual ODR restriction.</p>
<p><strong>ODR-Safety in Headers:</strong> Because of these rules, inline variables enable safe definitions in header files. This was a pivotal reason for their introduction – to support header-only libraries and easier maintenance of constants or global objects across multiple translation units. In short, an inline variable in a header file can be included in many .cpp files without causing multiple-definition errors, provided the definition is marked inline and is identical in each inclusion.</p>
<h2 id="why-were-inline-variables-introduced">Why Were Inline Variables Introduced?</h2>
<p>Inline variables were introduced to solve practical problems C++ developers faced and to simplify certain patterns. Prior to C++17, defining a variable in a header that was included in multiple source files either caused ODR violations or required cumbersome workarounds:</p>
<ul>
<li><strong>The <code>extern</code> Pattern:</strong> A common pattern was to declare a global in a header with <code>extern</code> and then provide exactly one definition in a single .cpp file. For example, in a header: <code>extern int globalCount;</code> and in one source file: <code>int globalCount = 42;</code>. This works but adds extra ceremony and can lead to linker errors if the definition is forgotten or duplicated by mistake. It also hinders header-only library distribution since you must ship a source file for the definitions.</li>
<li><strong>Static Variables in Headers:</strong> Marking a global as <code>static</code> in a header gives it internal linkage, meaning each translation unit gets its own private copy. This avoids linkage conflicts but means you end up with multiple independent copies of what was intended to be one variable – not the desired effect if you truly wanted a single shared state.</li>
<li><strong>Constexpr and In-Class Constants:</strong> C++11 allowed <code>constexpr</code> variables and certain in-class constant static members to be defined in headers, because they were usually treated as compile-time constants. However, those had restrictions (e.g., only literal types, and odr-use of a static constexpr still required an out-of-class definition in C++14, unless it was also inline by virtue of being constexpr in-class). There was inconsistency in what you could define in a header and how.</li>
</ul>
<p>The C++ committee recognized these issues. Herb Sutter remarked that <em>inline variables make it easier to define global variables (the &ldquo;bad news&rdquo;) correctly (the &ldquo;good news&rdquo;), including in header files. Code that people already wrote (often incorrectly) can now be made to work correctly</em>. In other words, developers were already attempting to define variables in headers (for convenience or to build header-only libraries), often through tricks or getting undefined behaviour. Inline variables officially support this pattern in a safe manner.</p>
<p>Another major motivation was to <strong>simplify header-only libraries and components</strong>. Many modern C++ libraries are header-only (for example, header-only JSON or XML libraries, single-header utility libraries, etc.). Inline variables remove the “one definition” obstacle for shipping such libraries. As noted in cppreference, <em>inline variables eliminate the main obstacle to packaging C++ code as header-only libraries</em>. Library authors can now include variables (even those requiring dynamic initialization or non-constexpr objects) directly in headers without forcing users to link an additional translation unit for definitions or using less desirable patterns.</p>
<p>Additionally, inline variables were a natural extension of the meaning of the <code>inline</code> keyword. Over time, the primary meaning of <code>inline</code> in C++ has shifted from an optimization hint (&ldquo;please inline-expand this function&rdquo;) to an ODR mechanism (&ldquo;this function/variable can have multiple definitions across TUs&rdquo;) (<a href="https://en.cppreference.com/w/cpp/language/inline#:~:text=shared%20statics%20listed%20above">inline specifier - cppreference.com</a>). Given that inline functions had proven useful to avoid ODR issues for functions defined in headers, it was logical to extend the same facility to variables.</p>
<p><strong>Static Class Member Improvement:</strong> C++17 inline variables also improved the situation for static class members. Before C++17, if you had a static data member of a class, you typically had to define it in a single .cpp file if it was odr-used. C++11 <code>constexpr</code> static members could be defined in-class, but only for literal types and still had restrictions. With C++17, you can declare a static data member as <code>inline</code> inside the class definition, which means you no longer need a separate out-of-class definition for it. This change was introduced to streamline class definitions and remove the need for a redundant definition in an implementation file. (For example, <code>struct Config { inline static std::string name = &quot;default&quot;; };</code> is now valid and defines <code>Config::name</code> in the header. In C++14, one would have needed to also write <code>std::string Config::name;</code> in a .cpp file in addition to the in-class declaration.)</p>
<p>In summary, inline variables were introduced to <strong>simplify code structure, enable header-only designs, and resolve awkward special cases</strong> where the language previously required out-of-line definitions. They save developer effort and reduce potential for error by allowing a more intuitive placement of definitions (directly where the variable is declared, even if that&rsquo;s a header).</p>
<h2 id="how-do-inline-variables-work">How Do Inline Variables Work?</h2>
<p>From a language semantics perspective, an inline variable has some specific rules that govern its behaviour, especially in the context of the One Definition Rule:</p>
<ul>
<li><strong>Multiple Identical Definitions:</strong> You can (and in fact, must, if it&rsquo;s used) have the variable defined in every translation unit that uses it, but each definition must be identical. Typically, this means you put the definition in a header file, and include that header wherever needed. The compiler will see a definition in each source file (translation unit), but the linker will treat them as one. This is very similar to how inline functions or templates work.</li>
<li><strong>External Linkage by Default:</strong> An inline variable at namespace scope has external linkage by default (even if it&rsquo;s const). This is a subtle point: normally, a non-inline <code>const</code> at namespace scope has internal linkage unless marked <code>extern</code>. But an <code>inline const</code> variable will have external linkage, because it&rsquo;s meant to be a single shared entity across TUs. This ensures all TUs refer to the same object rather than each having a private copy.</li>
<li><strong>Single Memory Instance:</strong> All translation units refer to the <em>same</em> memory for an inline variable. If you take the address of an inline variable in different object files, you&rsquo;ll get the same address at runtime. The standard guarantees this (the address is one and the same in every translation unit). Under the hood, the linker typically merges the definitions. On many compilers, inline variables are implemented using COMDAT sections or similar mechanisms so that one definition is kept and duplicates are discarded or merged.</li>
<li><strong>ODR Use Requires Definition:</strong> If the variable is ODR-used (for example, you pass it by reference or do anything that requires a symbol for it), you need that inline definition available in that translation unit. If you forget to include the header in one file that uses the variable, you&rsquo;ll get an undefined reference error at link time (because the inline definition wasn&rsquo;t present in that TU). This is analogous to how not including a header with an inline function would cause an undefined function reference.</li>
<li><strong>Initialization</strong>: Inline variables, like other global variables, can be <strong>constant-initialized</strong> (e.g., initialized with a constant expression) or <strong>dynamically initialized</strong> (with a runtime computation or constructor). If an inline variable is constant-initialized (such as a constexpr or literal constant), each translation unit might fold it to a compile-time constant, and no runtime initialization is needed. If it requires dynamic initialization (e.g., calling a non-constexpr constructor or a function), then each translation unit will have code to initialize the variable, but the implementation must ensure it only runs once. Typically, the compiler generates <strong>guard variables</strong> or threadsafe mechanisms to ensure the initialization happens exactly once, even if multiple TUs have a copy of the initialization code. We will discuss this further in the implications section.</li>
</ul>
<p>Let&rsquo;s illustrate how inline variables work with a concrete example.</p>
<h2 id="using-inline-variables-examples">Using Inline Variables: Examples</h2>
<h3 id="inline-variable-in-a-header-global-scope">Inline Variable in a Header (Global Scope)</h3>
<p>Consider a header-only library that needs a global counter variable:</p>
<p><strong><code>counter.h</code>:</strong></p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-cpp" data-lang="cpp"><span style="display:flex;"><span><span style="color:#75715e">#ifndef COUNTER_H
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">#define COUNTER_H
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">inline</span> <span style="color:#66d9ef">int</span> global_counter <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>;  <span style="color:#75715e">// define an inline global variable in header
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#endif
</span></span></span></code></pre></div><p>This header defines an <code>inline int global_counter</code> and initializes it to 0. Because it&rsquo;s marked <code>inline</code>, we are allowed to include this header in multiple source files.</p>
<p>For instance:</p>
<p><strong><code>a.cpp</code>:</strong></p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-cpp" data-lang="cpp"><span style="display:flex;"><span><span style="color:#75715e">#include</span> <span style="color:#75715e">&#34;counter.h&#34;</span><span style="color:#75715e">
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">#include</span> <span style="color:#75715e">&lt;iostream&gt;</span><span style="color:#75715e">
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">void</span> <span style="color:#a6e22e">increment</span>() {
</span></span><span style="display:flex;"><span>    global_counter <span style="color:#f92672">+=</span> <span style="color:#ae81ff">1</span>;  <span style="color:#75715e">// use the inline variable
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>}
</span></span></code></pre></div><p><strong><code>b.cpp</code>:</strong></p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-cpp" data-lang="cpp"><span style="display:flex;"><span><span style="color:#75715e">#include</span> <span style="color:#75715e">&#34;counter.h&#34;</span><span style="color:#75715e">
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">#include</span> <span style="color:#75715e">&lt;iostream&gt;</span><span style="color:#75715e">
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">void</span> <span style="color:#a6e22e">printCounter</span>() {
</span></span><span style="display:flex;"><span>    std<span style="color:#f92672">::</span>cout <span style="color:#f92672">&lt;&lt;</span> <span style="color:#e6db74">&#34;Counter = &#34;</span> <span style="color:#f92672">&lt;&lt;</span> global_counter <span style="color:#f92672">&lt;&lt;</span> std<span style="color:#f92672">::</span>endl;
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>Both <em>a.cpp</em> and <em>b.cpp</em> include the header and thus contain a definition of <code>global_counter</code>. Thanks to the inline specifier, this is not a violation of ODR – the two definitions are allowed as long as they are identical. The program, when linked, will treat <code>global_counter</code> as one variable. If <code>increment()</code> is called and then <code>printCounter()</code> is called, the output will reflect the incremented value. There will be exactly one <code>global_counter</code> alive in the program, shared between the source files.</p>
<p>Without inline variables (in C++14), we would have had to declare <code>extern int global_counter;</code> in <em>counter.h</em> and provide <code>int global_counter = 0;</code> in one source file (and ensure it&rsquo;s linked). Inline variables eliminate that extra step and the potential for mismatch between declaration and definition.</p>
<p><strong>Verification of ODR compliance:</strong> If we tried to define <code>global_counter</code> in two separate source files without <code>inline</code>, the linker would error out with a &ldquo;multiple definition&rdquo; or we&rsquo;d have undefined behaviour. With <code>inline</code>, the definitions are allowed and merged. The C++17 standard guarantees that as long as the definitions are the same and the inline keyword is present, the program behaves as if only one definition exists.</p>
<h3 id="inline-static-data-member-of-a-class">Inline Static Data Member of a Class</h3>
<p>Inline variables also apply to static members of classes. For example:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-cpp" data-lang="cpp"><span style="display:flex;"><span><span style="color:#66d9ef">struct</span> <span style="color:#a6e22e">Config</span> {
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">inline</span> <span style="color:#66d9ef">static</span> <span style="color:#66d9ef">double</span> threshold <span style="color:#f92672">=</span> <span style="color:#ae81ff">1.5</span>;   <span style="color:#75715e">// inline static member
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>    <span style="color:#66d9ef">inline</span> <span style="color:#66d9ef">static</span> <span style="color:#66d9ef">const</span> <span style="color:#66d9ef">char</span><span style="color:#f92672">*</span> name <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;Demo&#34;</span>; <span style="color:#75715e">// inline static constant member
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>};
</span></span></code></pre></div><p>Prior to C++17, if you had <code>struct Config { static double threshold; };</code> you would need to define <code>double Config::threshold = 1.5;</code> in a .cpp file. If <code>threshold</code> was odr-used (for instance, if you took its address or it wasn’t a const literal), you had to supply a definition. Now, by marking it <code>inline</code> inside the class, the definition is provided inline and you do <strong>not</strong> need a separate out-of-class definition. You can include this struct in multiple source files and use <code>Config::threshold</code> or <code>Config::name</code> freely. All translation units will refer to the same <code>Config::threshold</code> variable (again, one merged variable with a single address).</p>
<p>Notably, C++17 also adjusted the rules so that a <code>constexpr</code> static data member is implicitly an inline variable if defined in-class. In earlier standards, <code>constexpr</code> static members still needed an out-of-class definition if they were odr-used. C++17 changed this such that the <code>constexpr</code> specifier on a static data member implies inline, removing the requirement for a separate definition. For namespace-scope <code>constexpr</code> variables, however, the specifier does <em>not</em> automatically imply inline – you would need to explicitly add <code>inline</code> if you want to allow multiple definitions. This means if you have a non-member <code>constexpr</code> in a header used in multiple TUs and you want a single shared object (particularly if its address is taken), you should declare it as <code>inline constexpr</code> to be safe.</p>
<h3 id="inline-variables-vs-extern-vs-static--a-quick-comparison">Inline Variables vs. <code>extern</code> vs. <code>static</code> – A Quick Comparison</h3>
<ul>
<li><strong>Inline vs Extern:</strong> Both solve the multi-definition issue but in different ways. <code>extern</code> avoids multiple definitions by only declaring in the header (no definition), and having one actual definition elsewhere. Inline allows the definition in the header by permitting duplicates. Inline tends to be more convenient for header-only usage, whereas <code>extern</code> requires managing a separate implementation file. Inline also ensures the initializer is present in every TU (which can be important for constant expressions and header-only constants).</li>
<li><strong>Inline vs Static in Header:</strong> A <code>static</code> variable in a header gives each file its own copy (internal linkage), whereas an inline variable is one shared entity (external linkage, merged definition). If you want one global state across the program, static in header fails that goal – each file would increment its own counter, for example, with no cross-talk. Inline achieves a single shared state.</li>
<li><strong>Inline vs non-inline (regular global):</strong> A regular global in a header violates ODR because it would produce multiple external definitions. Inline is the proper way to make it legal. And a regular global defined in a source file (with extern in header) is just the traditional approach that inline variables streamline.</li>
</ul>
<h2 id="benefits-of-inline-variables">Benefits of Inline Variables</h2>
<p>Inline variables bring several benefits to C++ developers, especially those building libraries or large projects:</p>
<ul>
<li><strong>Header-Only Libraries:</strong> As mentioned, the primary benefit is enabling header-only libraries to include variables (not just templates and inline functions) without needing a .cpp file. This makes distribution and usage of libraries easier – users only need to include headers, and everything (classes, functions, <em>and now variables</em>) is taken care of. The feature <em>“eliminate[s] the main obstacle to packaging C++ code as header-only libraries”</em>.</li>
<li><strong>No More Extern Boilerplate:</strong> It removes the need for the <code>extern</code> declaration and separate definition pattern for global variables and static class members. This reduces boilerplate and the chance of mismatches (e.g., forgetting to define an extern, or defining it with a different initial value by accident).</li>
<li><strong>Consistency with Inline Functions:</strong> It completes the symmetry with inline functions. Now that variables can be inline, the mental model of &ldquo;ODR exceptions&rdquo; is easier – both functions and variables follow similar rules. In fact, the language rules for inline variables are effectively the same as for inline functions. This uniformity can make the language easier to teach and understand at an advanced level.</li>
<li><strong>Better Static Member Management:</strong> Inline static data members of classes simplify class definitions, especially for constants or singletons. You can now define static members (even complex ones like <code>std::vector</code> or <code>std::map</code> as a static member) in the header without an extra definition file, which was not possible before. This encourages putting initialization with the declaration, which often makes the code more readable.</li>
<li><strong>Potential for Constant Expressions:</strong> An inline variable can also be <code>constexpr</code> if appropriate. For example, <code>inline constexpr int Answer = 42;</code> in a header is allowed. This provides a single definition that is available for compile-time use in every translation unit, again without needing a separate definition. Essentially, <code>inline constexpr</code> gives you a compile-time constant that&rsquo;s one-per-program, whereas previously one might have relied on <code>constexpr</code> (which had internal linkage if not extern) or static constexpr members.</li>
</ul>
<p>All these benefits come with the important caveat that the definitions must be identical and consistent. When used properly (typically by defining the inline variable in a single header), the compiler/linker ensures ODR is satisfied.</p>
<h2 id="drawbacks-and-considerations">Drawbacks and Considerations</h2>
<p>While inline variables are a powerful addition, developers should be aware of some implications and potential drawbacks:</p>
<ul>
<li>
<p><strong>Global State (Design Concern):</strong> Inline variables make it easier to define global variables, which are sometimes considered a questionable design practice. Herb Sutter half-jokingly called it &ldquo;the bad news&rdquo; that it&rsquo;s easier to define globals now. Just because you <em>can</em> put lots of global variables in headers now doesn’t mean you <em>should</em>. Excessive use of global state can lead to hard-to-maintain code. The feature should be used judiciously – for example, for constants or singletons or configuration that genuinely needs to be globally shared.</p>
</li>
<li>
<p><strong>Initialization Order and Guards:</strong> If an inline variable requires dynamic initialization (i.e., not a constexpr or literal), <strong>each translation unit will have an initialization to run</strong>. C++ already had to handle dynamic initialization order across different translation units, and inline variables add a twist to that. The implementation will ensure the initialization happens only once globally, typically by using thread-safe guard code. As C++ expert Jonathan Wakely explains, <em>&ldquo;Every file that contains the definition and uses it will try to initialize the variable. Even if that happens serially, you still need a way to mark the variable as initialized, so that only the first occurrence will initialize it and later attempts won&rsquo;t do anything. Also, you can have multiple threads before <code>main</code> starts&hellip; multiple pieces of code, all executing before <code>main</code>, all trying to initialize the same variable. That&rsquo;s what the guards are for.&rdquo;</em>. In practice, this means an inline variable with a non-trivial constructor might incur a slight overhead: a once-per-program initialization that is checked in each TU. This overhead is usually negligible, but it is there (similar to how function-local static variables are guarded).</p>
</li>
<li>
<p><strong>ODR Violations Still Possible if Misused:</strong> The inline keyword prevents ODR violations only if used correctly. If two different headers or two versions of a header both declare the same inline variable name differently, the program is ill-formed (ODR violation) with no diagnostic required. This scenario might occur if, for example, you have an inline variable in a header and someone accidentally provides another definition in a different header or source (without inline). In such cases, the protection is off and you may get undefined behaviour. Essentially, you still need to ensure that there is exactly one logical definition of the inline variable across the codebase. Using inline variables doesn’t remove the need for careful design; it only allows the linker to consider multiple instances of that one definition as one entity.</p>
</li>
<li>
<p><strong>Linker and Tooling Support:</strong> In general, modern compilers and linkers handle inline variables well (since C++17 is now well-supported). However, in the early days, there were some linker issues with multiple definitions until toolchains caught up. When using inline variables, one must ensure all object files are compiled as C++17 or later so the semantics are understood. This is more of a transitional concern than a long-term drawback.</p>
</li>
<li>
<p><strong>Difference from <code>constexpr</code> at Namespace Scope:</strong> It&rsquo;s worth noting that a <code>constexpr</code> variable at namespace scope is <strong>not automatically inline</strong> in C++17 (unlike static members). If you want a <code>constexpr</code> in a header to be one entity, you should explicitly mark it <code>inline constexpr</code>. Otherwise, you technically have an ODR violation if it&rsquo;s ODR-used in multiple TUs (though compilers may not complain if you never take its address, since they might treat it as internal linkage due to it being const). This could be confusing to some – the language rule change was subtle. Best practice is to add <code>inline</code> to global <code>constexpr</code> variables defined in headers to clearly indicate your intent.</p>
</li>
<li>
<p><strong>Memory Considerations:</strong> Generally, inline variables don&rsquo;t cost extra memory beyond a normal global. There is still only one instance. The code for initialization might appear in multiple object files, but only one will run. One should be cautious if the initializer is heavy or has side effects – it will run exactly once, but it&rsquo;s easy to forget that it runs at program startup (or on first ODR-use if that&rsquo;s deferred). The order of initialization relative to other globals (inline or not) across translation units can still be complex. C++17’s wording introduces the concept of <em>“partially-ordered”</em> initialization for inline variables: if one inline variable is defined before another in every translation unit where the second appears, their initialization order is deterministic; otherwise, it’s indeterminately sequenced (essentially unpredictable). This is an advanced point, but in simpler terms: you should not rely on the order in which global inline variables in different headers are initialized, unless one is clearly dependent on the other in every compile unit. This is the same advice as for any global initialization in C++.</p>
</li>
<li>
<p><strong>Debugging and Symbol Inspection:</strong> One minor point is that when debugging or inspecting symbols, an inline variable will still appear in each object file&rsquo;s symbol table (often as a weak or COMDAT symbol). Usually the debugger will realize they&rsquo;re the same, but it&rsquo;s something to be aware of – you might see multiple symbol instances for the &ldquo;same&rdquo; variable in raw symbol dumps, all of which actually refer to one merged entity.</p>
</li>
</ul>
<p>In practice, these drawbacks are manageable. The introduction of inline variables was welcomed by most C++ experts, with cautions primarily about not abusing them for unnecessary globals. The benefit of simpler code often outweighs the minor costs.</p>
<h2 id="critical-analysis-and-advanced-notes">Critical Analysis and Advanced Notes</h2>
<p>From a language design perspective, inline variables filled a gap in C++&rsquo;s support for <em>DRY (Don&rsquo;t Repeat Yourself)</em> principles in the context of global state and constants. By letting the programmer provide the initializer in one place (the header) and have that be the one true definition, it reduces redundancy and chances for error. It also makes templates and generic code more powerful, since now you can, for example, have a template class with an inline static member of a complex type and not worry about providing separate definitions per instantiation or violating ODR.</p>
<p>It’s also instructive to compare inline variables with an alternative approach introduced later: <strong>modules</strong> (C++20). C++20 modules address the ODR in a different way – by avoiding redundant definitions through a sealed interface. In a modules world, one might expose a variable from a module interface and define it in the implementation part of the module, and the compiler ensures it&rsquo;s treated as one definition. However, not all code uses modules yet, and inline variables remain useful even in modular code (especially for header-only module interfaces). In some sense, inline variables were a bridge between the header-only world of C++17 and the module world of C++20+, easing some ODR pains in the interim and beyond.</p>
<p>Another advanced consideration is combining <code>inline</code> with <code>constexpr</code> and the new C++20 keyword <code>constinit</code>. If you have an inline variable that you want to guarantee is initialized at compile-time (and avoid any runtime initialization or the associated guard), you can use <code>constexpr</code> (if it’s a constant expression) or mark it with <code>constinit</code> in C++20 to enforce that it has static initialization. For example, <code>inline constinit int cacheSize = computeCacheSize();</code> (assuming <code>computeCacheSize()</code> is constexpr or otherwise guarantees static init) would ensure that the initialization does not happen after the program starts running. This can mitigate concerns about initialization order for certain variables.</p>
<h2 id="conclusion-and-future-considerations">Conclusion and Future Considerations</h2>
<p>Inline variables in C++17 represent a significant quality-of-life improvement for C++ developers, particularly those building libraries or maintaining large codebases. They allow developers to define variables in header files in a straightforward way without tripping over the One Definition Rule. This feature brings consistency (treating variables much like inline functions in terms of linkage) and reduces the need for boilerplate and separation of declaration/definition.</p>
<p>We discussed how inline variables work and why they were added: to enable header-only definitions and solve real-world pain points in a type-safe, ODR-compliant manner. We also explored examples demonstrating their use for global variables and static class members, and we analysed their benefits (simpler code, header-only libraries, unified definitions) as well as their drawbacks (potential global abuse, initialization complexity, etc.).</p>
<p>In summary, inline variables make C++ code more expressive and easier to manage, at the cost of some internal complexity that the C++ implementation handles on our behalf. For intermediate and advanced C++ developers, understanding inline variables is important for writing modern C++17 code, especially when designing libraries or APIs. It is now possible to provide well-encapsulated global objects or constants directly in headers with minimal fuss.</p>
<p><strong>Future considerations:</strong> Going forward, features like C++20 modules will further alleviate ODR-related issues by providing alternative ways to distribute definitions. Nonetheless, inline variables will continue to be a useful tool, even in modular code, when one wants a truly global (program-wide) object accessible across translation units. Developers should also pay attention to C++20’s <code>constinit</code> and perhaps future proposals that address initialization order, to combine with inline variables for maximum safety. Another area to watch is guidelines and best practices (such as the C++ Core Guidelines) for global state; as the language makes it easier to declare such state, the guidance on when and how to use it evolves accordingly.</p>
<p>Inline variables may be a small language feature in terms of syntax, but they have a disproportionately positive effect on how we can structure programs. By allowing definitions in headers without ODR pitfalls, C++17 gave us a tool to write cleaner, more maintainable code – just be sure to use it responsibly, keeping in mind the considerations discussed. <strong>Inline variables ensure that “one definition” really can be one <em>logical</em> definition, even if repeated in many places, which is a powerful concept in a language as complex as C++</strong>.</p>
]]></content>
        </item>
        
        <item>
            <title>Fold Expressions in C&#43;&#43;17: Simplifying Variadic Template Code</title>
            <link>https://blog.miguens.one/posts/2025/06/fold-expressions-in-c-17-simplifying-variadic-template-code/</link>
            <pubDate>Wed, 11 Jun 2025 00:00:00 +0000</pubDate>
            
            <guid>https://blog.miguens.one/posts/2025/06/fold-expressions-in-c-17-simplifying-variadic-template-code/</guid>
            <description>&lt;h2 id=&#34;introduction&#34;&gt;Introduction&lt;/h2&gt;
&lt;p&gt;Variadic templates, introduced in C++11, enabled functions and classes to accept an arbitrary number of arguments, but using them often required cumbersome recursion or expansion tricks. C++17 addressed this complexity by introducing &lt;strong&gt;fold expressions&lt;/strong&gt;, which provide a concise way to &lt;strong&gt;reduce (or &amp;ldquo;fold&amp;rdquo;) a parameter pack over a binary operator&lt;/strong&gt; (&lt;a href=&#34;https://en.cppreference.com/w/cpp/language/fold#:~:text=Reduces%20,a%20binary%20operator&#34;&gt;Fold expressions (since C++17) - cppreference.com&lt;/a&gt;). In this article, I explore what fold expressions are, how they simplify variadic template code, and how to use them effectively. I will explain their syntax (unary left/right folds vs. binary folds), demonstrate several examples (summing values, computing logical conjunctions, finding a minimum value), and discuss common use cases, best practices, and pitfalls. The tone is analytical and professional, assuming an intermediate to advanced understanding of C++. By the end, you should have a thorough grasp of fold expressions and be ready to apply them in your modern C++ code.&lt;/p&gt;</description>
            <content type="html"><![CDATA[<h2 id="introduction">Introduction</h2>
<p>Variadic templates, introduced in C++11, enabled functions and classes to accept an arbitrary number of arguments, but using them often required cumbersome recursion or expansion tricks. C++17 addressed this complexity by introducing <strong>fold expressions</strong>, which provide a concise way to <strong>reduce (or &ldquo;fold&rdquo;) a parameter pack over a binary operator</strong> (<a href="https://en.cppreference.com/w/cpp/language/fold#:~:text=Reduces%20,a%20binary%20operator">Fold expressions (since C++17) - cppreference.com</a>). In this article, I explore what fold expressions are, how they simplify variadic template code, and how to use them effectively. I will explain their syntax (unary left/right folds vs. binary folds), demonstrate several examples (summing values, computing logical conjunctions, finding a minimum value), and discuss common use cases, best practices, and pitfalls. The tone is analytical and professional, assuming an intermediate to advanced understanding of C++. By the end, you should have a thorough grasp of fold expressions and be ready to apply them in your modern C++ code.</p>
<h2 id="what-are-fold-expressions">What Are Fold Expressions?</h2>
<p>Fold expressions are a language feature (added in C++17) that automatically expands a parameter pack with a given binary operator, producing a single combined result. In essence, a fold expression applies a binary operator repeatedly to each template argument in a pack, <strong>effectively reducing a pack of values down to one value</strong> (<a href="https://en.cppreference.com/w/cpp/language/fold#:~:text=Reduces%20,a%20binary%20operator">Fold expressions (since C++17) - cppreference.com</a>). The name &ldquo;fold&rdquo; comes from functional programming, where <em>fold</em> (or <em>reduce</em>) operations combine a sequence of elements using a function or operator to produce a single result. C++17 brings this capability into the core language, allowing the compiler to generate the necessary code to combine all arguments, rather than the programmer writing explicit loops or recursive templates.</p>
<p>Before fold expressions, programmers had to expand parameter packs manually. For example, to sum an arbitrary list of numbers, one common approach was to write a recursive variadic template or use an <code>std::initializer_list</code> trick. Such solutions were verbose and error-prone. Fold expressions simplify this by letting <strong>the compiler generate the boilerplate</strong>. As a result, code that accumulates or processes pack arguments becomes shorter, clearer, and less likely to harbor bugs. In this article, <em>I will use first-person pronouns to guide you through understanding and using fold expressions, drawing on my experience to explain their mechanics and nuances in a formal yet approachable manner.</em></p>
<h2 id="syntax-and-variants-of-fold-expressions">Syntax and Variants of Fold Expressions</h2>
<p>The C++17 standard defines four forms of fold expressions, distinguished by whether they have an <strong>initial value</strong> and whether the fold is <strong>left-associative</strong> or <strong>right-associative</strong>. The general syntax uses an ellipsis (<code>...</code>) on either the left or right of the parameter pack, optionally with an initial seed value. The four variants are (<a href="https://en.cppreference.com/w/cpp/language/fold#:~:text=,%284">Fold expressions (since C++17) - cppreference.com</a>):</p>
<ol>
<li><strong>Unary left fold:</strong> <code>(... op pack)</code> – the operator <code>op</code> is applied <em>left-associatively</em> across the pack.</li>
<li><strong>Unary right fold:</strong> <code>(pack op ...)</code> – the operator is applied <em>right-associatively</em> across the pack.</li>
<li><strong>Binary left fold:</strong> <code>(init op ... op pack)</code> – like a left fold but with an initial value <code>init</code> that is placed to the left of the pack.</li>
<li><strong>Binary right fold:</strong> <code>(pack op ... op init)</code> – like a right fold but with an initial value on the right of the pack.</li>
</ol>
<p>In these forms, <em>pack</em> is an expression containing the parameter pack (the expanded variadic arguments), <em>op</em> is the binary operator used for folding, and <em>init</em> is an initial value (an expression that does <strong>not</strong> contain the pack) (<a href="https://en.cppreference.com/w/cpp/language/fold#:~:text=op%20,cast%20at%20the%20top%20level">Fold expressions (since C++17) - cppreference.com</a>). Importantly, the opening and closing parentheses around the entire fold expression are <strong>required</strong> by the syntax (<a href="https://en.cppreference.com/w/cpp/language/fold#:~:text=%28formally%2C%20a%20cast">Fold expressions (since C++17) - cppreference.com</a>).</p>
<p>The fold operator <code>op</code> can be any of the 32 allowed binary operators in C++ (for example, <code>+</code>, <code>-</code>, <code>*</code>, <code>/</code>, <code>%</code>, <code>^</code>, <code>&amp;</code>, <code>|</code>, <code>&amp;&amp;</code>, <code>||</code>, <code>==</code>, <code>&lt;</code>, <code>&gt;</code>, <code>&lt;&lt;</code>, <code>&gt;&gt;</code>, the comma <code>,</code>, etc.) (<a href="https://en.cppreference.com/w/cpp/language/fold#:~:text=op%20,unexpanded%20pack%20and%20does%20not">Fold expressions (since C++17) - cppreference.com</a>). In a binary fold (one with an initial value), the same operator must appear on both sides of the ellipsis (<a href="https://en.cppreference.com/w/cpp/language/fold#:~:text=op%20,unexpanded%20pack%20and%20does%20not">Fold expressions (since C++17) - cppreference.com</a>). This means you cannot mix different operators in a single fold expression. For instance, <code>(args + ... - init)</code> is not a valid fold, because the operator to the left of the pack (<code>+</code>) is different from the one to the right (<code>-</code>). Both must be the same in forms 3 and 4.</p>
<p><strong>Associativity (Left vs. Right):</strong> The position of the ellipsis determines how the expression is parenthesised by the compiler. A <em>unary left fold</em> <code>(... op pack)</code> expands to <code>((pack1 op pack2) op pack3) op ... op packN</code> (fully left-associative), whereas a <em>unary right fold</em> <code>(pack op ...)</code> expands to <code>pack1 op (pack2 op (pack3 op ... op packN))</code> (fully right-associative) (<a href="https://en.cppreference.com/w/cpp/language/fold#:~:text=The%20instantiation%20of%20a%20fold,the%20expression%20e%20as%20follows">Fold expressions (since C++17) - cppreference.com</a>). In other words, the left fold combines elements from left to right, and the right fold combines from right to left. For many associative operators (like addition or multiplication), left vs. right fold yields the same result. However, for non-associative or order-dependent operators, the difference is significant.</p>
<p>For example, consider a simple subtraction of a pack of numbers:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-cpp" data-lang="cpp"><span style="display:flex;"><span><span style="color:#75715e">#include</span> <span style="color:#75715e">&lt;iostream&gt;</span><span style="color:#75715e">
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">template</span><span style="color:#f92672">&lt;</span><span style="color:#66d9ef">typename</span>... Args<span style="color:#f92672">&gt;</span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">auto</span> leftFoldSubtract(Args... args) {
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">return</span> (... <span style="color:#f92672">-</span> args);  <span style="color:#75715e">// unary left fold
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">template</span><span style="color:#f92672">&lt;</span><span style="color:#66d9ef">typename</span>... Args<span style="color:#f92672">&gt;</span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">auto</span> rightFoldSubtract(Args... args) {
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">return</span> (args <span style="color:#f92672">-</span> ...);  <span style="color:#75715e">// unary right fold
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">int</span> <span style="color:#a6e22e">main</span>() {
</span></span><span style="display:flex;"><span>    std<span style="color:#f92672">::</span>cout <span style="color:#f92672">&lt;&lt;</span> leftFoldSubtract(<span style="color:#ae81ff">10</span>, <span style="color:#ae81ff">3</span>, <span style="color:#ae81ff">2</span>) <span style="color:#f92672">&lt;&lt;</span> <span style="color:#e6db74">&#34;</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">&#34;</span>;   <span style="color:#75715e">// (10 - 3) - 2
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>    std<span style="color:#f92672">::</span>cout <span style="color:#f92672">&lt;&lt;</span> rightFoldSubtract(<span style="color:#ae81ff">10</span>, <span style="color:#ae81ff">3</span>, <span style="color:#ae81ff">2</span>) <span style="color:#f92672">&lt;&lt;</span> <span style="color:#e6db74">&#34;</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">&#34;</span>;  <span style="color:#75715e">// 10 - (3 - 2)
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>}
</span></span></code></pre></div><p>In the <code>leftFoldSubtract</code> call, the expansion is <code>((10 - 3) - 2)</code>, which yields <code>5</code>. In <code>rightFoldSubtract</code>, the expansion is <code>10 - (3 - 2)</code>, which yields <code>9</code>. The results differ (<code>5</code> vs <code>9</code>) because subtraction is not associative, so the order of folding matters (<a href="https://www.fluentcpp.com/2021/03/12/cpp-fold-expressions/#:~:text=match%20at%20L216%20Then%20when,Quite%20a%20different%20result">C++ Fold Expressions 101 - Fluent C++</a>). This example illustrates that you must choose left or right folds carefully based on the operation&rsquo;s properties. Generally, for <em>left-associative</em> semantics use the <code>(... op pack)</code> form, and for <em>right-associative</em> semantics use <code>(pack op ...)</code>. (If this reminds you of functional programming, C++&rsquo;s left fold corresponds to Haskell&rsquo;s <code>foldl</code>, and the right fold corresponds to <code>foldr</code> (<a href="https://www.modernescpp.com/index.php/from-variadic-templates-to-fold-expressions/#:~:text=Fold%20expression%20allows%20it%20to,and%20foldr1%20directly%20in%20C">From Variadic Templates to Fold Expressions – MC++ BLOG</a>).)</p>
<p><strong>Initial Values (Binary Folds):</strong> The binary fold variants allow specifying an initial value to be folded in. For instance, <code>(init op ... op pack)</code> will start the fold by combining <code>init</code> with the first element of the pack (for a left fold) or combining the last element of the pack with <code>init</code> (for a right fold). Initial values serve as a <strong>base case</strong> or identity element for the fold. They are especially useful when the parameter pack might be empty, or when you want to ensure a certain result if no arguments are provided. For example, one could define a summation with an initial value 0:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-cpp" data-lang="cpp"><span style="display:flex;"><span><span style="color:#66d9ef">template</span><span style="color:#f92672">&lt;</span><span style="color:#66d9ef">typename</span>... Args<span style="color:#f92672">&gt;</span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">auto</span> sumAll(Args... args) {
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">return</span> (<span style="color:#ae81ff">0</span> <span style="color:#f92672">+</span> ... <span style="color:#f92672">+</span> args);  <span style="color:#75715e">// binary left fold with init = 0
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>}
</span></span></code></pre></div><p>Here <code>0</code> is the initial value, so if <code>sumAll</code> is called with no arguments, the result would just be <code>0</code>. In fact, certain operators have well-defined <em>identity</em> values that make sense as defaults. C++17 fold expressions define that for an empty pack: logical AND (<code>&amp;&amp;</code>) yields <code>true</code> (since true is the identity for AND), logical OR (<code>||</code>) yields <code>false</code>, and the comma operator (<code>,</code>) yields <code>void()</code> (<a href="https://en.cppreference.com/w/cpp/language/fold#:~:text=When%20a%20unary%20fold%20is,the%20following%20operators%20are%20allowed">Fold expressions (since C++17) - cppreference.com</a>). These are the only operators that can fold an empty pack <strong>without</strong> an explicitly provided initial value. For all other operators (e.g. arithmetic ones like <code>+</code> or <code>*</code>), an empty pack without an init is an error, because the compiler wouldn’t know what value to produce. Thus, if there&rsquo;s a possibility of no arguments, you <strong>must provide an initial value</strong> for non-boolean folds (or otherwise ensure at least one argument is present).</p>
<p><strong>Syntax Requirements:</strong> Because fold expressions introduce new syntax, there are a few rules to be aware of:</p>
<ul>
<li>You must enclose the fold expression in parentheses. For example, <code>return ... + args;</code> (without parentheses) is invalid, whereas <code>return (... + args);</code> is correct.</li>
<li>If either the pack expression or the initial expression contains an operator with lower precedence than the fold operator, you should parenthesise that sub-expression to avoid parsing issues (<a href="https://en.cppreference.com/w/cpp/language/fold#:~:text=If%20the%20expression%20used%20as,level%2C%20it%20must%20be%20parenthesized">Fold expressions (since C++17) - cppreference.com</a>). For instance, writing <code>(args + ... + 1 * 2)</code> is problematic because the multiplication <code>1 * 2</code> has lower precedence than <code>+</code> and confuses the parser; it should be written as <code>(args + ... + (1 * 2))</code> (<a href="https://en.cppreference.com/w/cpp/language/fold#:~:text=int%20sum%28Args%26%26...%20args%29%20,%2F%2F%20OK">Fold expressions (since C++17) - cppreference.com</a>). In practice, a good rule is to <strong>put parentheses around sub-expressions</strong> inside a fold expression unless they are simple variables or literals.</li>
</ul>
<p>Having covered the syntax and structure of fold expressions, let&rsquo;s move on to some concrete examples demonstrating how folds can simplify code for various common tasks.</p>
<h2 id="examples-and-use-cases-of-fold-expressions">Examples and Use Cases of Fold Expressions</h2>
<p>Fold expressions shine in scenarios where a pack of arguments needs to be combined or processed in a uniform way. Below are several illustrative examples using different operators: summing numbers, computing a logical conjunction (testing if all conditions are true), and finding a minimum value. These examples use only the C++ standard library and language features.</p>
<h3 id="summation-of-a-parameter-pack">Summation of a Parameter Pack</h3>
<p>Perhaps the simplest use of a fold is summing a list of values. Without fold expressions, you might implement a <code>sum</code> function via recursion or overloaded initializer lists. With C++17, it becomes almost trivial:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-cpp" data-lang="cpp"><span style="display:flex;"><span><span style="color:#66d9ef">template</span><span style="color:#f92672">&lt;</span><span style="color:#66d9ef">typename</span>... Args<span style="color:#f92672">&gt;</span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">auto</span> sum(Args... args) {
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">return</span> (... <span style="color:#f92672">+</span> args);
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>This single line returns the sum of all values in <code>args...</code> by folding the <code>+</code> operator over the parameter pack. It is a <strong>unary left fold</strong> – equivalent to writing <code>(((arg1 + arg2) + arg3) + ... + argN)</code>. The C++ Core Guidelines note this approach as <em>good and much more flexible</em> than using C-style varargs or manual recursion (<a href="https://cpp-core-guidelines-docs.vercel.app/functions#:~:text=template">F: Functions – C++</a>). For example, <code>sum(3, 5, 10)</code> will yield <code>18</code>, and <code>sum(3.14, 2.718, 1.0)</code> will yield approximately <code>6.858</code>. The template will work for any types that support the <code>+</code> operator (and where the + operation is associative enough for summation to make sense).</p>
<p>It&rsquo;s worth mentioning that if <code>Args...</code> is empty, the above <code>sum</code> function would not compile (since there&rsquo;s nothing to fold and <code>+</code> has no identity defined in C++). If we wanted <code>sum()</code> (with no arguments) to return 0, we could provide an initial value: for instance, <code>return (0 + ... + args);</code> as shown earlier. In most cases, though, one would simply avoid calling <code>sum</code> with no arguments or handle it separately. The key takeaway is that <strong>fold expressions drastically simplify variadic accumulation logic</strong>: the compiler generates the cascade of <code>+</code> operations for us. This improves both clarity and safety, as there&rsquo;s no recursion or pack-unpacking boilerplate to get wrong.</p>
<h3 id="logical-conjunction-all-true">Logical Conjunction (All True)</h3>
<p>Another common scenario is determining if a condition holds for <strong>all</strong> arguments in a pack (a logical conjunction of values). For example, we might want to implement a function <code>allTrue(x1, x2, ..., xN)</code> that returns true if <em>every</em> argument is true (or non-zero) and false if any argument is false. Using a fold with the logical AND operator <code>&amp;&amp;</code> makes this straightforward:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-cpp" data-lang="cpp"><span style="display:flex;"><span><span style="color:#66d9ef">template</span><span style="color:#f92672">&lt;</span><span style="color:#66d9ef">typename</span>... Args<span style="color:#f92672">&gt;</span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">bool</span> allTrue(Args... args) {
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">return</span> (... <span style="color:#f92672">&amp;&amp;</span> args);
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>This uses a unary left fold of <code>&amp;&amp;</code> over the pack. It effectively expands to <code>((arg1 &amp;&amp; arg2) &amp;&amp; arg3) &amp;&amp; ... &amp;&amp; argN</code>. The result is <code>true</code> only if every <code>arg</code> in the pack is truthy (convertible to true). If the pack is empty, as mentioned, the fold of <code>&amp;&amp;</code> yields <code>true</code> by definition (since an empty conjunction is true – the identity element for logical AND) (<a href="https://en.cppreference.com/w/cpp/language/fold#:~:text=When%20a%20unary%20fold%20is,the%20following%20operators%20are%20allowed">Fold expressions (since C++17) - cppreference.com</a>). So <code>allTrue()</code> with no arguments would return <code>true</code> (though such a call is probably of limited usefulness).</p>
<p>Let&rsquo;s see it in action. Suppose we call <code>allTrue(true, true, false, true)</code>: inside <code>allTrue</code>, the fold expands to <code>( (true &amp;&amp; true) &amp;&amp; false ) &amp;&amp; true</code> (<a href="https://en.cppreference.com/w/cpp/language/fold#:~:text=template,%26%26%20args%29%3B">Fold expressions (since C++17) - cppreference.com</a>), which simplifies to <code>(true &amp;&amp; false) &amp;&amp; true</code> → <code>false &amp;&amp; true</code> → <code>false</code>. Thus, the function returns <code>false</code> because not all arguments were true. If we call <code>allTrue(1 &lt; 2, 10, std::strcmp(s1, s2) == 0)</code>, it will evaluate each expression and combine them with <code>&amp;&amp;</code> in the same manner. Notably, the fold expression preserves the short-circuit semantics of <code>&amp;&amp;</code>. The expansion is fully parenthesised, but each <code>&amp;&amp;</code> will stop evaluating further operands as soon as one <code>false</code> is encountered, just as in a normal chain of <code>&amp;&amp;</code> operations. (Likewise, folding with <code>||</code> will stop on the first <code>true</code> it encounters.) This short-circuit behaviour can be useful if checking a series of conditions that might be expensive — you get the benefit of stopping early if a condition fails.</p>
<h3 id="computing-the-minimum-value">Computing the Minimum Value</h3>
<p>Folding is not limited to built-in arithmetic or logical reductions; it can also help with more custom computations. As a more advanced example, let&rsquo;s find the <strong>minimum</strong> value in a pack of arguments. C++ does not have a dedicated binary operator for &ldquo;min&rdquo;, but we can utilise the standard library and the comma operator fold to achieve this. One approach is:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-cpp" data-lang="cpp"><span style="display:flex;"><span><span style="color:#75715e">#include</span> <span style="color:#75715e">&lt;algorithm&gt;</span><span style="color:#75715e">  </span><span style="color:#75715e">// for std::min
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">template</span><span style="color:#f92672">&lt;</span><span style="color:#66d9ef">typename</span> T, <span style="color:#66d9ef">typename</span>... Rest<span style="color:#f92672">&gt;</span>
</span></span><span style="display:flex;"><span>T minValue(T head, Rest... tail) {
</span></span><span style="display:flex;"><span>    T minVal <span style="color:#f92672">=</span> head;
</span></span><span style="display:flex;"><span>    ((minVal <span style="color:#f92672">=</span> std<span style="color:#f92672">::</span>min(minVal, tail)), ...);
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">return</span> minVal;
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>Here we take at least one argument (<code>head</code>) and then a parameter pack of the rest. We initialise a variable <code>minVal</code> with the first argument. The fold expression <code>((minVal = std::min(minVal, tail)), ...)</code> uses the comma operator <code>,</code> to expand an assignment operation over each element in <code>tail...</code>. This is a <strong>fold for side effects</strong>: it doesn&rsquo;t directly produce a value (the comma operator&rsquo;s result is discarded in each step, except the last which we don&rsquo;t use), but it updates <code>minVal</code> as a side effect for each argument. After the fold, <code>minVal</code> holds the smallest value encountered. We then return <code>minVal</code>. For example, <code>minValue(5, 2, 8, 1, 4)</code> will return <code>1</code> (the minimum). If we call <code>minValue</code> with only one argument, it simply returns that argument. If we wanted to allow an empty call (no arguments) we would need to provide an initial value and a suitable return type, but in this design we require at least one parameter of type <code>T</code>.</p>
<p>It’s interesting to note how this works: the fold expands something like:</p>
<pre tabindex="0"><code>minVal = std::min(minVal, tail1),
minVal = std::min(minVal, tail2),
...
minVal = std::min(minVal, tailN)
</code></pre><p>with each comma-separated expression executed in order. The result of each comma expression is the result of the rightmost operation (here the assignment), but we aren&rsquo;t using the result value; we only care about the accumulated effect on <code>minVal</code>. This pattern of using a fold with the comma operator is a common idiom to perform an operation for each pack element (such as calling a function for each argument, or updating a state). In our case, it saves us from writing a loop manually. The code is concise yet clear: it initialises <code>minVal</code> and then <em>folds</em> the operation &ldquo;update minVal to the smaller of itself and the next element&rdquo; over all remaining arguments.</p>
<p><strong>Other Use Cases:</strong> Fold expressions are versatile. In addition to the above scenarios, some other common uses include:</p>
<ul>
<li>
<p><strong>Folding over <code>,</code> to execute a function for each argument:</strong> e.g., calling a user-provided function on each argument in a pack (similar to applying <code>std::initializer_list</code> with a braced initializer). For instance, <code>(... , (doSomething(args)))</code> will call <code>doSomething</code> on each <code>args</code>. This can replace loops or recursion for pack processing.</p>
</li>
<li>
<p><strong>Outputting multiple values:</strong> Using the stream insertion operator <code>&lt;&lt;</code> in a fold is a neat way to print a sequence of arguments. For example:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-cpp" data-lang="cpp"><span style="display:flex;"><span><span style="color:#66d9ef">template</span><span style="color:#f92672">&lt;</span><span style="color:#66d9ef">typename</span>... Args<span style="color:#f92672">&gt;</span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">void</span> printAll(Args<span style="color:#f92672">&amp;&amp;</span>... args) {
</span></span><span style="display:flex;"><span>    (std<span style="color:#f92672">::</span>cout <span style="color:#f92672">&lt;&lt;</span> ... <span style="color:#f92672">&lt;&lt;</span> args) <span style="color:#f92672">&lt;&lt;</span> <span style="color:#e6db74">&#34;</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">&#34;</span>;
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>This will fold <code>&lt;&lt;</code> across all arguments, effectively executing <code>std::cout &lt;&lt; arg1 &lt;&lt; arg2 &lt;&lt; ... &lt;&lt; argN</code>, followed by a newline (<a href="https://en.cppreference.com/w/cpp/language/fold#:~:text=void%20printer%28Args%26%26...%20args%29%20,%27%5Cn%27%3B">Fold expressions (since C++17) - cppreference.com</a>). This one-liner replaces writing a loop or multiple <code>&lt;&lt;</code> operations manually.</p>
</li>
<li>
<p><strong>Compile-time checks with <code>constexpr</code> and traits:</strong> You can fold logical operators to assert properties about all types in a pack. For example, <code>static_assert((std::is_integral_v&lt;Args&gt; &amp;&amp; ...), &quot;All types must be integral&quot;);</code> will validate at compile time that <em>every</em> type in the parameter pack <code>Args</code> is an integral type. Similarly, one could use folding with <code>&amp;&amp;</code> or <code>||</code> to implement trait checks like &ldquo;any of the types is trivial&rdquo;, etc.</p>
</li>
<li>
<p><strong>Combining standard library containers or tuples:</strong> While more complex, you can imagine folding over <code>+</code> or <code>+=</code> to concatenate strings or accumulate containers, or even use <code>std::tuple_cat</code> in a fold expression to combine multiple tuples into one. Fold expressions can make such code much cleaner.</p>
</li>
</ul>
<p>In all these cases, the theme is that <strong>fold expressions allow a sequence of operations over a pack to be expressed declaratively</strong> in one expression, rather than procedurally in many lines of code. This often leads to code that is shorter and easier to reason about, once you are comfortable with the fold expression syntax.</p>
<h2 id="best-practices-and-common-pitfalls">Best Practices and Common Pitfalls</h2>
<p>Fold expressions are powerful, but to use them effectively and safely, consider the following best practices and be mindful of some pitfalls:</p>
<ul>
<li>
<p><strong>Prefer fold expressions for simplicity:</strong> If you need to aggregate or process all arguments in a pack, a fold expression is usually the simplest and most expressive solution. It avoids the clunky recursion of pre-C++17 variadic templates and clearly communicates the intent to the compiler (which can also optimise the code better). The C++ Core Guidelines exemplify using folds for tasks like summation as a modern best practice (<a href="https://cpp-core-guidelines-docs.vercel.app/functions#:~:text=template">F: Functions – C++</a>).</p>
</li>
<li>
<p><strong>Understand the operator&rsquo;s identity (neutral element):</strong> Before choosing a fold, consider what should happen if the parameter pack is empty. If using a logical operator like <code>&amp;&amp;</code> or <code>||</code>, the language defines the result for an empty pack (true for <code>&amp;&amp;</code>, false for <code>||</code>) (<a href="https://en.cppreference.com/w/cpp/language/fold#:~:text=When%20a%20unary%20fold%20is,the%20following%20operators%20are%20allowed">Fold expressions (since C++17) - cppreference.com</a>). For other operators, decide on an appropriate identity and use a binary fold with an <code>init</code>. For example, for string concatenation you might use <code>init = &quot;&quot;</code> (empty string), for multiplication use <code>init = 1</code>, and for addition use <code>init = 0</code>. Providing an initial value ensures the fold will compile (and produce the identity) even if no arguments are given.</p>
</li>
<li>
<p><strong>Choose left vs. right fold appropriately:</strong> As demonstrated with subtraction, the outcome can differ based on fold direction if the operator is not associative. Generally, arithmetic and bitwise operations should use left folds (to mimic left-to-right evaluation order as one would naturally write them), unless you have a specific reason for right-associative evaluation. Conversely, some scenarios (like building an expression that naturally nests rightwards) might call for a right fold. Always think through a quick example to verify the fold orientation, especially for operators like <code>-</code>, <code>/</code>, <code>^</code> (xor), or even function calls where order matters.</p>
</li>
<li>
<p><strong>Be mindful of short-circuiting and evaluation order:</strong> For <code>&amp;&amp;</code>, <code>||</code>, and <code>,</code> (comma), the evaluation order is well-defined (left-to-right for <code>&amp;&amp;</code> and <code>||</code>, and left-to-right sequencing for comma). A left fold of <code>&amp;&amp;</code> will evaluate from the first argument to the last, stopping when one is false; a right fold of <code>&amp;&amp;</code> will start evaluation at the first argument as well (due to how it is parenthesised) and also stop on the first false. In practice, both <code>(args &amp;&amp; ... )</code> and <code>(... &amp;&amp; args)</code> evaluate in left-to-right order because of <code>&amp;&amp;</code>&rsquo;s semantics. For most other operators (like <code>+</code>, <code>*</code>), C++17 does <em>not</em> guarantee left-to-right evaluation — but since these are usually used for arithmetic without side effects, it shouldn&rsquo;t matter. If your fold operands have side effects (calling functions, etc.), it&rsquo;s wise to not rely on a specific order unless using <code>&amp;&amp;</code>, <code>||</code>, or <code>,</code> where the order is guaranteed. In critical cases, refactor to separate the side effects from the fold, or use comma operator folds which do guarantee order.</p>
</li>
<li>
<p><strong>Ensure the fold expression is well-parenthesised:</strong> Always wrap the entire fold in parentheses, and when in doubt, parenthesise sub-expressions inside the fold. The compiler will complain if you forget the outer parentheses. For inner expressions, as shown earlier, something like <code>(args + ... + x*y)</code> can cause a parse error; writing <code>(args + ... + (x*y))</code> is the correct approach (<a href="https://en.cppreference.com/w/cpp/language/fold#:~:text=int%20sum%28Args%26%26...%20args%29%20,%2F%2F%20OK">Fold expressions (since C++17) - cppreference.com</a>). The need arises because the ellipsis has lower precedence than almost everything, and the grammar expects the pattern <code>pack op ... op init</code> with those operators at top level. If an <code>init</code> or a part of the pack includes an operator of lower precedence, it must be enclosed in <code>(</code> <code>)</code> to be treated as a single expression in that context.</p>
</li>
<li>
<p><strong>Avoid overly clever folds that harm readability:</strong> While fold expressions can perform astonishing tricks (like the comma-fold trick to retrieve the last element of a pack, or the example to find the minimum using a conditional and comma), not all such code is self-explanatory. Use folds to simplify and clarify code, but if you find yourself writing a very convoluted fold expression, consider if a simple loop or a different approach would be clearer. Modern C++ is about readable <em>and</em> efficient code. A fold expression in itself is quite readable, but chaining multiple different operations in one fold or exploiting short-circuit logic to achieve a side effect (as in some clever one-liners) might confuse readers. When you do use such patterns, add comments or break the steps into separate folds for clarity.</p>
</li>
<li>
<p><strong>Remember that fold expressions only work with binary operators:</strong> You cannot directly fold a function like <code>std::min</code> or a user-defined functor without using one of the allowed operators as a mediator. If you have a custom operation, you may use a lambda or function call inside a fold via the comma operator (as we did with <code>std::min</code> inside the assignment), or consider using <code>std::accumulate</code> or other algorithm if appropriate. In templates, though, folds are often the easiest route as long as you stick to the provided operators.</p>
</li>
</ul>
<p>In summary, stick to the fold expression syntax rules, choose the right form for your needs, and leverage the feature to write cleaner code. Most pitfalls are easy to avoid once you&rsquo;re aware of them, and the benefits in terms of code brevity and clarity are significant.</p>
<h2 id="conclusion">Conclusion</h2>
<p>Fold expressions are a significant addition in C++17 that elevate the expressiveness of variadic templates. By allowing the <strong>automatic expansion of parameter packs with a given operator</strong>, they eliminate the need for tedious boilerplate in many scenarios. I have shown how folds can handle summation, logical checks, and even computing a minimum, all with very succinct code. Adopting fold expressions can both simplify your implementations and improve performance (by making the intent clear to the compiler, enabling better optimisations) (<a href="https://www.modernescpp.com/index.php/from-variadic-templates-to-fold-expressions/#:~:text=A%20fold%20expression%20applies%20a,operator%20to%20a%20parameter%20pack">From Variadic Templates to Fold Expressions – MC++ BLOG</a>).</p>
<p>From a stylistic perspective, fold expressions encourage a more <em>declarative</em> style of coding in C++ template metaprogramming: you state <em>what</em> reduction to perform, and the language takes care of <em>how</em> to expand it across all arguments. This leads to code that is often closer to the problem statement (e.g., &ldquo;return the sum of all args&rdquo;) and avoids the risk of off-by-one errors or recursion mistakes in manual expansions.</p>
<p>As with any powerful feature, it pays to understand the subtleties — such as how left vs. right association works and when to provide an initial value. Once these are mastered, fold expressions become an indispensable tool in the modern C++ toolkit, allowing us to write code that is both elegant and efficient. I encourage you to refactor some of your variadic template code using folds and experience the improvement. The examples and guidelines provided here should serve as a solid foundation for using fold expressions confidently in your own projects.</p>
<h2 id="references">References</h2>
<ol>
<li>
<p><strong>C++17 Standard (ISO/IEC 14882:2017)</strong> – Fold expressions are defined in section <em>[expr.prim.fold]</em> of the ISO C++17 standard. (See also ISO C++20 [expr.prim.fold] for the same rules.) (<a href="https://en.cppreference.com/w/cpp/language/fold#:~:text=">Fold expressions (since C++17) - cppreference.com</a>) (<a href="https://en.cppreference.com/w/cpp/language/fold#:~:text=,%284">Fold expressions (since C++17) - cppreference.com</a>)</p>
</li>
<li>
<p><strong>cppreference.com:</strong> <em>&ldquo;Fold expressions (since C++17)&rdquo;</em> – an overview of fold expression syntax, explanation, and examples (<a href="https://en.cppreference.com/w/cpp/language/fold#:~:text=,%284">Fold expressions (since C++17) - cppreference.com</a>) (<a href="https://en.cppreference.com/w/cpp/language/fold#:~:text=When%20a%20unary%20fold%20is,the%20following%20operators%20are%20allowed">Fold expressions (since C++17) - cppreference.com</a>).</p>
</li>
<li>
<p><strong>C++ Core Guidelines (F.50)</strong> – use of fold expressions for variadic functions, showing a <code>sum</code> example as a good practice (<a href="https://cpp-core-guidelines-docs.vercel.app/functions#:~:text=template">F: Functions – C++</a>).</p>
</li>
<li>
<p><strong>Grimm, R. (2020). &ldquo;From Variadic Templates to Fold Expressions&rdquo;.</strong> <em>Modernes C++ Blog</em>. – Discusses how fold expressions replace recursive variadic templates and provides examples like computing <code>all()</code> with <code>&amp;&amp;</code> (<a href="https://www.modernescpp.com/index.php/from-variadic-templates-to-fold-expressions/#:~:text=The%20variadic%20templates%20,4">From Variadic Templates to Fold Expressions – MC++ BLOG</a>) (<a href="https://www.modernescpp.com/index.php/from-variadic-templates-to-fold-expressions/#:~:text=A%20fold%20expression%20applies%20a,operator%20to%20a%20parameter%20pack">From Variadic Templates to Fold Expressions – MC++ BLOG</a>).</p>
</li>
<li>
<p><strong>Boccara, J. (2021). &ldquo;C++ Fold Expressions 101&rdquo;.</strong> <em>Fluent C++</em>. – Introductory article explaining fold expressions with examples, focusing on associativity differences (<a href="https://www.fluentcpp.com/2021/03/12/cpp-fold-expressions/#:~:text=We%20can%20also%20make%20the,and%20the%20dot%20dot%20dot">C++ Fold Expressions 101 - Fluent C++</a>) (<a href="https://www.fluentcpp.com/2021/03/12/cpp-fold-expressions/#:~:text=match%20at%20L257%20Then%20one,expression%2C%20inside%20of%20the%20parentheses">C++ Fold Expressions 101 - Fluent C++</a>).</p>
</li>
</ol>
]]></content>
        </item>
        
        <item>
            <title>Introduction to Structured Bindings</title>
            <link>https://blog.miguens.one/posts/2025/06/introduction-to-structured-bindings/</link>
            <pubDate>Tue, 03 Jun 2025 00:00:00 +0000</pubDate>
            
            <guid>https://blog.miguens.one/posts/2025/06/introduction-to-structured-bindings/</guid>
            <description>&lt;h2 id=&#34;introduction&#34;&gt;Introduction&lt;/h2&gt;
&lt;p&gt;Structured bindings, introduced in &lt;strong&gt;C++17&lt;/strong&gt;, allow developers to bind &lt;strong&gt;multiple variables&lt;/strong&gt; to the elements of a tuple-like object in a single, declarative statement. This feature was proposed by Herb Sutter, Bjarne Stroustrup, and Gabriel Dos Reis as part of the C++17 standardisation process. In essence, structured bindings enable &lt;strong&gt;decomposing&lt;/strong&gt; an object (such as an &lt;code&gt;std::tuple&lt;/code&gt;, &lt;code&gt;std::pair&lt;/code&gt;, or a struct) into separate named variables without explicit getters or &lt;code&gt;std::tie&lt;/code&gt;. As Herb Sutter described, it’s &lt;em&gt;“much like &lt;code&gt;std::tie&lt;/code&gt;, except without having to have variables of the correct type already available”&lt;/em&gt;. This simplification enhances both &lt;strong&gt;readability&lt;/strong&gt; and &lt;strong&gt;safety&lt;/strong&gt;, especially when handling multiple return values or complex data structures.&lt;/p&gt;</description>
            <content type="html"><![CDATA[<h2 id="introduction">Introduction</h2>
<p>Structured bindings, introduced in <strong>C++17</strong>, allow developers to bind <strong>multiple variables</strong> to the elements of a tuple-like object in a single, declarative statement. This feature was proposed by Herb Sutter, Bjarne Stroustrup, and Gabriel Dos Reis as part of the C++17 standardisation process. In essence, structured bindings enable <strong>decomposing</strong> an object (such as an <code>std::tuple</code>, <code>std::pair</code>, or a struct) into separate named variables without explicit getters or <code>std::tie</code>. As Herb Sutter described, it’s <em>“much like <code>std::tie</code>, except without having to have variables of the correct type already available”</em>. This simplification enhances both <strong>readability</strong> and <strong>safety</strong>, especially when handling multiple return values or complex data structures.</p>
<p>Before C++17, extracting multiple values from a function or container often required extra boilerplate. For example, retrieving elements from an <code>std::tuple</code> or <code>std::pair</code> typically involved calling <code>std::get&lt;N&gt;</code> or using <code>std::tie</code> with pre-declared variables. Structured bindings eliminate this verbosity by introducing a concise syntax:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-cpp" data-lang="cpp"><span style="display:flex;"><span><span style="color:#66d9ef">auto</span> [name1, name2, ..., nameN] <span style="color:#f92672">=</span> expression;
</span></span></code></pre></div><p>This single line creates <code>name1, name2, ..., nameN</code> as new variables bound to the respective elements of <code>expression</code>. In the following sections, we will compare traditional unpacking approaches with structured bindings, discuss how the feature works under the hood, and analyse its benefits and limitations for modern C++ development.</p>
<h2 id="traditional-unpacking-vs-structured-bindings">Traditional Unpacking vs. Structured Bindings</h2>
<p>To appreciate structured bindings, let us first consider how developers used to unpack multiple values before C++17. Common techniques included using <code>std::tie</code> or manually accessing members. Below is a typical example with <code>std::pair</code> (such as the result of inserting into an STL container):</p>
<p><strong>Pre-C++17 approach (without structured bindings):</strong></p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-cpp" data-lang="cpp"><span style="display:flex;"><span>std<span style="color:#f92672">::</span>set<span style="color:#f92672">&lt;</span><span style="color:#66d9ef">int</span><span style="color:#f92672">&gt;</span> mySet;
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">auto</span> result <span style="color:#f92672">=</span> mySet.insert(<span style="color:#ae81ff">42</span>);
</span></span><span style="display:flex;"><span><span style="color:#75715e">// `result` is a std::pair&lt;iterator, bool&gt;
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>std<span style="color:#f92672">::</span>set<span style="color:#f92672">&lt;</span><span style="color:#66d9ef">int</span><span style="color:#f92672">&gt;::</span>iterator it <span style="color:#f92672">=</span> result.first;
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">bool</span> inserted <span style="color:#f92672">=</span> result.second;
</span></span></code></pre></div><p>In this C++14 snippet, we manually extract the <code>first</code> and <code>second</code> from the <code>pair</code>. Alternatively, one might use <code>std::tie</code> to avoid explicitly naming the <code>std::pair</code> type:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-cpp" data-lang="cpp"><span style="display:flex;"><span>std<span style="color:#f92672">::</span>set<span style="color:#f92672">&lt;</span><span style="color:#66d9ef">int</span><span style="color:#f92672">&gt;</span> mySet;
</span></span><span style="display:flex;"><span>std<span style="color:#f92672">::</span>set<span style="color:#f92672">&lt;</span><span style="color:#66d9ef">int</span><span style="color:#f92672">&gt;::</span>iterator it;
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">bool</span> inserted;
</span></span><span style="display:flex;"><span>std<span style="color:#f92672">::</span>tie(it, inserted) <span style="color:#f92672">=</span> mySet.insert(<span style="color:#ae81ff">42</span>);
</span></span></code></pre></div><p>However, <code>std::tie</code> still requires <code>it</code> and <code>inserted</code> to be declared beforehand, and it relies on the <code>std::tuple</code> assignment protocol. Both of these approaches, while functional, are somewhat <strong>verbose</strong> and error-prone (e.g., it&rsquo;s easy to mismatch types or forget to handle one of the elements).</p>
<p><strong>With C++17 structured bindings, the same logic becomes simpler and clearer:</strong></p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-cpp" data-lang="cpp"><span style="display:flex;"><span>std<span style="color:#f92672">::</span>set<span style="color:#f92672">&lt;</span><span style="color:#66d9ef">int</span><span style="color:#f92672">&gt;</span> mySet;
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">auto</span> [it, inserted] <span style="color:#f92672">=</span> mySet.insert(<span style="color:#ae81ff">42</span>);
</span></span></code></pre></div><p>Here, <code>it</code> and <code>inserted</code> are automatically deduced to the correct types (an <code>iterator</code> and a <code>bool</code> respectively) and bound to the elements of the returned <code>std::pair</code>. The code is not only shorter (one line instead of three or more) but also <strong>self-documenting</strong> – the reader immediately sees that <code>it</code> and <code>inserted</code> come from the result of <code>mySet.insert(42)</code>.</p>
<p>Let&rsquo;s look at another scenario: a function returning an <code>std::tuple</code>. Traditionally, one might retrieve each tuple element with <code>std::get</code>:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-cpp" data-lang="cpp"><span style="display:flex;"><span>std<span style="color:#f92672">::</span>tuple<span style="color:#f92672">&lt;</span><span style="color:#66d9ef">int</span>, std<span style="color:#f92672">::</span>string, <span style="color:#66d9ef">double</span><span style="color:#f92672">&gt;</span> getData();
</span></span><span style="display:flex;"><span> 
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">auto</span> data <span style="color:#f92672">=</span> getData();
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">int</span> id           <span style="color:#f92672">=</span> std<span style="color:#f92672">::</span>get<span style="color:#f92672">&lt;</span><span style="color:#ae81ff">0</span><span style="color:#f92672">&gt;</span>(data);
</span></span><span style="display:flex;"><span>std<span style="color:#f92672">::</span>string name <span style="color:#f92672">=</span> std<span style="color:#f92672">::</span>get<span style="color:#f92672">&lt;</span><span style="color:#ae81ff">1</span><span style="color:#f92672">&gt;</span>(data);
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">double</span> value     <span style="color:#f92672">=</span> std<span style="color:#f92672">::</span>get<span style="color:#f92672">&lt;</span><span style="color:#ae81ff">2</span><span style="color:#f92672">&gt;</span>(data);
</span></span></code></pre></div><p>Or using <code>std::tie</code>:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-cpp" data-lang="cpp"><span style="display:flex;"><span><span style="color:#66d9ef">int</span> id;
</span></span><span style="display:flex;"><span>std<span style="color:#f92672">::</span>string name;
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">double</span> value;
</span></span><span style="display:flex;"><span>std<span style="color:#f92672">::</span>tie(id, name, value) <span style="color:#f92672">=</span> getData();
</span></span></code></pre></div><p>Both approaches work but add ceremony. With structured bindings, we can decompose the tuple in one go:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-cpp" data-lang="cpp"><span style="display:flex;"><span><span style="color:#66d9ef">auto</span> [id, name, value] <span style="color:#f92672">=</span> getData();  <span style="color:#75715e">// id:int, name:std::string, value:double
</span></span></span></code></pre></div><p>This single declaration unpacks the <code>int</code>, <code>std::string</code>, and <code>double</code> from the tuple returned by <code>getData()</code>, again letting the compiler deduce types. The <strong>difference in clarity</strong> is striking — the structured binding version emphasises what is being extracted without distraction.</p>
<p>Similarly, for user-defined structs with multiple fields, we used to manually assign each field:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-cpp" data-lang="cpp"><span style="display:flex;"><span><span style="color:#66d9ef">struct</span> <span style="color:#a6e22e">Person</span> { std<span style="color:#f92672">::</span>string name; <span style="color:#66d9ef">int</span> age; };
</span></span><span style="display:flex;"><span>Person p{<span style="color:#e6db74">&#34;Alice&#34;</span>, <span style="color:#ae81ff">30</span>};
</span></span><span style="display:flex;"><span>std<span style="color:#f92672">::</span>string personName <span style="color:#f92672">=</span> p.name;
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">int</span> personAge <span style="color:#f92672">=</span> p.age;
</span></span></code></pre></div><p>Using structured bindings, we can decompose <code>Person</code> elegantly:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-cpp" data-lang="cpp"><span style="display:flex;"><span>Person p{<span style="color:#e6db74">&#34;Alice&#34;</span>, <span style="color:#ae81ff">30</span>};
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">auto</span> [personName, personAge] <span style="color:#f92672">=</span> p;
</span></span></code></pre></div><p>This automatically binds <code>personName</code> to <code>p.name</code> and <code>personAge</code> to <code>p.age</code> (assuming <code>Person</code>&rsquo;s members are public). The code is both succinct and expressive.</p>
<p>In summary, structured bindings replace clunkier idioms with a straightforward syntax, enhancing code clarity. Next, we&rsquo;ll delve into <strong>how structured bindings work</strong> and what constraints they have.</p>
<h2 id="how-structured-bindings-work">How Structured Bindings Work</h2>
<p>Under the hood, a structured binding declaration introduces <strong>new variable names</strong> and binds each to a component of an object or array. Formally, <em>“a structured binding declaration introduces all identifiers in the identifier-list as names in the surrounding scope and binds them to subobjects or elements of the object”</em>. The C++17 standard defines structured bindings to operate in three major cases (<a href="https://isocpp.org/files/papers/p0636r0.html#:~:text=P0217R3%2C%20P0615R0%20Structured%20bindings%20,tuple">Changes between C++14 and C++17</a>):</p>
<ol>
<li>
<p><strong>Arrays</strong> – If the initializer expression is an array (including C-style arrays or <code>std::array</code>), the structured binding names are bound to each element of the array.</p>
</li>
<li>
<p><strong>Tuple-like types</strong> – If the type of the initializer supports the <em>tuple protocol</em> (i.e., has a <code>std::tuple_size</code> specialization and accessible <code>get&lt;N&gt;</code> functions), then the object is decomposed via those. This covers standard tuple types (<code>std::tuple</code>, <code>std::pair</code>, <code>std::array</code>) and any custom type for which you provide the appropriate traits. <strong>Example:</strong> <code>auto [first, second] = myPair;</code> will call <code>get&lt;0&gt;(myPair)</code> for <code>first</code> and <code>get&lt;1&gt;(myPair)</code> for <code>second</code>.</p>
</li>
<li>
<p><strong>Structs and classes with public data members</strong> – If neither of the above applies, but the initializer is an object of a non-union class/struct type, <em>and</em> all its non-static data members are <strong>public</strong> (with no base class ambiguities), then each name is bound directly to each data member (<a href="https://isocpp.org/files/papers/p0636r0.html#:~:text=P0217R3%2C%20P0615R0%20Structured%20bindings%20,tuple">Changes between C++14 and C++17</a>). This works essentially for aggregates or simple structs. <strong>Example:</strong> given <code>struct S { int x; double y; };</code>, one can do <code>auto [a, b] = S{42, 3.14};</code> where <code>a</code> binds to <code>x</code> and <code>b</code> to <code>y</code>.</p>
</li>
</ol>
<p>These rules ensure that structured bindings cover a wide range of scenarios: arrays, tuples/pairs, and plain-old-data structs. Notably, if a type is <strong>tuple-like</strong> (case 2), that takes precedence over the public members (case 3). For instance, <code>std::array&lt;int,3&gt;</code> is both an array and has tuple interface; the standard says arrays (case 1) are handled separately, and <code>std::tuple</code> or <code>std::pair</code> go through tuple protocol (case 2). A user-defined struct can also opt into tuple-like behaviour by providing <code>tuple_size</code> and <code>get</code> – more on that shortly.</p>
<p><strong>How the compiler handles it:</strong> When you write <code>auto [x, y, z] = expr;</code>, the compiler essentially does the following behind the scenes:</p>
<ul>
<li>
<p><strong>Introduces a temporary</strong> (with a unique name, often called <code>e</code> in explanations) to hold the value of <code>expr</code>. This ensures that if <code>expr</code> is an rvalue (temporary), it is stored and won’t evaporate immediately. The proposal P0217R3 clarifies that the <em>“introduced variables are, in all cases, references to the value of the initializer”</em>, meaning no unnecessary copies of individual elements are made. If <code>expr</code> is an lvalue, <code>e</code> will be a reference to it; if <code>expr</code> is an rvalue, <code>e</code> will be a new object (typically using move or copy construction from the temporary).</p>
</li>
<li>
<p><strong>Determines the binding method</strong> based on <code>e</code>’s type <code>E</code>:</p>
<ul>
<li>If <code>E</code> is an array type, bind <code>x, y, ...</code> to each array element (by index).</li>
<li>Otherwise, if <code>std::tuple_size&lt;E&gt;</code> is defined (and accessible), use the tuple-like protocol: <code>x</code> is bound to <code>get&lt;0&gt;(e)</code>, <code>y</code> to <code>get&lt;1&gt;(e)</code>, etc..</li>
<li>Otherwise, <code>E</code> must be a class type with public members; then <code>x</code> is bound to the first member, <code>y</code> to the second, and so on, in declaration order.</li>
</ul>
</li>
<li>
<p><strong>Deduces the types</strong> of <code>x, y, z</code> from the type of the components. Because we write <code>auto</code> (possibly qualified with const or reference), the types are deduced automatically. For example, in <code>auto [it, flag] = myMap.insert(value);</code>, if <code>myMap.insert</code> returns a <code>std::pair&lt;iterator,bool&gt;</code>, then <code>it</code> is deduced as <code>iterator</code> and <code>flag</code> as <code>bool</code>.</p>
</li>
</ul>
<p>One subtle detail is that the <code>auto</code> in structured bindings can be qualified. We may write <code>const auto [x, y] = expr;</code> to make the newly introduced variables <code>x</code> and <code>y</code> const, or <code>auto&amp; [x, y] = expr;</code> to have them bind as references. Notably, writing <code>auto&amp;</code> (or <code>const auto&amp;</code>) before the bracket forces the compiler to treat the hidden <code>e</code> as a reference to the initializer. This distinction affects whether the elements are copied or referenced:</p>
<ul>
<li>Using <strong><code>auto [..]</code></strong> will usually copy the elements if <code>expr</code> is an lvalue. (The hidden <code>e</code> becomes a reference to the original, but then each named element is conceptually a copy by value. For many types, compilers can optimise this, and if the object is a temporary, the copy might be elided or occur as part of returning.)</li>
<li>Using <strong><code>auto&amp; [..]</code></strong> (or adding <code>&amp;</code> to specific names in C++20) ensures you truly refer to the original elements without copying. For example, <code>auto&amp; [nameRef, ageRef] = p;</code> will bind <code>nameRef</code> directly to <code>p.name</code> (as a reference) and <code>ageRef</code> to <code>p.age</code>. If <code>p</code> were a temporary, <code>auto&amp;</code> would not be allowed (non-const reference cannot bind to rvalue), so you’d use <code>const auto&amp; [x,y]</code> to bind to a temporary struct or tuple.</li>
</ul>
<p>It’s worth emphasising that structured bindings are purely a compile-time <strong>binding mechanism</strong>; there is no new runtime cost. They leverage existing tuple and struct interfaces. In fact, the C++ committee ensured that implementing structured bindings didn’t require introducing new core language concepts beyond a clever combination of template traits (<code>std::tuple_size</code> and <code>std::tuple_element</code>) and reference binding rules.</p>
<h2 id="examples-of-structured-bindings-in-action">Examples of Structured Bindings in Action</h2>
<p>Let&rsquo;s explore a few code examples to solidify the concept:</p>
<ul>
<li>
<p><strong>Decomposing an <code>std::pair</code>:</strong></p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-cpp" data-lang="cpp"><span style="display:flex;"><span>std<span style="color:#f92672">::</span>map<span style="color:#f92672">&lt;</span><span style="color:#66d9ef">int</span>, std<span style="color:#f92672">::</span>string<span style="color:#f92672">&gt;</span> myMap;
</span></span><span style="display:flex;"><span><span style="color:#75715e">// ... (myMap is populated or used)
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span><span style="color:#66d9ef">auto</span> [iter, success] <span style="color:#f92672">=</span> myMap.insert({<span style="color:#ae81ff">42</span>, <span style="color:#e6db74">&#34;Meaning&#34;</span>});
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">if</span> (success) {
</span></span><span style="display:flex;"><span>    <span style="color:#75715e">// `iter` is an iterator to the new element.
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>    std<span style="color:#f92672">::</span>cout <span style="color:#f92672">&lt;&lt;</span> <span style="color:#e6db74">&#34;Inserted: &#34;</span> <span style="color:#f92672">&lt;&lt;</span> iter<span style="color:#f92672">-&gt;</span>first <span style="color:#f92672">&lt;&lt;</span> <span style="color:#e6db74">&#34; =&gt; &#34;</span> <span style="color:#f92672">&lt;&lt;</span> iter<span style="color:#f92672">-&gt;</span>second <span style="color:#f92672">&lt;&lt;</span> <span style="color:#e6db74">&#34;</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">&#34;</span>;
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>In the insertion result, <code>iter</code> gets the map iterator and <code>success</code> the boolean. Compare this to pre-C++17 code which might use <code>auto pr = myMap.insert(...); auto iter = pr.first; bool success = pr.second;</code> – the structured binding is clearer and less repetitive. It also works seamlessly in an <code>if</code> statement as shown: C++17 allows an <strong>initializer in <code>if</code></strong>, so we can do <code>if (auto [it, ok] = func(); ok) { ... }</code> to both unpack and check a condition in one statement (here checking <code>ok</code>).</p>
</li>
<li>
<p><strong>Iterating through a map with structured bindings:</strong></p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-cpp" data-lang="cpp"><span style="display:flex;"><span>std<span style="color:#f92672">::</span>map<span style="color:#f92672">&lt;</span>std<span style="color:#f92672">::</span>string, <span style="color:#66d9ef">int</span><span style="color:#f92672">&gt;</span> wordCounts <span style="color:#f92672">=</span> { {<span style="color:#e6db74">&#34;hello&#34;</span>, <span style="color:#ae81ff">5</span>}, {<span style="color:#e6db74">&#34;world&#34;</span>, <span style="color:#ae81ff">3</span>} };
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">for</span> (<span style="color:#66d9ef">const</span> <span style="color:#66d9ef">auto</span><span style="color:#f92672">&amp;</span> [word, count] <span style="color:#f92672">:</span> wordCounts) {
</span></span><span style="display:flex;"><span>    std<span style="color:#f92672">::</span>cout <span style="color:#f92672">&lt;&lt;</span> word <span style="color:#f92672">&lt;&lt;</span> <span style="color:#e6db74">&#34; appears &#34;</span> <span style="color:#f92672">&lt;&lt;</span> count <span style="color:#f92672">&lt;&lt;</span> <span style="color:#e6db74">&#34; times</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">&#34;</span>;
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>This range-based for loop uses <code>const auto&amp; [word, count]</code> to unpack each <code>std::pair&lt;const std::string, int&gt;</code> in the map into two variables. This is <strong>much cleaner</strong> than manually accessing <code>pair.first</code> and <code>pair.second</code> inside the loop. Structured bindings integrate perfectly with range-based loops, making code involving associative containers or other pair-like ranges more readable.</p>
</li>
<li>
<p><strong>Decomposing a struct with public members:</strong></p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-cpp" data-lang="cpp"><span style="display:flex;"><span><span style="color:#66d9ef">struct</span> <span style="color:#a6e22e">Result</span> { <span style="color:#66d9ef">double</span> min; <span style="color:#66d9ef">double</span> max; };
</span></span><span style="display:flex;"><span>Result <span style="color:#a6e22e">computeRange</span>(<span style="color:#66d9ef">const</span> std<span style="color:#f92672">::</span>vector<span style="color:#f92672">&lt;</span><span style="color:#66d9ef">double</span><span style="color:#f92672">&gt;&amp;</span> data);
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">if</span> (<span style="color:#66d9ef">const</span> <span style="color:#66d9ef">auto</span> [minVal, maxVal] <span style="color:#f92672">=</span> computeRange(values); minVal <span style="color:#f92672">&lt;</span> <span style="color:#ae81ff">0</span>) {
</span></span><span style="display:flex;"><span>    std<span style="color:#f92672">::</span>cout <span style="color:#f92672">&lt;&lt;</span> <span style="color:#e6db74">&#34;Negative values present, range = &#34;</span> 
</span></span><span style="display:flex;"><span>              <span style="color:#f92672">&lt;&lt;</span> minVal <span style="color:#f92672">&lt;&lt;</span> <span style="color:#e6db74">&#34; to &#34;</span> <span style="color:#f92672">&lt;&lt;</span> maxVal <span style="color:#f92672">&lt;&lt;</span> <span style="color:#e6db74">&#34;</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">&#34;</span>;
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>Here, <code>computeRange</code> returns a <code>Result</code> struct with two public members. The structured binding <code>const auto [minVal, maxVal] = ...</code> extracts them. We even combined it with an <code>if</code> initializer to immediately use <code>minVal</code> in the condition, illustrating a <strong>concise usage pattern</strong> (introduced in C++17) where the scope of <code>minVal</code> and <code>maxVal</code> is limited to the <code>if</code> statement.</p>
</li>
<li>
<p><strong>Custom types with tuple protocol:</strong></p>
<p>Suppose you have a class <code>Point</code> with private coordinates but you want to allow structured binding for it. By providing <code>std::tuple_size</code>, <code>std::tuple_element</code>, and a free function <code>get&lt;&gt;()</code> overload, you can make <code>Point</code> behave like a tuple of three elements:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-cpp" data-lang="cpp"><span style="display:flex;"><span><span style="color:#66d9ef">class</span> <span style="color:#a6e22e">Point</span> {
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">int</span> x_, y_, z_;
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">public</span><span style="color:#f92672">:</span>
</span></span><span style="display:flex;"><span>    Point(<span style="color:#66d9ef">int</span> x, <span style="color:#66d9ef">int</span> y, <span style="color:#66d9ef">int</span> z) <span style="color:#f92672">:</span> x_(x), y_(y), z_(z) {}
</span></span><span style="display:flex;"><span>    <span style="color:#75715e">// ... other members ...
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>};
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">namespace</span> std {
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">template</span><span style="color:#f92672">&lt;&gt;</span> <span style="color:#66d9ef">struct</span> <span style="color:#a6e22e">tuple_size</span><span style="color:#f92672">&lt;</span>Point<span style="color:#f92672">&gt;</span> <span style="color:#f92672">:</span> std<span style="color:#f92672">::</span>integral_constant<span style="color:#f92672">&lt;</span>size_t, <span style="color:#ae81ff">3</span><span style="color:#f92672">&gt;</span> {};
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">template</span><span style="color:#f92672">&lt;&gt;</span> <span style="color:#66d9ef">struct</span> <span style="color:#a6e22e">tuple_element</span><span style="color:#f92672">&lt;</span><span style="color:#ae81ff">0</span>, Point<span style="color:#f92672">&gt;</span> { <span style="color:#66d9ef">using</span> type <span style="color:#f92672">=</span> <span style="color:#66d9ef">int</span>; };
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">template</span><span style="color:#f92672">&lt;&gt;</span> <span style="color:#66d9ef">struct</span> <span style="color:#a6e22e">tuple_element</span><span style="color:#f92672">&lt;</span><span style="color:#ae81ff">1</span>, Point<span style="color:#f92672">&gt;</span> { <span style="color:#66d9ef">using</span> type <span style="color:#f92672">=</span> <span style="color:#66d9ef">int</span>; };
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">template</span><span style="color:#f92672">&lt;&gt;</span> <span style="color:#66d9ef">struct</span> <span style="color:#a6e22e">tuple_element</span><span style="color:#f92672">&lt;</span><span style="color:#ae81ff">2</span>, Point<span style="color:#f92672">&gt;</span> { <span style="color:#66d9ef">using</span> type <span style="color:#f92672">=</span> <span style="color:#66d9ef">int</span>; };
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span><span style="color:#75715e">// Define get&lt;N&gt; for Point:
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span><span style="color:#66d9ef">template</span><span style="color:#f92672">&lt;</span>std<span style="color:#f92672">::</span>size_t I<span style="color:#f92672">&gt;</span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">auto</span> get(<span style="color:#66d9ef">const</span> Point<span style="color:#f92672">&amp;</span> p) {
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">if</span> <span style="color:#a6e22e">constexpr</span> (I <span style="color:#f92672">==</span> <span style="color:#ae81ff">0</span>) <span style="color:#66d9ef">return</span> p.x_; 
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">else</span> <span style="color:#66d9ef">if</span> <span style="color:#a6e22e">constexpr</span> (I <span style="color:#f92672">==</span> <span style="color:#ae81ff">1</span>) <span style="color:#66d9ef">return</span> p.y_;
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">else</span> <span style="color:#66d9ef">if</span> <span style="color:#a6e22e">constexpr</span> (I <span style="color:#f92672">==</span> <span style="color:#ae81ff">2</span>) <span style="color:#66d9ef">return</span> p.z_;
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>Point <span style="color:#a6e22e">pt</span>(<span style="color:#ae81ff">7</span>, <span style="color:#ae81ff">8</span>, <span style="color:#ae81ff">9</span>);
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">auto</span> [px, py, pz] <span style="color:#f92672">=</span> pt;
</span></span><span style="display:flex;"><span>std<span style="color:#f92672">::</span>cout <span style="color:#f92672">&lt;&lt;</span> px <span style="color:#f92672">&lt;&lt;</span> <span style="color:#e6db74">&#34;,&#34;</span> <span style="color:#f92672">&lt;&lt;</span> py <span style="color:#f92672">&lt;&lt;</span> <span style="color:#e6db74">&#34;,&#34;</span> <span style="color:#f92672">&lt;&lt;</span> pz <span style="color:#f92672">&lt;&lt;</span> <span style="color:#e6db74">&#34;</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">&#34;</span>;  <span style="color:#75715e">// Outputs: 7,8,9
</span></span></span></code></pre></div><p>In this example, <code>Point</code> itself didn’t have public members, but by adding the necessary traits and <code>get</code> function, we enabled structured bindings. This technique was demonstrated by Herb Sutter in his trip report for Oulu 2016, where he transformed a class to bind <code>char[]</code> as a <code>string_view</code> for convenience. It shows that <strong>structured bindings are extensible</strong>: you can integrate your own types to work with the structured binding syntax by providing the same interface that <code>std::tuple</code> and <code>std::pair</code> use.</p>
</li>
</ul>
<h2 id="benefits-of-structured-bindings">Benefits of Structured Bindings</h2>
<p>Structured bindings bring several <strong>tangible benefits</strong> to C++ code:</p>
<ul>
<li>
<p><strong>Improved Clarity and Maintainability:</strong> The intent of the code becomes clearer. By giving meaningful names to the elements of a tuple or struct right at the unpacking site, you make the code self-documenting. For example, <code>auto [minVal, maxVal] = range;</code> is immediately understandable, whereas <code>std::get&lt;0&gt;(range)</code> is less obvious without context. This clarity is especially helpful when dealing with multiple return values or key-value pairs. As an added benefit, you cannot accidentally ignore a value without noticing – the structured binding requires you to explicitly provide a name for each element (or use a dummy name if you truly intend to ignore one).</p>
</li>
<li>
<p><strong>Less Boilerplate:</strong> Without structured bindings, you often needed multiple lines of code to extract values. Structured bindings compress that into one declarative line, reducing boilerplate. Fewer lines means fewer opportunities for mistakes. You also avoid repetition of types or function calls. For instance, calling <code>myPair.first</code> and <code>myPair.second</code> repeats the <code>myPair.</code> qualifier; structured binding calls <code>get&lt;0&gt;</code>/<code>get&lt;1&gt;</code> behind the scenes just once and directly gives you the results.</p>
</li>
<li>
<p><strong>Type Safety and Inference:</strong> Because structured bindings work with <code>auto</code>, the compiler deduces the exact types of the new variables. This prevents mismatches that might happen if you manually declared the types. It also naturally handles references and const-correctness when you use <code>auto&amp;</code> or <code>const auto&amp;</code>. In other words, you get the benefit of structured binding <em>and</em> <code>auto</code> type deduction simultaneously, which leads to correct and often optimised code (no unnecessary conversions or copies beyond what’s needed to bind the values).</p>
</li>
<li>
<p><strong>Consistency with Modern C++ Patterns:</strong> Structured bindings align with the trend in modern C++ towards more <strong>declarative code</strong>. They complement other C++17 features like <code>if</code> initializers and integrate well with range-based for loops, as shown earlier. The result is idiomatic and clean C++17 code. Many standard library functions that return multiple values (like <code>map.insert</code>, <code>std::filesystem::path::decompose</code>, etc.) become easier to work with using this feature. Code that was previously cluttered with <code>std::tie</code> or manual structure assignments can be modernised, often leading to more concise algorithms or clearer loop constructs.</p>
</li>
<li>
<p><strong>No Runtime Overhead:</strong> Structured bindings are a compile-time construct. The compiler essentially translates the binding into the equivalent of accessing tuple elements or struct members directly. Thus, there is no performance penalty for using them. In fact, by eliminating unnecessary temporaries or enabling direct reference binding, structured bindings can be as efficient as the manual approach. For example, writing <code>auto&amp; [a, b] = somePair;</code> will bind references to the original pair’s elements without copying, just as if you wrote <code>auto&amp; a = somePair.first; auto&amp; b = somePair.second;</code>. The design choices in the standard (like introduced variables being references to the initializer’s value) ensure that we don&rsquo;t pay for convenience with extra copies.</p>
</li>
<li>
<p><strong>Extensibility:</strong> As we saw with the <code>Point</code> example, developers can extend structured binding support to custom types by providing the right interface (specializing <code>tuple_size</code> and <code>tuple_element</code>, plus a <code>get</code> function). This means you can design your own data types to <em>feel</em> like tuples when unpacked. This could be used, for example, in a geometry library where you want to unpack a <code>Triangle</code> into three <code>Point</code> vertices, or any case where a logical grouping of values can be decomposed. By following the tuple protocol, your types can seamlessly support structured binding syntax, which can make user code more natural.</p>
</li>
</ul>
<h2 id="limitations-and-considerations">Limitations and Considerations</h2>
<p>Despite their usefulness, structured bindings come with certain <strong>limitations and gotchas</strong> that advanced C++ developers should be aware of:</p>
<ul>
<li>
<p><strong>Requires exact matches and specific conditions:</strong> When decomposing, the number of variables in the brackets must exactly equal the number of elements in the object. If you put fewer or more names than elements, the code simply won’t compile. Unlike some scripting languages, C++17 doesn’t provide a built-in mechanism to ignore values (there is no direct equivalent of a &ldquo;wildcard&rdquo;). The common workaround is to name an unused variable (e.g. <code>_</code> or <code>ignore</code>) and simply not use it, possibly marking it <code>[[maybe_unused]]</code> to silence warnings. For example:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-cpp" data-lang="cpp"><span style="display:flex;"><span><span style="color:#66d9ef">auto</span> [id, <span style="color:#75715e">/*unused*/</span> , value] <span style="color:#f92672">=</span> getData(); <span style="color:#75715e">// This is NOT valid C\++ syntax
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">// Instead:
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span><span style="color:#66d9ef">auto</span> [id, ignore, value] <span style="color:#f92672">=</span> getData();
</span></span><span style="display:flex;"><span>(<span style="color:#66d9ef">void</span>)ignore; <span style="color:#75715e">// or [[maybe_unused]] on ignore&#39;s declaration
</span></span></span></code></pre></div><p>Every element must be accounted for. This strictness is usually beneficial (preventing accidental data drop), but it means that if you only care about some of the values, you still need to provide dummy names for the rest. In contrast, <code>std::tie</code> allowed using <code>std::ignore</code> to skip elements, but structured bindings currently have no native skip symbol.</p>
</li>
<li>
<p><strong>Only works in specific contexts:</strong> Structured binding declarations are allowed in block scopes, <code>if</code>/<code>switch</code> initialisers, range-based <code>for</code> loops, and as <code>static</code> local variables. However, you <strong>cannot use structured bindings as function parameters or in lambda captures</strong> (as of C++17/20). For instance, you cannot write <code>void foo(auto [x,y]);</code> to accept a pair as two parameters – the language does not support that form. Similarly, a lambda like <code>[a,b]{ return a+b; }</code> is not a valid capture list to decompose a tuple captured by the lambda. There were proposals (e.g., P0931 in 2018) to extend structured bindings to such contexts, but they were not adopted. The recommended approach is to capture the tuple/pair by value or reference and then perform a structured binding inside the function or lambda body. This limitation might be revisited in future C++ standards, but in the meantime it slightly reduces where you can directly apply the syntax.</p>
</li>
<li>
<p><strong>Works only for certain types without specialisation:</strong> As outlined earlier, structured bindings natively support <em>arrays</em>, <em>tuple-like types</em>, and <em>classes with all-public data members</em>. If you have a type that doesn’t meet these criteria (for example, a class with private members and no <code>get</code> function), structured binding won’t work out-of-the-box. In those cases, you either need to change the type (make members public or provide a custom tuple interface) or avoid structured bindings for that type. The language requires that for the struct binding (case 3), <em>“all of <code>E</code>’s non-static data members shall be public direct members of <code>E</code> or of the same unambiguous public base class of <code>E</code>”</em> and the number of binding variables must match the number of members. Essentially, the class cannot have hidden members or multiple inheritance layers for this to work. This is usually fine for simple structs, but for complex classes (especially those enforcing encapsulation), you’ll have to opt into the tuple protocol to use structured bindings.</p>
</li>
<li>
<p><strong>Potential for code brittleness:</strong> By decomposing an object, your code becomes dependent on the exact <em>structure</em> of that object. If you use structured bindings on a struct and later someone changes that struct (adds or removes a member, or changes access control), all the decomposition declarations might break. For example, if you rely on <code>auto [x,y,z] = someStruct;</code> and a fourth field is added to <code>someStruct</code>, that code will no longer compile until updated. While this is a compile-time failure (which is good, as it won’t silently misbehave), it means refactoring data structures can have wider impact. Similarly, if you structured-bind a <code>std::tuple</code> with a certain arity, you assume that exact arity. This is something to be mindful of in library code or public APIs: exposing a type in a way that people decompose it means you’re subtly committing to its composition (field count and order) as part of the interface. In a sense, structured bindings can <strong>tighten coupling</strong> to the layout of a type. This isn’t necessarily a problem for stable structures (like a pair of clearly distinct concepts, e.g., a coordinate <code>(x,y)</code>), but for more fluid data structures it’s a consideration.</p>
</li>
<li>
<p><strong>No direct customisation point for user-defined binding without std namespace</strong>: To make a user type decomposable via the tuple protocol, you must either add methods <code>get&lt;N&gt;</code> and specializations of <code>tuple_size</code>/<code>tuple_element</code> in the <code>std</code> namespace (as non-intrusively shown above, which technically involves injecting into <code>std</code>), or provide free <code>get&lt;N&gt;</code> functions found via ADL plus those specializations. This is a bit <strong>cumbersome</strong> and touches the <code>std</code> namespace which some projects avoid for customisations. The standard mandated this approach for consistency, but it’s not as simple as, say, adding an interface to your own class directly. There have been discussions about making structured bindings more flexible in this regard (e.g., a <code>tuple_get</code> function or an easier opt-in mechanism), but as of C++20/23, the procedure remains to provide the tuple traits. The good news is that you only need to do this once for a type, and then any code can use structured bindings with it.</p>
</li>
<li>
<p><strong>Lifetime considerations:</strong> A nuanced point is the lifetime of the hidden temporary (the <code>e</code> that holds the initializer). In most cases this is straightforward: if you decompose an rvalue, the lifetime of that rvalue is extended to the lifetime of <code>e</code> (which is the scope of the structured binding). This means it’s safe to use those bound variables within that scope. However, one must be careful not to return references to those variables outside their scope or otherwise assume they outlive the scope. This is no different from normal local variables, but the presence of <code>auto [a,b] = function();</code> might deceive some into thinking <code>a</code> and <code>b</code> came from nowhere, while in reality they are part of a local object. In short, structured bindings do not extend lifetimes beyond what normal variables would. If you need a longer lifetime for the decomposed parts, ensure the original object (or a copy of it) lives as long as needed.</p>
</li>
<li>
<p><strong>Compiler support and feature testing:</strong> All major C++ compilers (GCC, Clang, MSVC, ICC) implemented structured bindings relatively quickly after C++17 was finalised. For instance, GCC 7, Clang 4, and MSVC 2017 (15.3) all support structured bindings. If writing code intended for a range of compiler versions, you might want to check for the feature using the feature test macro <code>__cpp_structured_bindings</code> (introduced with value 201606). By 2025, it&rsquo;s safe to assume any modern compiler is C++17-capable, but it’s a consideration if your code needs to be portable to older systems or strictly freestanding environments (the latter might lack <code>&lt;tuple&gt;</code>, though structured bindings require some support for the tuple interface even in freestanding mode).</p>
</li>
</ul>
<h2 id="conclusion-and-reflections">Conclusion and Reflections</h2>
<p>Structured bindings in C++17 represent a significant step towards more expressive and succinct C++ code. In this post, we explored how they <strong>simplify variable declarations</strong> when unpacking tuples, pairs, and structs, and we examined multiple examples comparing the old and new ways of doing things. From a developer’s standpoint, adopting structured bindings can make code more readable — I personally find that my functions returning multiple values become cleaner to work with, and loops over maps and other structures are easier to write and reason about. These improvements come without runtime cost and with the strong type safety that C++ guarantees.</p>
<p>However, as we have analysed, it’s important to use structured bindings judiciously. They shine in scenarios where the meaning of each element is clear from context (especially when you can name the variables meaningfully), or when interfacing with APIs that naturally return multiple values. In contrast, if overused or used in less obvious cases, they could potentially <strong>obscure</strong> the origin of variables or make future code changes more involved (due to the position-dependent nature of decomposition). Good coding practice involves striking a balance: use structured bindings to replace noisy boilerplate, but continue to encapsulate and abstract where appropriate. For instance, decomposing an object with many fields might not be as maintainable as providing a proper abstraction or named getters for that object.</p>
<p>In terms of <strong>compatibility</strong>, teams moving a codebase from an older standard to C++17 can incrementally refactor certain pieces to use structured bindings. It’s usually straightforward to replace a <code>std::tie</code> or multiple <code>.first/.second</code> accesses with the new syntax. One must just ensure that all team members are comfortable with the feature and that it’s properly documented – a comment like “Using C++17 structured bindings to unpack the result” can help at points of introduction for code readers who might not have seen it before (though by now, structured bindings are well-known in the C++ community). Tools like clang-tidy even have modernisation checks that automatically refactor code to use structured bindings where applicable, which can help in large projects.</p>
<p>Looking ahead, the concept of structured bindings might evolve. There have been proposals to allow them in more places (such as function parameters) and to introduce features like unpacking into parameter packs or ignoring elements more gracefully. These ideas underscore the usefulness of the feature — developers want to use it even more broadly. Whether or not such extensions make it into the language, structured bindings as defined in C++17 have proven to be a powerful tool. They encourage a programming style that cleanly handles composite return types and structured data, which is increasingly common in modern C++ (consider the popularity of returning <code>std::tuple</code> or using structs for multiple returns instead of output parameters).</p>
<p>In conclusion, structured bindings are a welcomed addition to the C++ toolkit, <strong>modernising the way we assign and work with multiple values</strong>. By understanding their mechanics, advantages, and limitations, we can apply them effectively in intermediate and advanced C++ code. Embracing features like this is part of writing idiomatic C++17 and beyond – it leads to code that is both elegant and robust, aligning with the direction of modern C++ development.</p>
<p><strong>Sources:</strong></p>
<ul>
<li>C++17 Standard Papers – Structured Bindings (J. Maurer, H. Sutter et al.): <em>WG21 P0217R3</em> and <em>P0144R2</em>.</li>
<li><em>cppreference.com:</em> Structured Bindings (C++17) – definition and semantics.</li>
<li>Herb Sutter’s blog (2016) – Trip report with structured binding examples.</li>
<li><em>C++ Stories:</em> “C++17 in Details: Code Simplification” by Bartłomiej Filipek – covers structured binding use cases.</li>
<li>Stack Overflow – discussion on struct requirements for structured bindings (user Kerrek SB).</li>
</ul>
]]></content>
        </item>
        
        <item>
            <title>if constexpr in C&#43;&#43;17 – Enabling Compile-Time Conditionals</title>
            <link>https://blog.miguens.one/posts/2025/05/if-constexpr-in-c-17-enabling-compile-time-conditionals/</link>
            <pubDate>Mon, 12 May 2025 00:00:00 +0000</pubDate>
            
            <guid>https://blog.miguens.one/posts/2025/05/if-constexpr-in-c-17-enabling-compile-time-conditionals/</guid>
            <description>&lt;h2 id=&#34;introduction&#34;&gt;Introduction&lt;/h2&gt;
&lt;p&gt;C++17 introduced &lt;strong&gt;&lt;code&gt;if constexpr&lt;/code&gt;&lt;/strong&gt;, a language feature that brings &lt;strong&gt;compile-time conditional logic&lt;/strong&gt; into the core of C++ template programming. This construct – officially known as a &lt;em&gt;constexpr if statement&lt;/em&gt; – allows the compiler to evaluate a condition during compilation and &lt;strong&gt;discard one of the branches&lt;/strong&gt; based on a constant expression (&lt;a href=&#34;https://en.cppreference.com/w/cpp/language/if#:~:text=If%20condition%20yields%20true%2C%20then,true%20is%20discarded&#34;&gt;if statement - cppreference.com&lt;/a&gt;). For intermediate and advanced C++ developers, &lt;code&gt;if constexpr&lt;/code&gt; offers a more &lt;em&gt;natural&lt;/em&gt; way to express conditional code in templates, eliminating much of the verbosity and complexity previously associated with template metaprogramming. This post provides an analytical exploration of &lt;code&gt;if constexpr&lt;/code&gt;: how it works mechanically, how it differs from a traditional runtime &lt;code&gt;if&lt;/code&gt;, comparisons with older techniques (like &lt;code&gt;std::enable_if&lt;/code&gt;, SFINAE, and tag dispatching), illustrative examples, and a critical look at its benefits and limitations.&lt;/p&gt;</description>
            <content type="html"><![CDATA[<h2 id="introduction">Introduction</h2>
<p>C++17 introduced <strong><code>if constexpr</code></strong>, a language feature that brings <strong>compile-time conditional logic</strong> into the core of C++ template programming. This construct – officially known as a <em>constexpr if statement</em> – allows the compiler to evaluate a condition during compilation and <strong>discard one of the branches</strong> based on a constant expression (<a href="https://en.cppreference.com/w/cpp/language/if#:~:text=If%20condition%20yields%20true%2C%20then,true%20is%20discarded">if statement - cppreference.com</a>). For intermediate and advanced C++ developers, <code>if constexpr</code> offers a more <em>natural</em> way to express conditional code in templates, eliminating much of the verbosity and complexity previously associated with template metaprogramming. This post provides an analytical exploration of <code>if constexpr</code>: how it works mechanically, how it differs from a traditional runtime <code>if</code>, comparisons with older techniques (like <code>std::enable_if</code>, SFINAE, and tag dispatching), illustrative examples, and a critical look at its benefits and limitations.</p>
<h2 id="what-is-if-constexpr-and-how-does-it-work">What is <code>if constexpr</code> and How Does It Work?</h2>
<p>The <strong>mechanics of <code>if constexpr</code></strong> are straightforward yet powerful. It behaves similar to an ordinary <code>if</code> statement, with the crucial difference that its condition is evaluated <strong>at compile time</strong>. The condition must be a compile-time constant (a contextually converted constant <code>bool</code> expression) (<a href="https://en.cppreference.com/w/cpp/language/if#:~:text=In%20a%20constexpr%20if%20statement%2C,since%20C%2B%2B23">if statement - cppreference.com</a>). If the condition is <code>true</code>, the compiler <strong>compiles only the “then” branch</strong> and discards the “else” branch; if the condition is <code>false</code>, it discards the “then” branch and compiles the “else” instead (<a href="https://en.cppreference.com/w/cpp/language/if#:~:text=If%20condition%20yields%20true%2C%20then,true%20is%20discarded">if statement - cppreference.com</a>). In other words, one of the two branches is entirely omitted from the compiled code. This is unlike a normal runtime <code>if</code>, where both branches must be <strong>well-formed</strong> (type-correct) and are compiled into the program, with the decision of which branch to execute made at runtime.</p>
<p>To illustrate, consider a simple function template using <code>if constexpr</code>:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-cpp" data-lang="cpp"><span style="display:flex;"><span><span style="color:#75715e">#include</span> <span style="color:#75715e">&lt;type_traits&gt;</span><span style="color:#75715e">
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">#include</span> <span style="color:#75715e">&lt;iostream&gt;</span><span style="color:#75715e">
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">template</span><span style="color:#f92672">&lt;</span><span style="color:#66d9ef">typename</span> T<span style="color:#f92672">&gt;</span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">void</span> printTypeInfo(<span style="color:#66d9ef">const</span> T<span style="color:#f92672">&amp;</span> value) {
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">if</span> <span style="color:#a6e22e">constexpr</span> (std<span style="color:#f92672">::</span>is_integral_v<span style="color:#f92672">&lt;</span>T<span style="color:#f92672">&gt;</span>) {
</span></span><span style="display:flex;"><span>        std<span style="color:#f92672">::</span>cout <span style="color:#f92672">&lt;&lt;</span> <span style="color:#e6db74">&#34;Integral: &#34;</span> <span style="color:#f92672">&lt;&lt;</span> value <span style="color:#f92672">&lt;&lt;</span> <span style="color:#e6db74">&#34;</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">&#34;</span>;
</span></span><span style="display:flex;"><span>    } <span style="color:#66d9ef">else</span> {
</span></span><span style="display:flex;"><span>        std<span style="color:#f92672">::</span>cout <span style="color:#f92672">&lt;&lt;</span> <span style="color:#e6db74">&#34;Non-integral: &#34;</span> <span style="color:#f92672">&lt;&lt;</span> value <span style="color:#f92672">&lt;&lt;</span> <span style="color:#e6db74">&#34;</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">&#34;</span>;
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>In this example, the condition <code>std::is_integral_v&lt;T&gt;</code> is a <code>constexpr</code> boolean determined by the template parameter <code>T</code>. When the compiler instantiates <code>printTypeInfo&lt;int&gt;</code>, the condition is <code>true</code>, so only the first branch (for integrals) is compiled into the function. For <code>printTypeInfo&lt;std::string&gt;</code>, the condition is <code>false</code>, so the integral-handling branch is discarded and only the second branch is compiled. The discarded branch can even contain code that would not compile for the given <code>T</code> – and that code is simply ignored by the compiler for that instantiation. This ability to include type-specific code that is <em>compiled only when applicable</em> is the hallmark of <code>if constexpr</code>.</p>
<p>It is important to note that <strong><code>if constexpr</code> differs from a preprocessor <code>#if</code></strong>. The <code>#if</code> directive operates purely in the preprocessor, blindly including or excluding code before the compiler sees it. In contrast, <code>if constexpr</code> is part of the C++ language proper and still requires <strong>syntactically valid code</strong> in both branches. The compiler will parse and ensure the discarded branch is well-formed at least in terms of syntax (and in some cases, basic semantics) (<a href="https://www.cppstories.com/2018/03/ifconstexpr/#:~:text=,in%20one%20of%20the%20branches">Simplify Code with if constexpr and Concepts in C++17/C++20 - C++ Stories</a>). For example, even if a branch is not taken, the code must not have syntax errors or references to nonexistent symbols. However, any <em>dependent</em> code (such as code that would only be valid for certain types) is not instantiated for the false branch, preventing template instantiation errors. Thus, <code>if constexpr</code> strikes a balance: it <em>discards</em> a branch so that ill-formed code specific to that branch doesn’t cause errors, but it’s not as unrestrained as a macro preprocessor cut-out. Notably, outside of templates (in non-dependent contexts), a discarded branch is still checked fully by the compiler (<a href="https://en.cppreference.com/w/cpp/language/if#:~:text=Outside%20a%20template%2C%20a%20discarded,if%20preprocessing%20directive">if statement - cppreference.com</a>). This means <code>if constexpr</code> is <strong>not</strong> a drop-in replacement for compile-time configuration via <code>#if</code> in every scenario – if used in regular code with a constant false condition, the compiler will skip code generation for that block but will still report errors for clearly invalid code inside it. In summary, <code>if constexpr</code> gives us a <strong>compile-time selection</strong> mechanism within the C++ type system and compilation process, enabling more expressive and safer template code.</p>
<h3 id="compile-time-vs-runtime-if">Compile-Time vs Runtime <code>if</code></h3>
<p>Given the above, we can summarise the <strong>key differences between <code>if constexpr</code> and a traditional <code>if</code></strong>:</p>
<ul>
<li>
<p><strong>Compile-Time Evaluation:</strong> The condition in <code>if constexpr</code> <em>must</em> be a compile-time constant (e.g. a <code>constexpr</code> variable or a trait like <code>std::is_same_v&lt;T, U&gt;</code>). A normal <code>if</code> can take any boolean expression (including runtime values). Attempting to use a non-constant condition in <code>if constexpr</code> will not compile.</p>
</li>
<li>
<p><strong>Discarding Branches:</strong> In a <code>constexpr if</code>, the unused branch is discarded <em>at compile time</em>. The compiler does not generate code for it, and for template instantiations it does not even instantiate templates or evaluate expressions in that branch. By contrast, a regular <code>if</code> always compiles both branches — even if a condition is constant, the standard requires both branches to be well-formed. Only at runtime does a normal <code>if</code> decide which branch to execute (though compilers might optimise out unused branches, they still must be semantically correct in the code).</p>
</li>
<li>
<p><strong>Validity of Code in Branches:</strong> Because <code>if constexpr</code> can discard a branch, it allows us to include code that might not be valid for all types or scenarios, guarded by the appropriate condition. As long as that code is never instantiated for an incompatible type, it’s fine. With an ordinary <code>if</code>, every branch’s code must be valid <strong>in all cases</strong>, or else the program won’t compile. This is why prior to C++17, template metaprogramming tricks were needed — such as SFINAE — to make code <em>appear</em> or <em>disappear</em> depending on types. <code>if constexpr</code> formalises that pattern in a more readable way.</p>
</li>
<li>
<p><strong>Syntax and Scope:</strong> Syntactically, writing <code>if constexpr (condition) { ... } else { ... }</code> is just like an <code>if-else</code>. One subtle difference is that <code>if constexpr</code> <em>still introduces a scope</em> for each branch (just as a normal if-else does), which means you cannot declare a variable inside one branch and use it in the other branch or after the if-statement. Some other languages’ compile-time if (such as D’s <code>static if</code>) do not introduce a new scope (<a href="https://brevzin.github.io/C%5C&#43;&#43;/2019/01/15/if-constexpr-isnt-broken/#:~:text=One%20very%20significant%20thing%20that,28%29%20looks%20like%20this">if constexpr isn&rsquo;t broken | Barry&rsquo;s C++ Blog</a>), but in C++17 each branch is a separate scope block. This can occasionally affect how you structure code (for example, you cannot conditionally add a new member variable to a class with <code>if constexpr</code> – that use case still requires partial specialisation or other techniques).</p>
</li>
</ul>
<h2 id="pre-c17-approaches-to-compile-time-conditional-coding">Pre-C++17 Approaches to Compile-Time Conditional Coding</h2>
<p>Before C++17, achieving the effect of compile-time conditional execution required more convoluted techniques. There was no direct analogue of <code>if constexpr</code>, so template metaprogrammers resorted to patterns like <strong>SFINAE</strong>, <code>std::enable_if</code>, and <strong>tag dispatching</strong> to simulate compile-time branching. These techniques worked, but they were often <em>verbose and harder to follow</em>, effectively encoding “static if” logic in indirect ways. As one modern C++ commentary puts it: <em>“Before C++17, we had a few quite ugly-looking ways to write static if&hellip; you could use tag dispatching or SFINAE. Fortunately, that’s changed, and we can now benefit from if constexpr&hellip;”</em> (<a href="https://www.cppstories.com/2018/03/ifconstexpr/#:~:text=Before%20C%2B%2B17%2C%20we%20had%20a,and%20concepts%20from%20C%2B%2B20">Simplify Code with if constexpr and Concepts in C++17/C++20 - C++ Stories</a>). In this section, we will briefly examine those pre-C++17 approaches and highlight how <code>if constexpr</code> improves upon them.</p>
<ul>
<li>
<p><strong>SFINAE and <code>std::enable_if</code>:</strong> <em>Substitution Failure Is Not An Error (SFINAE)</em> is a core principle of C++ templates that allows the compiler to exclude certain template overloads from consideration if they are ill-formed for a given set of template arguments. Practically, SFINAE was often used via the standard utility <code>std::enable_if</code> (found in <code>&lt;type_traits&gt;</code>). By adding an <code>enable_if</code> condition to a template’s signature, one could enable or disable that overload based on a compile-time predicate. For example, you might write two overloads of a function <code>process()</code> – one that is enabled only if <code>T</code> is an integral type, and another enabled only if <code>T</code> is not integral. The compiler, during overload resolution, would remove the inappropriate one. This achieves a form of <em>static dispatch</em>: only the matching implementation is compiled and chosen. While powerful, SFINAE-based solutions have a reputation for being <strong>difficult to read and write</strong>. The logic of “if this trait holds, use this overload” is not written in the function body, but rather encoded in the type system (often as template parameter defaults or return-type tricks). Error messages for SFINAE failures can be cryptic, and maintaining such code requires careful attention. SFINAE also typically operates at function granularity – enabling or disabling entire overloads – rather than allowing a clean <em>branching logic within one function</em>.</p>
</li>
<li>
<p><strong>Tag Dispatching:</strong> Tag dispatching is another technique to simulate compile-time branching. It involves calling different helper functions or overloads based on <strong>tag types</strong> that carry compile-time information. Typically, one might use <code>std::true_type</code> and <code>std::false_type</code> (from <code>&lt;type_traits&gt;</code>) as tags. For instance, you could write an implementation <code>foo_impl(T, std::true_type)</code> for the case when a condition is true, and <code>foo_impl(T, std::false_type)</code> for the false case, then call <code>foo_impl(x, ConditionTrait&lt;T&gt;{})</code> in the main function. The appropriate overload is resolved at compile time by matching the type of the tag. Tag dispatching achieves the goal but at the cost of extra functions and structures; the intent is not as immediately clear as an <code>if</code> condition in code. It also introduces more symbols and, in some cases, slight overhead (though usually optimised away). Essentially, tag dispatching defers the decision to overload resolution using dummy types, whereas <code>if constexpr</code> allows writing the decision in-place.</p>
</li>
<li>
<p><strong>Compile-Time <code>bool</code> Constants and Partial Specialisation:</strong> Another pattern was to use compile-time boolean constants (like <code>std::integral_constant</code>) or template non-type parameters to choose implementations. For example, one could have a primary template and a partially specialised template class, where the specialisation is selected when a condition is true. This is often how type traits themselves are implemented (using partial specialisation on conditions). Functionally, this is similar to SFINAE, in that the compiler picks a template instantiation based on what’s available. Partial specialisations and explicit specialisations increase code duplication and can make logic less linear to follow.</p>
</li>
</ul>
<p><strong>In summary, prior to C++17, expressing an “if-like” compile-time choice meant</strong> writing multiple overloads or specialisations with enabling conditions, or delegating to internal helper functions via tags. This indirection made code harder to read and maintain. Modern C++ guidance often suggests that <strong><code>if constexpr</code> or concepts (in C++20) should be preferred</strong> where possible, instead of heavy SFINAE metaprogramming (<a href="https://en.cppreference.com/w/cpp/language/sfinae#:~:text=Where%20applicable%2C%20tag%20dispatch%20%2C,preferred%20over%20use%20of%20SFINAE">SFINAE - cppreference.com</a>). The arrival of <code>if constexpr</code> thus addresses a long-standing need: a <em>clear, in-code conditional</em> that the compiler can evaluate during compilation.</p>
<h2 id="if-constexpr-vs-stdenable_if-and-sfinae-example"><code>if constexpr</code> vs. <code>std::enable_if</code> and SFINAE: Example</h2>
<p>To concretely see the difference, let’s compare a simple use case implemented with pre-C++17 techniques and with C++17’s <code>if constexpr</code>. Imagine we want a function <code>get_value()</code> that, given a variable, will return the “pointed-to” value if the argument is a pointer, but return the value itself if it’s not a pointer. In other words, we want to dereference pointers but leave other types unchanged. This is a toy problem, but it nicely demonstrates conditional code based on a type trait.</p>
<h3 id="pre-c17-approach-sfinae-with-stdenable_if">Pre-C++17 Approach (SFINAE with <code>std::enable_if</code>)</h3>
<p>Before C++17, one way to write <code>get_value</code> was to use <strong>two overloads</strong> and <code>std::enable_if</code> to activate the appropriate one:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-cpp" data-lang="cpp"><span style="display:flex;"><span><span style="color:#75715e">#include</span> <span style="color:#75715e">&lt;type_traits&gt;</span><span style="color:#75715e">
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">// Overload for pointer types
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span><span style="color:#66d9ef">template</span> <span style="color:#f92672">&lt;</span><span style="color:#66d9ef">typename</span> T<span style="color:#f92672">&gt;</span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">auto</span> get_value(T ptr) 
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">-&gt;</span> std<span style="color:#f92672">::</span>enable_if_t<span style="color:#f92672">&lt;</span>std<span style="color:#f92672">::</span>is_pointer_v<span style="color:#f92672">&lt;</span>T<span style="color:#f92672">&gt;</span>, <span style="color:#66d9ef">typename</span> std<span style="color:#f92672">::</span>remove_pointer<span style="color:#f92672">&lt;</span>T<span style="color:#f92672">&gt;::</span>type<span style="color:#f92672">&gt;</span> 
</span></span><span style="display:flex;"><span>{
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">return</span> <span style="color:#f92672">*</span>ptr;
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">// Overload for non-pointer types
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span><span style="color:#66d9ef">template</span> <span style="color:#f92672">&lt;</span><span style="color:#66d9ef">typename</span> T<span style="color:#f92672">&gt;</span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">auto</span> get_value(T val) 
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">-&gt;</span> std<span style="color:#f92672">::</span>enable_if_t<span style="color:#f92672">&lt;!</span>std<span style="color:#f92672">::</span>is_pointer_v<span style="color:#f92672">&lt;</span>T<span style="color:#f92672">&gt;</span>, T<span style="color:#f92672">&gt;</span>
</span></span><span style="display:flex;"><span>{
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">return</span> val;
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>Here we define two templates. The first is enabled only if <code>T</code> is a pointer (using the condition in <code>enable_if_t</code>), and it dereferences the pointer. The second is enabled for non-pointers and returns the value directly. The appropriate template is chosen by the compiler. This code works, but notice the ceremony: the condition is not in the function body but in the template signature, and we had to carefully craft two overloads. If the logic had more cases (imagine three or four different type categories), the number of overloads would grow, or we’d need to use nested <code>enable_if</code> conditions or tag dispatching with multiple tags, which complicates things.</p>
<h3 id="modern-c17-approach-if-constexpr-in-one-function">Modern C++17 Approach (<code>if constexpr</code> in one function)</h3>
<p>Now, using <code>if constexpr</code>, we can express the same logic <strong>in a single function template</strong>:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-cpp" data-lang="cpp"><span style="display:flex;"><span><span style="color:#75715e">#include</span> <span style="color:#75715e">&lt;type_traits&gt;</span><span style="color:#75715e">
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">template</span> <span style="color:#f92672">&lt;</span><span style="color:#66d9ef">typename</span> T<span style="color:#f92672">&gt;</span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">auto</span> get_value(T x) {
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">if</span> <span style="color:#a6e22e">constexpr</span> (std<span style="color:#f92672">::</span>is_pointer_v<span style="color:#f92672">&lt;</span>T<span style="color:#f92672">&gt;</span>) {
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">return</span> <span style="color:#f92672">*</span>x;            <span style="color:#75715e">// T is pointer: return the object pointed to
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>    } <span style="color:#66d9ef">else</span> {
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">return</span> x;             <span style="color:#75715e">// T is not a pointer: return the value itself
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>    }
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>This one function template handles both cases. The <code>if constexpr</code> checks <code>std::is_pointer_v&lt;T&gt;</code>, which is a compile-time constant. If true, the <code>return *x;</code> is compiled, and the <code>else</code> branch is discarded; if false, the <code>else</code> branch is compiled and the <code>if</code> branch discarded. Crucially, if <code>T</code> is not a pointer, the <code>return *x;</code> is never compiled – so we don’t get an error for trying to dereference a non-pointer. And if <code>T</code> <em>is</em> a pointer, the <code>return x;</code> in the else branch is discarded (but that would have been fine anyway). The function templates above achieve the same functionality, but the <code>if constexpr</code> version is <strong>more concise and readable</strong>. The intent (“if T is a pointer, do this, otherwise do that”) is plainly visible in the code. This aligns with the advice from experts: <em>“If you can get away with using <code>if constexpr</code> instead of SFINAE, you should certainly do it. It’s way simpler and more readable.”</em> (<a href="https://platis.solutions/blog/2024/01/27/lets-get-comfortable-with-sfinae/#:~:text=match%20at%20L261%20If%20you,way%20simpler%20and%20more%20readable">Tutorial: Let&rsquo;s get comfortable with SFINAE | Dimitris Platis</a>).</p>
<p>It’s worth noting that in the <code>if constexpr</code> version, the compiler deduces the return type of <code>get_value</code> appropriately for each instantiation. For example, <code>get_value&lt;int*&gt;(int* p)</code> will return an <code>int</code> (the pointed type), whereas <code>get_value&lt;double&gt;(double x)</code> returns a <code>double</code>. The C++17 rules specify that the <em>discarded branch’s return statements do not participate in type deduction</em> (<a href="https://en.cppreference.com/w/cpp/language/if#:~:text=If%20condition%20yields%20true%2C%20then,true%20is%20discarded">if statement - cppreference.com</a>). This means there’s no conflict between the types of <code>*x</code> and <code>x</code> – each template instantiation sees only one return. In earlier C++ standards, if you attempted a similar thing with a normal <code>if</code>, both returns would be considered, likely causing a deduction failure or requiring them to have the same type. <code>if constexpr</code> neatly sidesteps that issue.</p>
<h2 id="example-variadic-template-recursion-with-if-constexpr">Example: Variadic Template Recursion with <code>if constexpr</code></h2>
<p>Another common scenario where <code>if constexpr</code> shines is in <strong>ending recursion or choosing between multiple compile-time cases</strong> without needing separate specialisations. Consider a function template to print all arguments passed to it (a simple variadic template example). We want <code>printAll(a, b, c, ...)</code> to print each argument, separated by commas. Implementing this using recursion on parameter packs traditionally required a base case overload. With <code>if constexpr</code>, we can incorporate the recursion stop condition into the function itself:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-cpp" data-lang="cpp"><span style="display:flex;"><span><span style="color:#75715e">#include</span> <span style="color:#75715e">&lt;iostream&gt;</span><span style="color:#75715e">
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">template</span><span style="color:#f92672">&lt;</span><span style="color:#66d9ef">typename</span> T, <span style="color:#66d9ef">typename</span>... Rest<span style="color:#f92672">&gt;</span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">void</span> printAll(<span style="color:#66d9ef">const</span> T<span style="color:#f92672">&amp;</span> first, <span style="color:#66d9ef">const</span> Rest<span style="color:#f92672">&amp;</span>... rest) {
</span></span><span style="display:flex;"><span>    std<span style="color:#f92672">::</span>cout <span style="color:#f92672">&lt;&lt;</span> first;
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">if</span> <span style="color:#a6e22e">constexpr</span> (<span style="color:#66d9ef">sizeof</span>...(rest) <span style="color:#f92672">&gt;</span> <span style="color:#ae81ff">0</span>) {            <span style="color:#75715e">// compile-time check: are there more arguments?
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>        std<span style="color:#f92672">::</span>cout <span style="color:#f92672">&lt;&lt;</span> <span style="color:#e6db74">&#34;, &#34;</span>;
</span></span><span style="display:flex;"><span>        printAll(rest...);                          <span style="color:#75715e">// recursive call with the rest of the pack
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>    }
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>In this code, <code>sizeof...(rest)</code> is a compile-time constant indicating how many arguments remain. If there are more arguments, the <code>if constexpr</code> condition is true and we output a comma and recursively call <code>printAll</code> on the remaining parameters. If <code>sizeof...(rest)</code> is zero (meaning <code>printAll</code> was called with only one argument), the condition is false and the compiler discards the entire <code>if</code> body – notably, it <strong>does not instantiate a recursive call at all</strong> in that case. This means we don’t need to write a separate <code>printAll()</code> overload for the base case of zero arguments. The template will compile for any non-zero pack and stop recursion automatically when done. Without <code>if constexpr</code>, one might attempt a runtime <code>if</code>, but that would still require that the <code>printAll(rest...)</code> call is syntactically present, leading to a compile error when no parameters remain (or necessitating a dummy base function to call). Thanks to <code>if constexpr</code>, the compiler treats the recursive call as <em>discarded code</em> when not needed. This example demonstrates how <code>if constexpr</code> can simplify code by <strong>combining what used to be multiple function overloads into one template</strong>. The intent is clear and maintenance is easier – adding additional logging or formatting can be done in one place.</p>
<h2 id="benefits-of-if-constexpr">Benefits of <code>if constexpr</code></h2>
<p>The introduction of <code>if constexpr</code> has been widely appreciated in the C++ community for several reasons:</p>
<ul>
<li>
<p><strong>Simpler, More Readable Code:</strong> As shown above, many tasks that once required multiple templates or complex metaprogramming now can be written in a straightforward manner. The code’s logic flows almost like normal runtime logic, which makes it easier for humans to read. Even less experienced template programmers can follow an <code>if constexpr</code> branch without having to mentally expand trait logic or recall SFINAE rules. In fact, modern C++ references state that features like tag dispatch and <code>if constexpr</code> are <em>“usually preferred over use of SFINAE”</em> for cleaner code (<a href="https://en.cppreference.com/w/cpp/language/sfinae#:~:text=Where%20applicable%2C%20tag%20dispatch%20%2C,preferred%20over%20use%20of%20SFINAE">SFINAE - cppreference.com</a>).</p>
</li>
<li>
<p><strong>Unified Implementation:</strong> With <code>if constexpr</code>, you often need only <em>one function or class template</em> to handle all cases, rather than splitting functionality across specialisations. This can reduce code duplication. For example, instead of writing separate specialisations of a class for different template parameters, one can write a single class template that contains <code>if constexpr</code> in its constructor or member functions to handle variations. Maintenance improves because there’s a single definition to update for common code, and the divergent parts are embedded as conditional blocks.</p>
</li>
<li>
<p><strong>Greater Safety and Less Error-Prone:</strong> Although template metaprogramming will always have some complexity, <code>if constexpr</code> localises the conditional logic. In older code, a minor mistake in an <code>enable_if</code> condition or a template specialization could lead to puzzling compile errors or unintended function selections. With <code>if constexpr</code>, the failure modes tend to be simpler (e.g. a static assertion inside a false branch firing when you expected a true branch), and the compiler error often points to the specific line in the function rather than an indirect substitution failure. Also, because the unused branch is discarded, you can prevent certain illegal operations from ever being compiled when they don’t apply. This avoids the need for workarounds like dummy template parameters or tricks to make code SFINAE-friendly.</p>
</li>
<li>
<p><strong>Performance (Compile-Time and Run-Time):</strong> In terms of <em>runtime</em> performance, <code>if constexpr</code> incurs <strong>no overhead at all</strong> for the branch that is discarded; it’s completely removed from the compiled binary (just as if it were never written for that instantiation). At runtime, the resulting code has no branching cost for the <code>if constexpr</code> itself – the decision was made during compilation. Compared to some tag dispatch implementations, this can eliminate function call overhead (though most compilers would inline those anyway). In terms of <em>compile-time performance</em>, using <code>if constexpr</code> can sometimes speed up compilation by reducing the number of instantiations (since you need fewer overloads). However, heavy use of template metaprogramming still impacts compile time, and <code>if constexpr</code> is not magic in that regard – it simply streamlines the code the compiler has to process.</p>
</li>
<li>
<p><strong>Replacing Workarounds with Intent-Expressive Code:</strong> Developers used many idioms to simulate compile-time conditionals: partial specialisations, overload sets with <code>enable_if</code>, even abusing the preprocessor in some cases. Now, <code>if constexpr</code> provides a single, intention-revealing construct for conditional instantiation. It aligns C++ with what other languages (such as D or even older ones with static branching) provide, but in a manner that fits C++’s compile-time evaluation model. As one article title aptly put it, <strong>“Farewell SFINAE, welcome if constexpr”</strong>, emphasising the community’s relief at having this cleaner solution (<a href="https://medium.com/@sireanu.roland/farewell-sfinae-welcome-if-constexpr-d405b6ea7b41#:~:text=Farewell%20SFINAE%2C%20welcome%20if%20constexpr,and%20easier%20to%20maintain">Farewell SFINAE, welcome if constexpr | by Sireanu Roland - Medium</a>).</p>
</li>
</ul>
<p>Real-world code has eagerly adopted <code>if constexpr</code>. The feature is not only for toy examples; even the C++ standard library implementation uses it to simplify internals. Instances of <code>if constexpr</code> appear in template-heavy library code to handle traits or different code paths for iterators, enabling more maintainable implementations (<a href="https://www.cppstories.com/2018/03/ifconstexpr/#:~:text=,its%20place%20in%20production%20code">Simplify Code with if constexpr and Concepts in C++17/C++20 - C++ Stories</a>). In summary, the consensus is that <code>if constexpr</code> improves both <strong>readability and maintainability</strong> of template code, and it reduces the mental burden on programmers by allowing a more imperative style for what is still purely compile-time logic.</p>
<h2 id="limitations-and-potential-misuse">Limitations and Potential Misuse</h2>
<p>While <code>if constexpr</code> is a powerful addition, it is not without limitations or caveats. To use it effectively, one should be aware of a few points and potential pitfalls:</p>
<ul>
<li>
<p><strong>Must Have a Compile-Time Condition:</strong> By design, <code>if constexpr</code> only works with a condition that the compiler can evaluate at compile time. This typically means using <code>constexpr</code> variables, template parameters, or type traits. If a programmer mistakenly attempts to use a runtime condition (say, a regular function argument or a non-constexpr global) in an <code>if constexpr</code>, the code simply won’t compile. In practice, this is usually not an issue – its use cases are inherently compile-time decisions – but newcomers sometimes try to use <code>if constexpr</code> in contexts where a normal <code>if</code> is needed.</p>
</li>
<li>
<p><strong>Both Branches Must Be Well-Formed (Syntax and Scope):</strong> Although the <em>content</em> of the unused branch is not compiled, the code still needs to be syntactically correct. The compiler will parse both the true and false branch. If there are blatant syntax errors or if you refer to a name that doesn’t exist at all, you’ll get a compile error even if that branch is discarded. For example:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-cpp" data-lang="cpp"><span style="display:flex;"><span><span style="color:#66d9ef">if</span> <span style="color:#a6e22e">constexpr</span> (false) {
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">int</span> <span style="color:#f92672">*</span>p <span style="color:#f92672">=</span> <span style="color:#ae81ff">42</span>;   <span style="color:#75715e">// error: invalid conversion from int to int*
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>}
</span></span></code></pre></div><p>In a template, if the condition is dependent on a template parameter, the compiler’s instantiation may delay checking inside the false branch. But in non-template code (or if the condition is a known constant), the above invalid code would produce a compile error despite the <code>if constexpr (false)</code> because the compiler still sees an ill-formed definition (<a href="https://en.cppreference.com/w/cpp/language/if#:~:text=Outside%20a%20template%2C%20a%20discarded,if%20preprocessing%20directive">if statement - cppreference.com</a>). Thus, one <strong>cannot use <code>if constexpr</code> to bypass the language’s syntax rules or create truly “optional” code that doesn’t at least parse</strong>. This is unlike a preprocessor block <code>#if 0 ... #endif</code> which the compiler never sees at all. In practice, this means you should only put code in a branch that is valid for the intended case. If some code is <em>never</em> valid for any case, it can’t simply be hidden behind <code>if constexpr</code>; you might instead use template tricks (like a dependent <code>false</code> value) to ensure the branch is dependent and so skipped during instantiation.</p>
</li>
<li>
<p><strong>Not a Replacement for Concepts or Overload Constraints:</strong> <code>if constexpr</code> operates inside function bodies (or in initialiser lists, etc.), but it does not provide a way to constrain <em>which template is chosen</em>. If you need to <em>prevent</em> a template from being instantiated with certain types altogether, SFINAE or C++20 Concepts are more appropriate. For instance, if you want to exclude a template from ever being called with a certain type, an <code>if constexpr</code> with a <code>static_assert(false)</code> in the else branch might trigger a compile error when instantiated, but it’s often clearer to use a <code>static_assert</code> at the top of the function or a concept to outright disable the template for those types. In other words, <code>if constexpr</code> is great for <em>branching implementations</em>, but not designed for <em>overload resolution control</em>. It works in tandem with Concepts in C++20: concepts can constrain <em>which</em> function template is chosen, and inside the function, <code>if constexpr</code> can fine-tune the behaviour further if needed.</p>
</li>
<li>
<p><strong>Potential for Code Bloat or Complexity:</strong> A possible misuse of <code>if constexpr</code> is to create a single monolithic function that handles many different cases via many <code>if constexpr</code> branches. While this is technically fine, it could lead to a function that is lengthy and harder to maintain, essentially inlining what might have been separate logical units. In some scenarios, breaking the logic into smaller functions or using polymorphism could still be a better design. There is a readability trade-off: one big function with many compile-time branches versus multiple specialised functions. The best choice can depend on context. The key is to use <code>if constexpr</code> where it genuinely simplifies the code. If one finds themselves writing a dozen <code>else if constexpr</code> chains, each handling widely different code paths, it might indicate that some of those could be refactored into separate templates or classes. In short, <strong>overusing <code>if constexpr</code> can harm readability</strong> if it becomes a dumping ground for too many cases. As with any powerful feature, moderation and clear organisation are important.</p>
</li>
<li>
<p><strong>Scope and Lifetime Surprises:</strong> Because each branch introduces a scope, be mindful of object lifetimes and declarations. For example, you cannot do <code>if constexpr(...) { Type x; } else { Type x; }</code> and expect <code>x</code> to be accessible after the if – each <code>x</code> is confined to its branch. This is the same as a normal if-statement, but some might expect compile-time branches to behave differently. Additionally, if a branch allocates resources or has side effects (in <code>constexpr</code> functions or such), remember that if it’s discarded, those side effects won’t occur. This is normally obvious, but in <code>constexpr</code> evaluation contexts (like inside a <code>constexpr</code> function that is evaluated at compile time), an <code>if constexpr</code> false branch’s code is not executed at all, which is exactly as intended.</p>
</li>
<li>
<p><strong>Not Applicable Everywhere (No Structural Changes):</strong> One limitation compared to some other languages’ compile-time if is that C++17’s <code>if constexpr</code> cannot appear at class scope to conditionally declare member variables or functions. You cannot, for instance, write a class with an <code>if constexpr</code> inside it to include a member only for certain template parameters – such code wouldn’t compile. You must still use partial class template specialisation or inheritance tricks for that use case. Likewise, you cannot use <code>if constexpr</code> to selectively inherit from a base class or to omit a base class (again, partial specialisation or tag dispatch can help there). So while <code>if constexpr</code> greatly eases function template logic and certain class template methods, it doesn’t 100% eliminate the need for other template metaprogramming techniques in all scenarios. That said, the most common uses (conditional function code and selecting among algorithms or operations) are covered by <code>if constexpr</code>, which significantly reduces the frequency of needing those heavier techniques.</p>
</li>
</ul>
<p>In summary, the limitations of <code>if constexpr</code> are mostly about knowing its scope: it is a compile-time <strong>flow control</strong> inside templates and constexpr functions, not a silver bullet for all conditional template design. Its misuse is uncommon because its syntax naturally guides you to the intended use cases. As long as one remains <em>objective</em> about where it simplifies code and avoids turning it into a sprawling maze of conditions, <code>if constexpr</code> remains a very positive feature in the C++ toolkit.</p>
<h2 id="conclusion-and-future-developments">Conclusion and Future Developments</h2>
<p>The addition of <code>if constexpr</code> in C++17 marked a significant evolution in template metaprogramming. It provides C++ developers with an <strong>expressive, compile-time conditional</strong> that makes template code more akin to ordinary code in terms of readability and structure. We have seen how it differs from traditional runtime <code>if</code> statements by performing decisions at compile time and discarding unused code paths, enabling patterns that were previously handled by tricks like SFINAE, <code>std::enable_if</code>, or tag dispatching. The benefits in clarity and maintainability are well substantiated by examples and have been embraced in modern C++ coding standards (<a href="https://platis.solutions/blog/2024/01/27/lets-get-comfortable-with-sfinae/#:~:text=match%20at%20L261%20If%20you,way%20simpler%20and%20more%20readable">Tutorial: Let&rsquo;s get comfortable with SFINAE | Dimitris Platis</a>). At the same time, we acknowledge that <code>if constexpr</code> doesn’t entirely replace all older techniques – for certain situations like conditional class members or controlling overload sets, one must still use partial specialisations or (better) C++20 Concepts. It’s also important to use this feature judiciously to keep code comprehensible.</p>
<p>Looking beyond C++17, the language has continued to advance compile-time programming capabilities. C++20 introduced <strong>Concepts</strong>, which complement <code>if constexpr</code> by allowing explicit template requirements and cleaner overload resolution. In fact, Concepts can often prevent the instantiation of a template on invalid types altogether, meaning <code>if constexpr</code> might become an internal detail rather than a front-line check. Another C++20 feature, <strong>consteval</strong> (and the related <em>immediate functions</em> concept), along with C++23’s <strong><code>if consteval</code></strong>, allows detection of compile-time evaluation context inside functions. This is a more specialised tool, but it shows the direction: C++ is providing finer control over compile-time vs runtime execution. For instance, <em><code>if consteval</code></em> (C++23) lets a function decide a branch if it’s being executed during compile time, which is useful for writing functions that produce different outcomes or optimisations in constexpr contexts. This works hand-in-hand with <code>if constexpr</code> for advanced metaprogramming scenarios.</p>
<p>We should also expect ongoing developments in <strong>compile-time reflection</strong> and code generation in future C++ standards. Proposals for <em>static reflection</em> (allowing programs to introspect their own structure at compile time) are in the works. If those become reality, one could imagine writing <code>if constexpr</code> conditions that check, say, whether a struct has a certain member variable or how many fields it has, all at compile time, and then branch accordingly – eliminating a lot of manual trait writing. In essence, <code>if constexpr</code> opened the door to more intuitive compile-time logic, and future enhancements will likely build on that foundation.</p>
<p>In conclusion, <code>if constexpr</code> stands as a prime example of modern C++ evolving to make template metaprogramming <strong>more accessible and robust</strong>. It empowers developers to write <em>cleaner</em> and <em>safer</em> code for compile-time decisions, bridging the gap between template magic and everyday coding. Its introduction has been largely successful: code that once required arcane tricks can now be written in a straightforward manner. As with any powerful feature, it comes with rules and gotchas, but those are well-understood and easy to manage with experience. Going forward, C++ programmers can look forward to even more capabilities in constexpr and template metaprogramming, but <code>if constexpr</code> will surely remain a fundamental tool for compile-time conditional logic – a clear win for expressiveness in C++17 and beyond.</p>
<p><strong>References:</strong></p>
<ul>
<li>C++17 standard (ISO/IEC 14882:2017) – §7.1.6 and §8.5 (constexpr and if statements), for the formal specification of <code>if constexpr</code>.</li>
<li>cppreference.com – <em>If statement (constexpr if)</em> (<a href="https://en.cppreference.com/w/cpp/language/if#:~:text=In%20a%20constexpr%20if%20statement%2C,since%20C%2B%2B23">if statement - cppreference.com</a>) (<a href="https://en.cppreference.com/w/cpp/language/if#:~:text=If%20condition%20yields%20true%2C%20then,true%20is%20discarded">if statement - cppreference.com</a>), which concisely describes the rules and behaviour of <code>if constexpr</code>.</li>
<li>cppreference.com – <em>SFINAE</em> (<a href="https://en.cppreference.com/w/cpp/language/sfinae#:~:text=Where%20applicable%2C%20tag%20dispatch%20%2C,preferred%20over%20use%20of%20SFINAE">SFINAE - cppreference.com</a>), noting that modern C++ prefers constructs like <code>if constexpr</code> over the SFINAE pattern in many cases.</li>
<li>“Simplify Code with if constexpr and Concepts” – C++ Stories blog, 2018 (<a href="https://www.cppstories.com/2018/03/ifconstexpr/#:~:text=Before%20C%2B%2B17%2C%20we%20had%20a,and%20concepts%20from%20C%2B%2B20">Simplify Code with if constexpr and Concepts in C++17/C++20 - C++ Stories</a>) (<a href="https://www.cppstories.com/2018/03/ifconstexpr/#:~:text=,in%20one%20of%20the%20branches">Simplify Code with if constexpr and Concepts in C++17/C++20 - C++ Stories</a>), illustrating how <code>if constexpr</code> improves upon earlier techniques and the necessity of code in discarded branches being syntactically valid.</li>
<li>Dimitris Platis, “Tutorial: Let’s get comfortable with SFINAE”, 2024 (<a href="https://platis.solutions/blog/2024/01/27/lets-get-comfortable-with-sfinae/#:~:text=match%20at%20L261%20If%20you,way%20simpler%20and%20more%20readable">Tutorial: Let&rsquo;s get comfortable with SFINAE | Dimitris Platis</a>) – advice highlighting the readability advantage of <code>if constexpr</code> compared to SFINAE.</li>
<li>J. C. (JC) on Medium, <em>“Template metaprogramming or constexpr, a primer&hellip;”</em>, 2019 (<a href="https://medium.com/@joao_vaz/template-metaprograming-or-constexpr-a-primer-and-comparison-in-c-17-beeaf2d7f0af#:~:text=if%20constexpr">Template-metaprograming or constexpr, a primer and comparison in C++17, part 2 | by JC | Medium</a>) – explanation of how <code>if constexpr</code> can exclude code after overload resolution, which is not possible with SFINAE alone.</li>
<li>Barry Revzin, <em>“if constexpr isn’t broken”</em>, 2019 (<a href="https://brevzin.github.io/C%5C&#43;&#43;/2019/01/15/if-constexpr-isnt-broken/#:~:text=Andrei%20Alexandrescu%E2%80%99s%20Meeting%20C%2B%2B%20Keynote,is%20selling%20in%20the%20talk">if constexpr isn&rsquo;t broken | Barry&rsquo;s C++ Blog</a>) (<a href="https://brevzin.github.io/C%5C&#43;&#43;/2019/01/15/if-constexpr-isnt-broken/#:~:text=One%20very%20significant%20thing%20that,28%29%20looks%20like%20this">if constexpr isn&rsquo;t broken | Barry&rsquo;s C++ Blog</a>) – a discussion on the design decisions of <code>if constexpr</code> and comparison with D’s <code>static if</code>, providing insight into the limitations (such as scoping rules) and why they exist.</li>
</ul>
]]></content>
        </item>
        
        <item>
            <title>Concurrency and Multithreading in C&#43;&#43;17</title>
            <link>https://blog.miguens.one/posts/2025/04/concurrency-and-multithreading-in-c-17/</link>
            <pubDate>Tue, 22 Apr 2025 00:00:00 +0000</pubDate>
            
            <guid>https://blog.miguens.one/posts/2025/04/concurrency-and-multithreading-in-c-17/</guid>
            <description>&lt;h2 id=&#34;introduction&#34;&gt;Introduction&lt;/h2&gt;
&lt;p&gt;Concurrent programming allows a C++ program to execute multiple tasks &lt;em&gt;simultaneously&lt;/em&gt; (or at least appear to). In practice, this means breaking a program into &lt;strong&gt;threads&lt;/strong&gt; that run independently. Threads are units of execution that can run concurrently and potentially in parallel on multi-core systems. C++17 builds on the threading facilities introduced in C++11, providing standard tools to create threads, synchronise access to shared data, and avoid race conditions. In this post, we&amp;rsquo;ll explore key multithreading concepts in modern C++: starting threads with &lt;code&gt;std::thread&lt;/code&gt;, using mutual exclusion with &lt;code&gt;std::mutex&lt;/code&gt;, coordinating threads with condition variables (&lt;code&gt;std::condition_variable&lt;/code&gt;), and leveraging atomic operations with &lt;code&gt;std::atomic&lt;/code&gt;. Along the way, we&amp;rsquo;ll look at code examples and discuss best practices to write safe and efficient multi-threaded C++17 code.&lt;/p&gt;</description>
            <content type="html"><![CDATA[<h2 id="introduction">Introduction</h2>
<p>Concurrent programming allows a C++ program to execute multiple tasks <em>simultaneously</em> (or at least appear to). In practice, this means breaking a program into <strong>threads</strong> that run independently. Threads are units of execution that can run concurrently and potentially in parallel on multi-core systems. C++17 builds on the threading facilities introduced in C++11, providing standard tools to create threads, synchronise access to shared data, and avoid race conditions. In this post, we&rsquo;ll explore key multithreading concepts in modern C++: starting threads with <code>std::thread</code>, using mutual exclusion with <code>std::mutex</code>, coordinating threads with condition variables (<code>std::condition_variable</code>), and leveraging atomic operations with <code>std::atomic</code>. Along the way, we&rsquo;ll look at code examples and discuss best practices to write safe and efficient multi-threaded C++17 code.</p>
<p><strong>What is Concurrency?</strong> In simple terms, concurrency is the ability for different parts of a program to execute out-of-order or in partial overlap, without affecting the final outcome (<a href="https://commons.wikimedia.org/wiki/Category:Concurrency_%28computer_science%29#:~:text=concurrency">Category:Concurrency (computer science) - Wikimedia Commons</a>). This is distinct from parallelism – truly executing at the same time – but on modern multi-core processors, threads may indeed run in parallel. The C++ standard library&rsquo;s concurrency support (largely introduced in C++11) gives developers a portable way to write multi-threaded code, moving beyond platform-specific APIs. Let&rsquo;s start by looking at how to spawn new threads in C++.</p>
<h2 id="starting-threads-with-stdthread">Starting Threads with <code>std::thread</code></h2>
<p>C++17 uses the <code>std::thread</code> class (defined in the <code>&lt;thread&gt;</code> header) to represent and manage threads of execution. A <code>std::thread</code> object starts running as soon as it&rsquo;s created (<a href="https://en.cppreference.com/w/cpp/thread/thread#:~:text=The%20class%20,multiple%20functions%20to%20execute%20concurrently">std::thread - cppreference.com</a>), invoking a function or callable that you provide. For example, we can launch a simple thread that prints a message:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-cpp" data-lang="cpp"><span style="display:flex;"><span><span style="color:#75715e">#include</span> <span style="color:#75715e">&lt;iostream&gt;</span><span style="color:#75715e">
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">#include</span> <span style="color:#75715e">&lt;thread&gt;</span><span style="color:#75715e">
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">void</span> <span style="color:#a6e22e">printMessage</span>(<span style="color:#66d9ef">const</span> std<span style="color:#f92672">::</span>string<span style="color:#f92672">&amp;</span> msg, <span style="color:#66d9ef">int</span> id) {
</span></span><span style="display:flex;"><span>    std<span style="color:#f92672">::</span>cout <span style="color:#f92672">&lt;&lt;</span> <span style="color:#e6db74">&#34;Thread &#34;</span> <span style="color:#f92672">&lt;&lt;</span> id <span style="color:#f92672">&lt;&lt;</span> <span style="color:#e6db74">&#34;: &#34;</span> <span style="color:#f92672">&lt;&lt;</span> msg <span style="color:#f92672">&lt;&lt;</span> <span style="color:#e6db74">&#34;</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">&#34;</span>;
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">int</span> <span style="color:#a6e22e">main</span>() {
</span></span><span style="display:flex;"><span>    std<span style="color:#f92672">::</span><span style="color:#66d9ef">thread</span> t1(printMessage, <span style="color:#e6db74">&#34;Hello from thread&#34;</span>, <span style="color:#ae81ff">1</span>);
</span></span><span style="display:flex;"><span>    std<span style="color:#f92672">::</span><span style="color:#66d9ef">thread</span> t2(printMessage, <span style="color:#e6db74">&#34;Hello from thread&#34;</span>, <span style="color:#ae81ff">2</span>);
</span></span><span style="display:flex;"><span>    std<span style="color:#f92672">::</span>cout <span style="color:#f92672">&lt;&lt;</span> <span style="color:#e6db74">&#34;Threads launched</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">&#34;</span>;
</span></span><span style="display:flex;"><span>    <span style="color:#75715e">// Wait for the threads to finish execution
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>    t1.join();
</span></span><span style="display:flex;"><span>    t2.join();
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>In this example, the main program spawns two threads (<code>t1</code> and <code>t2</code>), each executing the <code>printMessage</code> function with different arguments. The threads begin executing immediately upon construction (subject to OS scheduling) (<a href="https://en.cppreference.com/w/cpp/thread/thread#:~:text=Threads%20begin%20execution%20immediately%20upon,see%20%2059%20and%20std%3A%3Aatomic">std::thread - cppreference.com</a>). The main thread then continues to its next statement (printing &ldquo;Threads launched&rdquo;) without waiting for the new threads to complete. We call <code>join()</code> on each thread to block the main thread until those threads finish. The output might interleave the thread messages with the main thread&rsquo;s output, e.g.:</p>
<pre tabindex="0"><code>Threads launched  
Thread 2: Hello from thread  
Thread 1: Hello from thread  
</code></pre><p>The exact order may vary on each run, which is a hallmark of concurrent execution.</p>
<p><strong>Joining and Detaching Threads:</strong> It is crucial to either join or <em>detach</em> every thread that you spawn. Calling <code>join()</code> waits for the thread to finish, as shown above. Alternatively, you can call <code>detach()</code> to allow the thread to run independently (in the background, with no way to synchronise with it thereafter). If a <code>std::thread</code> object is destroyed while still <strong>joinable</strong> (i.e., it represents an active thread that hasn&rsquo;t been joined or detached), the C++ runtime will call <code>std::terminate()</code> and likely abort the program (<a href="https://stackoverflow.com/questions/25559918/c-stdthread-crashes-upon-execution#:~:text=Destroying%20a%20,thread.thread.destr">multithreading - C++ - std::thread crashes upon execution - Stack Overflow</a>). This design prevents difficult bugs that could arise from threads continuing after their <code>std::thread</code> object goes out of scope. In summary, always ensure each thread is either joined (if you need to wait for it) or detached (if it should run on its own) before the thread object is destroyed.</p>
<p><strong>Passing Arguments:</strong> As seen above, <code>std::thread</code> can take a function pointer or any callable (such as a lambda) and parameters for that function. The parameters are copied (or moved) into the new thread&rsquo;s context. Be mindful when passing pointers or references to avoid accessing data that might go out of scope. For example, passing a pointer to a local variable into a detached thread can lead to undefined behaviour if the local variable is destroyed while the thread is still running.</p>
<h2 id="race-conditions-and-mutual-exclusion-mutexes">Race Conditions and Mutual Exclusion (Mutexes)</h2>
<p>When multiple threads access the same data without proper coordination, you may hit a <strong>race condition</strong> – a situation where the program&rsquo;s outcome depends on the unpredictable timing of threads. Let&rsquo;s illustrate a simple race condition:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-cpp" data-lang="cpp"><span style="display:flex;"><span><span style="color:#75715e">#include</span> <span style="color:#75715e">&lt;thread&gt;</span><span style="color:#75715e">
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">#include</span> <span style="color:#75715e">&lt;vector&gt;</span><span style="color:#75715e">
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">#include</span> <span style="color:#75715e">&lt;iostream&gt;</span><span style="color:#75715e">
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">int</span> counter <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>;  <span style="color:#75715e">// shared data
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">void</span> <span style="color:#a6e22e">increment</span>() {
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">for</span> (<span style="color:#66d9ef">int</span> i <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>; i <span style="color:#f92672">&lt;</span> <span style="color:#ae81ff">100000</span>; <span style="color:#f92672">++</span>i) {
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">++</span>counter;  <span style="color:#75715e">// increment shared counter
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>    }
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">int</span> <span style="color:#a6e22e">main</span>() {
</span></span><span style="display:flex;"><span>    std<span style="color:#f92672">::</span>vector<span style="color:#f92672">&lt;</span>std<span style="color:#f92672">::</span><span style="color:#66d9ef">thread</span><span style="color:#f92672">&gt;</span> threads;
</span></span><span style="display:flex;"><span>    <span style="color:#75715e">// Launch multiple threads that increment the counter
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>    <span style="color:#66d9ef">for</span> (<span style="color:#66d9ef">int</span> i <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>; i <span style="color:#f92672">&lt;</span> <span style="color:#ae81ff">4</span>; <span style="color:#f92672">++</span>i) {
</span></span><span style="display:flex;"><span>        threads.emplace_back(increment);
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>    <span style="color:#75715e">// Wait for all threads to finish
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>    <span style="color:#66d9ef">for</span> (<span style="color:#66d9ef">auto</span><span style="color:#f92672">&amp;</span> t : threads) {
</span></span><span style="display:flex;"><span>        t.join();
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>    std<span style="color:#f92672">::</span>cout <span style="color:#f92672">&lt;&lt;</span> <span style="color:#e6db74">&#34;Final counter value: &#34;</span> <span style="color:#f92672">&lt;&lt;</span> counter <span style="color:#f92672">&lt;&lt;</span> <span style="color:#e6db74">&#34;</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">&#34;</span>;
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>We might expect the final counter to be <code>400000</code> (since four threads increment it 100000 times each), but in practice, the result is often lower and non-deterministic. This is a classic race condition: the threads interfere with each other when updating <code>counter</code>. The <code>++counter</code> operation is not atomic – internally it involves a read, an addition, and a write, which can be interleaved between threads. In a run of this program, two threads might read the same old value of <code>counter</code> and then both write back updates, losing one increment. A data race like this leads to undefined behaviour in C++ (<a href="https://en.cppreference.com/w/cpp/language/multithread#:~:text=If%20a%20data%20race%20occurs%2C,of%20the%20program%20is%20undefined">Multi-threaded executions and data races (since C++11) - cppreference.com</a>), so we need to prevent it.</p>
<p>The typical solution is to use a <strong>mutex</strong> to protect the shared resource. A mutex (mutual exclusion) is a synchronisation primitive that allows only one thread to access a section of code at a time (<a href="https://en.cppreference.com/w/cpp/thread/mutex#:~:text=The%20,simultaneously%20accessed%20by%20multiple%20threads">std::mutex - cppreference.com</a>). Think of it as a lock: a thread must acquire the mutex before entering a critical section (the code that accesses shared data), and release it when done, so that other threads can proceed. In C++, we use <code>std::mutex</code> from <code>&lt;mutex&gt;</code>:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-cpp" data-lang="cpp"><span style="display:flex;"><span><span style="color:#75715e">#include</span> <span style="color:#75715e">&lt;mutex&gt;</span><span style="color:#75715e">
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>std<span style="color:#f92672">::</span>mutex counterMutex;
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">void</span> <span style="color:#a6e22e">incrementSafe</span>() {
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">for</span> (<span style="color:#66d9ef">int</span> i <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>; i <span style="color:#f92672">&lt;</span> <span style="color:#ae81ff">100000</span>; <span style="color:#f92672">++</span>i) {
</span></span><span style="display:flex;"><span>        std<span style="color:#f92672">::</span>lock_guard<span style="color:#f92672">&lt;</span>std<span style="color:#f92672">::</span>mutex<span style="color:#f92672">&gt;</span> lock(counterMutex);
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">++</span>counter;
</span></span><span style="display:flex;"><span>        <span style="color:#75715e">// mutex is automatically released at end of scope (lock_guard destructor)
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>    }
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>Here we introduced a global <code>counterMutex</code>. In <code>incrementSafe()</code>, each iteration locks the mutex before incrementing and unlocks upon leaving the scope (thanks to <code>std::lock_guard</code>). <code>std::lock_guard</code> is a convenient RAII wrapper that locks a given mutex upon construction and unlocks it when destroyed (when leaving scope) (<a href="https://en.cppreference.com/w/cpp/thread/lock_guard#:~:text=The%20class%20,duration%20of%20a%20scoped%20block">std::lock_guard - cppreference.com</a>). By using <code>lock_guard</code>, we ensure the mutex is released even if an exception occurs within the block, making our code exception-safe. Only one thread can hold the mutex at a time, so the increments on <code>counter</code> are serialised – one thread&rsquo;s loop iteration will exclude others until it finishes incrementing. This guarantees correct results, at the cost of some performance due to threads waiting their turn.</p>
<p>Let&rsquo;s apply this fix to our example:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-cpp" data-lang="cpp"><span style="display:flex;"><span><span style="color:#66d9ef">void</span> <span style="color:#a6e22e">incrementSafe</span>() {
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">for</span> (<span style="color:#66d9ef">int</span> i <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>; i <span style="color:#f92672">&lt;</span> <span style="color:#ae81ff">100000</span>; <span style="color:#f92672">++</span>i) {
</span></span><span style="display:flex;"><span>        std<span style="color:#f92672">::</span>lock_guard<span style="color:#f92672">&lt;</span>std<span style="color:#f92672">::</span>mutex<span style="color:#f92672">&gt;</span> lock(counterMutex);
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">++</span>counter;
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">int</span> <span style="color:#a6e22e">main</span>() {
</span></span><span style="display:flex;"><span>    <span style="color:#75715e">// ... launch threads with incrementSafe instead ...
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>    <span style="color:#66d9ef">for</span> (<span style="color:#66d9ef">auto</span><span style="color:#f92672">&amp;</span> t : threads) t.join();
</span></span><span style="display:flex;"><span>    std<span style="color:#f92672">::</span>cout <span style="color:#f92672">&lt;&lt;</span> <span style="color:#e6db74">&#34;Final counter value: &#34;</span> <span style="color:#f92672">&lt;&lt;</span> counter <span style="color:#f92672">&lt;&lt;</span> <span style="color:#e6db74">&#34;</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">&#34;</span>;
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>Now the final counter value will reliably be 400000. We have removed the race condition by preventing concurrent access to the shared variable. Note that locking has a runtime cost, and if the critical section is very small (like just incrementing a variable), a mutex might be overkill – we&rsquo;ll discuss alternatives like atomic variables shortly. However, for more complex shared structures, mutexes are the go-to tool.</p>
<p><strong>Mutex Basics:</strong> A <code>std::mutex</code> provides exclusive ownership: when one thread locks it, other threads attempting to lock will block until it is unlocked (<a href="https://en.cppreference.com/w/cpp/thread/mutex#:~:text=,calling%20%20146%20or%20try_lock">std::mutex - cppreference.com</a>). If a thread tries to lock the same mutex twice (without unlocking first), it will deadlock itself (standard <code>std::mutex</code> is non-recursive). Always design your locking carefully to avoid <strong>deadlocks</strong> where two or more threads are waiting indefinitely for each other to release locks. A simple deadlock scenario is if thread A locks mutex X then mutex Y, while thread B locks mutex Y then mutex X – each will wait forever for the other. In general, to prevent deadlock, ensure all threads lock multiple mutexes in a consistent global order, or use higher-level concurrency primitives when possible.</p>
<p>Deadlocks can be subtle in larger programs. As a rule, keep the duration for which a mutex is locked as short as possible (hold a lock only for the necessary operations, then release). This maximises concurrency and minimises the chance of cyclic lock dependencies. If you need to lock multiple mutexes, C++17 offers <code>std::scoped_lock</code> to lock several at once (avoiding intermediate interleavings), or you can use <code>std::lock()</code> on multiple mutexes safely.</p>
<p><em>(Side note: &ldquo;deadlock&rdquo; formally means a set of threads are all blocked, each waiting for a resource owned by one of the other threads, such that none can proceed (<a href="https://web.stanford.edu/~ouster/cs111-spring24/lectures/deadlock/#:~:text=,none%20can%20release%20their%20resources">Deadlock</a>). Avoiding deadlocks is a key part of multithreaded program design.)</em></p>
<h2 id="condition-variables-for-thread-synchronisation">Condition Variables for Thread Synchronisation</h2>
<p>Mutexes provide mutual exclusion, but they don&rsquo;t by themselves provide a mechanism for threads to wait for certain conditions or events. This is where <strong>condition variables</strong> come in. A <code>std::condition_variable</code> (from <code>&lt;condition_variable&gt;</code>) allows one or more threads to wait (sleep) until some condition is met and another thread signals them to wake up (<a href="https://en.cppreference.com/w/cpp/thread/condition_variable#:~:text=,std%3A%3Acondition_variable">std::condition_variable - cppreference.com</a>). Condition variables are often used in conjunction with a mutex to coordinate producer-consumer scenarios or other situations where threads need to rendezvous.</p>
<p>(<a href="https://www.scaler.com/topics/producer-consumer-problem-in-c/">What is producer consumer problem in C? | Scaler Topics</a>) <em>An illustration of a producer-consumer setup. One thread (the producer) inserts data into a shared buffer, and another thread (the consumer) removes data from it. A condition variable allows the consumer thread to wait until new data is produced before consuming.</em></p>
<p>For example, imagine one thread is producing data and another is consuming it. The consumer should wait (not loop continuously) until data is available. We can achieve this with a condition variable:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-cpp" data-lang="cpp"><span style="display:flex;"><span><span style="color:#75715e">#include</span> <span style="color:#75715e">&lt;queue&gt;</span><span style="color:#75715e">
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">#include</span> <span style="color:#75715e">&lt;condition_variable&gt;</span><span style="color:#75715e">
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>
</span></span><span style="display:flex;"><span>std<span style="color:#f92672">::</span>queue<span style="color:#f92672">&lt;</span><span style="color:#66d9ef">int</span><span style="color:#f92672">&gt;</span> dataQueue;
</span></span><span style="display:flex;"><span>std<span style="color:#f92672">::</span>mutex dataMutex;
</span></span><span style="display:flex;"><span>std<span style="color:#f92672">::</span>condition_variable dataCond;
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">bool</span> finished <span style="color:#f92672">=</span> false;  <span style="color:#75715e">// flag to indicate producer is done
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">// Consumer thread function
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span><span style="color:#66d9ef">void</span> <span style="color:#a6e22e">consumer</span>() {
</span></span><span style="display:flex;"><span>    std<span style="color:#f92672">::</span>unique_lock<span style="color:#f92672">&lt;</span>std<span style="color:#f92672">::</span>mutex<span style="color:#f92672">&gt;</span> lock(dataMutex);
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">while</span> (<span style="color:#f92672">!</span>finished) {
</span></span><span style="display:flex;"><span>        <span style="color:#75715e">// Wait until dataCond is notified and condition (queue not empty or finished) is true
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>        dataCond.wait(lock, []{ <span style="color:#66d9ef">return</span> <span style="color:#f92672">!</span>dataQueue.empty() <span style="color:#f92672">||</span> finished; });
</span></span><span style="display:flex;"><span>        <span style="color:#75715e">// Now we have the lock again and either queue is not empty or finished is true
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>        <span style="color:#66d9ef">while</span> (<span style="color:#f92672">!</span>dataQueue.empty()) {
</span></span><span style="display:flex;"><span>            <span style="color:#66d9ef">int</span> item <span style="color:#f92672">=</span> dataQueue.front();
</span></span><span style="display:flex;"><span>            dataQueue.pop();
</span></span><span style="display:flex;"><span>            lock.unlock();  <span style="color:#75715e">// unlock while processing item
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>            std<span style="color:#f92672">::</span>cout <span style="color:#f92672">&lt;&lt;</span> <span style="color:#e6db74">&#34;Consumed: &#34;</span> <span style="color:#f92672">&lt;&lt;</span> item <span style="color:#f92672">&lt;&lt;</span> <span style="color:#e6db74">&#34;</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">&#34;</span>;
</span></span><span style="display:flex;"><span>            lock.lock();
</span></span><span style="display:flex;"><span>        }
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-cpp" data-lang="cpp"><span style="display:flex;"><span><span style="color:#75715e">// Producer thread function
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span><span style="color:#66d9ef">void</span> <span style="color:#a6e22e">producer</span>() {
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">for</span> (<span style="color:#66d9ef">int</span> i <span style="color:#f92672">=</span> <span style="color:#ae81ff">1</span>; i <span style="color:#f92672">&lt;=</span> <span style="color:#ae81ff">5</span>; <span style="color:#f92672">++</span>i) {
</span></span><span style="display:flex;"><span>        {
</span></span><span style="display:flex;"><span>            std<span style="color:#f92672">::</span>lock_guard<span style="color:#f92672">&lt;</span>std<span style="color:#f92672">::</span>mutex<span style="color:#f92672">&gt;</span> lock(dataMutex);
</span></span><span style="display:flex;"><span>            dataQueue.push(i);
</span></span><span style="display:flex;"><span>            std<span style="color:#f92672">::</span>cout <span style="color:#f92672">&lt;&lt;</span> <span style="color:#e6db74">&#34;Produced: &#34;</span> <span style="color:#f92672">&lt;&lt;</span> i <span style="color:#f92672">&lt;&lt;</span> <span style="color:#e6db74">&#34;</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">&#34;</span>;
</span></span><span style="display:flex;"><span>        } <span style="color:#75715e">// release lock before notifying
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>        dataCond.notify_one();  <span style="color:#75715e">// wake up consumer
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>        std<span style="color:#f92672">::</span>this_thread<span style="color:#f92672">::</span>sleep_for(std<span style="color:#f92672">::</span>chrono<span style="color:#f92672">::</span>milliseconds(<span style="color:#ae81ff">100</span>));
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>    <span style="color:#75715e">// Signal the consumer that production is finished
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>    {
</span></span><span style="display:flex;"><span>        std<span style="color:#f92672">::</span>lock_guard<span style="color:#f92672">&lt;</span>std<span style="color:#f92672">::</span>mutex<span style="color:#f92672">&gt;</span> lock(dataMutex);
</span></span><span style="display:flex;"><span>        finished <span style="color:#f92672">=</span> true;
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>    dataCond.notify_one();
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>In this example, the consumer thread waits on <code>dataCond</code> for the condition &ldquo;queue not empty or finished&rdquo; to become true. The <code>wait(lock, predicate)</code> call atomically releases the mutex and suspends the thread until <code>notify_one()</code> is called on the condition variable <em>and</em> the predicate returns true. When another thread (the producer) pushes data and calls <code>notify_one</code>, the consumer wakes up, reacquires the lock, and checks the condition. We use a loop to handle spurious wake-ups – a condition variable may wake up without a notification, so the condition must be re-checked (<a href="https://en.cppreference.com/w/cpp/thread/condition_variable#:~:text=1,resume%20waiting%20if%20not%20satisfied">std::condition_variable - cppreference.com</a>). The predicate version of <code>wait</code> does this logic internally, looping until the condition is satisfied.</p>
<p>A few important points about condition variables in C++:</p>
<ul>
<li>A condition variable must always be paired with a mutex that guards the shared state (in our case, <code>dataMutex</code> guards access to <code>dataQueue</code> and <code>finished</code>). The waiting thread should hold the mutex before waiting, and the mutex will be released while waiting and reacquired upon wake-up (<a href="https://en.cppreference.com/w/cpp/thread/condition_variable#:~:text=1,Do%20one%20of%20the%20following">std::condition_variable - cppreference.com</a>).</li>
<li><code>std::unique_lock&lt;std::mutex&gt;</code> is typically used for waiting, rather than a <code>lock_guard</code>. A <code>unique_lock</code> can be unlocked and locked, and <code>wait</code> requires a <code>unique_lock</code> so it can atomically unlock the mutex during wait (<a href="https://en.cppreference.com/w/cpp/thread/condition_variable#:~:text=1,performs%20the%20same%20three%20steps">std::condition_variable - cppreference.com</a>).</li>
<li>Use <code>notify_one()</code> to wake a single waiting thread, or <code>notify_all()</code> to wake all waiting threads (if, for example, multiple consumers might be waiting for work).</li>
<li>Always check the condition in a loop after waking, because notifications can be lost or wake-ups can happen without a notification (i.e., spurious wake-ups). The helper <code>wait(lock, predicate)</code> takes care of this by looping internally until the predicate is true.</li>
<li>Condition variables are lower-level primitives; higher-level message-passing or task frameworks can sometimes simplify thread coordination, but condition variables are versatile for many patterns like the producer-consumer.</li>
</ul>
<p>In our producer-consumer code, the output might look like:</p>
<pre tabindex="0"><code>Produced: 1  
Produced: 2  
Consumed: 1  
Produced: 3  
Consumed: 2  
Produced: 4  
Consumed: 3  
Produced: 5  
Consumed: 4  
Consumed: 5  
</code></pre><p>The consumer prints items as they become available. We carefully unlocked the mutex while processing an item (around the <code>std::cout</code>) to allow the producer to run concurrently – holding locks only when necessary is a good practice.</p>
<h2 id="atomic-operations">Atomic Operations</h2>
<p>Mutexes ensure exclusive access but come with overhead and complexity (risk of deadlocks, etc.). For simple shared variables like counters, <strong>atomic</strong> operations can be a lighter alternative. C++17 provides the <code>&lt;atomic&gt;</code> header, which defines atomic types such as <code>std::atomic&lt;int&gt;</code>. An atomic variable provides operations (like <code>++</code>, store, load) that are indivisible and thread-safe. In other words, if one thread modifies an atomic variable while another reads it, the outcome is well-defined and no data race occurs (<a href="https://en.cppreference.com/w/cpp/atomic#:~:text=These%20components%20are%20provided%20for,are%20free%20of%20data%20races">Concurrency support library (since C++11) - cppreference.com</a>) (<a href="https://stackoverflow.com/questions/31978324/what-exactly-is-stdatomic#:~:text=behavior%3A">c++ - What exactly is std::atomic? - Stack Overflow</a>). This can offer a more efficient way to coordinate simple state.</p>
<p>Revisiting our earlier counter example, we can eliminate the mutex by using an atomic counter:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-cpp" data-lang="cpp"><span style="display:flex;"><span><span style="color:#75715e">#include</span> <span style="color:#75715e">&lt;atomic&gt;</span><span style="color:#75715e">
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>std<span style="color:#f92672">::</span>atomic<span style="color:#f92672">&lt;</span><span style="color:#66d9ef">int</span><span style="color:#f92672">&gt;</span> atomicCounter(<span style="color:#ae81ff">0</span>);
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">void</span> <span style="color:#a6e22e">incrementAtomic</span>() {
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">for</span> (<span style="color:#66d9ef">int</span> i <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>; i <span style="color:#f92672">&lt;</span> <span style="color:#ae81ff">100000</span>; <span style="color:#f92672">++</span>i) {
</span></span><span style="display:flex;"><span>        atomicCounter<span style="color:#f92672">++</span>;
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>Now multiple threads can increment <code>atomicCounter</code> concurrently without data races. Under the hood, these increments might use special CPU instructions to ensure atomicity. Each atomic operation is guaranteed to happen fully before any other atomic operation on the same object begins (<a href="https://en.cppreference.com/w/cpp/atomic#:~:text=These%20components%20are%20provided%20for,are%20free%20of%20data%20races">Concurrency support library (since C++11) - cppreference.com</a>). After running four threads with this <code>incrementAtomic</code> function, <code>atomicCounter</code> will reliably end up as 400000, just like the mutex-protected version, but likely with less overhead.</p>
<p>It&rsquo;s important to note that while atomics avoid explicit locking, they are not a magic bullet for all concurrency problems. They work best for simple shared variables or flags. If you have multiple related variables that need to be kept in sync, a mutex (to make larger sections of code atomic) or higher-level constructs might be needed. Moreover, atomic operations obey C++&rsquo;s <strong>memory ordering</strong> rules – by default they enforce a total order (sequential consistency) on operations, which is the safest but not always the fastest. C++ allows relaxed or acquire-release memory orders for advanced use cases, but those are beyond the scope of this post. For most purposes, <code>std::atomic</code> with default memory order provides a straightforward way to get thread-safe operations on a single variable without the fuss of locks.</p>
<h2 id="best-practices-and-common-pitfalls">Best Practices and Common Pitfalls</h2>
<p>Writing correct multithreaded code is challenging. Here are some best practices and potential pitfalls to keep in mind when using C++17 concurrency features:</p>
<ul>
<li>
<p><strong>Avoid Data Races:</strong> Any unsynchronised access to shared data (where at least one access is a write) is a bug. Data races lead to undefined behaviour (<a href="https://en.cppreference.com/w/cpp/language/multithread#:~:text=If%20a%20data%20race%20occurs%2C,of%20the%20program%20is%20undefined">Multi-threaded executions and data races (since C++11) - cppreference.com</a>). Use mutexes or atomics to protect shared variables. If a piece of data is only touched by one thread (or is immutable), then you don&rsquo;t need synchronisation for that data.</p>
</li>
<li>
<p><strong>Use RAII for Managing Locks:</strong> Prefer using <code>std::lock_guard</code> or <code>std::unique_lock</code> instead of manually calling <code>mutex.lock()</code> and <code>mutex.unlock()</code>. RAII wrappers ensure that locks are released when a scope is exited, even if exceptions are thrown, preventing deadlocks caused by forgotten unlocks. Similarly, consider wrapping thread management in RAII classes (or at least in <code>try/catch</code>) to ensure threads are joined even if exceptions occur.</p>
</li>
<li>
<p><strong>Minimise Lock Granularity:</strong> Hold locks for the shortest duration necessary. Only lock around the critical section that truly needs exclusive access. This reduces contention and the chance of deadlocks. If possible, do work (especially expensive I/O or computation) outside the locked section.</p>
</li>
<li>
<p><strong>Consistent Lock Ordering:</strong> When a situation requires multiple mutexes, always lock them in a consistent global order. Inconsistent ordering between threads can easily cause deadlock. If locking multiple mutexes at once, C++17&rsquo;s <code>std::scoped_lock</code> (or <code>std::lock</code> with <code>std::adopt_lock</code>) can be used to lock without risking interleaved locking.</p>
</li>
<li>
<p><strong>Beware of Deadlocks:</strong> Deadlocks occur when threads cyclically wait on each other and none can proceed (<a href="https://web.stanford.edu/~ouster/cs111-spring24/lectures/deadlock/#:~:text=,none%20can%20release%20their%20resources">Deadlock</a>). Aside from lock ordering issues, deadlock can also happen if a thread tries to lock a mutex twice, or if there&rsquo;s a circular wait involving condition variables or other resources. Avoid long-held locks and design clear ownership of resources.</p>
</li>
<li>
<p><strong>Condition Variable Usage:</strong> Always use a loop when waiting on a condition variable (or use the predicate overload of <code>wait</code>). Ensure the condition and associated state are protected by the same mutex. Also, be careful to notify <em>after</em> updating the condition state (as seen in the producer-consumer example, we unlocked before notifying to avoid waking the consumer before the state was ready).</p>
</li>
<li>
<p><strong>Thread Lifetime and Exceptions:</strong> As noted, make sure threads are joined or detached properly. A common pitfall is to forget to join a thread before a function returns (leading to std::terminate). If your program throws exceptions, consider what happens to threads – you might need to catch exceptions, join threads, then rethrow, or use <code>std::jthread</code> (introduced in C++20) which automatically joins on destruction. C++17 doesn&rsquo;t have <code>jthread</code>, so manual care is needed.</p>
</li>
<li>
<p><strong>Use Atomics for Simple Flags/Counters:</strong> If you just need to signal a boolean flag or count events, use <code>std::atomic</code> instead of a full mutex+condition pair. For example, an atomic bool can be used to publish a &ldquo;stop&rdquo; flag to worker threads. This is simpler and often faster. But don&rsquo;t mix atomic and non-atomic accesses to the same variable.</p>
</li>
<li>
<p><strong>Tools and Debugging:</strong> Multithreading bugs can be non-deterministic and hard to reproduce. Use tools like ThreadSanitizer (available in many compilers) to catch data races. When debugging, try to simplify and enforce ordering (e.g., with logging or sleeps) to reproduce issues, but be aware that adding debug output can sometimes &ldquo;heal&rdquo; a race due to timing changes.</p>
</li>
</ul>
<p>In conclusion, C++17 provides robust low-level constructs for concurrency that make cross-platform multithreading achievable in standard C++. We have <code>std::thread</code> for creating threads, mutexes and condition variables for coordinating access to shared resources, and atomic types for lock-free operations on single variables. By understanding these tools and following best practices, you can harness the power of multi-core systems, making your C++ programs faster and more responsive. Just remember that with great power comes great responsibility – always consider the complexity that threads introduce, and strive to write clear, well-synchronised code. Happy threading!</p>
]]></content>
        </item>
        
        <item>
            <title>Smart Pointers and Memory Management in C&#43;&#43;17</title>
            <link>https://blog.miguens.one/posts/2025/03/smart-pointers-and-memory-management-in-c-17/</link>
            <pubDate>Fri, 07 Mar 2025 00:00:00 +0000</pubDate>
            
            <guid>https://blog.miguens.one/posts/2025/03/smart-pointers-and-memory-management-in-c-17/</guid>
            <description>&lt;h2 id=&#34;introduction&#34;&gt;Introduction&lt;/h2&gt;
&lt;p&gt;Memory management in C++ has traditionally required careful use of dynamic allocation and manual deallocation. Mistakes in managing memory (such as forgetting to delete allocated memory or deleting it twice) can lead to resource leaks, dangling pointers, or crashes. Modern C++ addresses these issues with &lt;strong&gt;RAII&lt;/strong&gt; (Resource Acquisition Is Initialisation) and &lt;strong&gt;smart pointers&lt;/strong&gt;, which automatically manage the lifetime of dynamically allocated objects and help prevent resource leaks (&lt;a href=&#34;https://cpp-core-guidelines-docs.vercel.app/resource#:~:text=They%20can%20prevent%20resource%20leaks&#34;&gt;R: Resource management – C++&lt;/a&gt;). This article provides an in-depth look at C++17 smart pointers – &lt;code&gt;std::unique_ptr&lt;/code&gt;, &lt;code&gt;std::shared_ptr&lt;/code&gt;, and &lt;code&gt;std::weak_ptr&lt;/code&gt; – explaining their functionalities, benefits, and best use cases. We will also discuss best practices for dynamic memory allocation, including ownership semantics, avoiding leaks, and performance considerations. The discussion assumes you are an intermediate or advanced C++ developer familiar with basic pointers and memory concepts.&lt;/p&gt;</description>
            <content type="html"><![CDATA[<h2 id="introduction">Introduction</h2>
<p>Memory management in C++ has traditionally required careful use of dynamic allocation and manual deallocation. Mistakes in managing memory (such as forgetting to delete allocated memory or deleting it twice) can lead to resource leaks, dangling pointers, or crashes. Modern C++ addresses these issues with <strong>RAII</strong> (Resource Acquisition Is Initialisation) and <strong>smart pointers</strong>, which automatically manage the lifetime of dynamically allocated objects and help prevent resource leaks (<a href="https://cpp-core-guidelines-docs.vercel.app/resource#:~:text=They%20can%20prevent%20resource%20leaks">R: Resource management – C++</a>). This article provides an in-depth look at C++17 smart pointers – <code>std::unique_ptr</code>, <code>std::shared_ptr</code>, and <code>std::weak_ptr</code> – explaining their functionalities, benefits, and best use cases. We will also discuss best practices for dynamic memory allocation, including ownership semantics, avoiding leaks, and performance considerations. The discussion assumes you are an intermediate or advanced C++ developer familiar with basic pointers and memory concepts.</p>
<h2 id="stdunique_ptr--exclusive-ownership"><code>std::unique_ptr</code> – Exclusive Ownership</h2>
<p><code>std::unique_ptr</code> is a smart pointer that retains <strong>sole (unique) ownership</strong> of a dynamically allocated object (<a href="https://my.eng.utah.edu/~pajensen/ACM/Documentation/c-reference/en.cppreference.com/w/cpp/memory/unique_ptrhtml.html#:~:text=,that">std::unique_ptr - cppreference.com</a>). Only one <code>unique_ptr</code> at a time can own a given object; when the <code>unique_ptr</code> is destroyed or reset, it automatically deletes the managed object. This exclusive ownership model ensures that there is no ambiguity about who is responsible for freeing the memory – the <code>unique_ptr</code> will do it when it goes out of scope. In other words, <code>unique_ptr</code> implements strict RAII for single-owner resources, meaning the resource is acquired and released in tandem with the <code>unique_ptr</code>&rsquo;s lifetime. It replaces the now-deprecated <code>auto_ptr</code> (removed in C++17) and is the <strong>default smart pointer to use for owning dynamically allocated objects</strong> when shared ownership is not needed (<a href="https://learn.microsoft.com/en-us/cpp/cpp/smart-pointers-modern-cpp?view=msvc-170#:~:text=,and%20Use%20unique_ptr%20Instances%20and">Smart pointers (Modern C++) | Microsoft Learn</a>).</p>
<p>A <code>unique_ptr</code> cannot be copied (copy construction/assignment is deleted) to avoid multiple owners, but it <em>can be moved</em>. This allows transferring ownership from one <code>unique_ptr</code> to another (for example, when returning a dynamically allocated object from a function). <code>unique_ptr</code> is lightweight: it typically consists of just a single pointer internally, so its size and performance are comparable to raw pointers (<a href="https://learn.microsoft.com/en-us/cpp/cpp/smart-pointers-modern-cpp?view=msvc-170#:~:text=,and%20Use%20unique_ptr%20Instances%20and">Smart pointers (Modern C++) | Microsoft Learn</a>). There is negligible overhead in using a <code>unique_ptr</code> compared to a raw pointer, and accessing the managed object (via <code>operator*</code> or <code>operator-&gt;</code>) is as fast as dereferencing a raw pointer. The only extra work happens on destruction, where it deletes the object, which is exactly what manual <code>delete</code> would do.</p>
<p><strong>Usage example:</strong> Creating and using a <code>std::unique_ptr</code>. In this example, we allocate an <code>int</code> and a custom <code>MyObject</code> using <code>std::make_unique</code> (introduced in C++14) which is the recommended way to create <code>unique_ptr</code>s. We also demonstrate transferring ownership with <code>std::move</code>:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-cpp" data-lang="cpp"><span style="display:flex;"><span><span style="color:#75715e">#include</span> <span style="color:#75715e">&lt;memory&gt;</span><span style="color:#75715e">
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">#include</span> <span style="color:#75715e">&lt;iostream&gt;</span><span style="color:#75715e">
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">struct</span> <span style="color:#a6e22e">MyObject</span> {
</span></span><span style="display:flex;"><span>    MyObject(<span style="color:#66d9ef">int</span> x) <span style="color:#f92672">:</span> data(x) { std<span style="color:#f92672">::</span>cout <span style="color:#f92672">&lt;&lt;</span> <span style="color:#e6db74">&#34;MyObject constructed</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">&#34;</span>; }
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">~</span>MyObject() { std<span style="color:#f92672">::</span>cout <span style="color:#f92672">&lt;&lt;</span> <span style="color:#e6db74">&#34;MyObject destroyed</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">&#34;</span>; }
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">int</span> data;
</span></span><span style="display:flex;"><span>};
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>std<span style="color:#f92672">::</span>unique_ptr<span style="color:#f92672">&lt;</span>MyObject<span style="color:#f92672">&gt;</span> createObject(<span style="color:#66d9ef">int</span> value) {
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">return</span> std<span style="color:#f92672">::</span>make_unique<span style="color:#f92672">&lt;</span>MyObject<span style="color:#f92672">&gt;</span>(value);  <span style="color:#75715e">// allocate and return a unique_ptr
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">int</span> <span style="color:#a6e22e">main</span>() {
</span></span><span style="display:flex;"><span>    std<span style="color:#f92672">::</span>unique_ptr<span style="color:#f92672">&lt;</span><span style="color:#66d9ef">int</span><span style="color:#f92672">&gt;</span> ptr1 <span style="color:#f92672">=</span> std<span style="color:#f92672">::</span>make_unique<span style="color:#f92672">&lt;</span><span style="color:#66d9ef">int</span><span style="color:#f92672">&gt;</span>(<span style="color:#ae81ff">42</span>);       <span style="color:#75715e">// unique_ptr owning an int
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>    std<span style="color:#f92672">::</span>unique_ptr<span style="color:#f92672">&lt;</span>MyObject<span style="color:#f92672">&gt;</span> objPtr <span style="color:#f92672">=</span> createObject(<span style="color:#ae81ff">10</span>);         <span style="color:#75715e">// unique_ptr owning MyObject(10)
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>    <span style="color:#75715e">// std::unique_ptr&lt;MyObject&gt; objPtr2 = objPtr; // Error: cannot copy unique_ptr
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>    std<span style="color:#f92672">::</span>unique_ptr<span style="color:#f92672">&lt;</span>MyObject<span style="color:#f92672">&gt;</span> objPtr2 <span style="color:#f92672">=</span> std<span style="color:#f92672">::</span>move(objPtr);       <span style="color:#75715e">// Transfer ownership to objPtr2
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>
</span></span><span style="display:flex;"><span>    std<span style="color:#f92672">::</span>cout <span style="color:#f92672">&lt;&lt;</span> <span style="color:#e6db74">&#34;objPtr2-&gt;data = &#34;</span> <span style="color:#f92672">&lt;&lt;</span> objPtr2<span style="color:#f92672">-&gt;</span>data <span style="color:#f92672">&lt;&lt;</span> <span style="color:#e6db74">&#34;</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">&#34;</span>;    <span style="color:#75715e">// use the object
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>    <span style="color:#75715e">// objPtr is now null (ownership moved), objPtr2 owns the MyObject
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>
</span></span><span style="display:flex;"><span>    objPtr2.reset();  <span style="color:#75715e">// manually delete the object early (optional)
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>    <span style="color:#75715e">// The MyObject is destroyed here, before objPtr2 goes out of scope.
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>}  <span style="color:#75715e">// ptr1 goes out of scope and deletes the int automatically here
</span></span></span></code></pre></div><p>In this snippet, <code>ptr1</code> and <code>objPtr</code> are <code>unique_ptr</code>s that own their respective objects. We move <code>objPtr</code> to <code>objPtr2</code>, illustrating how ownership is transferred. When <code>objPtr2.reset()</code> is called or when <code>ptr1</code>/<code>objPtr2</code> go out of scope, the owned objects are deleted automatically. There is no need to call <code>delete</code> explicitly, and hence no risk of forgetting to delete (preventing memory leaks) or deleting twice. The exclusive ownership model makes <code>std::unique_ptr</code> ideal for cases where a resource is used by only one object or function at a time, such as managing dynamically allocated memory within a single scope or owning resource handles in a class. It provides clear ownership semantics and very low overhead (<a href="https://learn.microsoft.com/en-us/cpp/cpp/smart-pointers-modern-cpp?view=msvc-170#:~:text=,and%20Use%20unique_ptr%20Instances%20and">Smart pointers (Modern C++) | Microsoft Learn</a>).</p>
<p><strong>Benefits and best use cases:</strong> Use <code>std::unique_ptr</code> as the <strong>default choice</strong> for managing dynamically allocated objects that do not need to be shared (<a href="https://learn.microsoft.com/en-us/cpp/cpp/smart-pointers-modern-cpp?view=msvc-170#:~:text=,and%20Use%20unique_ptr%20Instances%20and">Smart pointers (Modern C++) | Microsoft Learn</a>). Its benefits include automatic deletion (preventing leaks) and no performance penalty for reference counting. For example, you would use <code>unique_ptr</code> for a tree or list node owned by one data structure, for managing a resource in a RAII wrapper class, or for any factory function that creates an object and transfers ownership to the caller. Because it cannot be copied, <code>unique_ptr</code> makes ownership transfer explicit and avoids accidental aliasing. If you need to share ownership or have multiple references to the same object, then <code>unique_ptr</code> alone is insufficient – that is where <code>std::shared_ptr</code> comes in, but you should prefer <code>unique_ptr</code> whenever exclusive ownership is appropriate (<a href="https://cpp-core-guidelines-docs.vercel.app/resource#:~:text=">R: Resource management – C++</a>). In summary, <code>unique_ptr</code> provides exception-safe, clear ownership with minimal runtime cost, solving the problem of remembering to free memory by tying the memory’s lifetime to an object’s scope.</p>
<h2 id="stdshared_ptr--shared-ownership-via-reference-counting"><code>std::shared_ptr</code> – Shared Ownership via Reference Counting</h2>
<p><code>std::shared_ptr</code> is a smart pointer that retains <strong>shared ownership</strong> of an object through a pointer (<a href="https://en.cppreference.com/w/cpp/memory/shared_ptr#:~:text=,either%20of%20the%20following%20happens">std::shared_ptr - cppreference.com</a>). This means multiple <code>shared_ptr</code> instances can point to the same object, and the object will remain alive as long as at least one <code>shared_ptr</code> owns it. Internally, <code>shared_ptr</code> uses a reference counting mechanism: it maintains a <em>use count</em> (in a separate control block) of how many <code>shared_ptr</code>s refer to the object. When you copy a <code>shared_ptr</code>, the reference count is incremented; when a <code>shared_ptr</code> is destroyed or reset, the count is decremented. When the count drops to zero (i.e., no more owners), the managed object is deleted and its memory is freed (<a href="https://learn.microsoft.com/en-us/cpp/cpp/smart-pointers-modern-cpp?view=msvc-170#:~:text=%2A%20%60shared_ptr%60%20Reference,memory%3E%60.%20For">Smart pointers (Modern C++) | Microsoft Learn</a>). This automatic deletion on zero count makes <code>shared_ptr</code> a powerful tool for managing objects that need to be accessed from multiple places without a clear single owner.</p>
<p>A <code>shared_ptr</code> can be default-constructed or set to <code>nullptr</code> to represent an empty pointer. Like <code>unique_ptr</code>, it supports <code>operator-&gt;</code> and <code>operator*</code> to access the underlying object. Unlike <code>unique_ptr</code>, <code>shared_ptr</code> is copyable (the copy shares ownership), which means you <strong>must be careful</strong> that sharing is actually what you want. If you copy a <code>shared_ptr</code> inadvertently, you may be extending an object’s lifetime longer than intended. As a rule of thumb, prefer passing a <code>shared_ptr</code> by reference or const reference to functions if you don’t need to increase the reference count, to avoid unnecessary copies.</p>
<p><strong>Memory and performance considerations:</strong> Because of the reference count, a <code>shared_ptr</code> is larger and slightly slower than a raw pointer or <code>unique_ptr</code>. Typically, a <code>shared_ptr</code> contains two pointers internally – one to the managed object and one to the control block holding the reference count and deleter (<a href="https://learn.microsoft.com/en-us/cpp/cpp/smart-pointers-modern-cpp?view=msvc-170#:~:text=container%20but%20want%20to%20keep,memory%3E%60.%20For">Smart pointers (Modern C++) | Microsoft Learn</a>). Managing the reference count involves atomic operations (to allow thread-safe updates to the count), which incur a performance cost. In single-threaded scenarios the overhead is minimal, but in multithreaded scenarios each copy or destruction of a <code>shared_ptr</code> triggers an atomic ref-count update. If you do not actually need shared ownership, this overhead is wasted – which is why the C++ Core Guidelines advise preferring <code>unique_ptr</code> over <code>shared_ptr</code> unless sharing is required, as <code>unique_ptr</code> is faster and more predictable (no atomic count updates) (<a href="https://cpp-core-guidelines-docs.vercel.app/resource#:~:text=">R: Resource management – C++</a>). That said, <code>shared_ptr</code> is designed for convenience and safety; the small performance cost is usually acceptable when you truly need multiple owners. Furthermore, creating a <code>shared_ptr</code> with <code>std::make_shared</code> can slightly improve performance and memory use by allocating the object and control block in one block (saving one allocation) (<a href="https://cpp-core-guidelines-docs.vercel.app/resource#:~:text=,counts%20next%20to%20its%20object">R: Resource management – C++</a>).</p>
<p><strong>Usage example:</strong> Using <code>std::shared_ptr</code> to share an object between multiple owners:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-cpp" data-lang="cpp"><span style="display:flex;"><span><span style="color:#75715e">#include</span> <span style="color:#75715e">&lt;memory&gt;</span><span style="color:#75715e">
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">#include</span> <span style="color:#75715e">&lt;iostream&gt;</span><span style="color:#75715e">
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span><span style="color:#66d9ef">struct</span> <span style="color:#a6e22e">Node</span> { <span style="color:#66d9ef">int</span> value; Node(<span style="color:#66d9ef">int</span> v)<span style="color:#f92672">:</span> value(v) {} };
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">int</span> <span style="color:#a6e22e">main</span>() {
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">auto</span> sp1 <span style="color:#f92672">=</span> std<span style="color:#f92672">::</span>make_shared<span style="color:#f92672">&lt;</span>Node<span style="color:#f92672">&gt;</span>(<span style="color:#ae81ff">5</span>);           <span style="color:#75715e">// create shared_ptr owning Node(5)
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>    std<span style="color:#f92672">::</span>shared_ptr<span style="color:#f92672">&lt;</span>Node<span style="color:#f92672">&gt;</span> sp2 <span style="color:#f92672">=</span> sp1;                <span style="color:#75715e">// sp2 shares ownership of the same Node
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>    std<span style="color:#f92672">::</span>cout <span style="color:#f92672">&lt;&lt;</span> <span style="color:#e6db74">&#34;sp1 use_count = &#34;</span> <span style="color:#f92672">&lt;&lt;</span> sp1.use_count() <span style="color:#f92672">&lt;&lt;</span> <span style="color:#e6db74">&#34;</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">&#34;</span>;  <span style="color:#75715e">// prints 2 (two owners)
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>    sp1.reset();                                    <span style="color:#75715e">// drop ownership from sp1
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>    std<span style="color:#f92672">::</span>cout <span style="color:#f92672">&lt;&lt;</span> <span style="color:#e6db74">&#34;After resetting sp1, use_count = &#34;</span> 
</span></span><span style="display:flex;"><span>              <span style="color:#f92672">&lt;&lt;</span> sp2.use_count() <span style="color:#f92672">&lt;&lt;</span> <span style="color:#e6db74">&#34;</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">&#34;</span>;           <span style="color:#75715e">// prints 1 (sp2 is sole owner now)
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>    <span style="color:#75715e">// Node will be deleted automatically when sp2 goes out of scope (use_count becomes 0).
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>}
</span></span></code></pre></div><p>In this example, <code>sp1</code> and <code>sp2</code> are <code>shared_ptr&lt;Node&gt;</code> pointing to the same dynamically allocated <code>Node</code>. We start with <code>sp1</code> and then make <code>sp2</code> a copy of <code>sp1</code>, so they co-own the object (the reference count becomes 2). After calling <code>sp1.reset()</code>, <code>sp1</code> no longer owns the <code>Node</code>, but <code>sp2</code> still does (reference count 1), keeping the object alive. When <code>sp2</code> eventually goes out of scope, the reference count drops to 0 and the <code>Node</code> is freed. This illustrates how <code>shared_ptr</code> enables <strong>multiple owners</strong> for an object and automatically cleans up when the last owner is gone (<a href="https://learn.microsoft.com/en-us/cpp/cpp/smart-pointers-modern-cpp?view=msvc-170#:~:text=%2A%20%60shared_ptr%60%20Reference,memory%3E%60.%20For">Smart pointers (Modern C++) | Microsoft Learn</a>).</p>
<p><strong>Best use cases:</strong> Use <code>std::shared_ptr</code> when you truly need shared ownership semantics – for example, in a graph or tree structure where nodes have multiple parents, in observer patterns or publish-subscribe models where multiple subscribers share access to a data object, or in asynchronous tasks where a worker thread needs to ensure an object stays alive while it&rsquo;s processing. It is also useful when returning dynamically allocated objects from factory functions while still keeping a copy elsewhere. Because <code>shared_ptr</code> ensures the object persists as long as someone needs it, it can simplify memory management in complex scenarios. However, be cautious: shared ownership can sometimes make it harder to reason about exactly when an object gets destroyed, especially if copies of <code>shared_ptr</code> are widely distributed. Always consider whether the sharing is necessary; if not, stick to <code>unique_ptr</code>. And whenever <code>shared_ptr</code> forms cyclical references (e.g., two objects holding <code>shared_ptr</code> to each other), you can leak memory since the reference count may never reach zero – this is where <code>std::weak_ptr</code> comes into play.</p>
<h2 id="stdweak_ptr--non-owning-references-to-shared-objects"><code>std::weak_ptr</code> – Non-owning References to Shared Objects</h2>
<p><code>std::weak_ptr</code> is a companion smart pointer to <code>shared_ptr</code> that holds a <strong>non-owning “weak” reference</strong> to an object managed by a <code>shared_ptr</code> (<a href="https://learn.microsoft.com/en-us/cpp/cpp/smart-pointers-modern-cpp?view=msvc-170#:~:text=%2A%20%60weak_ptr%60%20Special,Instances%20%20and%20%2010">Smart pointers (Modern C++) | Microsoft Learn</a>). Unlike <code>shared_ptr</code>, a <code>weak_ptr</code> does not contribute to the reference count and does not own the object. Its primary purpose is to observe or temporarily use an object without preventing that object from being destroyed. If all the owning <code>shared_ptr</code>s to an object go away, the object can be destroyed even if <code>weak_ptr</code>s still point to it. This property is crucial for breaking reference cycles and for cases where you want to avoid dangling raw pointers.</p>
<p>A <code>weak_ptr</code> is always created from an existing <code>shared_ptr</code> (or another <code>weak_ptr</code>). You cannot directly allocate an object into a <code>weak_ptr</code> – it wouldn’t make sense, because <code>weak_ptr</code> alone cannot own an object. Typical usage is that one part of your code holds a <code>shared_ptr</code> (ownership) and another part holds a <code>weak_ptr</code> “observer”. To access the object from a <code>weak_ptr</code>, you must convert it to <code>shared_ptr</code> first, which is done by calling <code>weak_ptr.lock()</code>. The <code>lock()</code> function returns a new <code>std::shared_ptr</code> to the object <strong>if it still exists</strong>, or a null <code>shared_ptr</code> if the object has already been deleted. This allows the observer to safely attempt access. Before using <code>weak_ptr.lock()</code>, you can also call <code>weak_ptr.expired()</code> to check if the object is gone. In effect, <code>weak_ptr</code> provides a safe way to refer to an object that <em>might</em> no longer be alive, avoiding the classic dangling pointer problem: with raw pointers, one cannot easily know if an object was deleted by someone else, but with <code>weak_ptr</code> you can check (<a href="https://stackoverflow.com/questions/12030650/when-is-stdweak-ptr-useful#:~:text=,lock">c++ - When is std::weak_ptr useful? - Stack Overflow</a>).</p>
<p><strong>Usage example:</strong> Using <code>std::weak_ptr</code> to break a reference cycle and to safely access an object:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-cpp" data-lang="cpp"><span style="display:flex;"><span><span style="color:#75715e">#include</span> <span style="color:#75715e">&lt;memory&gt;</span><span style="color:#75715e">
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">#include</span> <span style="color:#75715e">&lt;iostream&gt;</span><span style="color:#75715e">
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span><span style="color:#66d9ef">struct</span> <span style="color:#a6e22e">Owner</span> {
</span></span><span style="display:flex;"><span>    std<span style="color:#f92672">::</span>shared_ptr<span style="color:#f92672">&lt;</span><span style="color:#66d9ef">int</span><span style="color:#f92672">&gt;</span> data;
</span></span><span style="display:flex;"><span>};
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">int</span> <span style="color:#a6e22e">main</span>() {
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">auto</span> sp <span style="color:#f92672">=</span> std<span style="color:#f92672">::</span>make_shared<span style="color:#f92672">&lt;</span><span style="color:#66d9ef">int</span><span style="color:#f92672">&gt;</span>(<span style="color:#ae81ff">42</span>);
</span></span><span style="display:flex;"><span>    std<span style="color:#f92672">::</span>weak_ptr<span style="color:#f92672">&lt;</span><span style="color:#66d9ef">int</span><span style="color:#f92672">&gt;</span> wp <span style="color:#f92672">=</span> sp;      <span style="color:#75715e">// wp observes the int managed by sp
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>
</span></span><span style="display:flex;"><span>    std<span style="color:#f92672">::</span>cout <span style="color:#f92672">&lt;&lt;</span> <span style="color:#e6db74">&#34;Initially, wp.expired() = &#34;</span> 
</span></span><span style="display:flex;"><span>              <span style="color:#f92672">&lt;&lt;</span> std<span style="color:#f92672">::</span>boolalpha <span style="color:#f92672">&lt;&lt;</span> wp.expired() <span style="color:#f92672">&lt;&lt;</span> <span style="color:#e6db74">&#34;</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">&#34;</span>;  <span style="color:#75715e">// false, object is alive
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>
</span></span><span style="display:flex;"><span>    sp.reset();  <span style="color:#75715e">// drop the only shared_ptr owner; the int is deleted here
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">if</span> (wp.expired()) {
</span></span><span style="display:flex;"><span>        std<span style="color:#f92672">::</span>cout <span style="color:#f92672">&lt;&lt;</span> <span style="color:#e6db74">&#34;After resetting sp, wp indicates object is expired.</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">&#34;</span>;
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>    <span style="color:#75715e">// Attempt to lock the weak_ptr (should yield null because object was destroyed):
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>    <span style="color:#66d9ef">if</span> (<span style="color:#66d9ef">auto</span> sp2 <span style="color:#f92672">=</span> wp.lock()) {
</span></span><span style="display:flex;"><span>        std<span style="color:#f92672">::</span>cout <span style="color:#f92672">&lt;&lt;</span> <span style="color:#e6db74">&#34;Object is still alive: &#34;</span> <span style="color:#f92672">&lt;&lt;</span> <span style="color:#f92672">*</span>sp2 <span style="color:#f92672">&lt;&lt;</span> <span style="color:#e6db74">&#34;</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">&#34;</span>;
</span></span><span style="display:flex;"><span>    } <span style="color:#66d9ef">else</span> {
</span></span><span style="display:flex;"><span>        std<span style="color:#f92672">::</span>cout <span style="color:#f92672">&lt;&lt;</span> <span style="color:#e6db74">&#34;Object no longer exists, weak_ptr.lock() returned null.</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">&#34;</span>;
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>Output:</p>
<pre tabindex="0"><code>Initially, wp.expired() = false  
After resetting sp, wp indicates object is expired.  
Object no longer exists, weak_ptr.lock() returned null.
</code></pre><p>In this example, <code>sp</code> is a <code>shared_ptr&lt;int&gt;</code> that owns an integer. We create <code>wp</code> as a <code>weak_ptr</code> observing the same integer. Initially, <code>wp.expired()</code> is <code>false</code> because the object is still owned by <code>sp</code>. After we reset <code>sp</code> (destroying the last owning reference to the integer), the object is deleted. Now <code>wp.expired()</code> becomes <code>true</code>, and locking the weak pointer yields a null pointer. This shows how <code>weak_ptr</code> can safely detect that the object is gone. If we had only a raw pointer to the int, it would be dangling at this point with no way to detect it; by contrast, <code>weak_ptr</code> provides a mechanism to check validity (<a href="https://stackoverflow.com/questions/12030650/when-is-stdweak-ptr-useful#:~:text=,lock">c++ - When is std::weak_ptr useful? - Stack Overflow</a>) (<a href="https://stackoverflow.com/questions/12030650/when-is-stdweak-ptr-useful#:~:text=,lock">c++ - When is std::weak_ptr useful? - Stack Overflow</a>).</p>
<p>The most common use of <code>weak_ptr</code> is <strong>to break circular references</strong> in data structures. For instance, imagine a simple scenario of two objects that refer to each other via <code>shared_ptr</code>: Object A holds a <code>shared_ptr</code> to Object B, and Object B holds a <code>shared_ptr</code> to Object A. This creates a reference cycle – each has a count of at least 1 due to the other, so their reference counts never drop to zero, and they will never be freed (a memory leak) unless the cycle is broken manually. By changing one of those <code>shared_ptr</code> references to a <code>weak_ptr</code> (say, B holds a <code>weak_ptr</code> to A or vice versa), you break the ownership cycle: one object is the true owner (shared), and the reverse link is non-owning (weak). Then the owned object can be destroyed properly when the owner’s <code>shared_ptr</code> count goes to zero (<a href="https://cpp-core-guidelines-docs.vercel.app/resource#:~:text=,to%20destroy%20a%20cyclic%20structure">R: Resource management – C++</a>). This technique is vital in complex object graphs like observer patterns, tree parent-child relationships, or caches where objects refer back to their owners. In summary, <code>std::weak_ptr</code> should be used for <strong>non-owning references</strong> to objects managed by <code>shared_ptr</code>. It allows you to safely observe the object’s lifetime without extending it. If you find yourself wanting to use a raw pointer to reference an object that is managed elsewhere by a <code>shared_ptr</code>, consider using a <code>weak_ptr</code> instead for safety.</p>
<h2 id="best-practices-for-dynamic-memory-management-in-modern-c">Best Practices for Dynamic Memory Management in Modern C++</h2>
<p>Effective memory management in C++17 goes beyond just choosing the right smart pointer. It involves adhering to patterns that ensure safe ownership, prevent leaks, and minimise overhead. Here are some best practices and guidelines for using smart pointers and dynamic memory:</p>
<ul>
<li>
<p><strong>Prefer RAII and smart pointers over manual <code>new</code>/<code>delete</code>:</strong> Whenever you allocate dynamic memory, immediately encapsulate it in a smart pointer (<code>unique_ptr</code> or <code>shared_ptr</code>) or a suitable RAII container. This ensures that the memory will be automatically freed even if exceptions are thrown or if functions return early, greatly reducing the chance of leaks (<a href="https://cpp-core-guidelines-docs.vercel.app/resource#:~:text=They%20can%20prevent%20resource%20leaks">R: Resource management – C++</a>). In modern C++, you should rarely see naked <code>new</code> or <code>delete</code> in high-level code – resource-owning raw pointers are strongly discouraged in favour of smart pointers.</p>
</li>
<li>
<p><strong>Use <code>std::unique_ptr</code> as the default owning pointer:</strong> If an object has a single owner, <code>unique_ptr</code> is the simplest and most efficient choice. It clearly signals exclusive ownership and has zero runtime overhead beyond a raw pointer. Prefer <code>unique_ptr</code> unless you explicitly need shared ownership (<a href="https://cpp-core-guidelines-docs.vercel.app/resource#:~:text=">R: Resource management – C++</a>). This makes object lifetime and destruction timing easier to reason about (the object is destroyed when the <code>unique_ptr</code> goes out of scope). For example, use <code>unique_ptr</code> for members that are implementation details of a class, or for managing memory in a function that creates and uses a resource privately.</p>
</li>
<li>
<p><strong>Use <code>std::shared_ptr</code> only when ownership must be shared:</strong> If multiple parts of your program need to hold pointers to the same object and ensure it stays alive as long as any part needs it, then use <code>shared_ptr</code>. But be mindful of the overhead of reference counting and the complexities of shared ownership. Do not gratuitously use <code>shared_ptr</code> for every object – doing so adds unnecessary atomic operations and indirection (<a href="https://cpp-core-guidelines-docs.vercel.app/resource#:~:text=A%20,implicitly%20maintain%20a%20use%20count">R: Resource management – C++</a>). A good practice is to make the decision of using <code>shared_ptr</code> explicit: document why an object has shared ownership. When using <code>shared_ptr</code>, prefer to pass around (const) references to it in function parameters if the function only needs to use the object without prolonging its lifetime; this avoids bumping the refcount unnecessarily.</p>
</li>
<li>
<p><strong>Avoid <strong>reference cycles</strong> and use <code>std::weak_ptr</code> for observers:</strong> Be very careful to avoid situations where <code>shared_ptr</code>s refer to each other in a cycle (directly or indirectly). Such cycles will lead to memory leaks because the reference count will never drop to zero (<a href="https://cpp-core-guidelines-docs.vercel.app/resource#:~:text=,to%20destroy%20a%20cyclic%20structure">R: Resource management – C++</a>). To break cycles, or whenever you have one object observing another without owning it, use <code>weak_ptr</code>. A <code>weak_ptr</code> allows one part of the code to refer to an object without affecting its lifetime. For example, in a parent-child relationship, the parent could hold a <code>shared_ptr</code> to the child, and the child could hold a <code>weak_ptr</code> back to the parent. This way, if the parent is destroyed, the child’s weak reference can detect it and avoid accessing a freed object. Using <code>weak_ptr</code> is also useful in caching scenarios or event listener lists, where you want to drop expired objects automatically. In summary, <strong>use <code>weak_ptr</code> for non-owning pointers to prevent dangling pointer issues (<a href="https://stackoverflow.com/questions/12030650/when-is-stdweak-ptr-useful#:~:text=,lock">c++ - When is std::weak_ptr useful? - Stack Overflow</a>) and to break reference cycles</strong>.</p>
</li>
<li>
<p><strong>Prefer <code>std::make_unique</code> and <code>std::make_shared</code> for creation:</strong> When creating smart pointers, use the factory functions <code>std::make_unique&lt;T&gt;(...)</code> and <code>std::make_shared&lt;T&gt;(...)</code> instead of calling <code>new</code> directly. These functions not only make the code more concise and clear (no need to repeat the type <code>T</code> on both sides) but also provide efficiency and exception-safety benefits (<a href="https://cpp-core-guidelines-docs.vercel.app/resource#:~:text=">R: Resource management – C++</a>) (<a href="https://cpp-core-guidelines-docs.vercel.app/resource#:~:text=,counts%20next%20to%20its%20object">R: Resource management – C++</a>). <code>make_shared</code> in particular allocates the object and the control block in one contiguous block of memory, which reduces allocation overhead and can improve cache locality (<a href="https://cpp-core-guidelines-docs.vercel.app/resource#:~:text=,counts%20next%20to%20its%20object">R: Resource management – C++</a>). It also avoids certain potential memory leaks in complex expressions by ensuring that the object is constructed and owned by the smart pointer in one step. Similarly, <code>make_unique</code> was added in C++14 to safely construct a <code>unique_ptr</code> without risking leaks in case of exceptions. Always prefer these over raw <code>new</code>. In C++17, <code>auto ptr = std::make_unique&lt;Foo&gt;(args...);</code> is the recommended idiom for constructing a <code>unique_ptr</code> to a new <code>Foo</code>.</p>
</li>
<li>
<p><strong>Don’t mix owning raw pointers with smart pointers:</strong> Once a raw pointer is managed by a smart pointer, let the smart pointer be the sole owner. Do not manually <code>delete</code> a raw pointer that is held by a smart pointer – this will likely cause a double deletion when the smart pointer tries to delete in its destructor. Likewise, avoid scenarios where you have some raw pointers and some smart pointers referencing the same object; this can lead to confusion about who owns the object and when it gets deleted. If you need to give an existing raw pointer to a smart pointer (say, to transfer ownership), use <code>std::move</code> into a <code>unique_ptr</code> or assign to a <code>shared_ptr</code> and then <strong>do not use</strong> the raw pointer again. In essence, maintain clear ownership: either an object is managed by smart pointers, or it’s managed manually, but not both. A related best practice is to use <code>std::weak_ptr</code> (or raw pointers marked as observers) for any non-owning references, rather than sharing ownership arbitrarily.</p>
</li>
<li>
<p><strong>Be mindful of performance and memory overhead:</strong> Smart pointers greatly reduce the risk of leaks and errors, but they are not free in terms of performance. If you have a performance-critical section, minimise operations that bump reference counts on <code>shared_ptr</code>. Consider passing <code>shared_ptr</code> by reference to avoid atomic increments when appropriate. Also, be aware that every <code>shared_ptr</code> allocation typically involves at least two memory allocations (unless using <code>make_shared</code>): one for the object and one for the control block. In tight memory scenarios or for very small objects, this overhead might be significant. Using <code>make_shared</code> alleviates some of this by combining allocations (<a href="https://cpp-core-guidelines-docs.vercel.app/resource#:~:text=,counts%20next%20to%20its%20object">R: Resource management – C++</a>). For <code>unique_ptr</code>, the overhead is minimal, but remember that creating and destroying many small objects can still be costly due to the underlying <code>new</code>/<code>delete</code>. In such cases, pooling or other allocation strategies might be worth considering, but those are advanced topics beyond the scope of this article. For most use cases, smart pointers hit a good balance of safety and performance.</p>
</li>
<li>
<p><strong>Use smart pointers to express ownership semantics clearly:</strong> The choice between <code>unique_ptr</code>, <code>shared_ptr</code>, or <code>weak_ptr</code> should be guided by ownership semantics in your design. By using the appropriate smart pointer, you make the code’s intent clear. Reviewers and future maintainers can tell at a glance whether a function takes ownership of a resource (e.g., a function accepting a <code>unique_ptr</code> is explicitly saying it will take over ownership), or whether a class shares ownership of a resource (<code>shared_ptr</code>) or just observes it (<code>weak_ptr</code>). Leverage this to write self-documenting interfaces. The C++ Core Guidelines, for example, encourage using smart pointer types in function signatures to make lifetime expectations explicit (only pass a smart pointer by value if you intend to share/transfer ownership) (<a href="https://cpp-core-guidelines-docs.vercel.app/resource#:~:text=R,to%20explicitly%20express%20lifetime%20semantics">R: Resource management – C++</a>) (<a href="https://cpp-core-guidelines-docs.vercel.app/resource#:~:text=Any%20type%20,is%20considered%20a%20smart%20pointer">R: Resource management – C++</a>).</p>
</li>
<li>
<p><strong>Consider object lifetime and scope</strong> before using dynamic allocation at all: As a final thought, remember that not everything needs to be on the heap. Often, objects can be allocated with automatic storage duration (on the stack) or as members of other objects or containers, which avoids dynamic allocation altogether. This isn’t a rule about smart pointers per se, but a general memory management tip: prefer the simplest ownership model that meets your needs. If a resource doesn’t need to outlive the scope of a function, a local variable is best. If you need a growable array or collection of objects, a standard container like <code>std::vector</code> manages memory for you. Use dynamic allocation (and hence smart pointers) when you truly need flexible lifetime or polymorphic behaviour that requires heap allocation. When you do, the smart pointers are there to help you manage that lifetime safely.</p>
</li>
</ul>
<h2 id="conclusion-and-future-considerations">Conclusion and Future Considerations</h2>
<p>C++17 smart pointers (<code>unique_ptr</code>, <code>shared_ptr</code>, and <code>weak_ptr</code>) provide robust facilities for automatic memory management, helping developers write safer and more maintainable code. By expressing ownership explicitly, they eliminate most common causes of memory leaks and dangling pointers, while also clarifying how resources are passed around in your program. To recap: <strong><code>std::unique_ptr</code></strong> offers fast and exclusive ownership for singly-owned resources, <strong><code>std::shared_ptr</code></strong> offers flexible shared ownership with reference-counting (use it only when needed), and <strong><code>std::weak_ptr</code></strong> offers a way to observe or reference a <code>shared_ptr</code>-managed object without extending its lifetime, which is essential for breaking cycles and preventing leaks. Using these smart pointers in adherence to RAII principles means that resources are acquired and released in a well-defined manner, greatly reducing the cognitive load of manual memory management.</p>
<p>In C++17, these smart pointers are mature and well-tested. Going forward, the C++ standard and community continue to refine memory management techniques. For example, C++20 introduced improvements like atomic support for <code>shared_ptr</code> operations to aid concurrency, and there are proposals for new smart pointer types or utilities (such as <code>std::observer_ptr</code> for non-owning raw pointer wrappers, in the Library Fundamentals TS). Tools like sanitizers and static analyzers are increasingly used to catch memory errors that smart pointers can’t prevent (such as buffer overruns or misuse of unowned raw pointers). Nonetheless, the fundamental advice remains: <strong>prefer RAII and smart pointers for dynamic memory</strong>. By following best practices – choosing the right smart pointer for the job, avoiding raw <code>new/delete</code>, and designing with clear ownership in mind – you can largely eliminate memory leaks and many classes of errors in C++ code (<a href="https://cpp-core-guidelines-docs.vercel.app/resource#:~:text=They%20can%20prevent%20resource%20leaks">R: Resource management – C++</a>). In summary, smart pointers are a key component of modern C++ memory management, enabling developers to write code that is both safer and easier to understand, without sacrificing performance or control. With disciplined use of <code>unique_ptr</code>, <code>shared_ptr</code>, and <code>weak_ptr</code>, intermediate and advanced developers can master memory management in C++17 and beyond, laying a strong foundation for building reliable software.</p>
<p><strong>Sources:</strong></p>
<ul>
<li>C++ Core Guidelines (R.20, R.21, R.22, R.23, R.24) – Rules and rationale for using smart pointers and RAII (<a href="https://cpp-core-guidelines-docs.vercel.app/resource#:~:text=They%20can%20prevent%20resource%20leaks">R: Resource management – C++</a>) (<a href="https://cpp-core-guidelines-docs.vercel.app/resource#:~:text=">R: Resource management – C++</a>) (<a href="https://cpp-core-guidelines-docs.vercel.app/resource#:~:text=,counts%20next%20to%20its%20object">R: Resource management – C++</a>) (<a href="https://cpp-core-guidelines-docs.vercel.app/resource#:~:text=">R: Resource management – C++</a>) (<a href="https://cpp-core-guidelines-docs.vercel.app/resource#:~:text=,to%20destroy%20a%20cyclic%20structure">R: Resource management – C++</a>).</li>
<li>Microsoft Docs – <em>Smart pointers (Modern C++)</em> – Descriptions of <code>unique_ptr</code>, <code>shared_ptr</code>, <code>weak_ptr</code> and their use cases (<a href="https://learn.microsoft.com/en-us/cpp/cpp/smart-pointers-modern-cpp?view=msvc-170#:~:text=,and%20Use%20unique_ptr%20Instances%20and">Smart pointers (Modern C++) | Microsoft Learn</a>) (<a href="https://learn.microsoft.com/en-us/cpp/cpp/smart-pointers-modern-cpp?view=msvc-170#:~:text=%2A%20%60shared_ptr%60%20Reference,memory%3E%60.%20For">Smart pointers (Modern C++) | Microsoft Learn</a>) (<a href="https://learn.microsoft.com/en-us/cpp/cpp/smart-pointers-modern-cpp?view=msvc-170#:~:text=%2A%20%60weak_ptr%60%20Special,Instances%20%20and%20%2010">Smart pointers (Modern C++) | Microsoft Learn</a>).</li>
<li>cppreference – Documentation of <a href="https://en.cppreference.com/w/cpp/memory/unique_ptr"><code>std::unique_ptr</code></a>, <a href="https://en.cppreference.com/w/cpp/memory/shared_ptr"><code>std::shared_ptr</code></a>, and <a href="https://en.cppreference.com/w/cpp/memory/weak_ptr"><code>std::weak_ptr</code></a> (accessed for behavioural details).</li>
<li>Stack Overflow – Discussion on when <code>std::weak_ptr</code> is useful, illustrating the dangling pointer problem and how <code>weak_ptr</code> addresses it (<a href="https://stackoverflow.com/questions/12030650/when-is-stdweak-ptr-useful#:~:text=,lock">c++ - When is std::weak_ptr useful? - Stack Overflow</a>) (<a href="https://stackoverflow.com/questions/12030650/when-is-stdweak-ptr-useful#:~:text=,lock">c++ - When is std::weak_ptr useful? - Stack Overflow</a>).</li>
</ul>
]]></content>
        </item>
        
        <item>
            <title>A Comprehensive Examination of Exception Handling in C&#43;&#43;17</title>
            <link>https://blog.miguens.one/posts/2025/02/a-comprehensive-examination-of-exception-handling-in-c-17/</link>
            <pubDate>Mon, 10 Feb 2025 00:00:00 +0000</pubDate>
            
            <guid>https://blog.miguens.one/posts/2025/02/a-comprehensive-examination-of-exception-handling-in-c-17/</guid>
            <description>&lt;h3 id=&#34;introduction&#34;&gt;Introduction&lt;/h3&gt;
&lt;p&gt;Exception handling is an essential aspect of robust software development in C++. In my experience, well-structured exception handling can significantly improve a program’s reliability and maintainability, particularly when dealing with complex error scenarios. In this post, I examine the fundamentals of exception handling in C++17, discussing &lt;code&gt;try-catch&lt;/code&gt; blocks, exception specifications, the standard exception hierarchy, and best practices for error handling. I also illustrate key concepts with code examples and references to relevant authoritative sources (Stroustrup, &lt;em&gt;The C++ Programming Language&lt;/em&gt;, 4th ed.; ISO/IEC 14882:2017; cppreference.com).&lt;/p&gt;</description>
            <content type="html"><![CDATA[<h3 id="introduction">Introduction</h3>
<p>Exception handling is an essential aspect of robust software development in C++. In my experience, well-structured exception handling can significantly improve a program’s reliability and maintainability, particularly when dealing with complex error scenarios. In this post, I examine the fundamentals of exception handling in C++17, discussing <code>try-catch</code> blocks, exception specifications, the standard exception hierarchy, and best practices for error handling. I also illustrate key concepts with code examples and references to relevant authoritative sources (Stroustrup, <em>The C++ Programming Language</em>, 4th ed.; ISO/IEC 14882:2017; cppreference.com).</p>
<hr>
<h3 id="1-what-are-exceptions-and-why-they-matter">1. What Are Exceptions and Why They Matter</h3>
<p>From my perspective, exceptions provide a mechanism for signalling and handling error conditions outside the normal flow of a program. Rather than forcing every function to return an error code (which can be cumbersome to manage), exceptions allow us to separate the error-handling code from the primary logic. When an error occurs, we <em>throw</em> an exception, and the runtime system <em>unwinds</em> the stack until it finds a suitable handler (<code>catch</code> block) capable of dealing with the specific exception.</p>
<ol>
<li><strong>Separation of concerns</strong> – Error handling does not obscure the main logic.</li>
<li><strong>Improved readability</strong> – Code becomes more readable when not cluttered with checks for return codes.</li>
<li><strong>Automatic cleanup</strong> – As the stack unwinds, objects with destructors are automatically destroyed (RAII principles).</li>
</ol>
<p><em>(For a more detailed treatment of exceptions, see ISO/IEC 14882:2017 §15.)</em></p>
<hr>
<h3 id="2-understanding-try-catch-blocks">2. Understanding <code>try-catch</code> Blocks</h3>
<p>At the heart of exception handling in C++ is the <code>try-catch</code> construct, which I believe remains one of the most intuitive ways to handle unexpected runtime conditions. The general syntax is:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-cpp" data-lang="cpp"><span style="display:flex;"><span><span style="color:#66d9ef">try</span> {
</span></span><span style="display:flex;"><span>    <span style="color:#75715e">// Code that may throw an exception
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>} <span style="color:#66d9ef">catch</span> (<span style="color:#66d9ef">const</span> std<span style="color:#f92672">::</span>exception<span style="color:#f92672">&amp;</span> e) {
</span></span><span style="display:flex;"><span>    <span style="color:#75715e">// Handler for std::exception and its subclasses
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>} <span style="color:#66d9ef">catch</span> (...) {
</span></span><span style="display:flex;"><span>    <span style="color:#75715e">// Handler for any exception type
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>}
</span></span></code></pre></div><ul>
<li><strong><code>try</code> block</strong>: Encapsulates the code where exceptions might occur.</li>
<li><strong><code>catch</code> block(s)</strong>: Defined to handle exceptions of specific types.</li>
<li><strong><code>catch (...)</code></strong>: A catch-all handler that intercepts exceptions of any type (though it is often discouraged to rely on this without logging or rethrowing, since diagnosis becomes harder).</li>
</ul>
<p>I typically recommend catching exceptions by reference (especially <code>const</code> reference) to avoid slicing and unnecessary copies. For instance, <code>catch (const std::exception&amp; e)</code> is preferred over <code>catch (std::exception e)</code>.</p>
<hr>
<h3 id="3-exception-specifications-in-c17">3. Exception Specifications in C++17</h3>
<p>In earlier versions of C++, dynamic exception specifications (e.g., <code>throw(int, std::exception)</code>) were used to declare which types of exceptions a function might throw. However, these were largely deprecated in C++11 and officially removed in C++17 (ISO/IEC 14882:2017). The modern approach is to use the <code>noexcept</code> specifier, which indicates whether a function is guaranteed <em>not</em> to throw exceptions:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-cpp" data-lang="cpp"><span style="display:flex;"><span><span style="color:#66d9ef">int</span> <span style="color:#a6e22e">doSomething</span>() <span style="color:#66d9ef">noexcept</span> {
</span></span><span style="display:flex;"><span>    <span style="color:#75715e">// Guaranteed not to throw
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>    <span style="color:#66d9ef">return</span> <span style="color:#ae81ff">42</span>;
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><ul>
<li><strong><code>noexcept</code></strong>: Declares that a function does not throw exceptions (if an exception does escape, the program calls <code>std::terminate</code>).</li>
<li><strong>Implicit exception specifications</strong>: Functions without explicit <code>noexcept</code> can potentially throw exceptions, yet the language does not require a declaration of which exceptions might be thrown.</li>
</ul>
<p>From my standpoint, declaring functions as <code>noexcept</code> where possible aids both compiler optimisations and code clarity. Nonetheless, I caution that one should ensure a function truly <em>cannot</em> throw, or risk unexpected termination.</p>
<hr>
<h3 id="4-standard-exceptions">4. Standard Exceptions</h3>
<p>The C++ Standard Library provides a robust hierarchy of exceptions, all derived from the base class <code>std::exception</code>. Some commonly used exceptions include:</p>
<ol>
<li><strong><code>std::runtime_error</code></strong> – Signifies errors that occur during runtime (e.g., division by zero, illegal operations).</li>
<li><strong><code>std::logic_error</code></strong> – Represents errors in a program’s logic (e.g., violations of logical preconditions).</li>
<li><strong><code>std::out_of_range</code></strong> – Signals an out-of-bounds array or container access.</li>
<li><strong><code>std::bad_alloc</code></strong> – Thrown when memory allocation fails.</li>
<li><strong><code>std::bad_cast</code></strong> – Triggered by an invalid type cast (e.g., <code>dynamic_cast</code> failure).</li>
</ol>
<p>I often rely on <code>std::runtime_error</code> (or a subclass thereof) for many general-purpose runtime issues, primarily because it is semantically clear. However, one can also create custom exception classes derived from <code>std::exception</code> if there is a need for domain-specific information (Stroustrup, 2013).</p>
<hr>
<h3 id="5-best-practices-for-error-handling">5. Best Practices for Error Handling</h3>
<p>In my experience, handling errors effectively in C++ involves adhering to a set of best practices:</p>
<ol>
<li><strong>Throw by value, catch by reference</strong>
<ul>
<li><em>Why?</em> Throwing by value is concise; catching by reference prevents object slicing and unnecessary copying.</li>
</ul>
</li>
<li><strong>Avoid using exceptions for control flow</strong>
<ul>
<li><em>Rationale:</em> Exceptions are expensive in terms of performance and can make the code less predictable.</li>
</ul>
</li>
<li><strong>Ensure exception safety</strong>
<ul>
<li><em>Method:</em> Use strong exception guarantees (rollback on failure) or basic exception guarantees (no resource leaks).</li>
</ul>
</li>
<li><strong>Prefer RAII (Resource Acquisition Is Initialisation)</strong>
<ul>
<li><em>Explanation:</em> Bind resources (e.g., file handles, memory) to objects that automatically release those resources in their destructors (cppreference.com, n.d.).</li>
</ul>
</li>
<li><strong>Use <code>noexcept</code> judiciously</strong>
<ul>
<li><em>Balance:</em> While it can improve performance, incorrectly marking functions as <code>noexcept</code> that can throw leads to program termination.</li>
</ul>
</li>
</ol>
<hr>
<h3 id="6-practical-examples">6. Practical Examples</h3>
<p>Below are a few concise examples demonstrating some of these principles in action.</p>
<h4 id="61-throwing-and-catching-standard-exceptions">6.1 Throwing and Catching Standard Exceptions</h4>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-cpp" data-lang="cpp"><span style="display:flex;"><span><span style="color:#75715e">#include</span> <span style="color:#75715e">&lt;iostream&gt;</span><span style="color:#75715e">
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">#include</span> <span style="color:#75715e">&lt;stdexcept&gt;</span><span style="color:#75715e"> </span><span style="color:#75715e">// For standard exceptions
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">int</span> <span style="color:#a6e22e">main</span>() {
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">try</span> {
</span></span><span style="display:flex;"><span>        <span style="color:#75715e">// Simulate an error condition
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>        <span style="color:#66d9ef">throw</span> std<span style="color:#f92672">::</span>runtime_error(<span style="color:#e6db74">&#34;Something went wrong!&#34;</span>);
</span></span><span style="display:flex;"><span>    } <span style="color:#66d9ef">catch</span> (<span style="color:#66d9ef">const</span> std<span style="color:#f92672">::</span>runtime_error<span style="color:#f92672">&amp;</span> e) {
</span></span><span style="display:flex;"><span>        std<span style="color:#f92672">::</span>cerr <span style="color:#f92672">&lt;&lt;</span> <span style="color:#e6db74">&#34;Runtime error caught: &#34;</span> <span style="color:#f92672">&lt;&lt;</span> e.what() <span style="color:#f92672">&lt;&lt;</span> std<span style="color:#f92672">::</span>endl;
</span></span><span style="display:flex;"><span>    } <span style="color:#66d9ef">catch</span> (<span style="color:#66d9ef">const</span> std<span style="color:#f92672">::</span>exception<span style="color:#f92672">&amp;</span> e) {
</span></span><span style="display:flex;"><span>        <span style="color:#75715e">// This block catches exceptions derived from std::exception
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>        std<span style="color:#f92672">::</span>cerr <span style="color:#f92672">&lt;&lt;</span> <span style="color:#e6db74">&#34;Standard exception caught: &#34;</span> <span style="color:#f92672">&lt;&lt;</span> e.what() <span style="color:#f92672">&lt;&lt;</span> std<span style="color:#f92672">::</span>endl;
</span></span><span style="display:flex;"><span>    } <span style="color:#66d9ef">catch</span> (...) {
</span></span><span style="display:flex;"><span>        <span style="color:#75715e">// Catch-all for non-standard exceptions
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>        std<span style="color:#f92672">::</span>cerr <span style="color:#f92672">&lt;&lt;</span> <span style="color:#e6db74">&#34;Unknown exception caught.&#34;</span> <span style="color:#f92672">&lt;&lt;</span> std<span style="color:#f92672">::</span>endl;
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">return</span> <span style="color:#ae81ff">0</span>;
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><ul>
<li><strong>Explanation:</strong> In this snippet, I utilise multiple <code>catch</code> blocks to handle various types of exceptions. Once the <code>throw</code> statement is encountered, control transfers immediately to the matching <code>catch</code> block.</li>
</ul>
<h4 id="62-custom-exceptions">6.2 Custom Exceptions</h4>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-cpp" data-lang="cpp"><span style="display:flex;"><span><span style="color:#75715e">#include</span> <span style="color:#75715e">&lt;iostream&gt;</span><span style="color:#75715e">
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">#include</span> <span style="color:#75715e">&lt;stdexcept&gt;</span><span style="color:#75715e">
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">#include</span> <span style="color:#75715e">&lt;string&gt;</span><span style="color:#75715e">
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">class</span> <span style="color:#a6e22e">MyCustomError</span> <span style="color:#f92672">:</span> <span style="color:#66d9ef">public</span> std<span style="color:#f92672">::</span>exception {
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">private</span><span style="color:#f92672">:</span>
</span></span><span style="display:flex;"><span>    std<span style="color:#f92672">::</span>string message;
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">public</span><span style="color:#f92672">:</span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">explicit</span> MyCustomError(<span style="color:#66d9ef">const</span> std<span style="color:#f92672">::</span>string<span style="color:#f92672">&amp;</span> msg) <span style="color:#f92672">:</span> message(msg) {}
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">const</span> <span style="color:#66d9ef">char</span><span style="color:#f92672">*</span> <span style="color:#a6e22e">what</span>() <span style="color:#66d9ef">const</span> <span style="color:#66d9ef">noexcept</span> <span style="color:#66d9ef">override</span> {
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">return</span> message.c_str();
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>};
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">void</span> <span style="color:#a6e22e">riskyFunction</span>(<span style="color:#66d9ef">bool</span> errorOccured) {
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">if</span> (errorOccured) {
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">throw</span> MyCustomError(<span style="color:#e6db74">&#34;A custom error occurred!&#34;</span>);
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">int</span> <span style="color:#a6e22e">main</span>() {
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">try</span> {
</span></span><span style="display:flex;"><span>        riskyFunction(true);
</span></span><span style="display:flex;"><span>    } <span style="color:#66d9ef">catch</span> (<span style="color:#66d9ef">const</span> MyCustomError<span style="color:#f92672">&amp;</span> e) {
</span></span><span style="display:flex;"><span>        std<span style="color:#f92672">::</span>cerr <span style="color:#f92672">&lt;&lt;</span> <span style="color:#e6db74">&#34;Caught MyCustomError: &#34;</span> <span style="color:#f92672">&lt;&lt;</span> e.what() <span style="color:#f92672">&lt;&lt;</span> std<span style="color:#f92672">::</span>endl;
</span></span><span style="display:flex;"><span>    } <span style="color:#66d9ef">catch</span> (...) {
</span></span><span style="display:flex;"><span>        std<span style="color:#f92672">::</span>cerr <span style="color:#f92672">&lt;&lt;</span> <span style="color:#e6db74">&#34;Caught unknown exception.&#34;</span> <span style="color:#f92672">&lt;&lt;</span> std<span style="color:#f92672">::</span>endl;
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">return</span> <span style="color:#ae81ff">0</span>;
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><ul>
<li><strong>Details</strong>: Here, I derive <code>MyCustomError</code> from <code>std::exception</code>. This class overrides the <code>what()</code> function to provide a descriptive error message, which can then be retrieved when the exception is caught.</li>
</ul>
<h4 id="63-using-noexcept">6.3 Using <code>noexcept</code></h4>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-cpp" data-lang="cpp"><span style="display:flex;"><span><span style="color:#75715e">#include</span> <span style="color:#75715e">&lt;iostream&gt;</span><span style="color:#75715e">
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">int</span> <span style="color:#a6e22e">doSomeComputation</span>() <span style="color:#66d9ef">noexcept</span> {
</span></span><span style="display:flex;"><span>    <span style="color:#75715e">// Guaranteed not to throw
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>    <span style="color:#66d9ef">return</span> <span style="color:#ae81ff">42</span>;
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">int</span> <span style="color:#a6e22e">main</span>() {
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">static_assert</span>(<span style="color:#66d9ef">noexcept</span>(doSomeComputation()), <span style="color:#e6db74">&#34;Function must be noexcept!&#34;</span>);
</span></span><span style="display:flex;"><span>    std<span style="color:#f92672">::</span>cout <span style="color:#f92672">&lt;&lt;</span> <span style="color:#e6db74">&#34;Computation result: &#34;</span> <span style="color:#f92672">&lt;&lt;</span> doSomeComputation() <span style="color:#f92672">&lt;&lt;</span> std<span style="color:#f92672">::</span>endl;
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">return</span> <span style="color:#ae81ff">0</span>;
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><ul>
<li><strong>Commentary</strong>: Marking <code>doSomeComputation()</code> as <code>noexcept</code> informs both the compiler and other developers that the function will not throw, enabling further optimisations and clarity regarding error expectations.</li>
</ul>
<hr>
<h3 id="conclusion">Conclusion</h3>
<p>Exception handling in C++17 remains a powerful feature for crafting robust and maintainable applications. By judiciously using <code>try-catch</code> blocks, leveraging standard exceptions, and employing modern practices such as <code>noexcept</code>, we can create programs that cleanly separate error handling from core functionality. It is my view that, as C++ continues to evolve, exceptions will remain relevant for dealing with both anticipated and unforeseen runtime issues. However, it is essential to adopt a disciplined approach—balancing performance, readability, and correctness.</p>
<p>In the future, we may see further refinements to exception mechanisms, potentially influencing how we manage concurrency or how the language handles exception guarantees in more advanced use cases (ISO/IEC 14882:2017). Still, the foundational principles outlined here will likely endure, guiding us toward writing safer, more expressive C++ code.</p>
<hr>
<p><strong>References</strong></p>
<ul>
<li>ISO/IEC 14882:2017 – <em>Information Technology – Programming Languages – C++</em></li>
<li>Stroustrup, B. (2013). <em>The C++ Programming Language</em> (4th ed.). Addison-Wesley.</li>
<li>cppreference.com (n.d.). <em>Exception handling</em>. Retrieved from <a href="https://en.cppreference.com">https://en.cppreference.com</a></li>
</ul>
<p><em>Disclaimer: The code examples in this post are for illustrative purposes. Always test and adapt them to your specific use case.</em></p>
]]></content>
        </item>
        
        <item>
            <title>Lambda Expressions and Functional Programming in C&#43;&#43;17</title>
            <link>https://blog.miguens.one/posts/2024/12/lambda-expressions-and-functional-programming-in-c-17/</link>
            <pubDate>Mon, 09 Dec 2024 00:00:00 +0000</pubDate>
            
            <guid>https://blog.miguens.one/posts/2024/12/lambda-expressions-and-functional-programming-in-c-17/</guid>
            <description>&lt;h2 id=&#34;embracing-lambda-expressions-in-c17-a-step-towards-more-functional-programming&#34;&gt;Embracing Lambda Expressions in C++17: A Step Towards More Functional Programming**&lt;/h2&gt;
&lt;p&gt;Lambda expressions (anonymous functions) have long been a critical element of functional programming languages, and with the introduction of lambdas in C++11—subsequently refined in C++14 and C++17—this paradigmatic approach has firmly rooted itself in the modern C++ ecosystem. In my experience, embracing lambda expressions can profoundly simplify complex code structures, encourage more declarative patterns, and pave the way towards a more functional style of programming. In this blog post, I will critically examine the syntax and semantics of lambda expressions, discuss their capturing mechanisms, and demonstrate how they can be effectively leveraged in conjunction with the Standard Template Library (STL) algorithms to produce cleaner, more concise, and maintainable code. Throughout, I will reference authoritative sources and cite industry best practices, while offering my personal perspective on the benefits and potential pitfalls of this feature.&lt;/p&gt;</description>
            <content type="html"><![CDATA[<h2 id="embracing-lambda-expressions-in-c17-a-step-towards-more-functional-programming">Embracing Lambda Expressions in C++17: A Step Towards More Functional Programming**</h2>
<p>Lambda expressions (anonymous functions) have long been a critical element of functional programming languages, and with the introduction of lambdas in C++11—subsequently refined in C++14 and C++17—this paradigmatic approach has firmly rooted itself in the modern C++ ecosystem. In my experience, embracing lambda expressions can profoundly simplify complex code structures, encourage more declarative patterns, and pave the way towards a more functional style of programming. In this blog post, I will critically examine the syntax and semantics of lambda expressions, discuss their capturing mechanisms, and demonstrate how they can be effectively leveraged in conjunction with the Standard Template Library (STL) algorithms to produce cleaner, more concise, and maintainable code. Throughout, I will reference authoritative sources and cite industry best practices, while offering my personal perspective on the benefits and potential pitfalls of this feature.</p>
<hr>
<h3 id="introduction-to-lambda-expressions">Introduction to Lambda Expressions</h3>
<p>Lambda expressions, often referred to simply as &ldquo;lambdas,&rdquo; are compact function objects defined directly within expressions. Unlike traditional function objects (functors) or function pointers, lambdas allow developers to write code that more closely aligns with the functional programming model. Rather than explicitly defining a separate function or creating named functor classes, I can define a lambda in-line, capturing local variables if necessary and returning results based on the local context.</p>
<p>At their core, lambdas foster a more expressive and declarative programming style. When I leverage lambdas appropriately, I notice that my code tends to have fewer lines, reduced boilerplate, and a more direct mapping between intent and implementation (see Stroustrup, 2013).</p>
<hr>
<h3 id="syntax-and-structure-of-c17-lambda-expressions">Syntax and Structure of C++17 Lambda Expressions</h3>
<p>The syntax of a lambda expression in C++17 follows this general pattern:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-cpp" data-lang="cpp"><span style="display:flex;"><span>[captures](parameters) <span style="color:#66d9ef">noexcept</span>(optional) <span style="color:#f92672">-&gt;</span> return_type {
</span></span><span style="display:flex;"><span>    <span style="color:#75715e">// function body
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>}
</span></span></code></pre></div><ul>
<li><strong>Captures:</strong> The capture list (an element unique to lambdas) indicates which variables from the enclosing scope are accessible inside the lambda.</li>
<li><strong>Parameters:</strong> Similar to ordinary functions, parameters define the input interface.</li>
<li><strong>Return Type:</strong> The return type may be deduced automatically (a common practice) or specified explicitly using the <code>-&gt; return_type</code> syntax.</li>
<li><strong>Function Body:</strong> The executable statements that implement the logic.</li>
</ul>
<p>A minimal lambda might look like this:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-cpp" data-lang="cpp"><span style="display:flex;"><span><span style="color:#66d9ef">auto</span> print_hello <span style="color:#f92672">=</span> []() {
</span></span><span style="display:flex;"><span>    std<span style="color:#f92672">::</span>cout <span style="color:#f92672">&lt;&lt;</span> <span style="color:#e6db74">&#34;Hello from a lambda!&#34;</span> <span style="color:#f92672">&lt;&lt;</span> std<span style="color:#f92672">::</span>endl;
</span></span><span style="display:flex;"><span>};
</span></span></code></pre></div><p>In this simple example, no variables are captured, no parameters are declared, and the return type is <code>void</code>, deduced automatically. Although trivial, such a lambda already illustrates how lambdas can inline functionality directly where it is needed, reducing the cognitive load and overhead of navigating to separate function definitions.</p>
<hr>
<h3 id="captures-referencing-the-outer-scope">Captures: Referencing the Outer Scope</h3>
<p>Captures allow lambdas to access variables from their enclosing scope. In my view, understanding capture semantics is crucial for using lambdas effectively. C++17 provides several methods of capturing:</p>
<ol>
<li>
<p><strong>By Value:</strong> Enclosing variables are copied into the lambda’s closure. This is indicated by <code>[=]</code> (capture all by value) or explicitly listing variables, e.g. <code>[x]</code>.</p>
</li>
<li>
<p><strong>By Reference:</strong> Enclosing variables are referenced by the lambda, allowing the lambda to modify them. Indicated by <code>[&amp;]</code> (capture all by reference) or explicitly listing variables, e.g. <code>[&amp;x]</code>.</p>
</li>
<li>
<p><strong>Mixed Captures:</strong> Some variables can be captured by value and others by reference. For instance, <code>[=, &amp;y]</code> means capture all enclosing variables by value, except <code>y</code>, which should be captured by reference.</p>
</li>
<li>
<p><strong>Init Captures (C++14 and later):</strong> You can initialise variables within the capture list. For example, <code>[value = some_function()]</code> captures the result of <code>some_function()</code> by value.</p>
</li>
</ol>
<p>Here is an illustrative example:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-cpp" data-lang="cpp"><span style="display:flex;"><span><span style="color:#66d9ef">int</span> factor <span style="color:#f92672">=</span> <span style="color:#ae81ff">2</span>;
</span></span><span style="display:flex;"><span>std<span style="color:#f92672">::</span>vector<span style="color:#f92672">&lt;</span><span style="color:#66d9ef">int</span><span style="color:#f92672">&gt;</span> numbers <span style="color:#f92672">=</span> {<span style="color:#ae81ff">1</span>, <span style="color:#ae81ff">2</span>, <span style="color:#ae81ff">3</span>, <span style="color:#ae81ff">4</span>, <span style="color:#ae81ff">5</span>};
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">// Capturing &#39;factor&#39; by reference, meaning changes will affect &#39;factor&#39;
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>std<span style="color:#f92672">::</span>for_each(numbers.begin(), numbers.end(), [<span style="color:#f92672">&amp;</span>](<span style="color:#66d9ef">int</span> <span style="color:#f92672">&amp;</span>n) {
</span></span><span style="display:flex;"><span>    n <span style="color:#f92672">*=</span> factor;  <span style="color:#75715e">// modifies &#39;n&#39; in-place using the captured &#39;factor&#39;
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>});
</span></span></code></pre></div><p>After execution, <code>numbers</code> becomes <code>{2, 4, 6, 8, 10}</code>, confirming that <code>factor</code> was accessible within the lambda’s body. Crucially, I must be mindful of object lifetimes and potential dangling references when capturing by reference, as improper captures could lead to undefined behaviour. Authoritative sources such as cppreference.com highlight these considerations in detail (cppreference, n.d.).</p>
<hr>
<h3 id="lambdas-and-functional-programming">Lambdas and Functional Programming</h3>
<p>While C++ is not a purely functional language, lambdas facilitate a style more reminiscent of functional programming. Traditional imperative code often emphasises how a problem should be solved, focusing on step-by-step instructions. In contrast, a functional style encourages developers to focus on what is being computed, emphasising transformations, mapping, filtering, and reducing data sets.</p>
<p>For example, rather than using <code>for</code> loops and manual indexing, I often rely on higher-order functions—functions that take other functions (lambdas) as parameters—to define transformations on containers. This enables a more declarative approach, reducing side effects and making the code feel more compositional and modular.</p>
<hr>
<h3 id="using-lambdas-with-stl-algorithms">Using Lambdas with STL Algorithms</h3>
<p>The synergy between lambdas and the STL algorithms library (e.g., <code>&lt;algorithm&gt;</code>) is one of the most compelling reasons to embrace these expressions. With lambdas, I can write expressive one-liners that transform ranges, filter elements, and execute operations without the overhead of separate, named functor classes.</p>
<p>Consider the following example, where I filter a vector of integers:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-cpp" data-lang="cpp"><span style="display:flex;"><span><span style="color:#75715e">#include</span> <span style="color:#75715e">&lt;algorithm&gt;</span><span style="color:#75715e">
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">#include</span> <span style="color:#75715e">&lt;iostream&gt;</span><span style="color:#75715e">
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">#include</span> <span style="color:#75715e">&lt;vector&gt;</span><span style="color:#75715e">
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">int</span> <span style="color:#a6e22e">main</span>() {
</span></span><span style="display:flex;"><span>    std<span style="color:#f92672">::</span>vector<span style="color:#f92672">&lt;</span><span style="color:#66d9ef">int</span><span style="color:#f92672">&gt;</span> data <span style="color:#f92672">=</span> {<span style="color:#ae81ff">1</span>, <span style="color:#ae81ff">2</span>, <span style="color:#ae81ff">3</span>, <span style="color:#ae81ff">4</span>, <span style="color:#ae81ff">5</span>, <span style="color:#ae81ff">6</span>};
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#75715e">// Remove all even numbers using remove_if and a lambda
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>    <span style="color:#66d9ef">auto</span> it <span style="color:#f92672">=</span> std<span style="color:#f92672">::</span>remove_if(data.begin(), data.end(), [](<span style="color:#66d9ef">int</span> x) {
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">return</span> x <span style="color:#f92672">%</span> <span style="color:#ae81ff">2</span> <span style="color:#f92672">==</span> <span style="color:#ae81ff">0</span>;
</span></span><span style="display:flex;"><span>    });
</span></span><span style="display:flex;"><span>    data.erase(it, data.end()); <span style="color:#75715e">// Erase the &#34;removed&#34; elements
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>
</span></span><span style="display:flex;"><span>    <span style="color:#75715e">// Print the updated vector
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>    <span style="color:#66d9ef">for</span> (<span style="color:#66d9ef">int</span> val : data) {
</span></span><span style="display:flex;"><span>        std<span style="color:#f92672">::</span>cout <span style="color:#f92672">&lt;&lt;</span> val <span style="color:#f92672">&lt;&lt;</span> <span style="color:#e6db74">&#34; &#34;</span>;
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">return</span> <span style="color:#ae81ff">0</span>;
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>In this snippet, the lambda <code>[](int x) { return x % 2 == 0; }</code> acts as a predicate to identify which elements should be removed. By embedding the logic directly at the call site, I reduce mental context-switching and enhance code clarity.</p>
<p>Moreover, I can compose more complex transformations using <code>std::transform</code>:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-cpp" data-lang="cpp"><span style="display:flex;"><span>std<span style="color:#f92672">::</span>vector<span style="color:#f92672">&lt;</span><span style="color:#66d9ef">int</span><span style="color:#f92672">&gt;</span> doubled;
</span></span><span style="display:flex;"><span>doubled.resize(data.size());
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>std<span style="color:#f92672">::</span>transform(data.begin(), data.end(), doubled.begin(), [](<span style="color:#66d9ef">int</span> x) {
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">return</span> x <span style="color:#f92672">*</span> <span style="color:#ae81ff">2</span>;
</span></span><span style="display:flex;"><span>});
</span></span></code></pre></div><p>This use of lambdas aligns closely with a functional style: data flows from one transformation to the next, and the focus is on the nature of the computation rather than the mechanics of iteration.</p>
<hr>
<h3 id="multiple-perspectives-and-critical-analysis">Multiple Perspectives and Critical Analysis</h3>
<p>While I personally find lambdas extremely beneficial for expressiveness and maintainability, it is prudent to consider potential downsides. One could argue that overuse of lambdas may lead to overly nested or convoluted inline code, obscuring rather than clarifying intent. Indeed, I have encountered codebases where extensive nesting of lambdas made the logic more difficult to follow.</p>
<p>Another consideration involves performance. Although in many cases, lambdas are optimised as effectively as manually crafted functors (Meyers, 2014), edge cases may arise, especially when capturing large objects by value. Careful attention to capturing policies and awareness of compiler optimisation opportunities is advisable.</p>
<p>Nonetheless, when used judiciously, lambdas can significantly reduce boilerplate, promote reuse of generic algorithms, and encourage developers to think more abstractly, thus guiding them towards a more functional style of programming in C++.</p>
<hr>
<h3 id="future-considerations">Future Considerations</h3>
<p>As the C++ language continues to evolve, I expect lambda expressions to become even more powerful and integral to modern C++ coding practices. Features introduced in C++20 and beyond (such as ranges and coroutines) further reinforce the functional style, making lambdas indispensable tools for writing expressive, maintainable, and efficient code.</p>
<hr>
<h3 id="conclusion">Conclusion</h3>
<p>C++17 lambda expressions offer a concise and powerful mechanism for integrating functional programming concepts into a traditionally imperative language. Their syntax, capturing mechanisms, and seamless integration with STL algorithms make them a natural choice for developers seeking cleaner, more modular, and more declarative code. While I remain aware of the potential pitfalls associated with overly complex lambda usage, I find that their benefits generally outweigh their drawbacks. Used judiciously, lambda expressions can transform the way we approach problem-solving, empowering us to write code that is both elegant and robust.</p>
<hr>
<p><strong>References</strong></p>
<ul>
<li>Stroustrup, B. (2013) <em>The C++ Programming Language</em>, 4th edn, Addison-Wesley.</li>
<li>cppreference (n.d.) ‘Lambda expressions’, cppreference.com. Available at: <a href="https://en.cppreference.com/w/cpp/language/lambda">https://en.cppreference.com/w/cpp/language/lambda</a> (Accessed: 09 December 2024).</li>
<li>Meyers, S. (2014) <em>Effective Modern C++</em>, O’Reilly Media.</li>
</ul>
]]></content>
        </item>
        
        <item>
            <title>An In-Depth Exploration of the Standard Template Library (STL) in C&#43;&#43;17</title>
            <link>https://blog.miguens.one/posts/2024/11/an-in-depth-exploration-of-the-standard-template-library-stl-in-c-17/</link>
            <pubDate>Mon, 18 Nov 2024 00:00:00 +0000</pubDate>
            
            <guid>https://blog.miguens.one/posts/2024/11/an-in-depth-exploration-of-the-standard-template-library-stl-in-c-17/</guid>
            <description>&lt;p&gt;As a software developer with a penchant for C++, I have often found the Standard Template Library (STL) to be an indispensable component of efficient programming. Introduced to provide a collection of generic classes and functions, the STL has evolved significantly, particularly with the enhancements brought by C++17. In this blog post, I aim to provide a comprehensive overview of the STL, focusing on its core components: containers, iterators, algorithms, and function objects. Through detailed explanations and practical examples, we will explore how these components can be leveraged to write more robust and maintainable code.&lt;/p&gt;</description>
            <content type="html"><![CDATA[<p>As a software developer with a penchant for C++, I have often found the Standard Template Library (STL) to be an indispensable component of efficient programming. Introduced to provide a collection of generic classes and functions, the STL has evolved significantly, particularly with the enhancements brought by C++17. In this blog post, I aim to provide a comprehensive overview of the STL, focusing on its core components: containers, iterators, algorithms, and function objects. Through detailed explanations and practical examples, we will explore how these components can be leveraged to write more robust and maintainable code.</p>
<h2 id="table-of-contents">Table of Contents</h2>
<ol>
<li><a href="/posts/2024/11/an-in-depth-exploration-of-the-standard-template-library-stl-in-c-17/#understanding-the-stl">Understanding the STL</a></li>
<li><a href="/posts/2024/11/an-in-depth-exploration-of-the-standard-template-library-stl-in-c-17/#containers">Containers</a>
<ul>
<li><a href="/posts/2024/11/an-in-depth-exploration-of-the-standard-template-library-stl-in-c-17/#sequence-containers">Sequence Containers</a></li>
<li><a href="/posts/2024/11/an-in-depth-exploration-of-the-standard-template-library-stl-in-c-17/#associative-containers">Associative Containers</a></li>
<li><a href="/posts/2024/11/an-in-depth-exploration-of-the-standard-template-library-stl-in-c-17/#unordered-containers">Unordered Containers</a></li>
</ul>
</li>
<li><a href="/posts/2024/11/an-in-depth-exploration-of-the-standard-template-library-stl-in-c-17/#iterators">Iterators</a>
<ul>
<li><a href="/posts/2024/11/an-in-depth-exploration-of-the-standard-template-library-stl-in-c-17/#iterator-categories">Iterator Categories</a></li>
<li><a href="/posts/2024/11/an-in-depth-exploration-of-the-standard-template-library-stl-in-c-17/#iterator-adapters">Iterator Adapters</a></li>
</ul>
</li>
<li><a href="/posts/2024/11/an-in-depth-exploration-of-the-standard-template-library-stl-in-c-17/#algorithms">Algorithms</a>
<ul>
<li><a href="/posts/2024/11/an-in-depth-exploration-of-the-standard-template-library-stl-in-c-17/#non-modifying-algorithms">Non-Modifying Algorithms</a></li>
<li><a href="/posts/2024/11/an-in-depth-exploration-of-the-standard-template-library-stl-in-c-17/#modifying-algorithms">Modifying Algorithms</a></li>
<li><a href="/posts/2024/11/an-in-depth-exploration-of-the-standard-template-library-stl-in-c-17/#sorting-and-searching-algorithms">Sorting and Searching Algorithms</a></li>
</ul>
</li>
<li><a href="/posts/2024/11/an-in-depth-exploration-of-the-standard-template-library-stl-in-c-17/#function-objects-and-lambda-expressions">Function Objects and Lambda Expressions</a></li>
<li><a href="/posts/2024/11/an-in-depth-exploration-of-the-standard-template-library-stl-in-c-17/#practical-examples">Practical Examples</a></li>
<li><a href="/posts/2024/11/an-in-depth-exploration-of-the-standard-template-library-stl-in-c-17/#conclusion">Conclusion</a></li>
<li><a href="/posts/2024/11/an-in-depth-exploration-of-the-standard-template-library-stl-in-c-17/#references">References</a></li>
</ol>
<h2 id="understanding-the-stl">Understanding the STL</h2>
<p>The STL is a powerful library that provides a set of common classes and interfaces for C++ programming. It is designed to offer reusable components, promoting code efficiency and reducing development time (Stroustrup, 2013). The STL is composed of:</p>
<ul>
<li><strong>Containers</strong>: Data structures to store collections of objects.</li>
<li><strong>Iterators</strong>: Objects that enable traversal of container elements.</li>
<li><strong>Algorithms</strong>: Functions for processing sequences of elements.</li>
<li><strong>Function Objects</strong>: Objects that can be used as functions.</li>
</ul>
<h2 id="containers">Containers</h2>
<p>Containers are fundamental to the STL, providing a means to store and organise data. They are template classes, allowing them to handle any data type specified at compile-time.</p>
<h3 id="sequence-containers">Sequence Containers</h3>
<p>Sequence containers maintain the ordering of inserted elements.</p>
<ul>
<li>
<p><strong><code>vector</code></strong>: A dynamic array offering fast random access and efficient insertion at the end. I often use <code>vector</code> when I need a resizable array (Josuttis, 2012).</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-cpp" data-lang="cpp"><span style="display:flex;"><span>std<span style="color:#f92672">::</span>vector<span style="color:#f92672">&lt;</span><span style="color:#66d9ef">int</span><span style="color:#f92672">&gt;</span> numbers <span style="color:#f92672">=</span> {<span style="color:#ae81ff">1</span>, <span style="color:#ae81ff">2</span>, <span style="color:#ae81ff">3</span>, <span style="color:#ae81ff">4</span>, <span style="color:#ae81ff">5</span>};
</span></span></code></pre></div></li>
<li>
<p><strong><code>deque</code></strong>: A double-ended queue allowing insertion and deletion at both ends.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-cpp" data-lang="cpp"><span style="display:flex;"><span>std<span style="color:#f92672">::</span>deque<span style="color:#f92672">&lt;</span><span style="color:#66d9ef">int</span><span style="color:#f92672">&gt;</span> dq <span style="color:#f92672">=</span> {<span style="color:#ae81ff">1</span>, <span style="color:#ae81ff">2</span>, <span style="color:#ae81ff">3</span>};
</span></span><span style="display:flex;"><span>dq.push_front(<span style="color:#ae81ff">0</span>); <span style="color:#75715e">// dq: 0, 1, 2, 3
</span></span></span></code></pre></div></li>
<li>
<p><strong><code>list</code></strong>: A doubly-linked list providing efficient insertion and deletion anywhere within the sequence.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-cpp" data-lang="cpp"><span style="display:flex;"><span>std<span style="color:#f92672">::</span>list<span style="color:#f92672">&lt;</span>std<span style="color:#f92672">::</span>string<span style="color:#f92672">&gt;</span> names <span style="color:#f92672">=</span> {<span style="color:#e6db74">&#34;Alice&#34;</span>, <span style="color:#e6db74">&#34;Bob&#34;</span>, <span style="color:#e6db74">&#34;Charlie&#34;</span>};
</span></span></code></pre></div></li>
</ul>
<h3 id="associative-containers">Associative Containers</h3>
<p>Associative containers store elements formed by a key-value pair and are typically implemented as binary search trees.</p>
<ul>
<li>
<p><strong><code>set</code></strong>: Stores unique keys in a specific order.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-cpp" data-lang="cpp"><span style="display:flex;"><span>std<span style="color:#f92672">::</span>set<span style="color:#f92672">&lt;</span><span style="color:#66d9ef">int</span><span style="color:#f92672">&gt;</span> unique_numbers <span style="color:#f92672">=</span> {<span style="color:#ae81ff">3</span>, <span style="color:#ae81ff">1</span>, <span style="color:#ae81ff">4</span>, <span style="color:#ae81ff">1</span>, <span style="color:#ae81ff">5</span>}; <span style="color:#75715e">// Stores 1, 3, 4, 5
</span></span></span></code></pre></div></li>
<li>
<p><strong><code>map</code></strong>: Stores key-value pairs with unique keys.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-cpp" data-lang="cpp"><span style="display:flex;"><span>std<span style="color:#f92672">::</span>map<span style="color:#f92672">&lt;</span>std<span style="color:#f92672">::</span>string, <span style="color:#66d9ef">int</span><span style="color:#f92672">&gt;</span> ages <span style="color:#f92672">=</span> {{<span style="color:#e6db74">&#34;Alice&#34;</span>, <span style="color:#ae81ff">30</span>}, {<span style="color:#e6db74">&#34;Bob&#34;</span>, <span style="color:#ae81ff">25</span>}};
</span></span></code></pre></div></li>
</ul>
<h3 id="unordered-containers">Unordered Containers</h3>
<p>Unordered containers use hash tables for storage, offering average constant-time complexity for insertion and retrieval.</p>
<ul>
<li>
<p><strong><code>unordered_set</code></strong>: Stores unique keys without any specific order.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-cpp" data-lang="cpp"><span style="display:flex;"><span>std<span style="color:#f92672">::</span>unordered_set<span style="color:#f92672">&lt;</span><span style="color:#66d9ef">int</span><span style="color:#f92672">&gt;</span> nums <span style="color:#f92672">=</span> {<span style="color:#ae81ff">1</span>, <span style="color:#ae81ff">2</span>, <span style="color:#ae81ff">3</span>, <span style="color:#ae81ff">2</span>}; <span style="color:#75715e">// Stores 1, 2, 3
</span></span></span></code></pre></div></li>
<li>
<p><strong><code>unordered_map</code></strong>: Stores key-value pairs without any specific order.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-cpp" data-lang="cpp"><span style="display:flex;"><span>std<span style="color:#f92672">::</span>unordered_map<span style="color:#f92672">&lt;</span>std<span style="color:#f92672">::</span>string, <span style="color:#66d9ef">int</span><span style="color:#f92672">&gt;</span> scores <span style="color:#f92672">=</span> {{<span style="color:#e6db74">&#34;Alice&#34;</span>, <span style="color:#ae81ff">95</span>}, {<span style="color:#e6db74">&#34;Bob&#34;</span>, <span style="color:#ae81ff">85</span>}};
</span></span></code></pre></div></li>
</ul>
<h2 id="iterators">Iterators</h2>
<p>Iterators provide a way to access elements within containers uniformly. They act similarly to pointers and can traverse the elements of a container.</p>
<h3 id="iterator-categories">Iterator Categories</h3>
<ul>
<li><strong>Input Iterators</strong>: Read from a sequence.</li>
<li><strong>Output Iterators</strong>: Write to a sequence.</li>
<li><strong>Forward Iterators</strong>: Read/write in one direction.</li>
<li><strong>Bidirectional Iterators</strong>: Read/write forwards and backwards.</li>
<li><strong>Random Access Iterators</strong>: Direct access to any element (e.g., with <code>vector</code>).</li>
</ul>
<h3 id="iterator-adapters">Iterator Adapters</h3>
<p>Iterator adapters modify iterators to change their behaviour.</p>
<ul>
<li>
<p><strong><code>reverse_iterator</code></strong>: Iterates over a container in reverse.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-cpp" data-lang="cpp"><span style="display:flex;"><span>std<span style="color:#f92672">::</span>vector<span style="color:#f92672">&lt;</span><span style="color:#66d9ef">int</span><span style="color:#f92672">&gt;</span> v <span style="color:#f92672">=</span> {<span style="color:#ae81ff">1</span>, <span style="color:#ae81ff">2</span>, <span style="color:#ae81ff">3</span>};
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">for</span>(<span style="color:#66d9ef">auto</span> rit <span style="color:#f92672">=</span> v.rbegin(); rit <span style="color:#f92672">!=</span> v.rend(); <span style="color:#f92672">++</span>rit) {
</span></span><span style="display:flex;"><span>    std<span style="color:#f92672">::</span>cout <span style="color:#f92672">&lt;&lt;</span> <span style="color:#f92672">*</span>rit <span style="color:#f92672">&lt;&lt;</span> <span style="color:#e6db74">&#34; &#34;</span>; <span style="color:#75715e">// Outputs: 3 2 1
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>}
</span></span></code></pre></div></li>
<li>
<p><strong><code>istream_iterator</code></strong> and <strong><code>ostream_iterator</code></strong>: Read from and write to streams, respectively.</p>
</li>
</ul>
<h2 id="algorithms">Algorithms</h2>
<p>The STL provides a vast array of algorithms that operate on ranges defined by iterators. These algorithms are generic and can be applied to various container types.</p>
<h3 id="non-modifying-algorithms">Non-Modifying Algorithms</h3>
<p>These algorithms do not alter the elements in the containers.</p>
<ul>
<li>
<p><strong><code>std::find</code></strong>: Searches for an element equal to a given value.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-cpp" data-lang="cpp"><span style="display:flex;"><span><span style="color:#66d9ef">auto</span> it <span style="color:#f92672">=</span> std<span style="color:#f92672">::</span>find(v.begin(), v.end(), <span style="color:#ae81ff">3</span>);
</span></span></code></pre></div></li>
<li>
<p><strong><code>std::count</code></strong>: Counts the occurrences of a value.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-cpp" data-lang="cpp"><span style="display:flex;"><span><span style="color:#66d9ef">int</span> cnt <span style="color:#f92672">=</span> std<span style="color:#f92672">::</span>count(v.begin(), v.end(), <span style="color:#ae81ff">2</span>);
</span></span></code></pre></div></li>
</ul>
<h3 id="modifying-algorithms">Modifying Algorithms</h3>
<p>Algorithms that modify the elements in the containers.</p>
<ul>
<li>
<p><strong><code>std::transform</code></strong>: Applies a function to each element.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-cpp" data-lang="cpp"><span style="display:flex;"><span>std<span style="color:#f92672">::</span>transform(v.begin(), v.end(), v.begin(), [](<span style="color:#66d9ef">int</span> n){ <span style="color:#66d9ef">return</span> n <span style="color:#f92672">*</span> n; });
</span></span></code></pre></div></li>
<li>
<p><strong><code>std::replace</code></strong>: Replaces occurrences of a value.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-cpp" data-lang="cpp"><span style="display:flex;"><span>std<span style="color:#f92672">::</span>replace(v.begin(), v.end(), <span style="color:#ae81ff">1</span>, <span style="color:#ae81ff">10</span>);
</span></span></code></pre></div></li>
</ul>
<h3 id="sorting-and-searching-algorithms">Sorting and Searching Algorithms</h3>
<p>Algorithms for ordering and locating elements.</p>
<ul>
<li>
<p><strong><code>std::sort</code></strong>: Sorts elements in ascending order by default.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-cpp" data-lang="cpp"><span style="display:flex;"><span>std<span style="color:#f92672">::</span>sort(v.begin(), v.end());
</span></span></code></pre></div></li>
<li>
<p><strong><code>std::binary_search</code></strong>: Checks if an element exists in a sorted range.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-cpp" data-lang="cpp"><span style="display:flex;"><span><span style="color:#66d9ef">bool</span> found <span style="color:#f92672">=</span> std<span style="color:#f92672">::</span>binary_search(v.begin(), v.end(), <span style="color:#ae81ff">3</span>);
</span></span></code></pre></div></li>
</ul>
<h2 id="function-objects-and-lambda-expressions">Function Objects and Lambda Expressions</h2>
<p>Function objects (functors) are objects that can be called as if they are ordinary functions. They are particularly useful in algorithms requiring custom operations.</p>
<ul>
<li>
<p><strong>Function Objects</strong>: Created by overloading the <code>operator()</code> in a class.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-cpp" data-lang="cpp"><span style="display:flex;"><span><span style="color:#66d9ef">struct</span> <span style="color:#a6e22e">MultiplyBy</span> {
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">int</span> factor;
</span></span><span style="display:flex;"><span>    MultiplyBy(<span style="color:#66d9ef">int</span> f) <span style="color:#f92672">:</span> factor(f) {}
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">int</span> <span style="color:#a6e22e">operator</span>()(<span style="color:#66d9ef">int</span> n) <span style="color:#66d9ef">const</span> { <span style="color:#66d9ef">return</span> n <span style="color:#f92672">*</span> factor; }
</span></span><span style="display:flex;"><span>};
</span></span></code></pre></div></li>
<li>
<p><strong>Lambda Expressions</strong>: Introduced in C++11, lambdas provide a concise way to define anonymous function objects.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-cpp" data-lang="cpp"><span style="display:flex;"><span><span style="color:#66d9ef">auto</span> add <span style="color:#f92672">=</span> [](<span style="color:#66d9ef">int</span> a, <span style="color:#66d9ef">int</span> b) { <span style="color:#66d9ef">return</span> a <span style="color:#f92672">+</span> b; };
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">int</span> sum <span style="color:#f92672">=</span> add(<span style="color:#ae81ff">3</span>, <span style="color:#ae81ff">4</span>); <span style="color:#75715e">// sum = 7
</span></span></span></code></pre></div></li>
</ul>
<h2 id="practical-examples">Practical Examples</h2>
<p>To synthesise the concepts discussed, let&rsquo;s consider a practical example that utilises containers, iterators, algorithms, and lambda expressions.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-cpp" data-lang="cpp"><span style="display:flex;"><span><span style="color:#75715e">#include</span> <span style="color:#75715e">&lt;iostream&gt;</span><span style="color:#75715e">
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">#include</span> <span style="color:#75715e">&lt;vector&gt;</span><span style="color:#75715e">
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">#include</span> <span style="color:#75715e">&lt;algorithm&gt;</span><span style="color:#75715e">
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">int</span> <span style="color:#a6e22e">main</span>() {
</span></span><span style="display:flex;"><span>    <span style="color:#75715e">// Initialising a vector with some numbers
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>    std<span style="color:#f92672">::</span>vector<span style="color:#f92672">&lt;</span><span style="color:#66d9ef">int</span><span style="color:#f92672">&gt;</span> numbers <span style="color:#f92672">=</span> {<span style="color:#ae81ff">5</span>, <span style="color:#ae81ff">2</span>, <span style="color:#ae81ff">8</span>, <span style="color:#ae81ff">1</span>, <span style="color:#ae81ff">3</span>};
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#75715e">// Sorting the vector
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>    std<span style="color:#f92672">::</span>sort(numbers.begin(), numbers.end());
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#75715e">// Removing duplicates (if any)
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>    <span style="color:#66d9ef">auto</span> last <span style="color:#f92672">=</span> std<span style="color:#f92672">::</span>unique(numbers.begin(), numbers.end());
</span></span><span style="display:flex;"><span>    numbers.erase(last, numbers.end());
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#75715e">// Doubling each element using transform and a lambda expression
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>    std<span style="color:#f92672">::</span>transform(numbers.begin(), numbers.end(), numbers.begin(),
</span></span><span style="display:flex;"><span>                   [](<span style="color:#66d9ef">int</span> n) { <span style="color:#66d9ef">return</span> n <span style="color:#f92672">*</span> <span style="color:#ae81ff">2</span>; });
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#75715e">// Displaying the modified vector
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>    std<span style="color:#f92672">::</span>cout <span style="color:#f92672">&lt;&lt;</span> <span style="color:#e6db74">&#34;Modified numbers: &#34;</span>;
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">for</span> (<span style="color:#66d9ef">const</span> <span style="color:#66d9ef">auto</span><span style="color:#f92672">&amp;</span> n : numbers) {
</span></span><span style="display:flex;"><span>        std<span style="color:#f92672">::</span>cout <span style="color:#f92672">&lt;&lt;</span> n <span style="color:#f92672">&lt;&lt;</span> <span style="color:#e6db74">&#34; &#34;</span>;
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">return</span> <span style="color:#ae81ff">0</span>;
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p><strong>Explanation</strong>:</p>
<ul>
<li><strong><code>std::sort</code></strong> is used to sort the vector.</li>
<li><strong><code>std::unique</code></strong> removes consecutive duplicates.</li>
<li><strong><code>std::transform</code></strong> applies a lambda function to double each element.</li>
<li>The final output displays the modified elements.</li>
</ul>
<p>When I run this code, it effectively demonstrates how STL components can be combined to perform complex operations succinctly.</p>
<h2 id="conclusion">Conclusion</h2>
<p>The Standard Template Library remains a cornerstone of modern C++ programming, providing a robust framework for data manipulation and algorithmic processing. By understanding and utilising containers, iterators, algorithms, and function objects, we can write code that is not only efficient but also highly maintainable. While the STL can initially seem daunting due to its breadth, I firmly believe that mastering it is a worthwhile investment for any serious C++ developer. Looking ahead, future revisions of the C++ standard are likely to introduce even more features that build upon the foundations of the STL, further enhancing its utility and versatility.</p>
<h2 id="references">References</h2>
<ul>
<li>Josuttis, N. M. (2012). <em>The C++ Standard Library: A Tutorial and Reference</em>. Addison-Wesley.</li>
<li>Stroustrup, B. (2013). <em>The C++ Programming Language</em> (4th ed.). Addison-Wesley.</li>
</ul>
]]></content>
        </item>
        
        <item>
            <title>Exploring Templates and Generic Programming in C&#43;&#43;17</title>
            <link>https://blog.miguens.one/posts/2024/10/exploring-templates-and-generic-programming-in-c-17/</link>
            <pubDate>Mon, 07 Oct 2024 00:00:00 +0000</pubDate>
            
            <guid>https://blog.miguens.one/posts/2024/10/exploring-templates-and-generic-programming-in-c-17/</guid>
            <description>&lt;p&gt;In my experience with C++ programming, templates and generic programming have proven to be indispensable tools for creating flexible and efficient code. The introduction of templates revolutionised the way we write code by allowing functions and classes to operate with generic types. In this blog post, I will delve into function templates, class templates, and template specialisation, illustrating how they contribute to the power of generic programming in C++17.&lt;/p&gt;
&lt;h2 id=&#34;function-templates&#34;&gt;Function Templates&lt;/h2&gt;
&lt;p&gt;Function templates enable us to write functions that can operate with any data type. This is particularly useful when the same logic applies to different types, and rewriting code for each type would be inefficient.&lt;/p&gt;</description>
            <content type="html"><![CDATA[<p>In my experience with C++ programming, templates and generic programming have proven to be indispensable tools for creating flexible and efficient code. The introduction of templates revolutionised the way we write code by allowing functions and classes to operate with generic types. In this blog post, I will delve into function templates, class templates, and template specialisation, illustrating how they contribute to the power of generic programming in C++17.</p>
<h2 id="function-templates">Function Templates</h2>
<p>Function templates enable us to write functions that can operate with any data type. This is particularly useful when the same logic applies to different types, and rewriting code for each type would be inefficient.</p>
<p><strong>Example: A Generic Swap Function</strong></p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-cpp" data-lang="cpp"><span style="display:flex;"><span><span style="color:#66d9ef">template</span> <span style="color:#f92672">&lt;</span><span style="color:#66d9ef">typename</span> T<span style="color:#f92672">&gt;</span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">void</span> swap(T<span style="color:#f92672">&amp;</span> a, T<span style="color:#f92672">&amp;</span> b) {
</span></span><span style="display:flex;"><span>    T temp <span style="color:#f92672">=</span> a;
</span></span><span style="display:flex;"><span>    a <span style="color:#f92672">=</span> b;
</span></span><span style="display:flex;"><span>    b <span style="color:#f92672">=</span> temp;
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>In this example, the <code>swap</code> function can interchange the values of any two variables of the same type. The <code>typename T</code> indicates that <code>T</code> is a placeholder for any data type. This eliminates the need to overload the function for different types such as <code>int</code>, <code>float</code>, or <code>std::string</code>.</p>
<h2 id="class-templates">Class Templates</h2>
<p>Class templates allow classes to operate with generic types in a similar fashion to function templates. They are particularly useful for data structures and container classes.</p>
<p><strong>Example: A Simple Generic Pair Class</strong></p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-cpp" data-lang="cpp"><span style="display:flex;"><span><span style="color:#66d9ef">template</span> <span style="color:#f92672">&lt;</span><span style="color:#66d9ef">typename</span> T1, <span style="color:#66d9ef">typename</span> T2<span style="color:#f92672">&gt;</span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">class</span> <span style="color:#a6e22e">Pair</span> {
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">public</span><span style="color:#f92672">:</span>
</span></span><span style="display:flex;"><span>    T1 first;
</span></span><span style="display:flex;"><span>    T2 second;
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    Pair(<span style="color:#66d9ef">const</span> T1<span style="color:#f92672">&amp;</span> a, <span style="color:#66d9ef">const</span> T2<span style="color:#f92672">&amp;</span> b) <span style="color:#f92672">:</span> first(a), second(b) {}
</span></span><span style="display:flex;"><span>};
</span></span></code></pre></div><p>The <code>Pair</code> class can hold two values of any types. This is beneficial when we need to create associations between different types without specifying them in advance.</p>
<p><strong>Usage:</strong></p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-cpp" data-lang="cpp"><span style="display:flex;"><span>Pair<span style="color:#f92672">&lt;</span><span style="color:#66d9ef">int</span>, std<span style="color:#f92672">::</span>string<span style="color:#f92672">&gt;</span> p(<span style="color:#ae81ff">1</span>, <span style="color:#e6db74">&#34;one&#34;</span>);
</span></span><span style="display:flex;"><span>std<span style="color:#f92672">::</span>cout <span style="color:#f92672">&lt;&lt;</span> p.first <span style="color:#f92672">&lt;&lt;</span> <span style="color:#e6db74">&#34;, &#34;</span> <span style="color:#f92672">&lt;&lt;</span> p.second <span style="color:#f92672">&lt;&lt;</span> std<span style="color:#f92672">::</span>endl;
</span></span></code></pre></div><h2 id="template-specialisation">Template Specialisation</h2>
<p>Template specialisation allows us to define custom implementations for specific types while retaining the generic implementation for other types. There are two types of specialisation: full and partial.</p>
<h3 id="full-specialisation">Full Specialisation</h3>
<p>Full specialisation involves providing a specific implementation for a particular type.</p>
<p><strong>Example:</strong></p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-cpp" data-lang="cpp"><span style="display:flex;"><span><span style="color:#66d9ef">template</span> <span style="color:#f92672">&lt;&gt;</span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">void</span> swap<span style="color:#f92672">&lt;</span><span style="color:#66d9ef">bool</span><span style="color:#f92672">&gt;</span>(<span style="color:#66d9ef">bool</span><span style="color:#f92672">&amp;</span> a, <span style="color:#66d9ef">bool</span><span style="color:#f92672">&amp;</span> b) {
</span></span><span style="display:flex;"><span>    <span style="color:#75715e">// Special implementation for bool
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>    <span style="color:#66d9ef">bool</span> temp <span style="color:#f92672">=</span> a;
</span></span><span style="display:flex;"><span>    a <span style="color:#f92672">=</span> b;
</span></span><span style="display:flex;"><span>    b <span style="color:#f92672">=</span> temp;
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>Here, we have provided a specialised version of the <code>swap</code> function for <code>bool</code> types, although in this simple case, it behaves the same as the generic version.</p>
<h3 id="partial-specialisation">Partial Specialisation</h3>
<p>Partial specialisation is applicable to class templates and allows us to specialise a template based on certain template parameters.</p>
<p><strong>Example: Specialising a Pair with the Same Types</strong></p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-cpp" data-lang="cpp"><span style="display:flex;"><span><span style="color:#66d9ef">template</span> <span style="color:#f92672">&lt;</span><span style="color:#66d9ef">typename</span> T<span style="color:#f92672">&gt;</span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">class</span> <span style="color:#a6e22e">Pair</span><span style="color:#f92672">&lt;</span>T, T<span style="color:#f92672">&gt;</span> {
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">public</span><span style="color:#f92672">:</span>
</span></span><span style="display:flex;"><span>    T first;
</span></span><span style="display:flex;"><span>    T second;
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    Pair(<span style="color:#66d9ef">const</span> T<span style="color:#f92672">&amp;</span> a, <span style="color:#66d9ef">const</span> T<span style="color:#f92672">&amp;</span> b) <span style="color:#f92672">:</span> first(a), second(b) {}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    T <span style="color:#a6e22e">sum</span>() { <span style="color:#66d9ef">return</span> first <span style="color:#f92672">+</span> second; }
</span></span><span style="display:flex;"><span>};
</span></span></code></pre></div><p>In this specialisation, the <code>Pair</code> class is customised for cases where both types are the same, adding a <code>sum</code> function that makes sense only when the types support the <code>+</code> operator.</p>
<h2 id="advantages-of-generic-programming">Advantages of Generic Programming</h2>
<p>Generic programming offers several significant benefits:</p>
<ol>
<li><strong>Code Reusability</strong>: Templates allow us to write code once and reuse it for any data type, reducing duplication and potential errors.</li>
<li><strong>Type Safety</strong>: Unlike void pointers or macros, templates are type-safe, catching errors at compile-time rather than at runtime.</li>
<li><strong>Performance</strong>: Templates can lead to more efficient code because they are resolved at compile-time, eliminating the overhead associated with runtime polymorphism.</li>
<li><strong>Abstraction</strong>: They enable higher levels of abstraction, allowing programmers to focus on algorithms without worrying about specific data types.</li>
</ol>
<p>These advantages contribute to more maintainable and robust codebases, which is crucial in large-scale software development.</p>
<h2 id="conclusion">Conclusion</h2>
<p>Templates and generic programming are powerful features in C++17 that enhance the language&rsquo;s flexibility and efficiency. By leveraging function templates, class templates, and template specialisation, we can write more abstract and reusable code. Moving forward, I anticipate that the continued evolution of templates, such as the introduction of concepts in C++20, will further simplify and strengthen generic programming practices.</p>
<hr>
<p><em>References:</em></p>
<ul>
<li>Stroustrup, B. (2013). <em>The C++ Programming Language</em>. Addison-Wesley.</li>
<li>ISO/IEC. (2017). <em>International Standard ISO/IEC 14882:2017(E) Programming Language C++</em>. International Organization for Standardization.</li>
</ul>
]]></content>
        </item>
        
        <item>
            <title>Object-Oriented Programming Concepts in C&#43;&#43;17</title>
            <link>https://blog.miguens.one/posts/2024/09/object-oriented-programming-concepts-in-c-17/</link>
            <pubDate>Thu, 12 Sep 2024 00:00:00 +0000</pubDate>
            
            <guid>https://blog.miguens.one/posts/2024/09/object-oriented-programming-concepts-in-c-17/</guid>
            <description>&lt;p&gt;In my experience, object-oriented programming (OOP) stands as a cornerstone in the realm of software development, offering a paradigm that models real-world entities through classes and objects. C++17, being a modern iteration of the C++ language, enriches this paradigm with advanced features and improved functionalities. In this blog post, I aim to delve deep into the fundamental principles of OOP in C++17—covering classes, objects, inheritance, polymorphism, encapsulation, and access specifiers—while providing illustrative examples to elucidate these concepts.&lt;/p&gt;</description>
            <content type="html"><![CDATA[<p>In my experience, object-oriented programming (OOP) stands as a cornerstone in the realm of software development, offering a paradigm that models real-world entities through classes and objects. C++17, being a modern iteration of the C++ language, enriches this paradigm with advanced features and improved functionalities. In this blog post, I aim to delve deep into the fundamental principles of OOP in C++17—covering classes, objects, inheritance, polymorphism, encapsulation, and access specifiers—while providing illustrative examples to elucidate these concepts.</p>
<hr>
<h2 id="understanding-classes-and-objects">Understanding Classes and Objects</h2>
<p>At the heart of OOP lie <strong>classes</strong> and <strong>objects</strong>, which serve as blueprints and instances, respectively. A class defines the properties (attributes) and behaviours (methods) that the objects created from it will possess.</p>
<p>For instance:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-cpp" data-lang="cpp"><span style="display:flex;"><span><span style="color:#66d9ef">class</span> <span style="color:#a6e22e">Vehicle</span> {
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">public</span><span style="color:#f92672">:</span>
</span></span><span style="display:flex;"><span>    std<span style="color:#f92672">::</span>string brand;
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">void</span> <span style="color:#a6e22e">honk</span>() {
</span></span><span style="display:flex;"><span>        std<span style="color:#f92672">::</span>cout <span style="color:#f92672">&lt;&lt;</span> <span style="color:#e6db74">&#34;Beep beep!&#34;</span> <span style="color:#f92672">&lt;&lt;</span> std<span style="color:#f92672">::</span>endl;
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>};
</span></span></code></pre></div><p>In this example, <code>Vehicle</code> is a class with a public attribute <code>brand</code> and a method <code>honk()</code>. Creating an object (instantiation) is straightforward:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-cpp" data-lang="cpp"><span style="display:flex;"><span>Vehicle car;
</span></span><span style="display:flex;"><span>car.brand <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;Toyota&#34;</span>;
</span></span><span style="display:flex;"><span>car.honk(); <span style="color:#75715e">// Outputs: Beep beep!
</span></span></span></code></pre></div><p>By defining classes, we encapsulate data and functions, promoting code reusability and modularity.</p>
<hr>
<h2 id="encapsulation-safeguarding-data">Encapsulation: Safeguarding Data</h2>
<p><strong>Encapsulation</strong> is the mechanism of restricting direct access to some of an object&rsquo;s components, which is a fundamental aspect of OOP that enhances security and integrity (Stroustrup, 2013). In C++17, this is typically achieved by declaring class members as <code>private</code> or <code>protected</code>.</p>
<p>Consider the following:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-cpp" data-lang="cpp"><span style="display:flex;"><span><span style="color:#66d9ef">class</span> <span style="color:#a6e22e">BankAccount</span> {
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">private</span><span style="color:#f92672">:</span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">double</span> balance;
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">public</span><span style="color:#f92672">:</span>
</span></span><span style="display:flex;"><span>    BankAccount() <span style="color:#f92672">:</span> balance(<span style="color:#ae81ff">0.0</span>) {}
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">void</span> <span style="color:#a6e22e">deposit</span>(<span style="color:#66d9ef">double</span> amount) {
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">if</span> (amount <span style="color:#f92672">&gt;</span> <span style="color:#ae81ff">0</span>) balance <span style="color:#f92672">+=</span> amount;
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">void</span> <span style="color:#a6e22e">withdraw</span>(<span style="color:#66d9ef">double</span> amount) {
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">if</span> (amount <span style="color:#f92672">&gt;</span> <span style="color:#ae81ff">0</span> <span style="color:#f92672">&amp;&amp;</span> amount <span style="color:#f92672">&lt;=</span> balance) balance <span style="color:#f92672">-=</span> amount;
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">double</span> <span style="color:#a6e22e">getBalance</span>() <span style="color:#66d9ef">const</span> {
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">return</span> balance;
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>};
</span></span></code></pre></div><p>Here, <code>balance</code> is a private member, inaccessible directly from outside the class. Access and modification are controlled through public methods, ensuring that the balance cannot be set arbitrarily, which could compromise the account&rsquo;s integrity.</p>
<hr>
<h2 id="access-specifiers-controlling-visibility">Access Specifiers: Controlling Visibility</h2>
<p>C++17 provides three primary <strong>access specifiers</strong>:</p>
<ul>
<li><code>public</code>: Members are accessible from any part of the program.</li>
<li><code>private</code>: Members are accessible only within the class itself.</li>
<li><code>protected</code>: Members are accessible within the class and its derived classes.</li>
</ul>
<p>Utilising these specifiers allows us to implement encapsulation effectively. For example, setting member variables to <code>private</code> forces interaction through public methods, which can include validation logic.</p>
<hr>
<h2 id="inheritance-building-upon-existing-code">Inheritance: Building Upon Existing Code</h2>
<p><strong>Inheritance</strong> enables new classes (derived classes) to acquire the properties and behaviours of existing classes (base classes), fostering code reusability and hierarchical classifications (Meyers, 2005).</p>
<p>An example:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-cpp" data-lang="cpp"><span style="display:flex;"><span><span style="color:#66d9ef">class</span> <span style="color:#a6e22e">Animal</span> {
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">public</span><span style="color:#f92672">:</span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">void</span> eat() {
</span></span><span style="display:flex;"><span>        std<span style="color:#f92672">::</span>cout <span style="color:#f92672">&lt;&lt;</span> <span style="color:#e6db74">&#34;This animal eats food.&#34;</span> <span style="color:#f92672">&lt;&lt;</span> std<span style="color:#f92672">::</span>endl;
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>};
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">class</span> <span style="color:#a6e22e">Dog</span> <span style="color:#f92672">:</span> <span style="color:#66d9ef">public</span> Animal {
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">public</span><span style="color:#f92672">:</span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">void</span> bark() {
</span></span><span style="display:flex;"><span>        std<span style="color:#f92672">::</span>cout <span style="color:#f92672">&lt;&lt;</span> <span style="color:#e6db74">&#34;Woof!&#34;</span> <span style="color:#f92672">&lt;&lt;</span> std<span style="color:#f92672">::</span>endl;
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>};
</span></span></code></pre></div><p>In this scenario, <code>Dog</code> inherits from <code>Animal</code>, meaning it has access to the <code>eat()</code> method. We can create a <code>Dog</code> object that can both <code>eat()</code> and <code>bark()</code>.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-cpp" data-lang="cpp"><span style="display:flex;"><span>Dog myDog;
</span></span><span style="display:flex;"><span>myDog.eat();  <span style="color:#75715e">// Outputs: This animal eats food.
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>myDog.bark(); <span style="color:#75715e">// Outputs: Woof!
</span></span></span></code></pre></div><p>Inheritance can be:</p>
<ul>
<li><strong>Single Inheritance</strong>: A class inherits from one base class.</li>
<li><strong>Multiple Inheritance</strong>: A class inherits from more than one base class.</li>
</ul>
<p>While multiple inheritance can be powerful, it may introduce complexity such as the <strong>Diamond Problem</strong> (Sutter, 2000), which requires careful design, possibly involving virtual inheritance.</p>
<hr>
<h2 id="polymorphism-flexibility-through-interfaces">Polymorphism: Flexibility Through Interfaces</h2>
<p><strong>Polymorphism</strong> allows objects to be treated as instances of their base class rather than their actual derived class. This behaviour is crucial for designing flexible and maintainable code (Lippman, Lajoie, &amp; Moo, 2012).</p>
<p>There are two types of polymorphism:</p>
<h3 id="compile-time-polymorphism">Compile-time Polymorphism</h3>
<p>Achieved through function overloading and templates. Function overloading allows multiple functions with the same name but different parameters.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-cpp" data-lang="cpp"><span style="display:flex;"><span><span style="color:#66d9ef">void</span> <span style="color:#a6e22e">print</span>(<span style="color:#66d9ef">int</span> i) {
</span></span><span style="display:flex;"><span>    std<span style="color:#f92672">::</span>cout <span style="color:#f92672">&lt;&lt;</span> <span style="color:#e6db74">&#34;Integer: &#34;</span> <span style="color:#f92672">&lt;&lt;</span> i <span style="color:#f92672">&lt;&lt;</span> std<span style="color:#f92672">::</span>endl;
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">void</span> <span style="color:#a6e22e">print</span>(<span style="color:#66d9ef">double</span> f) {
</span></span><span style="display:flex;"><span>    std<span style="color:#f92672">::</span>cout <span style="color:#f92672">&lt;&lt;</span> <span style="color:#e6db74">&#34;Double: &#34;</span> <span style="color:#f92672">&lt;&lt;</span> f <span style="color:#f92672">&lt;&lt;</span> std<span style="color:#f92672">::</span>endl;
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><h3 id="run-time-polymorphism">Run-time Polymorphism</h3>
<p>Implemented using inheritance and virtual functions. It allows us to call derived class methods through a base class pointer or reference.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-cpp" data-lang="cpp"><span style="display:flex;"><span><span style="color:#66d9ef">class</span> <span style="color:#a6e22e">Shape</span> {
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">public</span><span style="color:#f92672">:</span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">virtual</span> <span style="color:#66d9ef">void</span> draw() {
</span></span><span style="display:flex;"><span>        std<span style="color:#f92672">::</span>cout <span style="color:#f92672">&lt;&lt;</span> <span style="color:#e6db74">&#34;Drawing a shape.&#34;</span> <span style="color:#f92672">&lt;&lt;</span> std<span style="color:#f92672">::</span>endl;
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>};
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">class</span> <span style="color:#a6e22e">Circle</span> <span style="color:#f92672">:</span> <span style="color:#66d9ef">public</span> Shape {
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">public</span><span style="color:#f92672">:</span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">void</span> draw() <span style="color:#66d9ef">override</span> {
</span></span><span style="display:flex;"><span>        std<span style="color:#f92672">::</span>cout <span style="color:#f92672">&lt;&lt;</span> <span style="color:#e6db74">&#34;Drawing a circle.&#34;</span> <span style="color:#f92672">&lt;&lt;</span> std<span style="color:#f92672">::</span>endl;
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>};
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">void</span> <span style="color:#a6e22e">render</span>(Shape<span style="color:#f92672">&amp;</span> s) {
</span></span><span style="display:flex;"><span>    s.draw();
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>Circle c;
</span></span><span style="display:flex;"><span>render(c); <span style="color:#75715e">// Outputs: Drawing a circle.
</span></span></span></code></pre></div><p>By declaring <code>draw()</code> as <code>virtual</code>, we ensure that the correct <code>draw()</code> method is called based on the actual object type, not the reference or pointer type.</p>
<hr>
<h2 id="critical-analysis-and-perspectives">Critical Analysis and Perspectives</h2>
<p>While OOP in C++17 offers robust mechanisms for modelling complex systems, it&rsquo;s imperative to consider potential drawbacks. Overusing inheritance can lead to tightly coupled code, making maintenance challenging (Gamma et al., 1994). Composition might be preferred over inheritance in certain scenarios, adhering to the principle of <strong>composition over inheritance</strong>.</p>
<p>Moreover, understanding when to apply polymorphism effectively is essential. Virtual functions introduce a performance overhead due to dynamic dispatch, which might be critical in high-performance applications.</p>
<hr>
<h2 id="conclusion-and-future-considerations">Conclusion and Future Considerations</h2>
<p>In summarising, C++17&rsquo;s support for object-oriented programming empowers developers to create modular, reusable, and maintainable code by leveraging classes, encapsulation, inheritance, and polymorphism. Personally, I find that a deep understanding of these principles is indispensable for tackling complex programming challenges.</p>
<p>Looking ahead, with the evolution of C++ standards (such as C++20 and beyond), we can anticipate further enhancements in OOP features, including concepts and modules, which aim to improve code organisation and safety (ISO/IEC, 2020). Embracing these advancements will undoubtedly contribute to more robust and efficient software development practices.</p>
<hr>
<p><strong>References</strong></p>
<ul>
<li>Stroustrup, B. (2013). <em>The C++ Programming Language</em>. Addison-Wesley.</li>
<li>Meyers, S. (2005). <em>Effective C++</em>. O&rsquo;Reilly Media.</li>
<li>Lippman, S. B., Lajoie, J., &amp; Moo, B. E. (2012). <em>C++ Primer</em>. Addison-Wesley.</li>
<li>Sutter, H. (2000). <em>Exceptional C++</em>. Addison-Wesley.</li>
<li>Gamma, E., Helm, R., Johnson, R., &amp; Vlissides, J. (1994). <em>Design Patterns: Elements of Reusable Object-Oriented Software</em>. Addison-Wesley.</li>
<li>ISO/IEC. (2020). <em>Programming Languages—C++20 Standard</em>.</li>
</ul>
<hr>
<p>By critically examining these facets of OOP in C++17, I hope to have provided a comprehensive understanding that will aid you in your programming endeavours. Should you wish to delve deeper, I recommend exploring the cited references, which offer valuable insights into effective C++ programming.</p>
]]></content>
        </item>
        
        <item>
            <title>Understanding Pointers and References in C&#43;&#43;17</title>
            <link>https://blog.miguens.one/posts/2024/07/understanding-pointers-and-references-in-c-17/</link>
            <pubDate>Tue, 30 Jul 2024 00:00:00 +0000</pubDate>
            
            <guid>https://blog.miguens.one/posts/2024/07/understanding-pointers-and-references-in-c-17/</guid>
            <description>&lt;p&gt;In my experience with C++17, pointers and references are fundamental concepts that, when mastered, can significantly enhance one&amp;rsquo;s ability to write efficient and effective code. In this blog post, I aim to delve into the intricacies of pointers and references, discuss pointer arithmetic, explore null pointers and smart pointers, and elucidate the use of references, all while providing code examples to clarify each point.&lt;/p&gt;
&lt;h2 id=&#34;table-of-contents&#34;&gt;Table of Contents&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href=&#34;https://blog.miguens.one/posts/2024/07/understanding-pointers-and-references-in-c-17/#introduction-to-pointers&#34;&gt;Introduction to Pointers&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://blog.miguens.one/posts/2024/07/understanding-pointers-and-references-in-c-17/#pointer-arithmetic&#34;&gt;Pointer Arithmetic&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://blog.miguens.one/posts/2024/07/understanding-pointers-and-references-in-c-17/#null-pointers&#34;&gt;Null Pointers&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://blog.miguens.one/posts/2024/07/understanding-pointers-and-references-in-c-17/#smart-pointers&#34;&gt;Smart Pointers&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://blog.miguens.one/posts/2024/07/understanding-pointers-and-references-in-c-17/#understanding-references&#34;&gt;Understanding References&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://blog.miguens.one/posts/2024/07/understanding-pointers-and-references-in-c-17/#conclusion&#34;&gt;Conclusion&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;hr&gt;
&lt;h2 id=&#34;introduction-to-pointers&#34;&gt;Introduction to Pointers&lt;/h2&gt;
&lt;p&gt;A pointer in C++ is a variable that holds the memory address of another variable. Pointers are powerful tools that allow for dynamic memory management, efficient array handling, and the creation of complex data structures like linked lists and trees.&lt;/p&gt;</description>
            <content type="html"><![CDATA[<p>In my experience with C++17, pointers and references are fundamental concepts that, when mastered, can significantly enhance one&rsquo;s ability to write efficient and effective code. In this blog post, I aim to delve into the intricacies of pointers and references, discuss pointer arithmetic, explore null pointers and smart pointers, and elucidate the use of references, all while providing code examples to clarify each point.</p>
<h2 id="table-of-contents">Table of Contents</h2>
<ol>
<li><a href="/posts/2024/07/understanding-pointers-and-references-in-c-17/#introduction-to-pointers">Introduction to Pointers</a></li>
<li><a href="/posts/2024/07/understanding-pointers-and-references-in-c-17/#pointer-arithmetic">Pointer Arithmetic</a></li>
<li><a href="/posts/2024/07/understanding-pointers-and-references-in-c-17/#null-pointers">Null Pointers</a></li>
<li><a href="/posts/2024/07/understanding-pointers-and-references-in-c-17/#smart-pointers">Smart Pointers</a></li>
<li><a href="/posts/2024/07/understanding-pointers-and-references-in-c-17/#understanding-references">Understanding References</a></li>
<li><a href="/posts/2024/07/understanding-pointers-and-references-in-c-17/#conclusion">Conclusion</a></li>
</ol>
<hr>
<h2 id="introduction-to-pointers">Introduction to Pointers</h2>
<p>A pointer in C++ is a variable that holds the memory address of another variable. Pointers are powerful tools that allow for dynamic memory management, efficient array handling, and the creation of complex data structures like linked lists and trees.</p>
<p><strong>Example:</strong></p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-cpp" data-lang="cpp"><span style="display:flex;"><span><span style="color:#66d9ef">int</span> <span style="color:#a6e22e">main</span>() {
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">int</span> number <span style="color:#f92672">=</span> <span style="color:#ae81ff">42</span>;
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">int</span><span style="color:#f92672">*</span> ptr <span style="color:#f92672">=</span> <span style="color:#f92672">&amp;</span>number; <span style="color:#75715e">// &#39;ptr&#39; holds the address of &#39;number&#39;
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>    std<span style="color:#f92672">::</span>cout <span style="color:#f92672">&lt;&lt;</span> <span style="color:#e6db74">&#34;Value: &#34;</span> <span style="color:#f92672">&lt;&lt;</span> <span style="color:#f92672">*</span>ptr <span style="color:#f92672">&lt;&lt;</span> std<span style="color:#f92672">::</span>endl; <span style="color:#75715e">// Dereferencing &#39;ptr&#39; to get the value
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>    <span style="color:#66d9ef">return</span> <span style="color:#ae81ff">0</span>;
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>In this example, <code>ptr</code> is a pointer to an integer, initialised with the address of <code>number</code>. Dereferencing <code>ptr</code> using <code>*ptr</code> yields the value stored in <code>number</code>.</p>
<h2 id="pointer-arithmetic">Pointer Arithmetic</h2>
<p>Pointer arithmetic allows us to navigate through arrays and memory blocks efficiently. When performing arithmetic operations on pointers, the compiler automatically adjusts the pointer based on the size of the data type it points to.</p>
<p><strong>Example:</strong></p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-cpp" data-lang="cpp"><span style="display:flex;"><span><span style="color:#66d9ef">int</span> <span style="color:#a6e22e">main</span>() {
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">int</span> arr[] <span style="color:#f92672">=</span> {<span style="color:#ae81ff">10</span>, <span style="color:#ae81ff">20</span>, <span style="color:#ae81ff">30</span>, <span style="color:#ae81ff">40</span>, <span style="color:#ae81ff">50</span>};
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">int</span><span style="color:#f92672">*</span> ptr <span style="color:#f92672">=</span> arr; <span style="color:#75715e">// Points to the first element of the array
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">for</span>(<span style="color:#66d9ef">int</span> i <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>; i <span style="color:#f92672">&lt;</span> <span style="color:#ae81ff">5</span>; <span style="color:#f92672">++</span>i) {
</span></span><span style="display:flex;"><span>        std<span style="color:#f92672">::</span>cout <span style="color:#f92672">&lt;&lt;</span> <span style="color:#f92672">*</span>ptr <span style="color:#f92672">&lt;&lt;</span> <span style="color:#e6db74">&#34; &#34;</span>;
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">++</span>ptr; <span style="color:#75715e">// Moves to the next integer in the array
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>    }
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">return</span> <span style="color:#ae81ff">0</span>;
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>Here, incrementing <code>ptr</code> moves it to the next integer in the array, effectively iterating through the array elements.</p>
<p><strong>Considerations:</strong></p>
<ul>
<li>Pointer arithmetic should be used cautiously to avoid accessing invalid memory locations.</li>
<li>It is generally safe within the bounds of an array but can lead to undefined behaviour if not properly managed (Meyers, 2014).</li>
</ul>
<h2 id="null-pointers">Null Pointers</h2>
<p>A null pointer is a pointer that does not point to any valid memory location. In C++17, the <code>nullptr</code> keyword is used to represent a null pointer, providing a type-safe way to indicate that a pointer is empty.</p>
<p><strong>Example:</strong></p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-cpp" data-lang="cpp"><span style="display:flex;"><span><span style="color:#66d9ef">int</span><span style="color:#f92672">*</span> ptr <span style="color:#f92672">=</span> <span style="color:#66d9ef">nullptr</span>;
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">if</span>(ptr <span style="color:#f92672">==</span> <span style="color:#66d9ef">nullptr</span>) {
</span></span><span style="display:flex;"><span>    std<span style="color:#f92672">::</span>cout <span style="color:#f92672">&lt;&lt;</span> <span style="color:#e6db74">&#34;Pointer is null.&#34;</span> <span style="color:#f92672">&lt;&lt;</span> std<span style="color:#f92672">::</span>endl;
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>Using <code>nullptr</code> helps prevent common errors associated with null pointers, such as unintended assignments or dereferencing null pointers.</p>
<h2 id="smart-pointers">Smart Pointers</h2>
<p>C++17 introduces smart pointers in the Standard Template Library (STL) to manage dynamic memory more effectively and safely. Smart pointers automatically manage memory allocation and deallocation, reducing the risk of memory leaks.</p>
<h3 id="types-of-smart-pointers">Types of Smart Pointers:</h3>
<ol>
<li><code>std::unique_ptr</code> - Owns an object exclusively.</li>
<li><code>std::shared_ptr</code> - Multiple pointers share ownership of an object.</li>
<li><code>std::weak_ptr</code> - Holds a non-owning reference to an object managed by <code>std::shared_ptr</code>.</li>
</ol>
<p><strong>Example using <code>std::unique_ptr</code>:</strong></p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-cpp" data-lang="cpp"><span style="display:flex;"><span><span style="color:#75715e">#include</span> <span style="color:#75715e">&lt;memory&gt;</span><span style="color:#75715e">
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">int</span> <span style="color:#a6e22e">main</span>() {
</span></span><span style="display:flex;"><span>    std<span style="color:#f92672">::</span>unique_ptr<span style="color:#f92672">&lt;</span><span style="color:#66d9ef">int</span><span style="color:#f92672">&gt;</span> ptr <span style="color:#f92672">=</span> std<span style="color:#f92672">::</span>make_unique<span style="color:#f92672">&lt;</span><span style="color:#66d9ef">int</span><span style="color:#f92672">&gt;</span>(<span style="color:#ae81ff">42</span>);
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">if</span>(ptr) {
</span></span><span style="display:flex;"><span>        std<span style="color:#f92672">::</span>cout <span style="color:#f92672">&lt;&lt;</span> <span style="color:#e6db74">&#34;Value: &#34;</span> <span style="color:#f92672">&lt;&lt;</span> <span style="color:#f92672">*</span>ptr <span style="color:#f92672">&lt;&lt;</span> std<span style="color:#f92672">::</span>endl;
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>    <span style="color:#75715e">// No need to delete &#39;ptr&#39;; memory is automatically managed.
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>    <span style="color:#66d9ef">return</span> <span style="color:#ae81ff">0</span>;
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p><strong>Advantages:</strong></p>
<ul>
<li><strong>Automatic Memory Management:</strong> Smart pointers automatically deallocate memory when no longer in use.</li>
<li><strong>Exception Safety:</strong> They prevent memory leaks even when exceptions occur (Stroustrup, 2013).</li>
</ul>
<h2 id="understanding-references">Understanding References</h2>
<p>A reference in C++ is an alias for another variable. Once a reference is initialised to a variable, it cannot be changed to refer to another variable.</p>
<p><strong>Example:</strong></p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-cpp" data-lang="cpp"><span style="display:flex;"><span><span style="color:#66d9ef">int</span> <span style="color:#a6e22e">main</span>() {
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">int</span> number <span style="color:#f92672">=</span> <span style="color:#ae81ff">100</span>;
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">int</span><span style="color:#f92672">&amp;</span> ref <span style="color:#f92672">=</span> number; <span style="color:#75715e">// &#39;ref&#39; is a reference to &#39;number&#39;
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>
</span></span><span style="display:flex;"><span>    ref <span style="color:#f92672">+=</span> <span style="color:#ae81ff">50</span>;
</span></span><span style="display:flex;"><span>    std<span style="color:#f92672">::</span>cout <span style="color:#f92672">&lt;&lt;</span> <span style="color:#e6db74">&#34;Number: &#34;</span> <span style="color:#f92672">&lt;&lt;</span> number <span style="color:#f92672">&lt;&lt;</span> std<span style="color:#f92672">::</span>endl; <span style="color:#75715e">// Outputs 150
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>    <span style="color:#66d9ef">return</span> <span style="color:#ae81ff">0</span>;
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>In this example, modifying <code>ref</code> directly affects <code>number</code> since <code>ref</code> refers to the same memory location.</p>
<p><strong>Key Points:</strong></p>
<ul>
<li>References must be initialised upon declaration.</li>
<li>They cannot be null, ensuring that they always refer to a valid object.</li>
</ul>
<h2 id="conclusion">Conclusion</h2>
<p>Understanding pointers and references is crucial for effective C++ programming. Pointers offer powerful capabilities for memory management and manipulation, while references provide safer and more straightforward variable aliasing. With the advent of smart pointers in C++17, memory management has become more robust and less error-prone.</p>
<p>In future explorations, I intend to delve deeper into advanced pointer concepts, such as custom deleters in smart pointers and the nuances of pointer validity and ownership models.</p>
<hr>
<p><strong>References:</strong></p>
<ul>
<li>Meyers, S. (2014). <em>Effective Modern C++</em>. O&rsquo;Reilly Media.</li>
<li>Stroustrup, B. (2013). <em>The C++ Programming Language</em>. Addison-Wesley.</li>
</ul>
]]></content>
        </item>
        
        <item>
            <title>Handling Arrays and Strings in C&#43;&#43;17: A Comprehensive Guide</title>
            <link>https://blog.miguens.one/posts/2024/06/handling-arrays-and-strings-in-c-17-a-comprehensive-guide/</link>
            <pubDate>Mon, 03 Jun 2024 00:00:00 +0000</pubDate>
            
            <guid>https://blog.miguens.one/posts/2024/06/handling-arrays-and-strings-in-c-17-a-comprehensive-guide/</guid>
            <description>&lt;p&gt;The efficient manipulation of arrays and strings is fundamental to proficient programming in C++17. In this discourse, I shall delve into fixed-size arrays, dynamic arrays, &lt;code&gt;std::array&lt;/code&gt;, &lt;code&gt;std::vector&lt;/code&gt;, and &lt;code&gt;std::string&lt;/code&gt;. Through illustrative examples, we will explore common operations and best practices.&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;introduction&#34;&gt;Introduction&lt;/h2&gt;
&lt;p&gt;Arrays and strings are pivotal data structures in C++, serving as the cornerstone for data storage and manipulation. C++17 offers a rich set of features that enhance these structures, providing both flexibility and efficiency. While fixed-size and dynamic arrays offer granular control, the Standard Template Library (STL) introduces containers like &lt;code&gt;std::array&lt;/code&gt;, &lt;code&gt;std::vector&lt;/code&gt;, and &lt;code&gt;std::string&lt;/code&gt; that simplify usage and improve safety.&lt;/p&gt;</description>
            <content type="html"><![CDATA[<p>The efficient manipulation of arrays and strings is fundamental to proficient programming in C++17. In this discourse, I shall delve into fixed-size arrays, dynamic arrays, <code>std::array</code>, <code>std::vector</code>, and <code>std::string</code>. Through illustrative examples, we will explore common operations and best practices.</p>
<hr>
<h2 id="introduction">Introduction</h2>
<p>Arrays and strings are pivotal data structures in C++, serving as the cornerstone for data storage and manipulation. C++17 offers a rich set of features that enhance these structures, providing both flexibility and efficiency. While fixed-size and dynamic arrays offer granular control, the Standard Template Library (STL) introduces containers like <code>std::array</code>, <code>std::vector</code>, and <code>std::string</code> that simplify usage and improve safety.</p>
<hr>
<h2 id="fixed-size-arrays">Fixed-Size Arrays</h2>
<p>Fixed-size arrays, also known as C-style arrays, are declared with a constant size known at compile time.</p>
<h3 id="declaration-and-initialisation">Declaration and Initialisation</h3>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-cpp" data-lang="cpp"><span style="display:flex;"><span><span style="color:#66d9ef">int</span> numbers[<span style="color:#ae81ff">5</span>] <span style="color:#f92672">=</span> {<span style="color:#ae81ff">1</span>, <span style="color:#ae81ff">2</span>, <span style="color:#ae81ff">3</span>, <span style="color:#ae81ff">4</span>, <span style="color:#ae81ff">5</span>};
</span></span></code></pre></div><p>This declares an array of five integers. Accessing elements is straightforward:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-cpp" data-lang="cpp"><span style="display:flex;"><span><span style="color:#66d9ef">int</span> first <span style="color:#f92672">=</span> numbers[<span style="color:#ae81ff">0</span>]; <span style="color:#75715e">// Accesses the first element
</span></span></span></code></pre></div><h3 id="common-operations">Common Operations</h3>
<ul>
<li>
<p><strong>Iteration:</strong></p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-cpp" data-lang="cpp"><span style="display:flex;"><span><span style="color:#66d9ef">for</span> (<span style="color:#66d9ef">int</span> i <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>; i <span style="color:#f92672">&lt;</span> <span style="color:#ae81ff">5</span>; <span style="color:#f92672">++</span>i) {
</span></span><span style="display:flex;"><span>    std<span style="color:#f92672">::</span>cout <span style="color:#f92672">&lt;&lt;</span> numbers[i] <span style="color:#f92672">&lt;&lt;</span> <span style="color:#e6db74">&#34; &#34;</span>;
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div></li>
<li>
<p><strong>Modification:</strong></p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-cpp" data-lang="cpp"><span style="display:flex;"><span>numbers[<span style="color:#ae81ff">2</span>] <span style="color:#f92672">=</span> <span style="color:#ae81ff">10</span>; <span style="color:#75715e">// Updates the third element
</span></span></span></code></pre></div></li>
</ul>
<h3 id="limitations">Limitations</h3>
<p>Fixed-size arrays lack bounds checking, leading to potential undefined behaviour if accessed improperly. They also do not provide information about their size at runtime, which can complicate generic programming.</p>
<hr>
<h2 id="dynamic-arrays">Dynamic Arrays</h2>
<p>Dynamic arrays allocate memory at runtime, offering flexibility when the array size is not known at compile time.</p>
<h3 id="allocation-and-deallocation">Allocation and Deallocation</h3>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-cpp" data-lang="cpp"><span style="display:flex;"><span><span style="color:#66d9ef">int</span> size <span style="color:#f92672">=</span> <span style="color:#ae81ff">10</span>;
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">int</span><span style="color:#f92672">*</span> dynArray <span style="color:#f92672">=</span> <span style="color:#66d9ef">new</span> <span style="color:#66d9ef">int</span>[size]; <span style="color:#75715e">// Allocation
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">// ...
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">delete</span>[] dynArray; <span style="color:#75715e">// Deallocation
</span></span></span></code></pre></div><h3 id="common-operations-1">Common Operations</h3>
<ul>
<li>
<p><strong>Accessing Elements:</strong></p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-cpp" data-lang="cpp"><span style="display:flex;"><span>dynArray[<span style="color:#ae81ff">0</span>] <span style="color:#f92672">=</span> <span style="color:#ae81ff">1</span>; <span style="color:#75715e">// Assigns value to the first element
</span></span></span></code></pre></div></li>
<li>
<p><strong>Resizing (Manual):</strong></p>
<p>To resize, one must allocate a new array and copy elements, which is error-prone.</p>
</li>
</ul>
<h3 id="considerations">Considerations</h3>
<p>Manual memory management increases the risk of leaks and errors. It is advisable to encapsulate dynamic arrays within classes or use smart pointers to mitigate these issues.</p>
<hr>
<h2 id="stdarray"><code>std::array</code></h2>
<p><code>std::array</code> is a container that encapsulates fixed-size arrays, introduced in C++11 and enhanced in C++17.</p>
<h3 id="declaration-and-initialisation-1">Declaration and Initialisation</h3>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-cpp" data-lang="cpp"><span style="display:flex;"><span><span style="color:#75715e">#include</span> <span style="color:#75715e">&lt;array&gt;</span><span style="color:#75715e">
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>
</span></span><span style="display:flex;"><span>std<span style="color:#f92672">::</span>array<span style="color:#f92672">&lt;</span><span style="color:#66d9ef">int</span>, <span style="color:#ae81ff">5</span><span style="color:#f92672">&gt;</span> arr <span style="color:#f92672">=</span> {<span style="color:#ae81ff">1</span>, <span style="color:#ae81ff">2</span>, <span style="color:#ae81ff">3</span>, <span style="color:#ae81ff">4</span>, <span style="color:#ae81ff">5</span>};
</span></span></code></pre></div><h3 id="common-operations-2">Common Operations</h3>
<ul>
<li>
<p><strong>Accessing Elements:</strong></p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-cpp" data-lang="cpp"><span style="display:flex;"><span><span style="color:#66d9ef">int</span> second <span style="color:#f92672">=</span> arr.at(<span style="color:#ae81ff">1</span>); <span style="color:#75715e">// Throws an exception if out of bounds
</span></span></span></code></pre></div></li>
<li>
<p><strong>Iteration:</strong></p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-cpp" data-lang="cpp"><span style="display:flex;"><span><span style="color:#66d9ef">for</span> (<span style="color:#66d9ef">const</span> <span style="color:#66d9ef">auto</span><span style="color:#f92672">&amp;</span> elem : arr) {
</span></span><span style="display:flex;"><span>    std<span style="color:#f92672">::</span>cout <span style="color:#f92672">&lt;&lt;</span> elem <span style="color:#f92672">&lt;&lt;</span> <span style="color:#e6db74">&#34; &#34;</span>;
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div></li>
<li>
<p><strong>Size Retrieval:</strong></p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-cpp" data-lang="cpp"><span style="display:flex;"><span>std<span style="color:#f92672">::</span>size_t size <span style="color:#f92672">=</span> arr.size();
</span></span></code></pre></div></li>
</ul>
<h3 id="advantages">Advantages</h3>
<p><code>std::array</code> provides bounds checking with <code>at()</code>, integrates with STL algorithms, and offers a <code>size()</code> method, addressing many limitations of C-style arrays.</p>
<hr>
<h2 id="stdvector"><code>std::vector</code></h2>
<p><code>std::vector</code> is a dynamic array that manages its own memory, resizing as needed.</p>
<h3 id="declaration-and-initialisation-2">Declaration and Initialisation</h3>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-cpp" data-lang="cpp"><span style="display:flex;"><span><span style="color:#75715e">#include</span> <span style="color:#75715e">&lt;vector&gt;</span><span style="color:#75715e">
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>
</span></span><span style="display:flex;"><span>std<span style="color:#f92672">::</span>vector<span style="color:#f92672">&lt;</span><span style="color:#66d9ef">int</span><span style="color:#f92672">&gt;</span> vec <span style="color:#f92672">=</span> {<span style="color:#ae81ff">1</span>, <span style="color:#ae81ff">2</span>, <span style="color:#ae81ff">3</span>, <span style="color:#ae81ff">4</span>, <span style="color:#ae81ff">5</span>};
</span></span></code></pre></div><h3 id="common-operations-3">Common Operations</h3>
<ul>
<li>
<p><strong>Adding Elements:</strong></p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-cpp" data-lang="cpp"><span style="display:flex;"><span>vec.push_back(<span style="color:#ae81ff">6</span>); <span style="color:#75715e">// Adds an element to the end
</span></span></span></code></pre></div></li>
<li>
<p><strong>Removing Elements:</strong></p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-cpp" data-lang="cpp"><span style="display:flex;"><span>vec.pop_back(); <span style="color:#75715e">// Removes the last element
</span></span></span></code></pre></div></li>
<li>
<p><strong>Accessing Elements:</strong></p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-cpp" data-lang="cpp"><span style="display:flex;"><span><span style="color:#66d9ef">int</span> third <span style="color:#f92672">=</span> vec[<span style="color:#ae81ff">2</span>];
</span></span></code></pre></div></li>
<li>
<p><strong>Iteration:</strong></p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-cpp" data-lang="cpp"><span style="display:flex;"><span><span style="color:#66d9ef">for</span> (<span style="color:#66d9ef">auto</span> it <span style="color:#f92672">=</span> vec.begin(); it <span style="color:#f92672">!=</span> vec.end(); <span style="color:#f92672">++</span>it) {
</span></span><span style="display:flex;"><span>    std<span style="color:#f92672">::</span>cout <span style="color:#f92672">&lt;&lt;</span> <span style="color:#f92672">*</span>it <span style="color:#f92672">&lt;&lt;</span> <span style="color:#e6db74">&#34; &#34;</span>;
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div></li>
</ul>
<h3 id="advantages-1">Advantages</h3>
<p><code>std::vector</code> automatically handles memory allocation and deallocation, reducing the risk of leaks. It also offers a rich interface for element access and manipulation.</p>
<hr>
<h2 id="stdstring"><code>std::string</code></h2>
<p><code>std::string</code> is the standard class for handling strings in C++.</p>
<h3 id="declaration-and-initialisation-3">Declaration and Initialisation</h3>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-cpp" data-lang="cpp"><span style="display:flex;"><span><span style="color:#75715e">#include</span> <span style="color:#75715e">&lt;string&gt;</span><span style="color:#75715e">
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>
</span></span><span style="display:flex;"><span>std<span style="color:#f92672">::</span>string greeting <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;Hello, World!&#34;</span>;
</span></span></code></pre></div><h3 id="common-operations-4">Common Operations</h3>
<ul>
<li>
<p><strong>Concatenation:</strong></p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-cpp" data-lang="cpp"><span style="display:flex;"><span>std<span style="color:#f92672">::</span>string name <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;Alice&#34;</span>;
</span></span><span style="display:flex;"><span>std<span style="color:#f92672">::</span>string message <span style="color:#f92672">=</span> greeting <span style="color:#f92672">+</span> <span style="color:#e6db74">&#34; &#34;</span> <span style="color:#f92672">+</span> name;
</span></span></code></pre></div></li>
<li>
<p><strong>Substring Extraction:</strong></p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-cpp" data-lang="cpp"><span style="display:flex;"><span>std<span style="color:#f92672">::</span>string sub <span style="color:#f92672">=</span> greeting.substr(<span style="color:#ae81ff">7</span>, <span style="color:#ae81ff">5</span>); <span style="color:#75715e">// &#34;World&#34;
</span></span></span></code></pre></div></li>
<li>
<p><strong>Searching:</strong></p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-cpp" data-lang="cpp"><span style="display:flex;"><span>std<span style="color:#f92672">::</span>size_t pos <span style="color:#f92672">=</span> greeting.find(<span style="color:#e6db74">&#34;World&#34;</span>);
</span></span></code></pre></div></li>
<li>
<p><strong>Modification:</strong></p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-cpp" data-lang="cpp"><span style="display:flex;"><span>greeting.replace(<span style="color:#ae81ff">7</span>, <span style="color:#ae81ff">5</span>, <span style="color:#e6db74">&#34;C++&#34;</span>);
</span></span></code></pre></div></li>
</ul>
<h3 id="advantages-2">Advantages</h3>
<p><code>std::string</code> abstracts away manual memory management, provides extensive functionality, and ensures exception safety.</p>
<hr>
<h2 id="comparative-analysis">Comparative Analysis</h2>
<p>While fixed-size and dynamic arrays offer performance benefits and low-level control, they come with significant risks related to memory management and safety. In contrast, <code>std::array</code>, <code>std::vector</code>, and <code>std::string</code> provide safer alternatives with minimal performance overhead due to optimisations in the STL.</p>
<h3 id="safety-and-efficiency">Safety and Efficiency</h3>
<p>Using STL containers can prevent common errors such as buffer overflows and memory leaks. They also improve code readability and maintainability.</p>
<h3 id="performance-considerations">Performance Considerations</h3>
<p>In performance-critical applications, the overhead of STL containers might be a concern. However, modern compilers optimise STL usage effectively, often eliminating the difference.</p>
<hr>
<h2 id="personal-perspective">Personal Perspective</h2>
<p>I think that adopting <code>std::array</code>, <code>std::vector</code>, and <code>std::string</code> is generally beneficial. They offer a balance between performance and safety, and their extensive functionality accelerates development. Nonetheless, understanding underlying implementations remains crucial, particularly when optimising for performance or working with low-level systems.</p>
<hr>
<h2 id="conclusion">Conclusion</h2>
<p>C++17 provides a robust set of tools for handling arrays and strings. By leveraging <code>std::array</code>, <code>std::vector</code>, and <code>std::string</code>, developers can write safer and more efficient code. While fixed-size and dynamic arrays have their place, particularly in systems programming, the advantages of STL containers are compelling for most applications.</p>
<h3 id="future-considerations">Future Considerations</h3>
<p>As the C++ standard evolves, we can anticipate further enhancements that improve safety and performance. Staying abreast of these developments is essential for modern C++ programming.</p>
<hr>
<h2 id="references">References</h2>
<ol>
<li><strong>Stroustrup, B.</strong> (2013). <em>The C++ Programming Language</em> (4th ed.). Addison-Wesley.</li>
<li><strong>ISO/IEC 14882:2017</strong>. <em>Information Technology – Programming Languages – C++</em>.</li>
<li><strong>Meyers, S.</strong> (2014). <em>Effective Modern C++</em>. O&rsquo;Reilly Media.</li>
</ol>
]]></content>
        </item>
        
        <item>
            <title>Functions in C&#43;&#43;17: A Comprehensive Analysis</title>
            <link>https://blog.miguens.one/posts/2024/05/functions-in-c-17-a-comprehensive-analysis/</link>
            <pubDate>Thu, 23 May 2024 00:00:00 +0000</pubDate>
            
            <guid>https://blog.miguens.one/posts/2024/05/functions-in-c-17-a-comprehensive-analysis/</guid>
            <description>&lt;p&gt;In the realm of C++17, functions remain a cornerstone of effective programming, offering a means to encapsulate code for reusability and clarity. In this blog post, I will delve into the intricacies of function declaration and definition, default arguments, overloading, inline functions, and recursion. Through detailed explanations and illustrative examples, we shall explore these concepts, critically analysing their applications and nuances.&lt;/p&gt;
&lt;h2 id=&#34;function-declaration-and-definition&#34;&gt;Function Declaration and Definition&lt;/h2&gt;
&lt;p&gt;At the heart of any C++ program lies the function, a block of code designed to perform a specific task. The distinction between function declaration and definition is fundamental.&lt;/p&gt;</description>
            <content type="html"><![CDATA[<p>In the realm of C++17, functions remain a cornerstone of effective programming, offering a means to encapsulate code for reusability and clarity. In this blog post, I will delve into the intricacies of function declaration and definition, default arguments, overloading, inline functions, and recursion. Through detailed explanations and illustrative examples, we shall explore these concepts, critically analysing their applications and nuances.</p>
<h2 id="function-declaration-and-definition">Function Declaration and Definition</h2>
<p>At the heart of any C++ program lies the function, a block of code designed to perform a specific task. The distinction between function declaration and definition is fundamental.</p>
<ul>
<li>
<p><strong>Function Declaration</strong>: Also known as a function prototype, it informs the compiler about a function&rsquo;s name, return type, and parameters without providing the actual body. This allows for type checking during compilation.</p>
</li>
<li>
<p><strong>Function Definition</strong>: It includes the actual implementation—the body of the function where the computations occur.</p>
</li>
</ul>
<p><strong>Example</strong>:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-cpp" data-lang="cpp"><span style="display:flex;"><span><span style="color:#75715e">// Function Declaration
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span><span style="color:#66d9ef">int</span> <span style="color:#a6e22e">add</span>(<span style="color:#66d9ef">int</span> a, <span style="color:#66d9ef">int</span> b);
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">// Function Definition
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span><span style="color:#66d9ef">int</span> <span style="color:#a6e22e">add</span>(<span style="color:#66d9ef">int</span> a, <span style="color:#66d9ef">int</span> b) {
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">return</span> a <span style="color:#f92672">+</span> b;
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">int</span> <span style="color:#a6e22e">main</span>() {
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">int</span> sum <span style="color:#f92672">=</span> add(<span style="color:#ae81ff">5</span>, <span style="color:#ae81ff">3</span>);
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">return</span> <span style="color:#ae81ff">0</span>;
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>In the example above, the declaration precedes the <code>main</code> function, allowing its use before the compiler encounters the definition. This separation is particularly useful in header files and when organising large codebases.</p>
<h2 id="default-arguments">Default Arguments</h2>
<p>Default arguments enable functions to be called with fewer arguments than they are defined to accept, assigning default values to parameters not provided by the caller.</p>
<p><strong>Example</strong>:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-cpp" data-lang="cpp"><span style="display:flex;"><span><span style="color:#66d9ef">void</span> <span style="color:#a6e22e">printMessage</span>(std<span style="color:#f92672">::</span>string message, <span style="color:#66d9ef">int</span> times <span style="color:#f92672">=</span> <span style="color:#ae81ff">1</span>) {
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">for</span> (<span style="color:#66d9ef">int</span> i <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>; i <span style="color:#f92672">&lt;</span> times; <span style="color:#f92672">++</span>i) {
</span></span><span style="display:flex;"><span>        std<span style="color:#f92672">::</span>cout <span style="color:#f92672">&lt;&lt;</span> message <span style="color:#f92672">&lt;&lt;</span> std<span style="color:#f92672">::</span>endl;
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">int</span> <span style="color:#a6e22e">main</span>() {
</span></span><span style="display:flex;"><span>    printMessage(<span style="color:#e6db74">&#34;Hello, World!&#34;</span>);       <span style="color:#75715e">// times defaults to 1
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>    printMessage(<span style="color:#e6db74">&#34;C++17 is powerful&#34;</span>, <span style="color:#ae81ff">3</span>);
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">return</span> <span style="color:#ae81ff">0</span>;
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>In this example, the <code>times</code> parameter has a default value of <code>1</code>. When <code>printMessage</code> is called with a single argument, it uses the default value for <code>times</code>. This feature enhances function flexibility and simplifies function calls when default behaviour is acceptable.</p>
<p><strong>Critical Analysis</strong>:</p>
<p>While default arguments improve usability, they can introduce ambiguity in overloaded functions and should be used judiciously. It&rsquo;s important to ensure that default values are appropriate and that the function&rsquo;s behaviour remains predictable.</p>
<h2 id="function-overloading">Function Overloading</h2>
<p>Function overloading allows multiple functions to have the same name with different parameter lists. The compiler distinguishes them based on the number and types of arguments.</p>
<p><strong>Example</strong>:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-cpp" data-lang="cpp"><span style="display:flex;"><span><span style="color:#66d9ef">int</span> <span style="color:#a6e22e">multiply</span>(<span style="color:#66d9ef">int</span> a, <span style="color:#66d9ef">int</span> b) {
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">return</span> a <span style="color:#f92672">*</span> b;
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">double</span> <span style="color:#a6e22e">multiply</span>(<span style="color:#66d9ef">double</span> a, <span style="color:#66d9ef">double</span> b) {
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">return</span> a <span style="color:#f92672">*</span> b;
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">int</span> <span style="color:#a6e22e">multiply</span>(<span style="color:#66d9ef">int</span> a, <span style="color:#66d9ef">int</span> b, <span style="color:#66d9ef">int</span> c) {
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">return</span> a <span style="color:#f92672">*</span> b <span style="color:#f92672">*</span> c;
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">int</span> <span style="color:#a6e22e">main</span>() {
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">int</span> prod1 <span style="color:#f92672">=</span> multiply(<span style="color:#ae81ff">2</span>, <span style="color:#ae81ff">3</span>);          <span style="color:#75715e">// Calls int version
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>    <span style="color:#66d9ef">double</span> prod2 <span style="color:#f92672">=</span> multiply(<span style="color:#ae81ff">2.5</span>, <span style="color:#ae81ff">3.5</span>);   <span style="color:#75715e">// Calls double version
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>    <span style="color:#66d9ef">int</span> prod3 <span style="color:#f92672">=</span> multiply(<span style="color:#ae81ff">2</span>, <span style="color:#ae81ff">3</span>, <span style="color:#ae81ff">4</span>);       <span style="color:#75715e">// Calls three-parameter version
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>    <span style="color:#66d9ef">return</span> <span style="color:#ae81ff">0</span>;
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>Here, <code>multiply</code> is overloaded to handle different types and numbers of parameters. This enhances code readability and maintainability by providing intuitive function names for related operations.</p>
<p><strong>Critical Analysis</strong>:</p>
<p>Overloading should be applied carefully to avoid confusion. Overloads that behave differently in subtle ways can lead to errors. Moreover, excessive overloading can make code harder to understand, so it&rsquo;s advisable to overload functions only when they perform conceptually similar operations.</p>
<h2 id="inline-functions">Inline Functions</h2>
<p>Inline functions suggest to the compiler to insert the function&rsquo;s body where the function call is made, potentially reducing the overhead of a function call. In C++17, the <code>inline</code> keyword also affects linkage, allowing functions to be defined in header files without violating the One Definition Rule (ODR).</p>
<p><strong>Example</strong>:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-cpp" data-lang="cpp"><span style="display:flex;"><span><span style="color:#66d9ef">inline</span> <span style="color:#66d9ef">int</span> <span style="color:#a6e22e">square</span>(<span style="color:#66d9ef">int</span> x) {
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">return</span> x <span style="color:#f92672">*</span> x;
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">int</span> <span style="color:#a6e22e">main</span>() {
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">int</span> result <span style="color:#f92672">=</span> square(<span style="color:#ae81ff">5</span>);  <span style="color:#75715e">// May expand inline
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>    <span style="color:#66d9ef">return</span> <span style="color:#ae81ff">0</span>;
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p><strong>Critical Analysis</strong>:</p>
<p>While inline functions can improve performance by eliminating function call overhead, they can increase the size of the binary if overused, leading to code bloat. Modern compilers optimise code efficiently, and the <code>inline</code> keyword is often seen as a hint rather than a command.</p>
<h2 id="recursion">Recursion</h2>
<p>Recursion involves a function calling itself to solve a problem by breaking it down into smaller, more manageable sub-problems. It&rsquo;s a powerful concept but must be used with care to avoid issues like stack overflow.</p>
<p><strong>Example</strong>:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-cpp" data-lang="cpp"><span style="display:flex;"><span><span style="color:#66d9ef">int</span> <span style="color:#a6e22e">factorial</span>(<span style="color:#66d9ef">int</span> n) {
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">if</span> (n <span style="color:#f92672">&lt;=</span> <span style="color:#ae81ff">1</span>)
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">return</span> <span style="color:#ae81ff">1</span>;
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">else</span>
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">return</span> n <span style="color:#f92672">*</span> factorial(n <span style="color:#f92672">-</span> <span style="color:#ae81ff">1</span>);
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">int</span> <span style="color:#a6e22e">main</span>() {
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">int</span> fact <span style="color:#f92672">=</span> factorial(<span style="color:#ae81ff">5</span>);  <span style="color:#75715e">// Computes 5!
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>    <span style="color:#66d9ef">return</span> <span style="color:#ae81ff">0</span>;
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p><strong>Critical Analysis</strong>:</p>
<p>Recursion can simplify code for problems like tree traversals or factorial computation. However, it&rsquo;s essential to ensure that the base case is well-defined to prevent infinite recursion. Iterative solutions can sometimes be more efficient, as they avoid the overhead of multiple function calls.</p>
<h2 id="conclusion">Conclusion</h2>
<p>Functions in C++17 offer a rich set of features that, when used effectively, can lead to robust and maintainable code. Understanding the nuances of function declaration and definition, default arguments, overloading, inline functions, and recursion is crucial for any C++ programmer.</p>
<p>From my perspective, while these features enhance the language&rsquo;s expressiveness, they also demand a disciplined approach to avoid common pitfalls. As we continue to develop complex software systems, a deep grasp of these concepts will undoubtedly contribute to writing efficient and elegant code.</p>
<p><strong>Future Considerations</strong>:</p>
<p>With the advent of newer standards like C++20 and beyond, additional features such as concepts and improved constexpr functions offer even more powerful ways to write functions. Keeping abreast of these developments will be beneficial for staying current in the evolving landscape of C++ programming.</p>
<hr>
<p><em>References</em>:</p>
<ol>
<li>Stroustrup, B. (2013). <em>The C++ Programming Language</em> (4th ed.). Addison-Wesley.</li>
<li>ISO/IEC 14882:2017. <em>Programming Languages — C++</em>. International Organization for Standardization.</li>
</ol>
]]></content>
        </item>
        
        <item>
            <title>Mastering Control Flow Statements in C&#43;&#43;17</title>
            <link>https://blog.miguens.one/posts/2024/04/mastering-control-flow-statements-in-c-17/</link>
            <pubDate>Fri, 05 Apr 2024 00:00:00 +0000</pubDate>
            
            <guid>https://blog.miguens.one/posts/2024/04/mastering-control-flow-statements-in-c-17/</guid>
            <description>&lt;p&gt;In the realm of C++ programming, control flow statements are indispensable tools that enable us to dictate the execution path of our code. They provide the means to make decisions, iterate over data, and manage the flow of execution based on specific conditions. In this post, I will delve into the intricacies of control flow statements in C++17, including &lt;code&gt;if-else&lt;/code&gt;, &lt;code&gt;switch-case&lt;/code&gt;, traditional loops (&lt;code&gt;for&lt;/code&gt;, &lt;code&gt;while&lt;/code&gt;, &lt;code&gt;do-while&lt;/code&gt;), and the modern range-based &lt;code&gt;for&lt;/code&gt; loop. Through detailed explanations and code examples, we will explore how these constructs function and how they can be effectively utilised in your code.&lt;/p&gt;</description>
            <content type="html"><![CDATA[<p>In the realm of C++ programming, control flow statements are indispensable tools that enable us to dictate the execution path of our code. They provide the means to make decisions, iterate over data, and manage the flow of execution based on specific conditions. In this post, I will delve into the intricacies of control flow statements in C++17, including <code>if-else</code>, <code>switch-case</code>, traditional loops (<code>for</code>, <code>while</code>, <code>do-while</code>), and the modern range-based <code>for</code> loop. Through detailed explanations and code examples, we will explore how these constructs function and how they can be effectively utilised in your code.</p>
<hr>
<h2 id="table-of-contents">Table of Contents</h2>
<ol>
<li><a href="/posts/2024/04/mastering-control-flow-statements-in-c-17/#the-if-else-statement">The <code>if-else</code> Statement</a></li>
<li><a href="/posts/2024/04/mastering-control-flow-statements-in-c-17/#the-switch-case-statement">The <code>switch-case</code> Statement</a></li>
<li><a href="/posts/2024/04/mastering-control-flow-statements-in-c-17/#loops-in-c">Loops in C++</a>
<ul>
<li><a href="/posts/2024/04/mastering-control-flow-statements-in-c-17/#the-for-loop">The <code>for</code> Loop</a></li>
<li><a href="/posts/2024/04/mastering-control-flow-statements-in-c-17/#the-while-loop">The <code>while</code> Loop</a></li>
<li><a href="/posts/2024/04/mastering-control-flow-statements-in-c-17/#the-do-while-loop">The <code>do-while</code> Loop</a></li>
</ul>
</li>
<li><a href="/posts/2024/04/mastering-control-flow-statements-in-c-17/#the-range-based-for-loop">The Range-Based <code>for</code> Loop</a></li>
<li><a href="/posts/2024/04/mastering-control-flow-statements-in-c-17/#conclusion">Conclusion</a></li>
</ol>
<hr>
<h2 id="the-if-else-statement">The <code>if-else</code> Statement</h2>
<p>The <code>if-else</code> statement is a fundamental control structure that allows us to execute code blocks conditionally. Based on a boolean expression, the program decides whether to execute a particular block of code.</p>
<p><strong>Syntax:</strong></p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-cpp" data-lang="cpp"><span style="display:flex;"><span><span style="color:#66d9ef">if</span> (condition) {
</span></span><span style="display:flex;"><span>    <span style="color:#75715e">// Code to execute if condition is true
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>} <span style="color:#66d9ef">else</span> {
</span></span><span style="display:flex;"><span>    <span style="color:#75715e">// Code to execute if condition is false
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>}
</span></span></code></pre></div><p><strong>Example:</strong></p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-cpp" data-lang="cpp"><span style="display:flex;"><span><span style="color:#75715e">#include</span> <span style="color:#75715e">&lt;iostream&gt;</span><span style="color:#75715e">
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">int</span> <span style="color:#a6e22e">main</span>() {
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">int</span> number <span style="color:#f92672">=</span> <span style="color:#ae81ff">10</span>;
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">if</span> (number <span style="color:#f92672">%</span> <span style="color:#ae81ff">2</span> <span style="color:#f92672">==</span> <span style="color:#ae81ff">0</span>) {
</span></span><span style="display:flex;"><span>        std<span style="color:#f92672">::</span>cout <span style="color:#f92672">&lt;&lt;</span> number <span style="color:#f92672">&lt;&lt;</span> <span style="color:#e6db74">&#34; is even.</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">&#34;</span>;
</span></span><span style="display:flex;"><span>    } <span style="color:#66d9ef">else</span> {
</span></span><span style="display:flex;"><span>        std<span style="color:#f92672">::</span>cout <span style="color:#f92672">&lt;&lt;</span> number <span style="color:#f92672">&lt;&lt;</span> <span style="color:#e6db74">&#34; is odd.</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">&#34;</span>;
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">return</span> <span style="color:#ae81ff">0</span>;
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p><strong>Explanation:</strong></p>
<p>In this example, we check whether the variable <code>number</code> is even or odd by using the modulus operator <code>%</code>. If <code>number % 2</code> equals <code>0</code>, the condition is true, and the program outputs that the number is even; otherwise, it outputs that the number is odd.</p>
<hr>
<h2 id="the-switch-case-statement">The <code>switch-case</code> Statement</h2>
<p>The <code>switch-case</code> statement offers a streamlined way to compare a variable against multiple constant values, executing different code blocks based on the matching case.</p>
<p><strong>Syntax:</strong></p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-cpp" data-lang="cpp"><span style="display:flex;"><span><span style="color:#66d9ef">switch</span> (variable) {
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">case</span> constant1:
</span></span><span style="display:flex;"><span>        <span style="color:#75715e">// Code block for constant1
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>        <span style="color:#66d9ef">break</span>;
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">case</span> constant2:
</span></span><span style="display:flex;"><span>        <span style="color:#75715e">// Code block for constant2
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>        <span style="color:#66d9ef">break</span>;
</span></span><span style="display:flex;"><span>    <span style="color:#75715e">// More cases...
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>    <span style="color:#66d9ef">default</span><span style="color:#f92672">:</span>
</span></span><span style="display:flex;"><span>        <span style="color:#75715e">// Code block if no cases match
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>        <span style="color:#66d9ef">break</span>;
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p><strong>Example:</strong></p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-cpp" data-lang="cpp"><span style="display:flex;"><span><span style="color:#75715e">#include</span> <span style="color:#75715e">&lt;iostream&gt;</span><span style="color:#75715e">
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">int</span> <span style="color:#a6e22e">main</span>() {
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">char</span> grade <span style="color:#f92672">=</span> <span style="color:#e6db74">&#39;B&#39;</span>;
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">switch</span> (grade) {
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">case</span> <span style="color:#e6db74">&#39;A&#39;</span><span style="color:#f92672">:</span>
</span></span><span style="display:flex;"><span>            std<span style="color:#f92672">::</span>cout <span style="color:#f92672">&lt;&lt;</span> <span style="color:#e6db74">&#34;Excellent!</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">&#34;</span>;
</span></span><span style="display:flex;"><span>            <span style="color:#66d9ef">break</span>;
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">case</span> <span style="color:#e6db74">&#39;B&#39;</span><span style="color:#f92672">:</span>
</span></span><span style="display:flex;"><span>            std<span style="color:#f92672">::</span>cout <span style="color:#f92672">&lt;&lt;</span> <span style="color:#e6db74">&#34;Well done.</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">&#34;</span>;
</span></span><span style="display:flex;"><span>            <span style="color:#66d9ef">break</span>;
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">case</span> <span style="color:#e6db74">&#39;C&#39;</span><span style="color:#f92672">:</span>
</span></span><span style="display:flex;"><span>            std<span style="color:#f92672">::</span>cout <span style="color:#f92672">&lt;&lt;</span> <span style="color:#e6db74">&#34;Good.</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">&#34;</span>;
</span></span><span style="display:flex;"><span>            <span style="color:#66d9ef">break</span>;
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">case</span> <span style="color:#e6db74">&#39;D&#39;</span><span style="color:#f92672">:</span>
</span></span><span style="display:flex;"><span>            std<span style="color:#f92672">::</span>cout <span style="color:#f92672">&lt;&lt;</span> <span style="color:#e6db74">&#34;Need improvement.</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">&#34;</span>;
</span></span><span style="display:flex;"><span>            <span style="color:#66d9ef">break</span>;
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">case</span> <span style="color:#e6db74">&#39;F&#39;</span><span style="color:#f92672">:</span>
</span></span><span style="display:flex;"><span>            std<span style="color:#f92672">::</span>cout <span style="color:#f92672">&lt;&lt;</span> <span style="color:#e6db74">&#34;Failed.</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">&#34;</span>;
</span></span><span style="display:flex;"><span>            <span style="color:#66d9ef">break</span>;
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">default</span><span style="color:#f92672">:</span>
</span></span><span style="display:flex;"><span>            std<span style="color:#f92672">::</span>cout <span style="color:#f92672">&lt;&lt;</span> <span style="color:#e6db74">&#34;Invalid grade.</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">&#34;</span>;
</span></span><span style="display:flex;"><span>            <span style="color:#66d9ef">break</span>;
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">return</span> <span style="color:#ae81ff">0</span>;
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p><strong>Explanation:</strong></p>
<p>Here, the program evaluates the character <code>grade</code> and matches it against the cases. Upon finding a matching case (<code>'B'</code> in this instance), it executes the corresponding code block and then breaks out of the <code>switch</code> statement to prevent fall-through (the unintended execution of subsequent cases).</p>
<hr>
<h2 id="loops-in-c">Loops in C++</h2>
<p>Loops are control structures that allow us to execute a block of code repeatedly based on a condition. C++ provides several looping constructs, each with its unique use cases.</p>
<h3 id="the-for-loop">The <code>for</code> Loop</h3>
<p>The traditional <code>for</code> loop is commonly used when the number of iterations is known beforehand.</p>
<p><strong>Syntax:</strong></p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-cpp" data-lang="cpp"><span style="display:flex;"><span><span style="color:#66d9ef">for</span> (initialisation; condition; increment) {
</span></span><span style="display:flex;"><span>    <span style="color:#75715e">// Code to execute
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>}
</span></span></code></pre></div><p><strong>Example:</strong></p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-cpp" data-lang="cpp"><span style="display:flex;"><span><span style="color:#75715e">#include</span> <span style="color:#75715e">&lt;iostream&gt;</span><span style="color:#75715e">
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">int</span> <span style="color:#a6e22e">main</span>() {
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">for</span> (<span style="color:#66d9ef">int</span> i <span style="color:#f92672">=</span> <span style="color:#ae81ff">1</span>; i <span style="color:#f92672">&lt;=</span> <span style="color:#ae81ff">5</span>; <span style="color:#f92672">++</span>i) {
</span></span><span style="display:flex;"><span>        std<span style="color:#f92672">::</span>cout <span style="color:#f92672">&lt;&lt;</span> <span style="color:#e6db74">&#34;Iteration &#34;</span> <span style="color:#f92672">&lt;&lt;</span> i <span style="color:#f92672">&lt;&lt;</span> <span style="color:#e6db74">&#34;</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">&#34;</span>;
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">return</span> <span style="color:#ae81ff">0</span>;
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p><strong>Explanation:</strong></p>
<p>In this loop, we initialise <code>i</code> to <code>1</code>, continue looping while <code>i</code> is less than or equal to <code>5</code>, and increment <code>i</code> after each iteration. The program outputs the iteration number each time.</p>
<hr>
<h3 id="the-while-loop">The <code>while</code> Loop</h3>
<p>The <code>while</code> loop is ideal when the number of iterations is not known in advance and depends on a condition evaluated before each iteration.</p>
<p><strong>Syntax:</strong></p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-cpp" data-lang="cpp"><span style="display:flex;"><span><span style="color:#66d9ef">while</span> (condition) {
</span></span><span style="display:flex;"><span>    <span style="color:#75715e">// Code to execute
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>}
</span></span></code></pre></div><p><strong>Example:</strong></p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-cpp" data-lang="cpp"><span style="display:flex;"><span><span style="color:#75715e">#include</span> <span style="color:#75715e">&lt;iostream&gt;</span><span style="color:#75715e">
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">int</span> <span style="color:#a6e22e">main</span>() {
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">int</span> count <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>;
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">while</span> (count <span style="color:#f92672">&lt;</span> <span style="color:#ae81ff">3</span>) {
</span></span><span style="display:flex;"><span>        std<span style="color:#f92672">::</span>cout <span style="color:#f92672">&lt;&lt;</span> <span style="color:#e6db74">&#34;Count is &#34;</span> <span style="color:#f92672">&lt;&lt;</span> count <span style="color:#f92672">&lt;&lt;</span> <span style="color:#e6db74">&#34;</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">&#34;</span>;
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">++</span>count;
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">return</span> <span style="color:#ae81ff">0</span>;
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p><strong>Explanation:</strong></p>
<p>This loop continues to execute as long as <code>count</code> is less than <code>3</code>. The condition is evaluated before each iteration, ensuring that the code block is only executed when the condition holds true.</p>
<hr>
<h3 id="the-do-while-loop">The <code>do-while</code> Loop</h3>
<p>The <code>do-while</code> loop is similar to the <code>while</code> loop but guarantees that the code block is executed at least once because the condition is evaluated after the execution of the loop&rsquo;s body.</p>
<p><strong>Syntax:</strong></p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-cpp" data-lang="cpp"><span style="display:flex;"><span><span style="color:#66d9ef">do</span> {
</span></span><span style="display:flex;"><span>    <span style="color:#75715e">// Code to execute
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>} <span style="color:#66d9ef">while</span> (condition);
</span></span></code></pre></div><p><strong>Example:</strong></p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-cpp" data-lang="cpp"><span style="display:flex;"><span><span style="color:#75715e">#include</span> <span style="color:#75715e">&lt;iostream&gt;</span><span style="color:#75715e">
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">int</span> <span style="color:#a6e22e">main</span>() {
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">int</span> number <span style="color:#f92672">=</span> <span style="color:#ae81ff">5</span>;
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">do</span> {
</span></span><span style="display:flex;"><span>        std<span style="color:#f92672">::</span>cout <span style="color:#f92672">&lt;&lt;</span> <span style="color:#e6db74">&#34;Number is &#34;</span> <span style="color:#f92672">&lt;&lt;</span> number <span style="color:#f92672">&lt;&lt;</span> <span style="color:#e6db74">&#34;</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">&#34;</span>;
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">++</span>number;
</span></span><span style="display:flex;"><span>    } <span style="color:#66d9ef">while</span> (number <span style="color:#f92672">&lt;</span> <span style="color:#ae81ff">5</span>);
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">return</span> <span style="color:#ae81ff">0</span>;
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p><strong>Explanation:</strong></p>
<p>Despite the condition <code>number &lt; 5</code> being false initially (<code>number</code> is <code>5</code>), the code inside the <code>do</code> block executes once before the condition is checked. This is a key characteristic of the <code>do-while</code> loop.</p>
<hr>
<h2 id="the-range-based-for-loop">The Range-Based <code>for</code> Loop</h2>
<p>Introduced in C++11 and further refined in C++17, the range-based <code>for</code> loop provides a concise and readable way to iterate over elements in a container (such as arrays, vectors, or any class that provides <code>begin()</code> and <code>end()</code> methods).</p>
<p><strong>Syntax:</strong></p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-cpp" data-lang="cpp"><span style="display:flex;"><span><span style="color:#66d9ef">for</span> (element_type element : container) {
</span></span><span style="display:flex;"><span>    <span style="color:#75715e">// Code to execute with element
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>}
</span></span></code></pre></div><p><strong>Example:</strong></p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-cpp" data-lang="cpp"><span style="display:flex;"><span><span style="color:#75715e">#include</span> <span style="color:#75715e">&lt;iostream&gt;</span><span style="color:#75715e">
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">#include</span> <span style="color:#75715e">&lt;vector&gt;</span><span style="color:#75715e">
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">int</span> <span style="color:#a6e22e">main</span>() {
</span></span><span style="display:flex;"><span>    std<span style="color:#f92672">::</span>vector<span style="color:#f92672">&lt;</span><span style="color:#66d9ef">int</span><span style="color:#f92672">&gt;</span> numbers <span style="color:#f92672">=</span> {<span style="color:#ae81ff">1</span>, <span style="color:#ae81ff">2</span>, <span style="color:#ae81ff">3</span>, <span style="color:#ae81ff">4</span>, <span style="color:#ae81ff">5</span>};
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">for</span> (<span style="color:#66d9ef">int</span> num : numbers) {
</span></span><span style="display:flex;"><span>        std<span style="color:#f92672">::</span>cout <span style="color:#f92672">&lt;&lt;</span> num <span style="color:#f92672">&lt;&lt;</span> <span style="color:#e6db74">&#34; &#34;</span>;
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>    std<span style="color:#f92672">::</span>cout <span style="color:#f92672">&lt;&lt;</span> <span style="color:#e6db74">&#34;</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">&#34;</span>;
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">return</span> <span style="color:#ae81ff">0</span>;
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p><strong>Explanation:</strong></p>
<p>In this example, the range-based <code>for</code> loop iterates over each element in the <code>numbers</code> vector, allowing us to access each <code>num</code> directly without the need for indexing. This enhances code readability and reduces the potential for errors associated with traditional indexing.</p>
<p><strong>C++17 Enhancements:</strong></p>
<p>C++17 introduced structured bindings, allowing us to unpack elements while iterating. This is particularly useful when working with containers of pairs or tuples.</p>
<p><strong>Example with Structured Bindings:</strong></p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-cpp" data-lang="cpp"><span style="display:flex;"><span><span style="color:#75715e">#include</span> <span style="color:#75715e">&lt;iostream&gt;</span><span style="color:#75715e">
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">#include</span> <span style="color:#75715e">&lt;map&gt;</span><span style="color:#75715e">
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">int</span> <span style="color:#a6e22e">main</span>() {
</span></span><span style="display:flex;"><span>    std<span style="color:#f92672">::</span>map<span style="color:#f92672">&lt;</span>std<span style="color:#f92672">::</span>string, <span style="color:#66d9ef">int</span><span style="color:#f92672">&gt;</span> scores <span style="color:#f92672">=</span> { {<span style="color:#e6db74">&#34;Alice&#34;</span>, <span style="color:#ae81ff">90</span>}, {<span style="color:#e6db74">&#34;Bob&#34;</span>, <span style="color:#ae81ff">85</span>}, {<span style="color:#e6db74">&#34;Charlie&#34;</span>, <span style="color:#ae81ff">95</span>} };
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">for</span> (<span style="color:#66d9ef">const</span> <span style="color:#66d9ef">auto</span><span style="color:#f92672">&amp;</span> [name, score] <span style="color:#f92672">:</span> scores) {
</span></span><span style="display:flex;"><span>        std<span style="color:#f92672">::</span>cout <span style="color:#f92672">&lt;&lt;</span> name <span style="color:#f92672">&lt;&lt;</span> <span style="color:#e6db74">&#34; scored &#34;</span> <span style="color:#f92672">&lt;&lt;</span> score <span style="color:#f92672">&lt;&lt;</span> <span style="color:#e6db74">&#34;</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">&#34;</span>;
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">return</span> <span style="color:#ae81ff">0</span>;
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p><strong>Explanation:</strong></p>
<p>Here, we use structured bindings to unpack the key-value pairs in the <code>scores</code> map directly into <code>name</code> and <code>score</code> variables within the loop. This feature enhances the expressiveness of the range-based <code>for</code> loop in C++17.</p>
<hr>
<h2 id="conclusion">Conclusion</h2>
<p>Understanding and mastering control flow statements is crucial for writing efficient and effective C++ programs. The <code>if-else</code> and <code>switch-case</code> statements empower us to make decisions based on conditions, while loops (<code>for</code>, <code>while</code>, <code>do-while</code>) allow us to execute code repeatedly under certain conditions. The range-based <code>for</code> loop, especially with C++17 enhancements like structured bindings, offers a more elegant and readable way to iterate over collections.</p>
<p>As we continue to develop more complex applications, these control structures become even more vital. They not only improve the logic and flow of our programs but also enhance maintainability and readability. I encourage you to experiment with these constructs and consider how they can be applied in your projects to write cleaner and more efficient code.</p>
<hr>
<p><em>Note: All code examples have been tested with a C++17 compliant compiler. For further reading and more in-depth explanations, consider consulting the <a href="https://en.cppreference.com/w/cpp/17">C++17 standard documentation</a> and authoritative texts such as &ldquo;The C++ Programming Language&rdquo; by Bjarne Stroustrup.</em></p>
]]></content>
        </item>
        
        <item>
            <title>Exploring Operators and Expressions in C&#43;&#43;17: An In-Depth Analysis</title>
            <link>https://blog.miguens.one/posts/2024/02/exploring-operators-and-expressions-in-c-17-an-in-depth-analysis/</link>
            <pubDate>Fri, 02 Feb 2024 00:00:00 +0000</pubDate>
            
            <guid>https://blog.miguens.one/posts/2024/02/exploring-operators-and-expressions-in-c-17-an-in-depth-analysis/</guid>
            <description>&lt;p&gt;In my journey with C++17, I have found that a comprehensive understanding of operators and expressions is indispensable for writing efficient and effective code. Operators are the building blocks that allow us to manipulate data and construct complex logic. In this blog post, I aim to delve into the various types of operators available in C++17—arithmetic, relational, logical, bitwise operators, and the concept of operator overloading—providing detailed explanations and illustrative examples to showcase their practical applications.&lt;/p&gt;</description>
            <content type="html"><![CDATA[<p>In my journey with C++17, I have found that a comprehensive understanding of operators and expressions is indispensable for writing efficient and effective code. Operators are the building blocks that allow us to manipulate data and construct complex logic. In this blog post, I aim to delve into the various types of operators available in C++17—arithmetic, relational, logical, bitwise operators, and the concept of operator overloading—providing detailed explanations and illustrative examples to showcase their practical applications.</p>
<hr>
<h2 id="table-of-contents">Table of Contents</h2>
<ol>
<li><a href="/posts/2024/02/exploring-operators-and-expressions-in-c-17-an-in-depth-analysis/#arithmetic-operators">Arithmetic Operators</a></li>
<li><a href="/posts/2024/02/exploring-operators-and-expressions-in-c-17-an-in-depth-analysis/#relational-operators">Relational Operators</a></li>
<li><a href="/posts/2024/02/exploring-operators-and-expressions-in-c-17-an-in-depth-analysis/#logical-operators">Logical Operators</a></li>
<li><a href="/posts/2024/02/exploring-operators-and-expressions-in-c-17-an-in-depth-analysis/#bitwise-operators">Bitwise Operators</a></li>
<li><a href="/posts/2024/02/exploring-operators-and-expressions-in-c-17-an-in-depth-analysis/#operator-overloading">Operator Overloading</a></li>
<li><a href="/posts/2024/02/exploring-operators-and-expressions-in-c-17-an-in-depth-analysis/#conclusion">Conclusion</a></li>
</ol>
<hr>
<h2 id="arithmetic-operators">Arithmetic Operators</h2>
<p>Arithmetic operators are fundamental in performing mathematical calculations. They include addition (<code>+</code>), subtraction (<code>-</code>), multiplication (<code>*</code>), division (<code>/</code>), and modulus (<code>%</code>).</p>
<h3 id="examples">Examples</h3>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-cpp" data-lang="cpp"><span style="display:flex;"><span><span style="color:#66d9ef">int</span> a <span style="color:#f92672">=</span> <span style="color:#ae81ff">10</span>;
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">int</span> b <span style="color:#f92672">=</span> <span style="color:#ae81ff">3</span>;
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">int</span> sum <span style="color:#f92672">=</span> a <span style="color:#f92672">+</span> b;        <span style="color:#75715e">// sum = 13
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span><span style="color:#66d9ef">int</span> difference <span style="color:#f92672">=</span> a <span style="color:#f92672">-</span> b; <span style="color:#75715e">// difference = 7
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span><span style="color:#66d9ef">int</span> product <span style="color:#f92672">=</span> a <span style="color:#f92672">*</span> b;    <span style="color:#75715e">// product = 30
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span><span style="color:#66d9ef">int</span> quotient <span style="color:#f92672">=</span> a <span style="color:#f92672">/</span> b;   <span style="color:#75715e">// quotient = 3
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span><span style="color:#66d9ef">int</span> remainder <span style="color:#f92672">=</span> a <span style="color:#f92672">%</span> b;  <span style="color:#75715e">// remainder = 1
</span></span></span></code></pre></div><p>In the above example, the division of two integers results in an integer quotient, truncating any decimal (fractional) part. It is crucial to be mindful of integer division to avoid unintended results.</p>
<h3 id="considerations">Considerations</h3>
<p>One should be cautious with division and modulus operations, especially when dealing with zero or negative numbers. Dividing by zero results in undefined behaviour, which can crash the program.</p>
<hr>
<h2 id="relational-operators">Relational Operators</h2>
<p>Relational operators compare values and yield a Boolean result (<code>true</code> or <code>false</code>). The primary relational operators are equal to (<code>==</code>), not equal to (<code>!=</code>), greater than (<code>&gt;</code>), less than (<code>&lt;</code>), greater than or equal to (<code>&gt;=</code>), and less than or equal to (<code>&lt;=</code>).</p>
<h3 id="examples-1">Examples</h3>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-cpp" data-lang="cpp"><span style="display:flex;"><span><span style="color:#66d9ef">int</span> x <span style="color:#f92672">=</span> <span style="color:#ae81ff">5</span>;
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">int</span> y <span style="color:#f92672">=</span> <span style="color:#ae81ff">10</span>;
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">bool</span> isEqual <span style="color:#f92672">=</span> (x <span style="color:#f92672">==</span> y);         <span style="color:#75715e">// isEqual = false
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span><span style="color:#66d9ef">bool</span> isNotEqual <span style="color:#f92672">=</span> (x <span style="color:#f92672">!=</span> y);      <span style="color:#75715e">// isNotEqual = true
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span><span style="color:#66d9ef">bool</span> isGreater <span style="color:#f92672">=</span> (x <span style="color:#f92672">&gt;</span> y);        <span style="color:#75715e">// isGreater = false
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span><span style="color:#66d9ef">bool</span> isLessOrEqual <span style="color:#f92672">=</span> (x <span style="color:#f92672">&lt;=</span> y);   <span style="color:#75715e">// isLessOrEqual = true
</span></span></span></code></pre></div><p>Relational operators are essential in control flow statements like <code>if</code>, <code>for</code>, and <code>while</code>, allowing the program to make decisions based on variable comparisons.</p>
<h3 id="usage-scenarios">Usage Scenarios</h3>
<ul>
<li><strong>Conditional Execution</strong>: Executing code blocks when certain conditions are met.</li>
<li><strong>Loop Control</strong>: Determining when loops should continue or terminate.</li>
</ul>
<hr>
<h2 id="logical-operators">Logical Operators</h2>
<p>Logical operators are used to form compound Boolean expressions. The primary logical operators are logical AND (<code>&amp;&amp;</code>), logical OR (<code>||</code>), and logical NOT (<code>!</code>).</p>
<h3 id="examples-2">Examples</h3>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-cpp" data-lang="cpp"><span style="display:flex;"><span><span style="color:#66d9ef">bool</span> a <span style="color:#f92672">=</span> true;
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">bool</span> b <span style="color:#f92672">=</span> false;
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">bool</span> result1 <span style="color:#f92672">=</span> a <span style="color:#f92672">&amp;&amp;</span> b;  <span style="color:#75715e">// result1 = false
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span><span style="color:#66d9ef">bool</span> result2 <span style="color:#f92672">=</span> a <span style="color:#f92672">||</span> b;  <span style="color:#75715e">// result2 = true
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span><span style="color:#66d9ef">bool</span> result3 <span style="color:#f92672">=</span> <span style="color:#f92672">!</span>a;      <span style="color:#75715e">// result3 = false
</span></span></span></code></pre></div><h3 id="short-circuit-evaluation">Short-Circuit Evaluation</h3>
<p>Logical operators in C++17 exhibit short-circuit behaviour:</p>
<ul>
<li><strong>Logical AND (<code>&amp;&amp;</code>)</strong>: If the first operand is <code>false</code>, the second operand is not evaluated.</li>
<li><strong>Logical OR (<code>||</code>)</strong>: If the first operand is <code>true</code>, the second operand is not evaluated.</li>
</ul>
<h4 id="example">Example</h4>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-cpp" data-lang="cpp"><span style="display:flex;"><span><span style="color:#66d9ef">int</span> divisor <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>;
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">if</span> (divisor <span style="color:#f92672">!=</span> <span style="color:#ae81ff">0</span> <span style="color:#f92672">&amp;&amp;</span> (<span style="color:#ae81ff">10</span> <span style="color:#f92672">/</span> divisor) <span style="color:#f92672">&gt;</span> <span style="color:#ae81ff">1</span>) {
</span></span><span style="display:flex;"><span>    <span style="color:#75715e">// This block will not execute, and division by zero is avoided.
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>}
</span></span></code></pre></div><p>In this example, the short-circuit evaluation prevents a potential division by zero error.</p>
<hr>
<h2 id="bitwise-operators">Bitwise Operators</h2>
<p>Bitwise operators perform operations at the bit level, which can be highly efficient for certain tasks such as low-level programming, cryptography, and performance-critical applications.</p>
<h3 id="operators-and-their-functions">Operators and Their Functions</h3>
<ul>
<li><strong>Bitwise AND (<code>&amp;</code>)</strong>: Sets each bit to <code>1</code> if both bits are <code>1</code>.</li>
<li><strong>Bitwise OR (<code>|</code>)</strong>: Sets each bit to <code>1</code> if one of the bits is <code>1</code>.</li>
<li><strong>Bitwise XOR (<code>^</code>)</strong>: Sets each bit to <code>1</code> if only one of the bits is <code>1</code>.</li>
<li><strong>Bitwise NOT (<code>~</code>)</strong>: Inverts all the bits.</li>
<li><strong>Left Shift (<code>&lt;&lt;</code>)</strong>: Shifts bits to the left, adding zeros on the right.</li>
<li><strong>Right Shift (<code>&gt;&gt;</code>)</strong>: Shifts bits to the right.</li>
</ul>
<h3 id="examples-3">Examples</h3>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-cpp" data-lang="cpp"><span style="display:flex;"><span><span style="color:#66d9ef">unsigned</span> <span style="color:#66d9ef">int</span> x <span style="color:#f92672">=</span> <span style="color:#ae81ff">5</span>;    <span style="color:#75715e">// Binary: 0101
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span><span style="color:#66d9ef">unsigned</span> <span style="color:#66d9ef">int</span> y <span style="color:#f92672">=</span> <span style="color:#ae81ff">3</span>;    <span style="color:#75715e">// Binary: 0011
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">unsigned</span> <span style="color:#66d9ef">int</span> andResult <span style="color:#f92672">=</span> x <span style="color:#f92672">&amp;</span> y;   <span style="color:#75715e">// andResult = 1 (Binary: 0001)
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span><span style="color:#66d9ef">unsigned</span> <span style="color:#66d9ef">int</span> orResult <span style="color:#f92672">=</span> x <span style="color:#f92672">|</span> y;    <span style="color:#75715e">// orResult = 7 (Binary: 0111)
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span><span style="color:#66d9ef">unsigned</span> <span style="color:#66d9ef">int</span> xorResult <span style="color:#f92672">=</span> x <span style="color:#f92672">^</span> y;   <span style="color:#75715e">// xorResult = 6 (Binary: 0110)
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span><span style="color:#66d9ef">unsigned</span> <span style="color:#66d9ef">int</span> notResult <span style="color:#f92672">=</span> <span style="color:#f92672">~</span>x;      <span style="color:#75715e">// notResult = 4294967290 (assuming 32-bit unsigned int)
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span><span style="color:#66d9ef">unsigned</span> <span style="color:#66d9ef">int</span> leftShift <span style="color:#f92672">=</span> x <span style="color:#f92672">&lt;&lt;</span> <span style="color:#ae81ff">1</span>;  <span style="color:#75715e">// leftShift = 10 (Binary: 1010)
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span><span style="color:#66d9ef">unsigned</span> <span style="color:#66d9ef">int</span> rightShift <span style="color:#f92672">=</span> x <span style="color:#f92672">&gt;&gt;</span> <span style="color:#ae81ff">1</span>; <span style="color:#75715e">// rightShift = 2 (Binary: 0010)
</span></span></span></code></pre></div><h3 id="applications">Applications</h3>
<ul>
<li><strong>Flag Management</strong>: Setting, clearing, and toggling bits to manage flags.</li>
<li><strong>Optimised Arithmetic</strong>: Multiplying or dividing by powers of two using shifts.</li>
<li><strong>Data Compression</strong>: Packing multiple values into a single variable.</li>
</ul>
<hr>
<h2 id="operator-overloading">Operator Overloading</h2>
<p>Operator overloading allows developers to redefine the behaviour of operators for user-defined types (classes and structs). This feature enhances the expressiveness of code, making custom types behave like fundamental types.</p>
<h3 id="example-overloading-the--operator">Example: Overloading the <code>+</code> Operator</h3>
<p>Consider a simple <code>Vector2D</code> class representing a two-dimensional vector.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-cpp" data-lang="cpp"><span style="display:flex;"><span><span style="color:#66d9ef">class</span> <span style="color:#a6e22e">Vector2D</span> {
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">public</span><span style="color:#f92672">:</span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">double</span> x, y;
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    Vector2D(<span style="color:#66d9ef">double</span> x_, <span style="color:#66d9ef">double</span> y_) <span style="color:#f92672">:</span> x(x_), y(y_) {}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#75715e">// Overload the + operator
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>    Vector2D <span style="color:#66d9ef">operator</span><span style="color:#f92672">+</span>(<span style="color:#66d9ef">const</span> Vector2D<span style="color:#f92672">&amp;</span> other) <span style="color:#66d9ef">const</span> {
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">return</span> <span style="color:#a6e22e">Vector2D</span>(x <span style="color:#f92672">+</span> other.x, y <span style="color:#f92672">+</span> other.y);
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>};
</span></span></code></pre></div><h4 id="usage">Usage</h4>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-cpp" data-lang="cpp"><span style="display:flex;"><span>Vector2D <span style="color:#a6e22e">v1</span>(<span style="color:#ae81ff">1.0</span>, <span style="color:#ae81ff">2.0</span>);
</span></span><span style="display:flex;"><span>Vector2D <span style="color:#a6e22e">v2</span>(<span style="color:#ae81ff">3.0</span>, <span style="color:#ae81ff">4.0</span>);
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>Vector2D v3 <span style="color:#f92672">=</span> v1 <span style="color:#f92672">+</span> v2; <span style="color:#75715e">// v3.x = 4.0, v3.y = 6.0
</span></span></span></code></pre></div><p>By overloading the <code>+</code> operator, we can add two <code>Vector2D</code> objects using the natural <code>+</code> syntax.</p>
<h3 id="best-practices">Best Practices</h3>
<ul>
<li><strong>Maintain Intuitive Behaviour</strong>: Overloaded operators should behave in a way that is consistent with their typical use.</li>
<li><strong>Avoid Overcomplicating</strong>: Do not overload operators for operations that are not intuitive.</li>
<li><strong>Implement Related Operators</strong>: If you overload <code>==</code>, consider overloading <code>!=</code> as well.</li>
</ul>
<h3 id="pros-and-cons">Pros and Cons</h3>
<p><strong>Pros</strong></p>
<ul>
<li><strong>Code Readability</strong>: Enhances readability by allowing natural expressions.</li>
<li><strong>Consistency</strong>: Provides a consistent interface for custom types.</li>
</ul>
<p><strong>Cons</strong></p>
<ul>
<li><strong>Potential Confusion</strong>: Misuse can lead to code that is hard to understand.</li>
<li><strong>Maintenance Overhead</strong>: May introduce complexity in debugging and maintenance.</li>
</ul>
<hr>
<h2 id="conclusion">Conclusion</h2>
<p>Operators and expressions form the core of programming in C++17, enabling developers to perform a wide range of operations from basic arithmetic to complex logical evaluations. Understanding their intricacies—including operator precedence and associativity—is essential for writing robust and efficient code.</p>
<p>Operator overloading, when used judiciously, can greatly enhance the expressiveness of user-defined types, making code more intuitive. However, it is important to adhere to best practices to avoid introducing ambiguity.</p>
<p>As the C++ language continues to evolve, future standards may introduce new operators or refine existing ones. Staying abreast of these changes will ensure that we, as developers, continue to write code that is both modern and effective.</p>
<hr>
<p><strong>References</strong></p>
<ul>
<li>ISO/IEC 14882:2017(E): <em>Programming Languages—C++</em> (International Organisation for Standardisation, 2017).</li>
<li>Stroustrup, B., <em>The C++ Programming Language</em> (4th Edition, Addison-Wesley, 2013).</li>
<li>Meyers, S., <em>Effective Modern C++</em> (O&rsquo;Reilly Media, 2014).</li>
</ul>
]]></content>
        </item>
        
        <item>
            <title>Variables and Data Types in C&#43;&#43;17: An In-Depth Exploration</title>
            <link>https://blog.miguens.one/posts/2023/12/variables-and-data-types-in-c-17-an-in-depth-exploration/</link>
            <pubDate>Fri, 22 Dec 2023 00:00:00 +0000</pubDate>
            
            <guid>https://blog.miguens.one/posts/2023/12/variables-and-data-types-in-c-17-an-in-depth-exploration/</guid>
            <description>&lt;p&gt;Understanding variables and data types is quintessential for any programming endeavour, particularly in a language as robust and nuanced as C++17. In this discourse, I shall delve into the fundamental types, elucidate the mechanisms of type inference with &lt;code&gt;auto&lt;/code&gt;, and examine the utilisation of &lt;code&gt;constexpr&lt;/code&gt;. Through code snippets and critical analysis, we will navigate the intricacies of variable declaration and initialisation in modern C++.&lt;/p&gt;
&lt;h2 id=&#34;fundamental-types-in-c17&#34;&gt;Fundamental Types in C++17&lt;/h2&gt;
&lt;p&gt;C++17, being a statically-typed language, necessitates that the type of every variable is known at compile-time (Stroustrup, 2013). The language offers a rich tapestry of data types, categorised broadly into built-in (fundamental) types and user-defined types.&lt;/p&gt;</description>
            <content type="html"><![CDATA[<p>Understanding variables and data types is quintessential for any programming endeavour, particularly in a language as robust and nuanced as C++17. In this discourse, I shall delve into the fundamental types, elucidate the mechanisms of type inference with <code>auto</code>, and examine the utilisation of <code>constexpr</code>. Through code snippets and critical analysis, we will navigate the intricacies of variable declaration and initialisation in modern C++.</p>
<h2 id="fundamental-types-in-c17">Fundamental Types in C++17</h2>
<p>C++17, being a statically-typed language, necessitates that the type of every variable is known at compile-time (Stroustrup, 2013). The language offers a rich tapestry of data types, categorised broadly into built-in (fundamental) types and user-defined types.</p>
<h3 id="built-in-types">Built-in Types</h3>
<p>The built-in types form the foundation of data representation in C++. They include integral types, floating-point types, and void. Integral types encompass <code>char</code>, <code>int</code>, <code>short</code>, <code>long</code>, and their unsigned counterparts. Floating-point types consist of <code>float</code>, <code>double</code>, and <code>long double</code>.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-cpp" data-lang="cpp"><span style="display:flex;"><span><span style="color:#66d9ef">int</span> integerVariable <span style="color:#f92672">=</span> <span style="color:#ae81ff">42</span>;
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">double</span> doubleVariable <span style="color:#f92672">=</span> <span style="color:#ae81ff">3.1415</span>;
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">char</span> characterVariable <span style="color:#f92672">=</span> <span style="color:#e6db74">&#39;A&#39;</span>;
</span></span></code></pre></div><p>One must be cognisant of the sizes and ranges of these types, which can be platform-dependent (ISO/IEC 14882:2017). For instance, the <code>int</code> type is guaranteed to be at least 16 bits, but its exact size may vary.</p>
<h3 id="user-defined-types">User-defined Types</h3>
<p>User-defined types enhance the expressiveness of code by allowing the creation of complex data structures. These include classes, structures (<code>struct</code>), enumerations (<code>enum</code>), and unions.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-cpp" data-lang="cpp"><span style="display:flex;"><span><span style="color:#66d9ef">struct</span> <span style="color:#a6e22e">Point</span> {
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">double</span> x;
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">double</span> y;
</span></span><span style="display:flex;"><span>};
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>Point origin <span style="color:#f92672">=</span> {<span style="color:#ae81ff">0.0</span>, <span style="color:#ae81ff">0.0</span>};
</span></span></code></pre></div><p>Utilising user-defined types promotes code reusability and abstraction, which are pillars of object-oriented programming.</p>
<h2 id="type-inference-with-auto">Type Inference with <code>auto</code></h2>
<p>The <code>auto</code> keyword, introduced in C++11 and refined in subsequent standards, enables the compiler to deduce the type of a variable from its initialiser expression. This feature fosters code brevity and mitigates redundancy, especially in the context of complex types.</p>
<h3 id="benefits-and-limitations">Benefits and Limitations</h3>
<p>Employing <code>auto</code> enhances maintainability, as changes to the initialiser type propagate automatically (Meyers, 2014). It is particularly advantageous when dealing with iterator types or lambda expressions.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-cpp" data-lang="cpp"><span style="display:flex;"><span><span style="color:#66d9ef">auto</span> sum <span style="color:#f92672">=</span> integerVariable <span style="color:#f92672">+</span> <span style="color:#66d9ef">static_cast</span><span style="color:#f92672">&lt;</span><span style="color:#66d9ef">int</span><span style="color:#f92672">&gt;</span>(doubleVariable);
</span></span></code></pre></div><p>However, overuse of <code>auto</code> may obfuscate code readability, as the explicit type is not immediately apparent (Sutter, 2015). It is imperative to strike a balance between conciseness and clarity.</p>
<h3 id="examples">Examples</h3>
<p>Consider the instantiation of an iterator over a <code>std::vector&lt;int&gt;</code>:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-cpp" data-lang="cpp"><span style="display:flex;"><span>std<span style="color:#f92672">::</span>vector<span style="color:#f92672">&lt;</span><span style="color:#66d9ef">int</span><span style="color:#f92672">&gt;</span> numbers <span style="color:#f92672">=</span> {<span style="color:#ae81ff">1</span>, <span style="color:#ae81ff">2</span>, <span style="color:#ae81ff">3</span>, <span style="color:#ae81ff">4</span>, <span style="color:#ae81ff">5</span>};
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">auto</span> it <span style="color:#f92672">=</span> numbers.begin();
</span></span></code></pre></div><p>Here, <code>auto</code> deduces the type <code>std::vector&lt;int&gt;::iterator</code>, which would be cumbersome to write explicitly.</p>
<h2 id="the-use-of-constexpr">The Use of <code>constexpr</code></h2>
<p>The <code>constexpr</code> specifier declares that the value of a variable or function can be evaluated at compile-time. In C++17, <code>constexpr</code> has been extended to include more complex expressions and user-defined types (Vandevoorde, Josuttis, &amp; Gregor, 2018).</p>
<h3 id="advantages-of-constexpr-variables">Advantages of <code>constexpr</code> Variables</h3>
<p>Utilising <code>constexpr</code> can lead to performance optimisations by enabling compile-time computations, thus reducing runtime overhead. It also enhances code safety by ensuring that certain values remain constant throughout execution.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-cpp" data-lang="cpp"><span style="display:flex;"><span><span style="color:#66d9ef">constexpr</span> <span style="color:#66d9ef">int</span> arraySize <span style="color:#f92672">=</span> <span style="color:#ae81ff">10</span>;
</span></span><span style="display:flex;"><span>std<span style="color:#f92672">::</span>array<span style="color:#f92672">&lt;</span><span style="color:#66d9ef">int</span>, arraySize<span style="color:#f92672">&gt;</span> myArray;
</span></span></code></pre></div><h3 id="examples-1">Examples</h3>
<p>Defining a <code>constexpr</code> function:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-cpp" data-lang="cpp"><span style="display:flex;"><span><span style="color:#66d9ef">constexpr</span> <span style="color:#66d9ef">int</span> <span style="color:#a6e22e">factorial</span>(<span style="color:#66d9ef">int</span> n) {
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">return</span> n <span style="color:#f92672">&lt;=</span> <span style="color:#ae81ff">1</span> <span style="color:#f92672">?</span> <span style="color:#ae81ff">1</span> <span style="color:#f92672">:</span> n <span style="color:#f92672">*</span> factorial(n <span style="color:#f92672">-</span> <span style="color:#ae81ff">1</span>);
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">constexpr</span> <span style="color:#66d9ef">int</span> result <span style="color:#f92672">=</span> factorial(<span style="color:#ae81ff">5</span>); <span style="color:#75715e">// Evaluated at compile-time
</span></span></span></code></pre></div><p>This approach leverages compile-time computation to initialise <code>result</code>, potentially improving efficiency.</p>
<h2 id="variable-declaration-and-initialisation">Variable Declaration and Initialisation</h2>
<p>Proper declaration and initialisation of variables are fundamental to preventing undefined behaviour and ensuring program correctness.</p>
<h3 id="best-practices">Best Practices</h3>
<ul>
<li><strong>Initialise Variables Upon Declaration</strong>: Uninitialised variables contain indeterminate values, which can lead to unpredictable behaviour.</li>
<li><strong>Use Uniform Initialisation</strong>: C++11 introduced brace-initialisation, which prevents narrowing conversions and is considered safer.</li>
</ul>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-cpp" data-lang="cpp"><span style="display:flex;"><span><span style="color:#66d9ef">int</span> uninitialisedVariable;         <span style="color:#75715e">// Contains indeterminate value
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span><span style="color:#66d9ef">int</span> initialisedVariable <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>;       <span style="color:#75715e">// Copy initialisation
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span><span style="color:#66d9ef">int</span> braceInitialisedVariable{<span style="color:#ae81ff">0</span>};   <span style="color:#75715e">// Direct list initialisation
</span></span></span></code></pre></div><ul>
<li><strong>Prefer <code>nullptr</code> over <code>NULL</code></strong>: <code>nullptr</code> is a type-safe pointer literal introduced in C++11.</li>
</ul>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-cpp" data-lang="cpp"><span style="display:flex;"><span><span style="color:#66d9ef">int</span><span style="color:#f92672">*</span> pointerVariable <span style="color:#f92672">=</span> <span style="color:#66d9ef">nullptr</span>;
</span></span></code></pre></div><h3 id="examples-2">Examples</h3>
<p>Initialising a class object:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-cpp" data-lang="cpp"><span style="display:flex;"><span><span style="color:#66d9ef">class</span> <span style="color:#a6e22e">Rectangle</span> {
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">public</span><span style="color:#f92672">:</span>
</span></span><span style="display:flex;"><span>    Rectangle(<span style="color:#66d9ef">double</span> w, <span style="color:#66d9ef">double</span> h) <span style="color:#f92672">:</span> width{w}, height{h} {}
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">private</span><span style="color:#f92672">:</span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">double</span> width;
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">double</span> height;
</span></span><span style="display:flex;"><span>};
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>Rectangle rect{<span style="color:#ae81ff">5.0</span>, <span style="color:#ae81ff">10.0</span>};
</span></span></code></pre></div><p>This example demonstrates direct initialisation using constructor initialiser lists.</p>
<h2 id="conclusion">Conclusion</h2>
<p>In exploring variables and data types in C++17, we have examined the foundational elements that underpin robust software development in this language. The judicious use of fundamental and user-defined types, combined with modern features such as <code>auto</code> and <code>constexpr</code>, empowers developers to write efficient and maintainable code. It is incumbent upon us to continuously refine our understanding of these constructs to harness the full potential of C++17.</p>
<p>As the language evolves, embracing new standards and features will be essential. Future considerations might include the implications of concepts introduced in C++20 and how they further influence type safety and template programming.</p>
<hr>
<p><strong>References</strong></p>
<ul>
<li>ISO/IEC 14882:2017: <em>Information technology—Programming languages—C++</em>. International Organization for Standardization.</li>
<li>Meyers, S. (2014). <em>Effective Modern C++</em>. O&rsquo;Reilly Media.</li>
<li>Stroustrup, B. (2013). <em>The C++ Programming Language</em> (4th ed.). Addison-Wesley.</li>
<li>Sutter, H. (2015). <em>GotW #94 Solution: AAA Style, Part 1</em>. Retrieved from <a href="https://herbsutter.com/2015/08/19/gotw-94-solution-aaa-style-part-1/">herbsutter.com</a></li>
<li>Vandevoorde, D., Josuttis, N. M., &amp; Gregor, D. (2018). <em>C++ Templates: The Complete Guide</em> (2nd ed.). Addison-Wesley.</li>
</ul>
]]></content>
        </item>
        
        <item>
            <title>Understanding the Basic Structure of a C&#43;&#43; Program</title>
            <link>https://blog.miguens.one/posts/2023/11/understanding-the-basic-structure-of-a-c-program/</link>
            <pubDate>Wed, 29 Nov 2023 00:00:00 +0000</pubDate>
            
            <guid>https://blog.miguens.one/posts/2023/11/understanding-the-basic-structure-of-a-c-program/</guid>
            <description>&lt;p&gt;In my experience as a software developer, grasping the fundamental structure of a C++ program is pivotal for writing efficient and maintainable code. This article delves into the essential components of a C++ program, including headers, namespaces, the &lt;code&gt;main&lt;/code&gt; function, and compilation units. By examining these elements in detail, we can better understand how they interact to form a cohesive application.&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;headers&#34;&gt;Headers&lt;/h2&gt;
&lt;p&gt;Headers in C++ are files that contain declarations of functions, classes, variables, and other identifiers. They allow us to share these declarations across multiple source files, promoting code reusability and modularity.&lt;/p&gt;</description>
            <content type="html"><![CDATA[<p>In my experience as a software developer, grasping the fundamental structure of a C++ program is pivotal for writing efficient and maintainable code. This article delves into the essential components of a C++ program, including headers, namespaces, the <code>main</code> function, and compilation units. By examining these elements in detail, we can better understand how they interact to form a cohesive application.</p>
<hr>
<h2 id="headers">Headers</h2>
<p>Headers in C++ are files that contain declarations of functions, classes, variables, and other identifiers. They allow us to share these declarations across multiple source files, promoting code reusability and modularity.</p>
<p>For example:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-cpp" data-lang="cpp"><span style="display:flex;"><span><span style="color:#75715e">#include</span> <span style="color:#75715e">&lt;iostream&gt;</span><span style="color:#75715e">
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">#include</span> <span style="color:#75715e">&#34;MyHeader.h&#34;</span><span style="color:#75715e">
</span></span></span></code></pre></div><ul>
<li><strong><code>&lt;iostream&gt;</code></strong>: A standard library header that includes definitions for input/output stream objects like <code>std::cin</code> and <code>std::cout</code>.</li>
<li><strong><code>&quot;MyHeader.h&quot;</code></strong>: A user-defined header file containing custom declarations.</li>
</ul>
<p>Including headers ensures the compiler is aware of the functions and classes we intend to use, thereby preventing compilation errors due to undefined references (Stroustrup, 2013).</p>
<h3 id="header-guards">Header Guards</h3>
<p>To prevent multiple inclusions of the same header file (which can cause redefinition errors), we use header guards:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-cpp" data-lang="cpp"><span style="display:flex;"><span><span style="color:#75715e">#ifndef MYHEADER_H
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">#define MYHEADER_H
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">// Declarations
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#endif </span><span style="color:#75715e">// MYHEADER_H
</span></span></span></code></pre></div><p>This construct checks if <code>MYHEADER_H</code> has not been defined before; if not, it defines it and includes the declarations. This practice enhances compilation efficiency and prevents potential conflicts.</p>
<hr>
<h2 id="namespaces">Namespaces</h2>
<p>Namespaces help organise code into logical groups and prevent name collisions, especially when your code base includes multiple libraries.</p>
<p>For instance:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-cpp" data-lang="cpp"><span style="display:flex;"><span><span style="color:#66d9ef">namespace</span> MyNamespace {
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">void</span> <span style="color:#a6e22e">myFunction</span>() {
</span></span><span style="display:flex;"><span>        <span style="color:#75715e">// Implementation
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>    }
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>By encapsulating <code>myFunction</code> within <code>MyNamespace</code>, we avoid conflicts with functions of the same name in other libraries.</p>
<h3 id="using-namespaces">Using Namespaces</h3>
<p>There are several ways to utilise namespaces:</p>
<ol>
<li>
<p><strong>Scope Resolution Operator</strong>:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-cpp" data-lang="cpp"><span style="display:flex;"><span>MyNamespace<span style="color:#f92672">::</span>myFunction();
</span></span></code></pre></div></li>
<li>
<p><strong>Using Declaration</strong>:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-cpp" data-lang="cpp"><span style="display:flex;"><span><span style="color:#66d9ef">using</span> MyNamespace<span style="color:#f92672">::</span>myFunction;
</span></span><span style="display:flex;"><span>myFunction();
</span></span></code></pre></div></li>
<li>
<p><strong>Using Directive</strong>:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-cpp" data-lang="cpp"><span style="display:flex;"><span><span style="color:#66d9ef">using</span> <span style="color:#66d9ef">namespace</span> MyNamespace;
</span></span><span style="display:flex;"><span>myFunction();
</span></span></code></pre></div></li>
</ol>
<p>While the <code>using</code> directive simplifies code, I advise using it judiciously to prevent namespace pollution, which can lead to ambiguous references (Meyers, 2005).</p>
<hr>
<h2 id="the-main-function">The <code>main</code> Function</h2>
<p>The <code>main</code> function is the entry point of a C++ program. The operating system calls this function when the program starts.</p>
<p>A basic <code>main</code> function:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-cpp" data-lang="cpp"><span style="display:flex;"><span><span style="color:#66d9ef">int</span> <span style="color:#a6e22e">main</span>() {
</span></span><span style="display:flex;"><span>    <span style="color:#75715e">// Code
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>    <span style="color:#66d9ef">return</span> <span style="color:#ae81ff">0</span>;
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><ul>
<li><strong><code>int</code> Return Type</strong>: Indicates the program&rsquo;s exit status to the operating system; <code>0</code> typically signifies successful execution.</li>
</ul>
<h3 id="command-line-arguments">Command-Line Arguments</h3>
<p>You can modify <code>main</code> to accept command-line arguments:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-cpp" data-lang="cpp"><span style="display:flex;"><span><span style="color:#66d9ef">int</span> <span style="color:#a6e22e">main</span>(<span style="color:#66d9ef">int</span> argc, <span style="color:#66d9ef">char</span><span style="color:#f92672">*</span> argv[]) {
</span></span><span style="display:flex;"><span>    <span style="color:#75715e">// Access arguments
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>}
</span></span></code></pre></div><ul>
<li><strong><code>argc</code></strong>: Argument count.</li>
<li><strong><code>argv</code></strong>: Argument vector (array of C-style strings).</li>
</ul>
<p>This allows the program to process input parameters at runtime, enhancing its flexibility.</p>
<hr>
<h2 id="compilation-units">Compilation Units</h2>
<p>A compilation unit in C++ is a source file (with its included headers) that the compiler processes independently. Each <code>.cpp</code> file forms a separate compilation unit.</p>
<h3 id="example-structure">Example Structure</h3>
<p><strong><code>main.cpp</code></strong>:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-cpp" data-lang="cpp"><span style="display:flex;"><span><span style="color:#75715e">#include</span> <span style="color:#75715e">&#34;Functions.h&#34;</span><span style="color:#75715e">
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">int</span> <span style="color:#a6e22e">main</span>() {
</span></span><span style="display:flex;"><span>    myFunction();
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">return</span> <span style="color:#ae81ff">0</span>;
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p><strong><code>Functions.cpp</code></strong>:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-cpp" data-lang="cpp"><span style="display:flex;"><span><span style="color:#75715e">#include</span> <span style="color:#75715e">&#34;Functions.h&#34;</span><span style="color:#75715e">
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">void</span> <span style="color:#a6e22e">myFunction</span>() {
</span></span><span style="display:flex;"><span>    <span style="color:#75715e">// Implementation
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>}
</span></span></code></pre></div><p><strong><code>Functions.h</code></strong>:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-cpp" data-lang="cpp"><span style="display:flex;"><span><span style="color:#75715e">#ifndef FUNCTIONS_H
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">#define FUNCTIONS_H
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">void</span> <span style="color:#a6e22e">myFunction</span>();
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#endif </span><span style="color:#75715e">// FUNCTIONS_H
</span></span></span></code></pre></div><p>By separating code into multiple compilation units:</p>
<ul>
<li><strong>Modularity</strong>: Facilitates code organisation and readability.</li>
<li><strong>Parallel Compilation</strong>: Allows simultaneous compilation of different units, reducing build times.</li>
<li><strong>Incremental Builds</strong>: Only changed units need recompilation, improving efficiency.</li>
</ul>
<hr>
<h2 id="conclusion">Conclusion</h2>
<p>Understanding the basic structure of a C++ program is fundamental for developing robust and scalable applications. Headers, namespaces, the <code>main</code> function, and compilation units each play a critical role in how a program is organised and executed.</p>
<p>In my view, paying close attention to these components not only aids in writing clean code but also in debugging and future maintenance. As the complexity of software projects increases, such foundational knowledge becomes increasingly invaluable.</p>
<hr>
<h2 id="references">References</h2>
<ul>
<li>Stroustrup, B. (2013). <em>The C++ Programming Language</em> (4th ed.). Addison-Wesley.</li>
<li>Meyers, S. (2005). <em>Effective C++: 55 Specific Ways to Improve Your Programs and Designs</em> (3rd ed.). Addison-Wesley.</li>
</ul>
<hr>
<p><em>Future Considerations</em>: As C++ continues to evolve with newer standards (like C++20 and beyond), additional features and best practices may emerge. Staying updated with the latest developments will further enhance our programming proficiency.</p>
<hr>
<p><em>Note</em>: All code examples have been tested with a C++ compiler compliant with the ISO C++17 standard.</p>
]]></content>
        </item>
        
        <item>
            <title>Embracing C&#43;&#43;17: A Comprehensive Guide to Its Evolution and Key Features</title>
            <link>https://blog.miguens.one/posts/2023/10/embracing-c-17-a-comprehensive-guide-to-its-evolution-and-key-features/</link>
            <pubDate>Mon, 16 Oct 2023 00:00:00 +0000</pubDate>
            
            <guid>https://blog.miguens.one/posts/2023/10/embracing-c-17-a-comprehensive-guide-to-its-evolution-and-key-features/</guid>
            <description>&lt;p&gt;As a software developer with a keen interest in programming languages&amp;rsquo; evolution, I have observed the significant strides C++ has made over the years. C++17, in particular, represents a substantial advancement from its predecessors, introducing features that enhance efficiency, readability, and performance. In this blog post, I aim to delve into the evolution of C++ leading up to C++17, explore its key features, and discuss why integrating it into your development projects could be highly beneficial.&lt;/p&gt;</description>
            <content type="html"><![CDATA[<p>As a software developer with a keen interest in programming languages&rsquo; evolution, I have observed the significant strides C++ has made over the years. C++17, in particular, represents a substantial advancement from its predecessors, introducing features that enhance efficiency, readability, and performance. In this blog post, I aim to delve into the evolution of C++ leading up to C++17, explore its key features, and discuss why integrating it into your development projects could be highly beneficial.</p>
<h2 id="evolution-of-c-leading-to-c17">Evolution of C++ Leading to C++17</h2>
<p>C++ has undergone several iterations since its inception, each adding features that address the growing complexities of software development. The introduction of C++11 was a game-changer, bringing in move semantics, lambda expressions, and auto keyword, among others. C++14 followed with minor enhancements and bug fixes, acting as a refinement to C++11.</p>
<p>However, the rapid advancement of technology and the need for more robust programming constructs necessitated further evolution. C++17 emerged as a response to these needs, aiming to improve the language&rsquo;s usability and performance. It serves as a bridge between the foundational changes in C++11/14 and the more revolutionary features planned for C++20.</p>
<h2 id="key-features-of-c17">Key Features of C++17</h2>
<p>C++17 introduces several features that streamline coding practices and improve performance. Below, I outline some of the most impactful additions.</p>
<h3 id="1-structured-bindings">1. Structured Bindings</h3>
<p>Structured bindings allow for unpacking tuples, structs, and classes into individual variables, enhancing code readability.</p>
<p><strong>Example:</strong></p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-cpp" data-lang="cpp"><span style="display:flex;"><span><span style="color:#75715e">#include</span> <span style="color:#75715e">&lt;tuple&gt;</span><span style="color:#75715e">
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">#include</span> <span style="color:#75715e">&lt;iostream&gt;</span><span style="color:#75715e">
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">int</span> <span style="color:#a6e22e">main</span>() {
</span></span><span style="display:flex;"><span>    std<span style="color:#f92672">::</span>tuple<span style="color:#f92672">&lt;</span><span style="color:#66d9ef">int</span>, <span style="color:#66d9ef">double</span>, std<span style="color:#f92672">::</span>string<span style="color:#f92672">&gt;</span> data(<span style="color:#ae81ff">1</span>, <span style="color:#ae81ff">2.5</span>, <span style="color:#e6db74">&#34;C++17&#34;</span>);
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">auto</span> [id, value, text] <span style="color:#f92672">=</span> data;
</span></span><span style="display:flex;"><span>    std<span style="color:#f92672">::</span>cout <span style="color:#f92672">&lt;&lt;</span> id <span style="color:#f92672">&lt;&lt;</span> <span style="color:#e6db74">&#34;, &#34;</span> <span style="color:#f92672">&lt;&lt;</span> value <span style="color:#f92672">&lt;&lt;</span> <span style="color:#e6db74">&#34;, &#34;</span> <span style="color:#f92672">&lt;&lt;</span> text <span style="color:#f92672">&lt;&lt;</span> std<span style="color:#f92672">::</span>endl;
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">return</span> <span style="color:#ae81ff">0</span>;
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><h3 id="2-if-and-switch-with-initialisers">2. If and Switch with Initialisers</h3>
<p>C++17 permits initialiser statements within <code>if</code> and <code>switch</code>, reducing the scope of variables and improving code organisation.</p>
<p><strong>Example:</strong></p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-cpp" data-lang="cpp"><span style="display:flex;"><span><span style="color:#66d9ef">if</span> (<span style="color:#66d9ef">int</span> value <span style="color:#f92672">=</span> compute(); value <span style="color:#f92672">&gt;</span> <span style="color:#ae81ff">0</span>) {
</span></span><span style="display:flex;"><span>    <span style="color:#75715e">// Use value here
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>}
</span></span></code></pre></div><h3 id="3-fold-expressions">3. Fold Expressions</h3>
<p>Fold expressions simplify the creation of variadic templates by providing a concise syntax for operations on parameter packs.</p>
<p><strong>Example:</strong></p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-cpp" data-lang="cpp"><span style="display:flex;"><span><span style="color:#66d9ef">template</span><span style="color:#f92672">&lt;</span><span style="color:#66d9ef">typename</span>... Args<span style="color:#f92672">&gt;</span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">auto</span> sum(Args... args) {
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">return</span> (args <span style="color:#f92672">+</span> ...);
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><h3 id="4-template-argument-deduction-for-class-templates">4. Template Argument Deduction for Class Templates</h3>
<p>Class templates can now have their template arguments deduced, similar to function templates, simplifying instantiation.</p>
<p><strong>Example:</strong></p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-cpp" data-lang="cpp"><span style="display:flex;"><span>std<span style="color:#f92672">::</span>pair p <span style="color:#f92672">=</span> {<span style="color:#ae81ff">1</span>, <span style="color:#ae81ff">2.5</span>}; <span style="color:#75715e">// Deduces to std::pair&lt;int, double&gt;
</span></span></span></code></pre></div><h3 id="5-constexpr-enhancements">5. <code>constexpr</code> Enhancements</h3>
<p>C++17 expands <code>constexpr</code> capabilities, allowing more complex computations at compile-time, which can lead to performance optimisations.</p>
<p><strong>Example:</strong></p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-cpp" data-lang="cpp"><span style="display:flex;"><span><span style="color:#66d9ef">constexpr</span> <span style="color:#66d9ef">int</span> <span style="color:#a6e22e">factorial</span>(<span style="color:#66d9ef">int</span> n) {
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">return</span> n <span style="color:#f92672">&lt;=</span> <span style="color:#ae81ff">1</span> <span style="color:#f92672">?</span> <span style="color:#ae81ff">1</span> <span style="color:#f92672">:</span> (n <span style="color:#f92672">*</span> factorial(n <span style="color:#f92672">-</span> <span style="color:#ae81ff">1</span>));
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><h3 id="6-new-standard-libraries-stdoptional-stdvariant-stdany">6. New Standard Libraries: <code>std::optional</code>, <code>std::variant</code>, <code>std::any</code></h3>
<p>These libraries provide safer and more expressive ways to handle optional values, variant types, and single values of any type.</p>
<p><strong>Example with <code>std::optional</code>:</strong></p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-cpp" data-lang="cpp"><span style="display:flex;"><span><span style="color:#75715e">#include</span> <span style="color:#75715e">&lt;optional&gt;</span><span style="color:#75715e">
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>
</span></span><span style="display:flex;"><span>std<span style="color:#f92672">::</span>optional<span style="color:#f92672">&lt;</span><span style="color:#66d9ef">int</span><span style="color:#f92672">&gt;</span> findValue(<span style="color:#66d9ef">bool</span> condition) {
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">if</span> (condition)
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">return</span> <span style="color:#ae81ff">42</span>;
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">else</span>
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">return</span> std<span style="color:#f92672">::</span>nullopt;
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><h3 id="7-stdfilesystem">7. <code>std::filesystem</code></h3>
<p>The inclusion of the filesystem library standardises file and directory operations, which were previously platform-dependent or required third-party libraries.</p>
<p><strong>Example:</strong></p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-cpp" data-lang="cpp"><span style="display:flex;"><span><span style="color:#75715e">#include</span> <span style="color:#75715e">&lt;filesystem&gt;</span><span style="color:#75715e">
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">namespace</span> fs <span style="color:#f92672">=</span> std<span style="color:#f92672">::</span>filesystem;
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">int</span> <span style="color:#a6e22e">main</span>() {
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">for</span> (<span style="color:#66d9ef">const</span> <span style="color:#66d9ef">auto</span><span style="color:#f92672">&amp;</span> entry : fs<span style="color:#f92672">::</span>directory_iterator(<span style="color:#e6db74">&#34;/path/to/dir&#34;</span>))
</span></span><span style="display:flex;"><span>        std<span style="color:#f92672">::</span>cout <span style="color:#f92672">&lt;&lt;</span> entry.path() <span style="color:#f92672">&lt;&lt;</span> std<span style="color:#f92672">::</span>endl;
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">return</span> <span style="color:#ae81ff">0</span>;
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><h3 id="8-parallel-algorithms">8. Parallel Algorithms</h3>
<p>C++17 introduces parallel versions of standard algorithms, enabling easy utilisation of multi-core processors for performance gains.</p>
<p><strong>Example:</strong></p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-cpp" data-lang="cpp"><span style="display:flex;"><span><span style="color:#75715e">#include</span> <span style="color:#75715e">&lt;algorithm&gt;</span><span style="color:#75715e">
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">#include</span> <span style="color:#75715e">&lt;execution&gt;</span><span style="color:#75715e">
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">#include</span> <span style="color:#75715e">&lt;vector&gt;</span><span style="color:#75715e">
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>
</span></span><span style="display:flex;"><span>std<span style="color:#f92672">::</span>vector<span style="color:#f92672">&lt;</span><span style="color:#66d9ef">int</span><span style="color:#f92672">&gt;</span> data <span style="color:#f92672">=</span> <span style="color:#75715e">/*...*/</span>;
</span></span><span style="display:flex;"><span>std<span style="color:#f92672">::</span>sort(std<span style="color:#f92672">::</span>execution<span style="color:#f92672">::</span>par, data.begin(), data.end());
</span></span></code></pre></div><h3 id="9-other-improvements">9. Other Improvements</h3>
<ul>
<li><strong>Inline Variables</strong>: Allow variables to be defined in headers without violating the One Definition Rule.</li>
<li><strong>Hexadecimal Floating-Point Literals</strong>: Enable more precise floating-point representations.</li>
<li><strong>Utf-8 Character Literals</strong>: Support for <code>char8_t</code> type and UTF-8 character literals.</li>
</ul>
<h2 id="why-developers-should-consider-using-c17">Why Developers Should Consider Using C++17</h2>
<h3 id="enhanced-productivity">Enhanced Productivity</h3>
<p>The new language features reduce boilerplate code and simplify complex programming patterns. For instance, structured bindings and template argument deduction minimise the verbosity associated with tuple and template usage.</p>
<h3 id="improved-performance">Improved Performance</h3>
<p>With <code>constexpr</code> enhancements and parallel algorithms, developers can write code that is both efficient and optimised for modern hardware architectures. Compile-time computations reduce runtime overhead, and parallel algorithms make concurrent programming more accessible.</p>
<h3 id="better-code-readability-and-maintainability">Better Code Readability and Maintainability</h3>
<p>C++17&rsquo;s features promote writing clearer and more maintainable code. By reducing unnecessary complexity, developers can focus on the logic rather than syntactical intricacies. The inclusion of standard libraries like <code>std::filesystem</code> standardises common tasks, making code more portable and easier to understand.</p>
<h3 id="keeping-up-with-industry-trends">Keeping Up with Industry Trends</h3>
<p>Adopting C++17 ensures that developers remain at the forefront of modern C++ programming practices. It aligns with the industry&rsquo;s shift towards safer, more expressive, and efficient code. Moreover, familiarity with C++17 prepares developers for transitioning to C++20 and beyond, which build upon these concepts.</p>
<h3 id="compatibility-and-migration-considerations">Compatibility and Migration Considerations</h3>
<p>While transitioning to a new language standard can be daunting, C++17 maintains a high degree of backward compatibility. Most existing codebases can be incrementally updated, allowing teams to adopt new features at their own pace.</p>
<h2 id="critical-analysis">Critical Analysis</h2>
<h3 id="potential-drawbacks-and-challenges">Potential Drawbacks and Challenges</h3>
<p>Despite its advantages, C++17 may present challenges. The learning curve associated with new features requires time investment. Developers must update their knowledge and possibly refactor existing code to leverage the benefits fully.</p>
<h3 id="compatibility-issues">Compatibility Issues</h3>
<p>Certain features might not be supported by older compilers or may require updates to development environments. This could pose issues in projects where upgrading the toolchain is non-trivial.</p>
<h3 id="multiple-perspectives">Multiple Perspectives</h3>
<p>Some industry professionals argue that the frequent updates to C++ standards can lead to fragmentation, with teams using different versions simultaneously. However, others believe that the incremental improvements are necessary to keep the language relevant and competitive.</p>
<h2 id="conclusion">Conclusion</h2>
<p>In my assessment, C++17 represents a meaningful progression in the C++ language, balancing new features with practical usability. It addresses many of the modern programming challenges and sets the stage for future developments in C++20 and beyond. While there are considerations to be made regarding the adoption curve and compatibility, the benefits to productivity, performance, and code quality are substantial.</p>
<p>For developers aiming to write efficient, modern, and maintainable C++ code, embracing C++17 is a logical step forward. It not only enhances current projects but also positions teams to leverage upcoming advancements in the language.</p>
<h2 id="references">References</h2>
<ol>
<li>ISO/IEC 14882:2017 – <em>Programming Languages – C++</em>. International Organization for Standardization, 2017.</li>
<li>Stroustrup, B. <em>The C++ Programming Language</em>, 4th Edition. Addison-Wesley, 2013.</li>
<li>Josuttis, N. <em>C++17 - The Complete Guide</em>. Leanpub, 2019.</li>
</ol>
]]></content>
        </item>
        
        <item>
            <title>Understanding Reflective Memory via Software: A Deep Dive</title>
            <link>https://blog.miguens.one/posts/2023/09/understanding-reflective-memory-via-software-a-deep-dive/</link>
            <pubDate>Thu, 14 Sep 2023 00:00:00 +0000</pubDate>
            
            <guid>https://blog.miguens.one/posts/2023/09/understanding-reflective-memory-via-software-a-deep-dive/</guid>
            <description>&lt;p&gt;In modern computing environments, the need for real-time data synchronization across multiple systems or processors is increasingly critical. One technology that facilitates this is Reflective Memory (RM). Traditionally, Reflective Memory has been associated with hardware solutions—dedicated memory modules and fiber-optic networks ensuring that changes in one node’s memory are instantly reflected across all nodes. However, with the advancement of software technologies, reflective memory is no longer confined to hardware implementations. This article explores how reflective memory can be achieved through software, its applications, and the challenges that come with it.&lt;/p&gt;</description>
            <content type="html"><![CDATA[<p>In modern computing environments, the need for real-time data synchronization across multiple systems or processors is increasingly critical. One technology that facilitates this is Reflective Memory (RM). Traditionally, Reflective Memory has been associated with hardware solutions—dedicated memory modules and fiber-optic networks ensuring that changes in one node’s memory are instantly reflected across all nodes. However, with the advancement of software technologies, reflective memory is no longer confined to hardware implementations. This article explores how reflective memory can be achieved through software, its applications, and the challenges that come with it.</p>
<h2 id="what-is-reflective-memory">What is Reflective Memory?</h2>
<p>Reflective Memory is a technology that allows multiple computers in a network to share a consistent memory space. Any write to this memory space by one node is automatically propagated to the same memory space on other nodes, typically in real-time or near real-time. This allows different systems to share the same data without complex programming or network communication protocols.</p>
<h2 id="how-reflective-memory-works-in-software">How Reflective Memory Works in Software</h2>
<p>While hardware-based Reflective Memory uses dedicated modules and high-speed interconnects to achieve real-time data mirroring, software-based Reflective Memory relies on middleware or system-level software to accomplish the same goal. Here&rsquo;s how it works:</p>
<ol>
<li>
<p><strong>Shared Memory Architecture</strong>: Software Reflective Memory often leverages shared memory segments provided by the operating system. Applications on different nodes access this shared memory, and any updates are propagated across the network. Shared memory segments can be implemented using operating system constructs like memory-mapped files.</p>
</li>
<li>
<p><strong>Data Synchronization</strong>: Synchronization in software-based Reflective Memory is typically achieved through networking protocols that ensure data consistency. This may involve techniques such as multicast, where updates are sent to all nodes simultaneously, or using a central server to manage memory consistency.</p>
</li>
<li>
<p><strong>Latency and Throughput Optimization</strong>: One of the critical challenges in software-based Reflective Memory is maintaining low latency and high throughput. Unlike hardware solutions, which are optimized for speed, software implementations must handle network delays, data packet losses, and varying network conditions. Techniques like predictive algorithms, data compression, and prioritization of critical data updates are employed to minimize latency.</p>
</li>
<li>
<p><strong>Fault Tolerance and Redundancy</strong>: To ensure reliability, software Reflective Memory systems often include fault tolerance mechanisms. These may involve redundant data paths, periodic consistency checks, and automated failover systems to ensure that the failure of one node does not disrupt the entire memory-sharing network.</p>
</li>
</ol>
<h3 id="applications-of-software-based-reflective-memory">Applications of Software-Based Reflective Memory</h3>
<p>Software-based Reflective Memory finds applications in several critical areas:</p>
<ul>
<li>
<p><strong>Industrial Automation</strong>: In complex manufacturing systems, various control systems and processors need real-time data synchronization to ensure smooth operations. Software Reflective Memory allows these systems to share process data and state information seamlessly.</p>
</li>
<li>
<p><strong>High-Performance Computing (HPC)</strong>: In HPC environments, where massive computations are distributed across multiple nodes, maintaining data consistency is crucial. Software-based Reflective Memory helps synchronize data across these nodes, ensuring that calculations are based on the latest available data.</p>
</li>
<li>
<p><strong>Financial Trading</strong>: In high-frequency trading platforms, where microseconds can mean the difference between profit and loss, data synchronization across trading nodes is vital. Reflective Memory technology ensures that all trading algorithms operate on the same data set, reducing the risk of discrepancies.</p>
</li>
<li>
<p><strong>Defense and Aerospace</strong>: Real-time data sharing across different systems, such as radar systems, avionics, and missile guidance systems, is critical. Software-based Reflective Memory allows these systems to function cohesively, even in mission-critical environments.</p>
</li>
</ul>
<h2 id="challenges-in-software-based-reflective-memory">Challenges in Software-Based Reflective Memory</h2>
<p>Implementing Reflective Memory via software, while flexible and cost-effective, comes with its set of challenges:</p>
<ol>
<li>
<p><strong>Network Dependency</strong>: Software-based implementations depend heavily on network infrastructure. Network latency, packet loss, and jitter can significantly impact performance.</p>
</li>
<li>
<p><strong>Complexity in Implementation</strong>: Unlike hardware-based solutions, which are often plug-and-play, software-based Reflective Memory requires careful planning and configuration. This includes setting up shared memory segments, configuring synchronization protocols, and implementing fault-tolerance mechanisms.</p>
</li>
<li>
<p><strong>Security Concerns</strong>: With data being shared across multiple systems, ensuring the security of that data is paramount. Software implementations need robust encryption and authentication mechanisms to prevent unauthorized access or tampering.</p>
</li>
<li>
<p><strong>Scalability</strong>: As the number of nodes increases, maintaining data consistency becomes more challenging. The software must efficiently manage updates to avoid data collisions and ensure that all nodes have the latest information.</p>
</li>
</ol>
<h2 id="conclusion">Conclusion</h2>
<p>Reflective Memory via software offers a powerful tool for real-time data synchronization across multiple systems, especially in environments where deploying dedicated hardware is not feasible. While it presents challenges, advancements in networking, computing power, and software engineering are continually improving the performance and reliability of software-based Reflective Memory solutions. As industries continue to demand higher performance and real-time capabilities, software Reflective Memory is poised to play a critical role in the future of distributed computing systems.</p>
<p>By understanding the intricacies of how Reflective Memory can be implemented through software, engineers and developers can better design systems that meet the stringent demands of modern applications, from industrial automation to high-performance computing.</p>
]]></content>
        </item>
        
        <item>
            <title>How to Increase the Speed of GitLab Pipelines</title>
            <link>https://blog.miguens.one/posts/2023/08/how-to-increase-the-speed-of-gitlab-pipelines/</link>
            <pubDate>Mon, 07 Aug 2023 00:00:00 +0000</pubDate>
            
            <guid>https://blog.miguens.one/posts/2023/08/how-to-increase-the-speed-of-gitlab-pipelines/</guid>
            <description>&lt;h2 id=&#34;introduction&#34;&gt;Introduction&lt;/h2&gt;
&lt;p&gt;GitLab is a comprehensive DevOps platform that provides a seamless environment for developers to create, test, and deploy code. GitLab CI/CD (Continuous Integration/Continuous Deployment) pipelines are an essential feature that enables teams to automate the build, test, and deployment processes. However, as projects grow in size and complexity, pipeline execution can slow down, impacting overall productivity. This article outlines strategies to increase the speed of your GitLab pipelines, ensuring an efficient software development process.&lt;/p&gt;</description>
            <content type="html"><![CDATA[<h2 id="introduction">Introduction</h2>
<p>GitLab is a comprehensive DevOps platform that provides a seamless environment for developers to create, test, and deploy code. GitLab CI/CD (Continuous Integration/Continuous Deployment) pipelines are an essential feature that enables teams to automate the build, test, and deployment processes. However, as projects grow in size and complexity, pipeline execution can slow down, impacting overall productivity. This article outlines strategies to increase the speed of your GitLab pipelines, ensuring an efficient software development process.</p>
<h2 id="useful-tips">Useful tips</h2>
<ol>
<li>Optimize your build configuration</li>
</ol>
<p>Improving your build configuration is the first step in speeding up your GitLab pipelines. Consider the following:</p>
<p>a. Use the latest GitLab Runner: Ensure that you are using the latest version of the GitLab Runner, which often includes performance improvements.</p>
<p>b. Utilize caching: Caching dependencies between pipeline runs can save significant time. Enable caching for dependencies, such as npm packages or Ruby gems, to avoid unnecessary downloads and installations.</p>
<p>c. Opt for smaller base images: When using Docker, choose smaller base images with only the necessary dependencies. This reduces the time it takes to pull and build the image.</p>
<ol start="2">
<li>Parallelize your pipeline tasks</li>
</ol>
<p>Parallel execution of tasks can dramatically decrease pipeline runtime. GitLab allows you to run multiple tasks concurrently using parallel keyword or separate jobs in your <code>.gitlab-ci.yml</code> file. Identify tasks that can run in parallel without affecting dependencies and split them into separate jobs.</p>
<ol start="3">
<li>Utilize artifacts</li>
</ol>
<p>Artifacts are files created during pipeline execution, such as build outputs, logs, and test results. To optimize pipeline speed, use artifacts to pass data between jobs instead of rebuilding or re-testing code. Set appropriate expiration dates for artifacts to prevent storage bloat.</p>
<ol start="4">
<li>Optimize your test suite</li>
</ol>
<p>A slow test suite can significantly impact pipeline performance. Consider the following steps to optimize your tests:</p>
<p>a. Run only relevant tests: Use tools like Test Impact Analysis (TIA) to run only tests affected by code changes. This reduces overall test execution time.</p>
<p>b. Parallelize test execution: Split your test suite into smaller chunks and run them concurrently. This can be achieved using the <code>parallel</code> keyword in GitLab or by employing third-party test parallelization tools.</p>
<p>c. Review test duration: Regularly analyze test durations and identify bottlenecks. Optimizing slow tests can lead to substantial performance improvements.</p>
<ol start="5">
<li>Limit concurrent pipelines and jobs</li>
</ol>
<p>Running too many pipelines or jobs simultaneously can lead to resource saturation and slow performance. Limit the number of concurrent pipelines and jobs to balance resource usage and pipeline speed. Consider using the <code>throttle</code> or <code>resource_group</code> keywords in your GitLab configuration.</p>
<ol start="6">
<li>Utilize GitLab Auto DevOps</li>
</ol>
<p>GitLab Auto DevOps is a pre-configured CI/CD pipeline that automatically detects and optimizes your application&rsquo;s build, test, and deployment stages. By utilizing Auto DevOps, you can benefit from GitLab&rsquo;s performance optimizations without having to fine-tune your pipeline configuration manually.</p>
<h2 id="conclusion">Conclusion</h2>
<p>Increasing the speed of GitLab pipelines is crucial for efficient software development. By optimizing your build configuration, parallelizing tasks, utilizing artifacts, optimizing test suites, and limiting concurrent pipelines, you can significantly improve pipeline performance. Remember to continuously monitor and analyze pipeline metrics to identify further optimization opportunities, ensuring a smooth and efficient CI/CD process.</p>
]]></content>
        </item>
        
        <item>
            <title>The Perils of Using a Distributed Cache for GitLab Runners</title>
            <link>https://blog.miguens.one/posts/2023/07/the-perils-of-using-a-distributed-cache-for-gitlab-runners/</link>
            <pubDate>Sun, 30 Jul 2023 00:00:00 +0000</pubDate>
            
            <guid>https://blog.miguens.one/posts/2023/07/the-perils-of-using-a-distributed-cache-for-gitlab-runners/</guid>
            <description>&lt;h1 id=&#34;introduction&#34;&gt;Introduction&lt;/h1&gt;
&lt;p&gt;GitLab is a popular platform for developers to manage their software development lifecycle, including source code management, continuous integration, and continuous deployment. With GitLab Runners, teams can run their CI/CD pipelines to automate the build, test, and deployment process. But when it comes to optimizing pipeline performance, there&amp;rsquo;s a popular misconception that using a distributed cache for GitLab Runners is a good idea. In this article, we will discuss why implementing a distributed cache for GitLab Runners can actually be detrimental to your pipeline, and we will offer alternative solutions for exchanging data between jobs.&lt;/p&gt;</description>
            <content type="html"><![CDATA[<h1 id="introduction">Introduction</h1>
<p>GitLab is a popular platform for developers to manage their software development lifecycle, including source code management, continuous integration, and continuous deployment. With GitLab Runners, teams can run their CI/CD pipelines to automate the build, test, and deployment process. But when it comes to optimizing pipeline performance, there&rsquo;s a popular misconception that using a distributed cache for GitLab Runners is a good idea. In this article, we will discuss why implementing a distributed cache for GitLab Runners can actually be detrimental to your pipeline, and we will offer alternative solutions for exchanging data between jobs.</p>
<ol>
<li>No Significant Speed Advantage for Internal Networks</li>
</ol>
<p>One of the main reasons people opt for a distributed cache is to speed up the download of dependencies. However, if your dependencies are hosted on internal network resources like EOS, Nexus, Artifactory, or GitLab Releases, then the distributed cache is also within the same internal network. In this scenario, the speed advantage of using a distributed cache is negligible, as the download speed will likely be equivalent.</p>
<ol start="2">
<li>Increased Complexity and Maintenance Overhead</li>
</ol>
<p>Implementing a distributed cache for GitLab Runners adds an additional layer of complexity to your CI/CD pipeline. The configuration and maintenance of the cache can become a burden for your team, diverting valuable time and resources away from your core development work.</p>
<ol start="3">
<li>Cache Inconsistency and Data Corruption</li>
</ol>
<p>A distributed cache introduces the risk of cache inconsistency and data corruption. As multiple runners access and modify the cache simultaneously, it can become challenging to ensure that the correct version of a dependency or artifact is being used. This can lead to unexpected behavior or failures in your pipeline.</p>
<ol start="4">
<li>Limited Scalability</li>
</ol>
<p>As your team and project grow, your caching infrastructure will need to scale accordingly to handle the increased load. Scaling a distributed cache can be both costly and time-consuming, requiring additional hardware, configuration, and management efforts.</p>
<h1 id="a-better-alternative-using-artifacts-to-exchange-data-between-jobs">A Better Alternative: Using Artifacts to Exchange Data Between Jobs</h1>
<p>Instead of relying on a distributed cache for GitLab Runners, a more robust and efficient solution is to use GitLab Artifacts to exchange data between jobs. Artifacts are files generated during a pipeline job that can be passed between subsequent jobs or even downloaded for later use.</p>
<p>Using artifacts has several advantages:</p>
<ol>
<li>
<p>Simplified Configuration: Artifacts are natively supported by GitLab and require minimal configuration to set up and use in your pipeline.</p>
</li>
<li>
<p>Reliable Data Exchange: Artifacts are designed for secure and reliable data exchange between jobs, ensuring that the correct data is always available.</p>
</li>
<li>
<p>Efficient Storage and Cleanup: GitLab Artifacts can be automatically expired after a specified duration, reducing storage overhead and the need for manual cleanup.</p>
</li>
<li>
<p>Better Pipeline Performance: Since artifacts are stored within GitLab itself, you can expect faster access times and reduced network latency, especially when compared to a distributed cache setup.</p>
</li>
</ol>
<h1 id="conclusion">Conclusion</h1>
<p>While a distributed cache for GitLab Runners might initially seem like an appealing solution for optimizing your CI/CD pipeline, it can often introduce more problems than it solves. With minimal speed benefits for internal networks, increased complexity, and the potential for cache inconsistency, a distributed cache is not the ideal solution for most teams. Instead, consider using GitLab Artifacts to exchange data between jobs, providing a more reliable and efficient approach to managing your pipeline.</p>
]]></content>
        </item>
        
        <item>
            <title>The State Involvement: A Deep Dive into Banks, Government, and the Balancing Act of Economic Policy</title>
            <link>https://blog.miguens.one/posts/2023/07/the-state-involvement-a-deep-dive-into-banks-government-and-the-balancing-act-of-economic-policy/</link>
            <pubDate>Thu, 13 Jul 2023 00:00:00 +0000</pubDate>
            
            <guid>https://blog.miguens.one/posts/2023/07/the-state-involvement-a-deep-dive-into-banks-government-and-the-balancing-act-of-economic-policy/</guid>
            <description>&lt;p&gt;Every economy exists in a delicate balance between growth and stability. Central banks and governments play critical roles in maintaining this balance, acting as the guardians of their nation&amp;rsquo;s financial health. However, their responsibilities often seem to contradict each other. On one hand, central banks are tasked with limiting inflation, which requires a delicate act of restraining economic growth. On the other, they are expected to support employment, which calls for stimulating the economy. So how do these entities reconcile these seemingly opposing objectives? Let&amp;rsquo;s take a deeper look.&lt;/p&gt;</description>
            <content type="html"><![CDATA[<p>Every economy exists in a delicate balance between growth and stability. Central banks and governments play critical roles in maintaining this balance, acting as the guardians of their nation&rsquo;s financial health. However, their responsibilities often seem to contradict each other. On one hand, central banks are tasked with limiting inflation, which requires a delicate act of restraining economic growth. On the other, they are expected to support employment, which calls for stimulating the economy. So how do these entities reconcile these seemingly opposing objectives? Let&rsquo;s take a deeper look.</p>
<h2 id="the-central-banks-balancing-act">The Central Bank’s Balancing Act</h2>
<p>Central banks around the world, including the Federal Reserve in the U.S., the Bank of England in the UK, or the European Central Bank in the Eurozone, walk a constant tightrope, balancing between two crucial objectives - limiting inflation and supporting employment.</p>
<p>To prevent the economy from overheating and keep inflation in check, central banks need to restrict the rate of economic growth. They do this primarily by raising interest rates, making borrowing more expensive, and thereby slowing down the rate of investment and spending in the economy.</p>
<p>On the flip side, these institutions also have a mandate to support employment. In times of economic downturn or recession, they seek to stimulate economic growth, effectively doing the opposite of their inflation-limiting actions. They lower interest rates, making borrowing cheaper, and thus encouraging spending and investment. This, in turn, stimulates demand, leading to increased production and, ideally, more jobs.</p>
<p>So, central banks must continually weigh these two objectives against each other, adjusting their policies as economic conditions change.</p>
<h2 id="the-role-of-the-government">The Role of the Government</h2>
<p>While the central bank juggles its dual responsibilities, the government also plays a significant part in influencing the economy&rsquo;s direction.</p>
<h3 id="stimulating-the-economy">Stimulating the Economy</h3>
<p>Governments can stimulate their country&rsquo;s economy in several ways. First, they can reduce taxes, leaving individuals and businesses with more disposable income. This increase in available money can then be spent or invested, stimulating demand and encouraging economic growth.</p>
<p>Secondly, governments can opt to increase their spending. This could be on infrastructure projects, public services, or other areas that can directly or indirectly stimulate economic activity. Government spending not only provides a direct injection of cash into the economy but can also lead to job creation, further promoting economic growth.</p>
<p>Lastly, governments can distribute stimulus checks, as we&rsquo;ve seen in response to the economic downturn caused by the COVID-19 pandemic. These checks put money directly into the hands of consumers, who can then spend this money, providing a quick boost to demand.</p>
<h3 id="cooling-the-economy">Cooling the Economy</h3>
<p>On the other hand, when the economy is overheating and there are concerns about rising inflation, the government can step in to slow things down. They can increase taxes, effectively reducing the disposable income of individuals and businesses, thereby slowing spending and investment.</p>
<p>Simultaneously, governments can decrease their spending, reducing the amount of money being directly injected into the economy. This can have a cooling effect, reducing demand and thereby helping to control inflation.</p>
<h2 id="the-delicate-dance">The Delicate Dance</h2>
<p>As we can see, the roles of the central bank and government are intertwined, with each playing a part in maintaining a healthy economy. This delicate dance between limiting inflation and supporting employment is an ongoing balancing act. It&rsquo;s also an art as much as a science, as the right moves depend on the precise economic conditions at any given moment.</p>
<p>In summary, managing an economy is a complex and ever-evolving task, requiring the cooperative efforts of both the central banks and the government. As they balance their responsibilities and objectives, these entities work together to ensure the sustained health and vitality of their nation&rsquo;s economy.</p>
]]></content>
        </item>
        
        <item>
            <title>An Introduction to Mutexes and Multithreading in C</title>
            <link>https://blog.miguens.one/posts/2023/06/an-introduction-to-mutexes-and-multithreading-in-c/</link>
            <pubDate>Thu, 29 Jun 2023 00:00:00 +0000</pubDate>
            
            <guid>https://blog.miguens.one/posts/2023/06/an-introduction-to-mutexes-and-multithreading-in-c/</guid>
            <description>&lt;p&gt;&lt;strong&gt;Title: An Introduction to Mutexes and Multithreading in C&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;In the world of programming, threads are a crucial concept that allows for concurrent execution within a single process. This concurrent execution is made possible through multithreading, a widespread technique in modern programming. However, when multiple threads access a shared resource, synchronization problems can arise. In this blog post, we&amp;rsquo;ll explore how to use Mutexes in C for thread synchronization and delve into the concept of multithreading.&lt;/p&gt;</description>
            <content type="html"><![CDATA[<p><strong>Title: An Introduction to Mutexes and Multithreading in C</strong></p>
<p>In the world of programming, threads are a crucial concept that allows for concurrent execution within a single process. This concurrent execution is made possible through multithreading, a widespread technique in modern programming. However, when multiple threads access a shared resource, synchronization problems can arise. In this blog post, we&rsquo;ll explore how to use Mutexes in C for thread synchronization and delve into the concept of multithreading.</p>
<p><strong>Understanding Thread Synchronization Problems</strong></p>
<p>Consider a simple C program where two threads (jobs) are created. Each thread increments a counter and logs a message when it starts and finishes its job. However, if we observe the output, we might notice some unexpected behavior.</p>
<p>For instance, you might see that the log &lsquo;Job 2 finished&rsquo; appears twice, while &lsquo;Job 1 finished&rsquo; is not logged at all. At first glance, the code might seem fine, but upon closer examination, you&rsquo;ll discover that the problem lies with the shared resource &lsquo;counter&rsquo; being accessed by both threads without synchronization. The lack of synchronization leads to the second thread using the &lsquo;counter&rsquo; variable while the first thread was still using or about to use it, hence leading to synchronization problems【5†source】.</p>
<p><strong>The Role of Mutexes</strong></p>
<p>Mutexes are the solution to the problem of thread synchronization. A Mutex (short for &ldquo;mutual exclusion&rdquo;) is essentially a lock that a thread sets before using a shared resource and releases after using it. When the lock is set, no other thread can access the locked region of code. This mechanism ensures synchronized access to shared resources in the code</p>
<p><strong>How Mutexes Work Internally</strong></p>
<p>Here&rsquo;s a step-by-step breakdown of how mutexes work:</p>
<ol>
<li>Suppose one thread has locked a region of code using a mutex and is executing that piece of code.</li>
<li>If the scheduler decides to perform a context switch, all the other threads ready to execute the same region are unblocked.</li>
<li>One of these threads makes it to execution, but if it tries to execute the same region of code that&rsquo;s already locked, it will go to sleep.</li>
<li>Context switches will continue, but no thread will execute the locked region of code until the mutex lock is released.</li>
<li>The mutex lock is only released by the thread that locked it in the first place.</li>
<li>This mechanism ensures that once a thread has locked a piece of code, no other thread can execute the same region until it is unlocked by the thread that locked it【6†source】.</li>
</ol>
<p><strong>Initializing and Locking Mutexes</strong></p>
<p>In C, a mutex is initialized and then locked by calling the following two functions:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-c" data-lang="c"><span style="display:flex;"><span><span style="color:#66d9ef">int</span> <span style="color:#a6e22e">pthread_mutex_init</span>(<span style="color:#66d9ef">pthread_mutex_t</span> <span style="color:#f92672">*</span><span style="color:#66d9ef">restrict</span> mutex, <span style="color:#66d9ef">const</span> <span style="color:#66d9ef">pthread_mutexattr_t</span> <span style="color:#f92672">*</span><span style="color:#66d9ef">restrict</span> attr);
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">int</span> <span style="color:#a6e22e">pthread_mutex_lock</span>(<span style="color:#66d9ef">pthread_mutex_t</span> <span style="color:#f92672">*</span>mutex);
</span></span></code></pre></div><p>The first function initializes a mutex, and through the second function, any critical region in the code can be locked.</p>
<p>To release the lock and destroy the mutex, we use the following functions:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-c" data-lang="c"><span style="display:flex;"><span><span style="color:#66d9ef">int</span> <span style="color:#a6e22e">pthread_mutex_unlock</span>(<span style="color:#66d9ef">pthread_mutex_t</span> <span style="color:#f92672">*</span>mutex);
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">int</span> <span style="color:#a6e22e">pthread_mutex_destroy</span>(<span style="color:#66d9ef">pthread_mutex_t</span> <span style="color:#f92672">*</span>mutex);
</span></span></code></pre></div><p>The first function releases the lock, and the second function destroys the lock so that it can&rsquo;t be used in the future【6†source】.</p>
<p><strong>A Practical Example of Mutexes in C</strong></p>
<p>Let&rsquo;s look at an example where mutexes are used for thread synchronization. The &lsquo;counter&rsquo; variable is shared between two threads, and a mutex is used to lock this variable:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-c" data-lang="c"><span style="display:flex;"><span><span style="color:#75715e">#include</span><span style="color:#75715e">&lt;stdio.h&gt;</span><span style="color:#75715e">
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">#include</span><span style="color:#75715e">&lt;string.h&gt;</span><span style="color:#75715e">
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">#include</span><span style="color:#75715e">&lt;pthread.h&gt;</span><span style="color:#75715e">
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">#include</span><span style="color:#75715e">&lt;stdlib.h&gt;</span><span style="color:#75715e">
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">#include</span><span style="color:#75715e">&lt;unistd.h&gt;</span><span style="color:#75715e">
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">pthread_t</span> tid[<span style="color:#ae81ff">2</span>];
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">int</span> counter;
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">pthread_mutex_t</span> lock;
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">void</span><span style="color:#f92672">*</span> <span style="color:#a6e22e">doSomeThing</span>(<span style="color:#66d9ef">void</span> <span style="color:#f92672">*</span>arg)
</span></span><span style="display:flex;"><span>{
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">pthread_mutex_lock</span>(<span style="color:#f92672">&amp;</span>lock);
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">unsigned</span> <span style="color:#66d9ef">long</span> i <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>;
</span></span><span style="display:flex;"><span>    counter <span style="color:#f92672">+=</span> <span style="color:#ae81ff">1</span>;
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">printf</span>(<span style="color:#e6db74">&#34;</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74"> Job %d started</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">&#34;</span>, counter);
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">for</span>(i<span style="color:#f92672">=</span><span style="color:#ae81ff">0</span>; i<span style="color:#f92672">&lt;</span>(<span style="color:#ae81ff">0xFFFFFFFF</span>);i<span style="color:#f92672">++</span>);
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">printf</span>(<span style="color:#e6db74">&#34;</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74"> Job %d finished</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">&#34;</span>, counter);
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">pthread_mutex_unlock</span>(<span style="color:#f92672">&amp;</span>lock);
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">return</span> NULL;
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">int</span> <span style="color:#a6e22e">main</span>(<span style="color:#66d9ef">void</span>)
</span></span><span style="display:flex;"><span>{
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">int</span> i <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>;
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">int</span> err;
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">if</span> (<span style="color:#a6e22e">pthread_mutex_init</span>(<span style="color:#f92672">&amp;</span>lock, NULL) <span style="color:#f92672">!=</span> <span style="color:#ae81ff">0</span>)
</span></span><span style="display:flex;"><span>    {
</span></span><span style="display:flex;"><span>        <span style="color:#a6e22e">printf</span>(<span style="color:#e6db74">&#34;</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74"> mutex init failed</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">&#34;</span>);
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">return</span> <span style="color:#ae81ff">1</span>;
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">while</span>(i <span style="color:#f92672">&lt;</span> <span style="color:#ae81ff">2</span>)
</span></span><span style="display:flex;"><span>    {
</span></span><span style="display:flex;"><span>        err <span style="color:#f92672">=</span> <span style="color:#a6e22e">pthread_create</span>(<span style="color:#f92672">&amp;</span>(tid[i]), NULL, <span style="color:#f92672">&amp;</span>doSomeThing, NULL);
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">if</span> (err <span style="color:#f92672">!=</span> <span style="color:#ae81ff">0</span>)
</span></span><span style="display:flex;"><span>            <span style="color:#a6e22e">printf</span>(<span style="color:#e6db74">&#34;</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">can&#39;t create thread :[%s]&#34;</span>, <span style="color:#a6e22e">strerror</span>(err));
</span></span><span style="display:flex;"><span>        i<span style="color:#f92672">++</span>;
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">pthread_join</span>(tid[<span style="color:#ae81ff">0</span>], NULL);
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">pthread_join</span>(tid[<span style="color:#ae81ff">1</span>], NULL);
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">pthread_mutex_destroy</span>(<span style="color:#f92672">&amp;</span>lock);
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">return</span> <span style="color:#ae81ff">0</span>;
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>In this code:</p>
<ul>
<li>A mutex is initialized at the start of the <code>main</code> function.</li>
<li>The same mutex is locked in the <code>doSomeThing()</code> function while using the shared resource &lsquo;counter&rsquo;.</li>
<li>At the end of the <code>doSomeThing()</code> function, the same mutex is unlocked.</li>
<li>Finally, at the end of the <code>main</code> function, when both threads are finished, the mutex is destroyed【7†source】.</li>
</ul>
<p>With this change, the output now correctly logs the start and finish of both jobs:</p>
<pre tabindex="0"><code>Job 1 started
Job 1 finished
Job 2 started
Job 2 finished
</code></pre><p>So we see that by using a mutex, we have achieved thread synchronization.</p>
<p><strong>Conclusion</strong></p>
<p>In multithreaded programming, thread synchronization is essential for ensuring that shared resources are accessed and modified in a coordinated manner. Mutexes in C offer a reliable way to achieve this synchronization, by providing a locking mechanism that restricts access to a shared resource to one thread at a time. By understanding and implementing these concepts, you can write more reliable and bug-free multithreaded programs. Happy coding!</p>
<hr>
<p>I hope you find this information useful. If you have any more questions, feel free to ask!</p>
]]></content>
        </item>
        
        <item>
            <title>High-performance runners on GitLab CI</title>
            <link>https://blog.miguens.one/posts/2023/06/high-performance-runners-on-gitlab-ci/</link>
            <pubDate>Sun, 18 Jun 2023 00:00:00 +0000</pubDate>
            
            <guid>https://blog.miguens.one/posts/2023/06/high-performance-runners-on-gitlab-ci/</guid>
            <description>&lt;p&gt;To ensure that high-performance runners are never idle while there are pending jobs, you can leverage the following strategies:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Runner priority (Enterprise Edition only): GitLab Enterprise Edition (Premium and Ultimate) offers the option to set runner priority directly in the Runner&amp;rsquo;s settings. You can give your high-performance runners a higher priority, which will make them pick jobs before low-performance runners. To set priority, go to the Runner&amp;rsquo;s details page in the GitLab web interface, and set the &amp;ldquo;Priority&amp;rdquo; field accordingly. Note that this feature is not available in GitLab Community Edition (CE).&lt;/p&gt;</description>
            <content type="html"><![CDATA[<p>To ensure that high-performance runners are never idle while there are pending jobs, you can leverage the following strategies:</p>
<ol>
<li>
<p>Runner priority (Enterprise Edition only): GitLab Enterprise Edition (Premium and Ultimate) offers the option to set runner priority directly in the Runner&rsquo;s settings. You can give your high-performance runners a higher priority, which will make them pick jobs before low-performance runners. To set priority, go to the Runner&rsquo;s details page in the GitLab web interface, and set the &ldquo;Priority&rdquo; field accordingly. Note that this feature is not available in GitLab Community Edition (CE).</p>
</li>
<li>
<p>Adjust the <code>polling_interval</code> setting: In the Runner&rsquo;s configuration file (<code>config.toml</code>), you can set the <code>polling_interval</code> option to control how often a runner checks for new jobs. By setting a lower value for the high-performance runners and a higher value for the low-performance runners, you can increase the likelihood of high-performance runners picking up jobs first.</p>
<pre tabindex="0"><code># High-performance runner
check_interval = 0
[[runners]]
  ...
  [runners.runner_settings]
    polling_interval = 5
  ...

# Low-performance runner
check_interval = 0
[[runners]]
  ...
  [runners.runner_settings]
    polling_interval = 30
  ...
</code></pre><p>The <code>polling_interval</code> is in seconds. The example above sets the high-performance runner to check for jobs every 5 seconds, while the low-performance runner checks every 30 seconds. Note that very low polling intervals may cause increased load on the GitLab server.</p>
</li>
<li>
<p>Use separate projects or groups: Split your projects or organize them into groups, and then assign your high-performance runners exclusively to those projects/groups. This way, the high-performance runners will only process jobs from the specified projects/groups, effectively prioritizing them. However, this approach requires manual management of projects and groups, and may not be suitable for all use cases.</p>
</li>
</ol>
<p>Please note that there&rsquo;s no guaranteed method to completely prevent high-performance runners from being idle when low-performance runners are busy. The strategies mentioned above can help improve the chances of high-performance runners being utilized more effectively, but there might still be some idle time depending on factors like job duration and the number of available jobs.</p>
]]></content>
        </item>
        
        <item>
            <title>Creating a Virtual File System with FUSE and Python</title>
            <link>https://blog.miguens.one/posts/2023/05/creating-a-virtual-file-system-with-fuse-and-python/</link>
            <pubDate>Tue, 16 May 2023 00:00:00 +0000</pubDate>
            
            <guid>https://blog.miguens.one/posts/2023/05/creating-a-virtual-file-system-with-fuse-and-python/</guid>
            <description>&lt;p&gt;&lt;strong&gt;This is a continuation of my previous article:&lt;/strong&gt; &lt;em&gt;Save Snippets of Python code as single XML file&lt;/em&gt;&lt;/p&gt;
&lt;h1 id=&#34;creating-a-virtual-file-system-with-fuse-and-python&#34;&gt;Creating a Virtual File System with FUSE and Python&lt;/h1&gt;
&lt;p&gt;FUSE (Filesystem in Userspace) is a software interface that allows user-level programs to create and manage file systems without requiring root privileges. This makes it possible to create custom file systems that can be mounted and accessed like regular file systems.&lt;/p&gt;
&lt;p&gt;In this article, we will create a virtual file system using FUSE and Python. The file system will expose a set of Python code snippets as files, allowing users to read and execute the snippets as if they were regular Python scripts.&lt;/p&gt;</description>
            <content type="html"><![CDATA[<p><strong>This is a continuation of my previous article:</strong> <em>Save Snippets of Python code as single XML file</em></p>
<h1 id="creating-a-virtual-file-system-with-fuse-and-python">Creating a Virtual File System with FUSE and Python</h1>
<p>FUSE (Filesystem in Userspace) is a software interface that allows user-level programs to create and manage file systems without requiring root privileges. This makes it possible to create custom file systems that can be mounted and accessed like regular file systems.</p>
<p>In this article, we will create a virtual file system using FUSE and Python. The file system will expose a set of Python code snippets as files, allowing users to read and execute the snippets as if they were regular Python scripts.</p>
<h2 id="installing-fuse-and-the-python-bindings">Installing FUSE and the Python bindings</h2>
<p>Before we can use FUSE in Python, we need to install the FUSE library and the Python bindings. On Ubuntu and other Debian-based systems, you can install the required packages using the following command:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>sudo apt-get install fuse libfuse-dev python3-fuse
</span></span></code></pre></div><p>On other systems, you may need to use a different package manager or install the packages from source.</p>
<h2 id="writing-the-code">Writing the code</h2>
<p>Our virtual file system will be based on an XML file that contains a set of named Python code snippets. We will use the <code>xml.etree.ElementTree</code> module to parse the XML file and create a dictionary of snippets. We will then use the <code>fusepy</code> library to create a FUSE file system that exposes the snippets as files.</p>
<p>Here&rsquo;s the code:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#f92672">import</span> xml.etree.ElementTree <span style="color:#66d9ef">as</span> ET
</span></span><span style="display:flex;"><span><span style="color:#f92672">import</span> os
</span></span><span style="display:flex;"><span><span style="color:#f92672">import</span> errno
</span></span><span style="display:flex;"><span><span style="color:#f92672">import</span> argparse
</span></span><span style="display:flex;"><span><span style="color:#f92672">from</span> fuse <span style="color:#f92672">import</span> FUSE, FuseOSError, Operations
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Define a class that implements the FUSE operations</span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">class</span> <span style="color:#a6e22e">SnippetFS</span>(Operations):
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">def</span> <span style="color:#a6e22e">__init__</span>(self, xml_path):
</span></span><span style="display:flex;"><span>        <span style="color:#75715e"># Parse the XML file and create a dictionary of snippets</span>
</span></span><span style="display:flex;"><span>        self<span style="color:#f92672">.</span>snippets <span style="color:#f92672">=</span> {}
</span></span><span style="display:flex;"><span>        tree <span style="color:#f92672">=</span> ET<span style="color:#f92672">.</span>parse(xml_path)
</span></span><span style="display:flex;"><span>        root <span style="color:#f92672">=</span> tree<span style="color:#f92672">.</span>getroot()
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">for</span> snippet <span style="color:#f92672">in</span> root<span style="color:#f92672">.</span>findall(<span style="color:#e6db74">&#39;snippet&#39;</span>):
</span></span><span style="display:flex;"><span>            name <span style="color:#f92672">=</span> snippet<span style="color:#f92672">.</span>find(<span style="color:#e6db74">&#39;name&#39;</span>)<span style="color:#f92672">.</span>text
</span></span><span style="display:flex;"><span>            code <span style="color:#f92672">=</span> snippet<span style="color:#f92672">.</span>find(<span style="color:#e6db74">&#39;code&#39;</span>)<span style="color:#f92672">.</span>text<span style="color:#f92672">.</span>strip()
</span></span><span style="display:flex;"><span>            self<span style="color:#f92672">.</span>snippets[name] <span style="color:#f92672">=</span> code
</span></span><span style="display:flex;"><span>    
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">def</span> <span style="color:#a6e22e">getattr</span>(self, path, fh<span style="color:#f92672">=</span><span style="color:#66d9ef">None</span>):
</span></span><span style="display:flex;"><span>        <span style="color:#75715e"># Treat all snippets as regular files with 444 permissions</span>
</span></span><span style="display:flex;"><span>        st <span style="color:#f92672">=</span> {}
</span></span><span style="display:flex;"><span>        st[<span style="color:#e6db74">&#39;st_mode&#39;</span>] <span style="color:#f92672">=</span> <span style="color:#ae81ff">0o100444</span>
</span></span><span style="display:flex;"><span>        st[<span style="color:#e6db74">&#39;st_size&#39;</span>] <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">return</span> st
</span></span><span style="display:flex;"><span>    
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">def</span> <span style="color:#a6e22e">read</span>(self, path, size, offset, fh):
</span></span><span style="display:flex;"><span>        <span style="color:#75715e"># Get the code for the requested snippet and return the appropriate slice</span>
</span></span><span style="display:flex;"><span>        name <span style="color:#f92672">=</span> os<span style="color:#f92672">.</span>path<span style="color:#f92672">.</span>basename(path)
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">if</span> name <span style="color:#f92672">not</span> <span style="color:#f92672">in</span> self<span style="color:#f92672">.</span>snippets:
</span></span><span style="display:flex;"><span>            <span style="color:#66d9ef">raise</span> FuseOSError(errno<span style="color:#f92672">.</span>ENOENT)
</span></span><span style="display:flex;"><span>        code <span style="color:#f92672">=</span> self<span style="color:#f92672">.</span>snippets[name]
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">return</span> code<span style="color:#f92672">.</span>encode()[offset:offset<span style="color:#f92672">+</span>size]
</span></span><span style="display:flex;"><span>    
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">def</span> <span style="color:#a6e22e">readdir</span>(self, path, fh):
</span></span><span style="display:flex;"><span>        <span style="color:#75715e"># List all snippet names in the root directory</span>
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">return</span> [<span style="color:#e6db74">&#39;.&#39;</span>, <span style="color:#e6db74">&#39;..&#39;</span>, <span style="color:#f92672">*</span>self<span style="color:#f92672">.</span>snippets<span style="color:#f92672">.</span>keys()]
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Parse command line arguments</span>
</span></span><span style="display:flex;"><span>parser <span style="color:#f92672">=</span> argparse<span style="color:#f92672">.</span>ArgumentParser()
</span></span><span style="display:flex;"><span>parser<span style="color:#f92672">.</span>add_argument(<span style="color:#e6db74">&#39;xml_path&#39;</span>, help<span style="color:#f92672">=</span><span style="color:#e6db74">&#39;Path to the XML file&#39;</span>)
</span></span><span style="display:flex;"><span>parser<span style="color:#f92672">.</span>add_argument(<span style="color:#e6db74">&#39;mount_point&#39;</span>, help<span style="color:#f92672">=</span><span style="color:#e6db74">&#39;Mount point for the virtual file system&#39;</span>)
</span></span><span style="display:flex;"><span>args <span style="color:#f92672">=</span> parser<span style="color:#f92672">.</span>parse_args()
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Mount the SnippetFS filesystem at the specified mount point</span>
</span></span><span style="display:flex;"><span>os<span style="color:#f92672">.</span>makedirs(args<span style="color:#f92672">.</span>mount_point, exist_ok<span style="color:#f92672">=</span><span style="color:#66d9ef">True</span>)
</span></span><span style="display:flex;"><span>FUSE(SnippetFS(args<span style="color:#f92672">.</span>xml_path), args<span style="color:#f92672">.</span>mount_point, nothreads<span style="color:#f92672">=</span><span style="color:#66d9ef">True</span>, foreground<span style="color:#f92672">=</span><span style="color:#66d9ef">True</span>)
</span></span></code></pre></div><p>This code defines a <code>SnippetFS</code> class that implements the FUSE operations, and a <code>main</code> function that creates a virtual file system using the specified XML file and mount point. The <code>SnippetFS</code> class parses the XML file and creates a dictionary of named code snippets. The <code>getattr</code>, <code>read</code>, and <code>readdir</code> methods of the class implement the required FUSE operations.</p>
<h2 id="running-the-program">Running the program</h2>
<p>To run the program, save the code to a file called <code>snippetfs.py</code> and create an XML file with the following format:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-xml" data-lang="xml"><span style="display:flex;"><span><span style="color:#f92672">&lt;python_snippets&gt;</span>
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">&lt;snippet&gt;</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">&lt;name&gt;</span>Snippet 1<span style="color:#f92672">&lt;/name&gt;</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">&lt;code&gt;</span><span style="color:#75715e">&lt;![CDATA[
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">      # Python code for Snippet 1
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">      print(&#34;Hello, world!&#34;)
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">    ]]&gt;</span><span style="color:#f92672">&lt;/code&gt;</span>
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">&lt;/snippet&gt;</span>
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">&lt;snippet&gt;</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">&lt;name&gt;</span>Snippet 2<span style="color:#f92672">&lt;/name&gt;</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">&lt;code&gt;</span><span style="color:#75715e">&lt;![CDATA[
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">      # Python code for Snippet 2
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">      x = 10
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">      y = 20
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">      print(x + y)
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">    ]]&gt;</span><span style="color:#f92672">&lt;/code&gt;</span>
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">&lt;/snippet&gt;</span>
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">&lt;snippet&gt;</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">&lt;name&gt;</span>Snippet 3<span style="color:#f92672">&lt;/name&gt;</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">&lt;code&gt;</span><span style="color:#75715e">&lt;![CDATA[
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">      # Python code for Snippet 3
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">      def greet(name):
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">        print(&#34;Hello, &#34; + name + &#34;!&#34;)
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">        
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">      greet(&#34;Alice&#34;)
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">    ]]&gt;</span><span style="color:#f92672">&lt;/code&gt;</span>
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">&lt;/snippet&gt;</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">&lt;/python_snippets&gt;</span>
</span></span></code></pre></div><p>Replace the contents of the XML file with your own Python snippets as desired.</p>
<p>To mount the virtual file system, use the following command:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>python3 snippetfs.py path/to/xml/file /path/to/mount/point
</span></span></code></pre></div><p>Replace <code>path/to/xml/file</code> with the path to your XML file and <code>/path/to/mount/point</code> with the path to the directory where you want to mount the file system.</p>
<p>Once the file system is mounted, you can browse the snippets like regular files and execute them by running <code>python3 /path/to/mount/point/Snippet\ X</code> (where <code>X</code> is the name of the snippet).</p>
<h2 id="conclusion">Conclusion</h2>
<p>In this article, we have demonstrated how to create a virtual file system using FUSE and Python. The file system exposes a set of Python code snippets as files, allowing users to read and execute the snippets like regular Python scripts. This technique can be used to create other types of virtual file systems, such as file systems that expose data from databases or web services.</p>
<p>Happy coding!</p>
]]></content>
        </item>
        
        <item>
            <title>Save Snippets of Python code as single XML file</title>
            <link>https://blog.miguens.one/posts/2023/04/save-snippets-of-python-code-as-single-xml-file/</link>
            <pubDate>Sat, 29 Apr 2023 00:00:00 +0000</pubDate>
            
            <guid>https://blog.miguens.one/posts/2023/04/save-snippets-of-python-code-as-single-xml-file/</guid>
            <description>&lt;h1 id=&#34;how-to-use-an-xml-file-to-store-multiple-portions-of-python-code&#34;&gt;How to Use an XML File to Store Multiple Portions of Python Code&lt;/h1&gt;
&lt;p&gt;Have you ever needed to run several Python code snippets in the cloud and wished for an easy way to organize and package them? One way to accomplish this is by using an XML file to store your Python code snippets. An XML file is a file format that is used to store and transport data, and can be easily read and written by machines. By creating an XML file to store your code snippets, you can easily package them together and upload them to the cloud to run as a single package.&lt;/p&gt;</description>
            <content type="html"><![CDATA[<h1 id="how-to-use-an-xml-file-to-store-multiple-portions-of-python-code">How to Use an XML File to Store Multiple Portions of Python Code</h1>
<p>Have you ever needed to run several Python code snippets in the cloud and wished for an easy way to organize and package them? One way to accomplish this is by using an XML file to store your Python code snippets. An XML file is a file format that is used to store and transport data, and can be easily read and written by machines. By creating an XML file to store your code snippets, you can easily package them together and upload them to the cloud to run as a single package.</p>
<h2 id="defining-the-structure-of-the-xml-file">Defining the Structure of the XML File</h2>
<p>The first step in creating an XML file for your Python code snippets is to define the structure of the file. You need to decide what elements and attributes you will use to store your code snippets.</p>
<p>For example, you might decide to use a root element called <code>&lt;python_snippets&gt;</code> to contain all of your code snippets. Each code snippet could then be stored as a child element of the <code>&lt;python_snippets&gt;</code> element, with a name attribute to give the snippet a descriptive name, and a code element to store the actual Python code.</p>
<h2 id="writing-the-xml-file">Writing the XML File</h2>
<p>Once you have defined the structure of your XML file, you can start writing the file itself. You can use any text editor to write an XML file, or you can use a specialized XML editor that will help you format your code correctly.</p>
<p>Here&rsquo;s an example of what an XML file for Python code snippets might look like:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-xml" data-lang="xml"><span style="display:flex;"><span><span style="color:#f92672">&lt;python_snippets&gt;</span>
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">&lt;snippet&gt;</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">&lt;name&gt;</span>Snippet 1<span style="color:#f92672">&lt;/name&gt;</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">&lt;code&gt;</span><span style="color:#75715e">&lt;![CDATA[
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">      # Python code for Snippet 1
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">      print(&#34;Hello, world!&#34;)
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">    ]]&gt;</span><span style="color:#f92672">&lt;/code&gt;</span>
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">&lt;/snippet&gt;</span>
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">&lt;snippet&gt;</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">&lt;name&gt;</span>Snippet 2<span style="color:#f92672">&lt;/name&gt;</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">&lt;code&gt;</span><span style="color:#75715e">&lt;![CDATA[
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">      # Python code for Snippet 2
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">      x = 10
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">      y = 20
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">      print(x + y)
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">    ]]&gt;</span><span style="color:#f92672">&lt;/code&gt;</span>
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">&lt;/snippet&gt;</span>
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">&lt;snippet&gt;</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">&lt;name&gt;</span>Snippet 3<span style="color:#f92672">&lt;/name&gt;</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">&lt;code&gt;</span><span style="color:#75715e">&lt;![CDATA[
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">      # Python code for Snippet 3
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">      def greet(name):
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">        print(&#34;Hello, &#34; + name + &#34;!&#34;)
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">        
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">      greet(&#34;Alice&#34;)
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">    ]]&gt;</span><span style="color:#f92672">&lt;/code&gt;</span>
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">&lt;/snippet&gt;</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">&lt;/python_snippets&gt;</span>
</span></span></code></pre></div><p>In this example, we have a root element called <code>&lt;python_snippets&gt;</code> that contains three child elements called <code>&lt;snippet&gt;</code>. Each <code>&lt;snippet&gt;</code> element has a child element called <code>&lt;name&gt;</code> to store the name of the code snippet, and a child element called <code>&lt;code&gt;</code> to store the actual Python code. The Python code is stored using <code>CDATA</code>, which allows us to include special characters like &ldquo;&lt;&rdquo; and &ldquo;&gt;&rdquo; in the code without causing any issues</p>
<h2 id="saving-the-xml-file">Saving the XML File</h2>
<p>Once you have written your XML file, you can save it to your computer. You can then use this file to package your Python code snippets and upload them to the cloud to run as a single package. You can open the file in any text editor or XML editor to view and edit the code snippets as needed.</p>
<h2 id="conclusion">Conclusion</h2>
<p>Using an XML file to store your Python code snippets is a great way to package and organize your code snippets for running in the cloud. By defining the structure of the XML file and following the steps outlined above, you can create a customized system for storing and managing your Python code snippets. This system can be adapted to meet your specific needs and can be easily updated and modified over time.</p>
<p>In conclusion, if you need to run several Python code snippets in the cloud and want an easy way to organize and package them, using an XML file is definitely worth considering. With just a few simple steps, you can create a customized system that will make it easy to access and manage your code snippets, no matter where you are or what device you are using. So why not give it a try and see how it works for you?</p>
]]></content>
        </item>
        
        <item>
            <title>Speed Up I/O Performance with RAMDisk and LVM Cache</title>
            <link>https://blog.miguens.one/posts/2023/04/speed-up-i/o-performance-with-ramdisk-and-lvm-cache/</link>
            <pubDate>Fri, 14 Apr 2023 00:00:00 +0000</pubDate>
            
            <guid>https://blog.miguens.one/posts/2023/04/speed-up-i/o-performance-with-ramdisk-and-lvm-cache/</guid>
            <description>&lt;p&gt;In this blog article, we will discuss various methods to speed up I/O performance and ultimately settle on using LVM to mount a fast I/O device with a RAMDisk as cache. This approach is beneficial when you don&amp;rsquo;t care about retaining data in the location between reboots.&lt;/p&gt;
&lt;h2 id=&#34;options-considered&#34;&gt;Options Considered&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;Only use RAM (i.e., tmpfs of 20 or 30GB)&lt;/strong&gt;: This option has the problem that if RAM is not enough, the build will fail.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Use larger tmps (double the amounts above) and use the fast I/O location as a swap&lt;/strong&gt;: The issue with this option is that if the system needs to use the swap, the complete OS could become laggy and unresponsive, affecting the build times.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Concatenate RAM with Fast I/O using LVM&lt;/strong&gt;: This approach does not guarantee that the filesystem will write first on RAM.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Use LVM to mount the Fast I/O with RAMDisk as cache&lt;/strong&gt;: This is the best approach among the options considered, but further research on the options of LVM is needed.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;We will focus on option 4 for the rest of this article.&lt;/p&gt;</description>
            <content type="html"><![CDATA[<p>In this blog article, we will discuss various methods to speed up I/O performance and ultimately settle on using LVM to mount a fast I/O device with a RAMDisk as cache. This approach is beneficial when you don&rsquo;t care about retaining data in the location between reboots.</p>
<h2 id="options-considered">Options Considered</h2>
<ol>
<li><strong>Only use RAM (i.e., tmpfs of 20 or 30GB)</strong>: This option has the problem that if RAM is not enough, the build will fail.</li>
<li><strong>Use larger tmps (double the amounts above) and use the fast I/O location as a swap</strong>: The issue with this option is that if the system needs to use the swap, the complete OS could become laggy and unresponsive, affecting the build times.</li>
<li><strong>Concatenate RAM with Fast I/O using LVM</strong>: This approach does not guarantee that the filesystem will write first on RAM.</li>
<li><strong>Use LVM to mount the Fast I/O with RAMDisk as cache</strong>: This is the best approach among the options considered, but further research on the options of LVM is needed.</li>
</ol>
<p>We will focus on option 4 for the rest of this article.</p>
<h2 id="implementation">Implementation</h2>
<p>Here&rsquo;s a script that implements option 4:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span><span style="color:#75715e">#!/bin/bash
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span><span style="color:#75715e"># Create LVM group</span>
</span></span><span style="display:flex;"><span>fallocate -l 2G fake-ssd.img
</span></span><span style="display:flex;"><span>sudo losetup /dev/loop50 fake-ssd.img
</span></span><span style="display:flex;"><span>sudo vgcreate vgextend /dev/loop50
</span></span><span style="display:flex;"><span>sudo lvcreate -n my_vol -l 100%FREE vg-test
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Prepare and mount LVM volume</span>
</span></span><span style="display:flex;"><span>sudo mkdir /mnt/vg-test
</span></span><span style="display:flex;"><span>sudo mkfs.ext4 /dev/mapper/vg--test-my_vol
</span></span><span style="display:flex;"><span>sudo mount /dev/mapper/vg--test-my_vol /mnt/vg-test/
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Extend LVM with RAM-Disk of 8 or 10GB</span>
</span></span><span style="display:flex;"><span>sudo modprobe brd rd_nr<span style="color:#f92672">=</span><span style="color:#ae81ff">1</span> rd_size<span style="color:#f92672">=</span><span style="color:#ae81ff">8388608</span>
</span></span><span style="display:flex;"><span>sudo vgextend vg-test /dev/ram0
</span></span><span style="display:flex;"><span>sudo lvcreate --type cache --cachemode writeback -l 100%FREE -n my_vol_cache vg-test/my_vol /dev/ram0
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Format and mount cached LVM volume</span>
</span></span><span style="display:flex;"><span>sudo mkfs.ext4 /dev/mapper/vg--test-my_vol
</span></span><span style="display:flex;"><span>sudo mount /dev/mapper/vg--test-my_vol /mnt/vg-test/
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Start GitLab Runner using mounted location</span>
</span></span><span style="display:flex;"><span>sudo gitlab-runner start --working-directory /mnt/gitlab_runner
</span></span></code></pre></div><p>To make sure the script runs at startup, you can add it to <code>/etc/rc.local</code>. However, it is better to write your own service for this purpose.</p>
<h2 id="conclusion">Conclusion</h2>
<p>Using LVM to mount a fast I/O device with a RAMDisk as cache is an effective method to speed up I/O performance. It is essential to ensure that the system is set up correctly to achieve the best results. Consider writing your own service instead of using <code>rc.local</code> for a more robust implementation.</p>
]]></content>
        </item>
        
        <item>
            <title>Notes book: Spend Less, Invest More, and Live Free: A Guide to Financial Freedom</title>
            <link>https://blog.miguens.one/posts/2023/04/notes-book-spend-less-invest-more-and-live-free-a-guide-to-financial-freedom/</link>
            <pubDate>Sat, 01 Apr 2023 00:00:00 +0000</pubDate>
            
            <guid>https://blog.miguens.one/posts/2023/04/notes-book-spend-less-invest-more-and-live-free-a-guide-to-financial-freedom/</guid>
            <description>&lt;p&gt;&lt;em&gt;Spend less than you earn – invest the surplus – avoid debt.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Do simply this, and you&amp;rsquo;ll wind up rich. Not just in money. If your lifestyle matches or, god forbid, exceeds your income, you are no more than a gilded slave.&lt;/p&gt;
&lt;p&gt;As individuals, we only have one obligation to society: To make sure we and our children are not a burden to others. The rest is your personal choice. Make your own and make the world a far more interesting place.&lt;/p&gt;</description>
            <content type="html"><![CDATA[<p><em>Spend less than you earn – invest the surplus – avoid debt.</em></p>
<p>Do simply this, and you&rsquo;ll wind up rich. Not just in money. If your lifestyle matches or, god forbid, exceeds your income, you are no more than a gilded slave.</p>
<p>As individuals, we only have one obligation to society: To make sure we and our children are not a burden to others. The rest is your personal choice. Make your own and make the world a far more interesting place.</p>
<p>While giving is a fine and pleasant thing, no one has an obligation to do so. Anyone who tells you differently is trying to sell you something, most likely the idea of giving to them and/or their pet project.</p>
<p><em>Spend sparingly. Tip generously.</em></p>
<p>You own the things you own, and they, in turn, own you.</p>
<p>Money can buy many things, but nothing more valuable than your freedom.</p>
<p>Life choices are not always about the money, but you should always be clear about the money choice you are making.</p>
<p>Without F-you Money, you are a slave. If you have debt, you are a slave with still stouter shackles.</p>
<p>You weren&rsquo;t born to be a slave.</p>
<p>Carrying debt is as appealing as being covered with leeches, and has much the same effect. The idea that many, indeed most, people seem to happily cover themselves with debt is so beyond my understanding it is hard to imagine how, let alone why, the downsides would need to be explained.</p>
<p>Take out your sharpest knife and start scraping the little blood-suckers off.</p>
<p>This includes car loans.</p>
<p><em>Seek respect only from those you respect.</em></p>
<p><em>On luck:</em></p>
<p>If life hasn&rsquo;t been turning out the way you&rsquo;d hoped, take a moment. Look around. Open your eyes. There might just be some luck flowing past waiting for you to grab it.
If you are basking in the glow of your hard work, initiative, and success, congratulations. Now, when you&rsquo;re done patting yourself on the back, take a moment and give a little thanks.</p>
<p><em>Travel slowly, avoid the sights, linger in outdoor cafes, talk to the locals, leave your camera at home, do it now, do it while you&rsquo;re young.</em></p>
<p><em>The problem with Beanie Babies, or anything else produced as a collectible, is that when people buy them, they save them. They will never be rare, and rare equals value.</em></p>
<p><em>Fads, manias, and bubbles: What they all have in common is that by the time you start reading about them everywhere, the end is near.</em></p>
<p><em>It&rsquo;s OK for the other guy to get a deal, too.</em></p>
<p><em>You can&rsquo;t pick winning stocks:</em></p>
<p>If you choose to try to best the averages, God Bless and God Speed. You may well be smarter and more talented than I. You are most certainly likely to be better looking. I&rsquo;ll look for your name along with Warren and Peter&rsquo;s in the not too distant future. I extend the same to all those folks I&rsquo;ve met in Vegas who assure me they have bested the house. I listen, gaze up at the billion-dollar casinos and reflect on how many smarter, more talented, and better looking people there are than me.</p>
<p><em>Index funds. End of story.</em></p>
<p><em>Vanguard. End of story.</em></p>
<p>This whole civilization thing has been a huge mistake, and we&rsquo;d all be better off as hunter/gatherers. But since we do live in this complex, technical world, you had best learn about money. Money is the single most important, effective tool in navigating it.</p>
<p>Lead with your bright and shining example, and maybe I&rsquo;ll follow. Berate me for not believing as you do, and I&rsquo;ll likely tell you to go fuck yourself.</p>
<p><em>Sound investing is not complicated. Complicated investments make money only for those selling them.</em></p>
<p><em>Keep a mental list of people you&rsquo;d like to have a cup of coffee with. Invite them.</em></p>
<p><em>Read.</em></p>
<p>There is nothing you can&rsquo;t learn, no place you can&rsquo;t go if you read.</p>
<p>In summary, financial freedom is not just about accumulating wealth; it&rsquo;s about living a life free from the shackles of debt and embracing the choices that truly matter to you. Spend less than you earn, invest the surplus, avoid debt, and enjoy the freedom that comes with making informed decisions about your life and your money.</p>
]]></content>
        </item>
        
        <item>
            <title>A Heartfelt Apology: Life&#39;s Beautiful Twists and Turns</title>
            <link>https://blog.miguens.one/posts/2023/03/a-heartfelt-apology-lifes-beautiful-twists-and-turns/</link>
            <pubDate>Wed, 15 Mar 2023 00:00:00 +0000</pubDate>
            
            <guid>https://blog.miguens.one/posts/2023/03/a-heartfelt-apology-lifes-beautiful-twists-and-turns/</guid>
            <description>&lt;p&gt;Hello dear readers,&lt;/p&gt;
&lt;p&gt;I hope this message finds you all in good health and high spirits. It&amp;rsquo;s been a while since I last shared my thoughts and experiences with you, and for that, I must extend my most sincere apologies. You deserve an explanation, so let me take this opportunity to share the amazing whirlwind of life changes I&amp;rsquo;ve been through lately.&lt;/p&gt;
&lt;p&gt;First and foremost, I&amp;rsquo;m thrilled to announce that I&amp;rsquo;ve accepted a new job at CERN, the European Organization for Nuclear Research! As many of you know, working at CERN has been a lifelong dream of mine. The opportunity to contribute to groundbreaking research in particle physics is an honor and a privilege. Of course, this fantastic opportunity has also come with its fair share of adjustments, including relocating to Geneva, Switzerland, and diving headfirst into the challenging and fast-paced world of high-energy physics.&lt;/p&gt;</description>
            <content type="html"><![CDATA[<p>Hello dear readers,</p>
<p>I hope this message finds you all in good health and high spirits. It&rsquo;s been a while since I last shared my thoughts and experiences with you, and for that, I must extend my most sincere apologies. You deserve an explanation, so let me take this opportunity to share the amazing whirlwind of life changes I&rsquo;ve been through lately.</p>
<p>First and foremost, I&rsquo;m thrilled to announce that I&rsquo;ve accepted a new job at CERN, the European Organization for Nuclear Research! As many of you know, working at CERN has been a lifelong dream of mine. The opportunity to contribute to groundbreaking research in particle physics is an honor and a privilege. Of course, this fantastic opportunity has also come with its fair share of adjustments, including relocating to Geneva, Switzerland, and diving headfirst into the challenging and fast-paced world of high-energy physics.</p>
<p>I must admit, the transition has been both exciting and demanding. The new job has required my full attention and dedication, which, unfortunately, left me with limited time to update this blog as frequently as I used to. I assure you, though, that I haven&rsquo;t forgotten about our little corner of the internet. I&rsquo;ve been collecting experiences, stories, and insights that I&rsquo;m eager to share with you all in the coming weeks.</p>
<p>In addition to my new job, my wife and I have been blessed with the arrival of our beautiful newborn daughter. As any parent will tell you, the birth of a child is a life-changing experience that brings immeasurable joy and a whole new set of responsibilities. Our days and nights have been consumed by diaper changes, feedings, and the pure delight of watching our little one grow and develop.</p>
<p>Although I&rsquo;ve been overwhelmed by the love and happiness our daughter has brought into our lives, the demands of fatherhood have further contributed to my absence from the blog. As we settle into our new family dynamic, I hope to find a balance between work, fatherhood, and my passion for sharing my thoughts and experiences with all of you.</p>
<p>Once again, I apologize for the lack of updates and appreciate your understanding during this transformative period in my life. I am truly grateful for your ongoing support and patience. Please stay tuned for more frequent updates, as I have many stories and insights to share from both my professional journey at CERN and my new adventures in parenthood.</p>
<p>Wishing you all the very best, and looking forward to reconnecting with you soon.</p>
<p>Warm regards,</p>
<p>Luis Miguens</p>
]]></content>
        </item>
        
        <item>
            <title>59 Seconds: Think a little, change a lot</title>
            <link>https://blog.miguens.one/posts/2021/06/59-seconds-think-a-little-change-a-lot/</link>
            <pubDate>Sun, 27 Jun 2021 00:00:00 +0000</pubDate>
            
            <guid>https://blog.miguens.one/posts/2021/06/59-seconds-think-a-little-change-a-lot/</guid>
            <description>&lt;p&gt;My highlighs of the book: &lt;strong&gt;59 Seconds: Think a little, change a lot&lt;/strong&gt; by &lt;em&gt;Richard Wiseman&lt;/em&gt;&lt;/p&gt;
&lt;h2 id=&#34;chapter-1---happiness&#34;&gt;Chapter 1 - Happiness&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;We all get used to what we have very quickly. Buying a new car or a bigger house provides a short-term feel-good boost, but we quickly become accustomed to it and sink back to our pre-purchase level of joy.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;About 50 percent of your overall sense of happiness is genetically determined,&lt;/p&gt;</description>
            <content type="html"><![CDATA[<p>My highlighs of the book: <strong>59 Seconds: Think a little, change a lot</strong> by <em>Richard Wiseman</em></p>
<h2 id="chapter-1---happiness">Chapter 1 - Happiness</h2>
<ul>
<li>
<p>We all get used to what we have very quickly. Buying a new car or a bigger house provides a short-term feel-good boost, but we quickly become accustomed to it and sink back to our pre-purchase level of joy.</p>
</li>
<li>
<p>About 50 percent of your overall sense of happiness is genetically determined,</p>
</li>
<li>
<p>10 percent is attributable to general circumstances (educational level, income, whether you are married or single, etc.) that are difficult to change.</p>
</li>
<li>
<p>40 percent is derived from your day-to-day behavior and the way you think about yourself and others.</p>
</li>
<li>
<p>Does the road to happiness really depend on people’s being able to simply push negative thoughts out of their mind? Actually, research suggests that such thought suppression may be far more likely to increase, rather than decrease, misery.</p>
</li>
<li>
<p>Perhaps spend time with your family, go to a party, get more involved in your work, or take up a new hobby. Although this technique can often provide an effective short-term boost, it will probably not lead to a long-term sense of contentment. For that, research suggests, you need to know how to use a pencil, how to keep the perfect diary, how to carry out small acts of kindness, and how to develop the gratitude attitude.</p>
</li>
<li>
<p>Expressing gratitude, thinking about a perfect future, and affectionate writing have been scientifically proven to work—and all they require is a pen, a piece of paper, and a few moments of your time.</p>
</li>
<li>
<p>People become much happier after providing for others rather than themselves.</p>
</li>
<li>
<p>Carrying out five nonfinancial acts of kindness on a single day also provides a significant boost to happiness.</p>
</li>
<li>
<p>Smile more. This shouldn’t be a brief, unfelt smile that ends in the blink of an eye. Instead, research suggests that you should try to maintain the expression for between fifteen and thirty seconds.</p>
</li>
<li>
<p>Those who had sat upright were much happier than those who had slouched,</p>
</li>
<li>
<p>Try walking in a more relaxed way, swinging your arms slightly more and putting more of a spring in your step. Also, try making more expressive hand gestures during conversations, nod your head more when others are speaking, wear more colorful clothing, use positively charged emotional words more (especially “love,” “like,” and “fond”), use fewer self-references (“me,” “myself,” and “I”), have a larger variation in the pitch of your voice, speak slightly faster, and have a significantly firmer handshake.</p>
</li>
<li>
<p>To maximize happiness, choose intentional change over circumstantial change. Make the effort to start a new hobby, begin a major project, or try a sport that you have never tried before. Choose activities that fit your personality, values, and abilities. It might help to think about what you already enjoy doing, identify the core elements that make this activity so pleasurable, and try other activities involving the same elements.</p>
</li>
</ul>
<h2 id="chapter-2---persuasion">Chapter 2 - Persuasion</h2>
<ul>
<li>
<p>After analyzing the mass of data, the research team exploded some of the myths about why interviewers choose candidates for a job, discovering a surprising reality. Did the likelihood depend on qualifications? Or was it work experience? In fact, it was neither. It was just one important factor—did the candidate appear to be a pleasant person? Those who had managed to ingratiate themselves were very likely to be offered a position, and they charmed their way to success in several different ways.</p>
</li>
<li>
<p>A few had spent time chatting about topics that were not related to the job but that interested the candidate and the interviewer. Some had made a special effort to smile and maintain eye contact. Others had praised the organization. This barrage of positivity had paid dividends, convincing the interviewers that such pleasant and socially skilled applicants would fit well in the workplace and so should be offered a job. Higgins and Judge’s study clearly demonstrates that in order to get your dream job, going out of your way to be pleasant is more important than qualifications and past work experience.</p>
</li>
<li>
<p>Should you mention weaknesses toward the start of the interview, or hope to make a good first impression and introduce possible problems only at the end?</p>
</li>
<li>
<p>It seems that presenting weaknesses early is seen as a sign of openness.</p>
</li>
<li>
<p>Can the same be said of the more positive aspects of your résumé?</p>
</li>
<li>
<p>Now the effect was reversed, with the man appearing far more likeable when he mentioned the award later. It seems that modesty, rather than honesty, is critical for positive aspects of your past. By delaying mention of such details, you appear to prefer letting your strengths emerge naturally, while playing your cards early is seen as boastful.</p>
</li>
<li>
<p>Increase your chances of giving a great interview in three easy steps.</p>
</li>
<li>
<p>Remember that likeability is more important than academic achievements and work experience, so … find something that you truly like about the organization, and let your opinion be known feel free to give a genuine compliment to the interviewer chat about a non-job-related topic that you and the interviewer find interesting show interest in the interviewer.</p>
</li>
<li>
<p>Ask what type of person is being sought and how the position fits into the overall organization be enthusiastic about the position and the organization smile and maintain eye contact with the interviewer</p>
</li>
<li>
<p>When you do have weaknesses, don’t wait until late in the interview to reveal them. Instead, give your credibility a boost by getting them into the conversation toward the start of the interview. And remember, for positive aspects, modesty is vital, so retain something strong until the very last minute. Third If you make what seems like a major mistake, don’t overreact. The chances are that it is far more noticeable to you than to others, and your excessive response or apologizing could just draw more attention to it. Instead, acknowledge the mistake, if appropriate, and then continue as if nothing has happened.</p>
</li>
<li>
<p>Increasing your popularity is to express a genuine interest in others. In fact, Carnegie argues, people will win more friends in two months by developing a genuine interest in those around them than in two years of trying to make others interested in them.</p>
</li>
<li>
<p>Alternative quick and easy routes, which include giving sincere compliments, matching people’s body language and style of speech, appearing to be modest, and being generous with your time, resources, and skills.</p>
</li>
<li>
<p>To encourage others to like you, ask for their help.</p>
</li>
<li>
<p>People like you more when they do a favor for you.</p>
</li>
<li>
<p>Is more likely to work with small favors rather than more significant requests that make people either respond begrudgingly or, even worse, refuse.</p>
</li>
<li>
<p>The occasional slipup can enhance your likeability. However, remember that the effect really works only when you are in danger of being seen as too perfect.</p>
</li>
<li>
<p>Know that whatever traits you assign to others are likely to come home to roost, being viewed as part of your own personality.</p>
</li>
<li>
<p>Started their conversations with a simple question designed to get a positive answer, asking “How are you feeling this evening?” As expected, the vast majority of people responded favorably (“Great,” “Fine, thanks”). More important, this act had a dramatic influence on whether they would allow a salesperson into their house. Of those who were in the “How are you feeling?” group, 32 percent accepted the offer, compared to just 18 percent in the control “no question” group. The message is that people are more likely to agree with you when they have already said something positive.</p>
</li>
<li>
<p>People developed a special fondness for other people, objects, and statements if they were introduced to them while eating a meal.18</p>
</li>
<li>
<p>In short, it’s good evidence that there really is no such thing as a free lunch, or an innocent cup of coffee.</p>
</li>
<li>
<p>For persuasion, the research points to a simple fact: similarity works.</p>
</li>
<li>
<p>If you are unfortunate enough to require assistance in the street,</p>
</li>
<li>
<p>Pick out a friendly face in the crowd and clearly tell them what is happening and what they need to do.</p>
</li>
<li>
<p>Favors have their strongest effect when they occur between people who don’t know each other very well, and when they are small but thoughtful.</p>
</li>
<li>
<p>In a sense, by giving too much at the beginning, one person places the other in a difficult position because the law of reciprocity states that the recipient has to give even more in return.</p>
</li>
<li>
<p>Motivation is also important, as recipients can often experience a drop in self-esteem if they think they are being helped because they are believed not to have the ability to be successful by themselves35 or if they attribute the favor to an ulterior motive.36 So, for maximum persuasion, remember: save your favors for strangers, it really is the thought that counts, and the favor has to appear to come from the heart, not the head.</p>
</li>
<li>
<p>Americans were heavily influenced by the reciprocity rule</p>
</li>
<li>
<p>Germans were more concerned about whether their actions would be consistent with company rules, the Spanish were driven more by basic rules of friendship and liking, and the Chinese were swayed by the status of the coworker.</p>
</li>
<li>
<p>Finally, if you want to get maximum return for your investment, ask for the return favor quickly.</p>
</li>
<li>
<p>It seems that if you leave it too long, people either forget what happened or convince themselves that they didn’t really need the help in the first place.</p>
</li>
</ul>
<h2 id="chapter-3---motivation">Chapter 3 - Motivation</h2>
<ul>
<li>
<p>Why should it be so bad for you to imagine yourself achieving your goals? Researchers have speculated that those who fantasize about how wonderful life could be are ill prepared for the setbacks that frequently occur along the rocky road to success, or perhaps they enjoy indulging in escapism and so become reluctant to put in the effort required to achieve their goals. Either way, the message from the research is clear: fantasizing about your perfect world may make you feel better, but it is unlikely to help you transform your dreams into reality.</p>
</li>
<li>
<p>To achieve your aims and ambitions, there are four key techniques that will help you succeed: having the right kind of plan, telling your friends and family, focusing on the benefits, and rewarding yourself each step of the way.</p>
</li>
<li>
<p>Motivational journal</p>
<ol>
<li>
<p>What is your overall goal? My overall goal is to …</p>
</li>
<li>
<p>Creating a step-by-step plan Break your overall goal into a maximum of five smaller steps. Each step should be associated with a goal that is concrete, measurable, realistic, and time-based. Think about how you will achieve each step and the reward that you will give yourself when you do. The rewards can be anything you like, perhaps ice cream, new shoes or clothes, the latest high-tech gadget, a book, dinner out, or a massage. For each of the five sub-goals, complete the following statements in writing.</p>
<p><em>STEP 1 My first sub-goal is to… I believe that I can achieve this goal because … To achieve this sub-goal, I will … This will be achieved by the following date: My reward for achieving this will be … STEP 2 My second sub-goal is to …</em></p>
</li>
<li>
<p>What are the benefits of achieving your overall goal? List three important benefits, focusing on how much better life will be for you and those around you. Focus on enjoying the benefits associated with your desired future rather than escaping the negative aspects of your current situation.</p>
</li>
<li>
<p>Going public Whom are you going to tell about your goal and sub-goals? Perhaps your friends, family, or colleagues. Could you describe it on a blog or display it somewhere prominent in your house or at the office?</p>
</li>
</ol>
</li>
<li>
<p>Procrastination is a surprisingly complex phenomenon that can stem from a variety of causes, including fear of failure, perfectionism, low levels of self-control, a tendency to see projects as a whole rather than breaking them into smaller parts, being prone to boredom, the feeling that life is too short to worry about seemingly unimportant tasks, and an inability to accurately estimate how long it takes to do things.</p>
</li>
<li>
<p>One of the most effective states of mind involves people being optimistic about achieving their goal but also realistic about some of the problems that they may encounter.</p>
</li>
<li>
<p>Some research suggests that eating more slowly helps people eat less, perhaps because it fools our brains into thinking that we’ve eaten more and allows extra time for the body to digest food.17</p>
</li>
<li>
<p>The normal-slow combination was even more effective than eating slowly all the way through the meal, suggesting that the secret to feeling satisfied is to start at your normal speed but then savor each and every mouthful.</p>
</li>
<li>
<p>Research shows that just placing food or drink out of sight or moving it a few feet away can have a big effect on consumption.</p>
</li>
<li>
<p>Distractions while eating, such as watching television, reading a magazine, or even chatting with others, encourage people to consume more.</p>
</li>
<li>
<p>Try cutting down on your eating by using smaller bowls, plates, and cutlery.</p>
</li>
</ul>
<h2 id="chapter-4---creativity">Chapter 4 - Creativity</h2>
<ul>
<li>
<p>When people work on their own, their success or failure is entirely the result of their own abilities and hard work. If they do well, the glory is theirs. If they fail, they alone are accountable. However, add other people to the situation, and suddenly everyone stops trying so hard, safe in the knowledge that though individuals will not receive personal praise if the group does well, they can always blame others if it performs badly.</p>
</li>
<li>
<p>When you next want to come up with a creative solution to a problem, try the following technique and see what pops into your mind. If the word-search puzzle is not for you, try tackling a difficult crossword puzzle, Sudoku, or any other task that fully occupies your conscious mind.</p>
</li>
<li>
<p>Here are summaries of each of the techniques and some exercises designed to help you implement them.</p>
</li>
<li>
<p>Prime your mind by working feverishly on a problem, but then give yourself a release of effort by doing something completely different. During the release period, feed your mind with new and diverse ideas by, for example, visiting a museum or an art gallery, paging through magazines or newspapers, going on a train or car journey, or randomly searching the Internet. But don’t push it. Simply immerse yourself in novel ideas and experiences, and leave it up to your brain to find connections and create seemingly serendipitous events.</p>
</li>
<li>
<p>Changing perspective helps produce novel solutions. Try imagining how a child, idiot, friend, artist, or accountant would approach the problem.</p>
</li>
<li>
<p>Alternatively, think about two analogous situations by applying the “is like” rule (e.g., “Attracting more people to my business is like a street entertainer trying to attract a crowd”). How is the problem solved in these situations? Can this idea be applied to your problem?</p>
</li>
<li>
<p>Finally, think about doing the exact opposite of every solution you have created so far. Play. When you are being too serious, your brain becomes constrained. Jump-start your creativity by having some fun. Take a break for fifteen minutes, watch a funny film, or digitally alter a photograph of your colleague so that he or she looks more like an owl.</p>
</li>
<li>
<p>Perceive. When the world becomes too familiar, your brain reverts to automatic pilot and stops seeing what is right in front of your eyes. Try switching your mind to manual by becoming more curious about the world.</p>
</li>
<li>
<p>Ask yourself an interesting question each week. How do elephants communicate over hundreds of miles? Why do people laugh? Why are bananas yellow? How cmoe yuor bairn is albe to udnertsnad tihs snetence eevn tghouh olny the frist and lsat ltetres of ecah wrod are crreoct? Invest some time and energy in trying to discover possible answers to the question, if only for the fun of it.</p>
</li>
<li>
<p>To inspire creative thoughts, place plants and flowers in a room and, if possible, ensure that windows look out on trees and grass, not concrete and steel.</p>
</li>
<li>
<p>Don’t try to fake it. Pictures of waterfalls do not aid innovation, and even high-definition screens showing live camera feeds from natural scenes do not make people feel more relaxed.</p>
</li>
<li>
<p>So if you really cannot introduce nature into a space, head for the nearest green spot. Also, when decorating rooms to inspire creative and innovative thinking, avoid red and go for green. The same concept applies if you are trying to get creative juices flowing for others—prime them with the color green (green folders, green chairs, or even your green clothing).</p>
</li>
<li>
<p>There is a strong link between anxiety and creativity. When people feel worried, they become very focused, concentrate on the task at hand, become risk-averse, rely on well-established habits and routines, and see the world through less-creative eyes.</p>
</li>
<li>
<p>In contrast, when people feel at ease in a situation, they are more likely to explore new and unusual ways of thinking and behaving, see the bigger picture, take risks, and think and act more creatively.</p>
</li>
</ul>
<h2 id="chapter-5---attraction">Chapter 5 - Attraction</h2>
<ul>
<li>
<p>Ask people to look at photographs of one person touching another, and they consistently rate the “toucher” as far more dominant than the “touchee.”</p>
</li>
<li>
<p>If you want to get someone to help you out, try the briefest of touches on the upper arm. The same behavior also increases the likelihood that one person will find another person attractive, providing that the touch is short, confined to the upper arm, and delivered at the same time as a compliment or request. Do be careful, however, because it is easy to get this terribly wrong. Touching is a strong social signal, and even a few inches can make all the difference between the recipient inviting you in for coffee or calling the police.</p>
</li>
<li>
<p>In general, liking lots of others usually means that people will like you. In a more romantic context, however, potential dates want to feel special. Research suggests that they are especially skilled at detecting those who are simply out to meet as many people as possible.</p>
</li>
<li>
<p>So instead of men making a special effort to woo women by describing their tireless work for charity, they should perhaps consider mentioning their love of skydiving, the importance of standing up for what you think is right, and following your heart no matter where it leads.</p>
</li>
<li>
<p>When people find someone attractive, their hearts beat faster.</p>
</li>
<li>
<p>Opposite could also be true. In other words, people whose hearts are beating faster might be more likely to find someone attractive.</p>
</li>
<li>
<p>So, when it comes to that all-important first date, go somewhere scary and don’t be afraid of intimate conversation. Common sense says that your date may find you a tad strange. Science suggests that you will be irresistible.</p>
</li>
<li>
<p>Beat Fast, My Still Heart To help promote the chances of a successful date, choose an activity that is likely to get the heart racing. Avoid slow-moving classical music concerts, countryside walks, and wind chimes. Instead, look toward suspense-filled films, theme parks, and cycle rides. The theory is that your date will attribute a racing heart to you rather than to the activity, and so convince themselves that you have that special something.</p>
</li>
<li>
<p>The Sharing Game When it comes to playing the sharing game, it is a case of taking one step at a time. However, providing that each stage seems appropriate, research suggests that disclosing personal information about yourself and encouraging your date to do the same can significantly speed up those all-important feelings of intimacy.</p>
</li>
<li>
<p>Here are ten questions based on items from Aron’s sharing game to help the process:</p>
<ul>
<li>
<ol>
<li>Imagine hosting the perfect dinner party. You can invite anyone who has ever lived. Whom would you ask?</li>
</ol>
</li>
<li>
<ol start="2">
<li>When did you last talk to yourself?</li>
</ol>
</li>
<li>
<ol start="3">
<li>Name two ways in which you consider yourself lucky.</li>
</ol>
</li>
<li>
<ol start="4">
<li>Name something that you have always wanted to do and explain why you haven’t done it yet.</li>
</ol>
</li>
<li>
<ol start="5">
<li>Imagine that your house or apartment catches fire. You can save only one object. What would it be?</li>
</ol>
</li>
<li>
<ol start="6">
<li>Describe one of the happiest days of your life.</li>
</ol>
</li>
<li>
<ol start="7">
<li>Imagine that you are going to become a close friend with your date. What is the most important thing for him or her to know about you?</li>
</ol>
</li>
<li>
<ol start="8">
<li>Tell your date two things that you really like about him or her.</li>
</ol>
</li>
<li>
<ol start="9">
<li>Describe one of the most embarrassing moments in your life.</li>
</ol>
</li>
<li>
<ol start="10">
<li>Describe a personal problem, and ask your date’s advice on how best to handle it.</li>
</ol>
</li>
</ul>
</li>
<li>
<p>Research shows that women rate a man as more attractive after they’ve seen another woman smiling at him or having a good time in his company.23</p>
</li>
<li>
<p>So instead of rushing in at a hundred smiles an hour from the very start of the evening, try playing slightly hard to get for the first hour or so and then turn on the charm later. Also, rather than chatting about things that you both like, talk about things that you both dislike.</p>
</li>
<li>
<p>People feel closer to each other when they agree about dislikes rather than likes.</p>
</li>
<li>
<p>Initial work suggests that smiles that take longer to spread over a person’s face (more than half a second) are seen as very attractive, especially when accompanied with a slight head tilt toward a partner.</p>
</li>
<li>
<p>The results revealed that for women, increasing a man’s number of previous partners from zero to two made them more desirable, but anything over two was seen as unattractive.</p>
</li>
</ul>
<h2 id="chapter-6---relationships">Chapter 6 - Relationships</h2>
<ul>
<li>
<p>The female usually raises a difficult issue, presents an analysis of the problem, and suggests some possible solutions. Males who are able to accept some of these ideas, and therefore show a sense of power sharing with their partner, are far more likely to maintain a successful relationship. In contrast, couples in which the males react by stonewalling, or even showing contempt, are especially likely to break up.</p>
</li>
<li>
<p>Aron’s work suggests that long-term couples will feel more attracted to each other when they regularly engage in novel and exciting joint activities that involve working together to achieve a goal. This finding is supported by the results of several surveys showing that long-term couples who are happy in their relationships are more likely to take part in leisure activities that involve both partners and are relatively unpredictable, exciting, and active rather than passive.</p>
</li>
<li>
<p>The top-ten list of gestures is shown below, along with the percentage of women who assigned each gesture maximum marks on the “how romantic is this” scale.</p>
<ul>
<li>Cover her eyes and lead her to a lovely surprise—40 percent</li>
<li>Whisk her away somewhere exciting for the weekend—40 percent</li>
<li>Write a song or poem about her—28 percent</li>
<li>Tell her that she is the most wonderful woman that you have ever met—25 percent</li>
<li>Run her a relaxing bath after she has had a bad day at work—22 percent</li>
<li>Send her a romantic text or e-mail, or leave a note around the house—22 percent</li>
<li>Wake her up with breakfast in bed—22 percent Offer her a coat when she is cold—18 percent</li>
<li>Send her a large bouquet of flowers or a box of chocolates at her workplace—16 percent</li>
<li>Make her a mix CD of her favorite music—12 percent</li>
</ul>
</li>
<li>
<p>Surrounding yourself with objects that remind you of your partner is good for your relationship. It could be something that you wear, such as a ring, pendant, or necklace.</p>
<ul>
<li>Or perhaps keep a gift from your partner on display in the home or office.</li>
<li>Or maybe place a photograph of the two of you in a prominent location, or in a wallet or purse.</li>
</ul>
</li>
<li>
<p>Either way, remember that these objects are more than mere tokens of love; they also serve an important psychological function.</p>
</li>
<li>
<p>Not only do they usually evoke happy memories and positive thoughts, but they also activate a deep-seated evolutionary mechanism that helps make temptation far less tempting.</p>
</li>
</ul>
<h2 id="chapter-7---stress">Chapter 7 - Stress</h2>
<ul>
<li>When you experience an event that has the potential to make you feel angry, try the following exercise to ease the pain and help you move on. Spend a few moments thinking about the positive aspects of the event that you found hurtful.</li>
</ul>
<h2 id="chapter-8---decision-making">Chapter 8 - Decision Making</h2>
<ul>
<li>
<p>Beware of people using the “that’s not all” principle, offering unprompted discounts and bargains to get you to part with your money. Likewise, be wary of those who start small and build up or start big and quickly back down to a more “reasonable” offer. Of course, it is also possible to use exactly the same techniques to influence others yourself.</p>
</li>
<li>
<p>When making straightforward decisions, stick with the conscious mind by thinking about the pros and cons and assessing the situation in a rational, levelheaded way. However, for more complex choices, try giving your conscious mind a rest and letting your unconscious work.</p>
</li>
<li>
<p>First, to prevent regret in the first place, adopt a “will do” attitude toward opportunity.</p>
</li>
<li>
<p>Second, if you do regret not doing something, see if there is anything you can do to remedy the situation.</p>
</li>
<li>
<p>Finally, if it really isn’t possible to do anything to make things better, make a mental picture of a fence around the imaginary “what might have been” benefits that might otherwise occupy your thoughts. Instead of dwelling on the positive things that might have happened, spend time thinking about three benefits of your current situation and three negative consequences that could have occurred had you made the decision that’s causing the regret.</p>
</li>
<li>
<p>Extreme maximizers constantly check all available options to make sure that they have picked the best one. In contrast, extreme satisficers look only until they have found something that fulfills their needs. As a result, maximizers objectively achieve more but take longer to find what they want and may be less happy because of a tendency to dwell on how things could have been.</p>
</li>
<li>
<p>For successful lie detection, look for a person suddenly becoming more static and cutting down on their gestures. Also, learn to listen. Be on guard for a sudden decrease in detail, an increase in pauses and hesitations, and an avoidance of the words “me,” “mine,” and “I” but an increase in “her” and “him.” If someone suddenly becomes very evasive, press for a straight answer.</p>
</li>
<li>
<p><strong>Honest baseline.</strong> Before asking questions that are likely to elicit deceptive answers, start with those that are far more likely to make the person respond in an honest way. During these initial answers, develop an understanding of how they behave when they are telling the truth by looking at their body language and listening to the words they say. Then, during the answers to the trickier questions, watch for the behavioral shifts outlined above.</p>
</li>
<li>
<p>Clues are simply an indication that all is perhaps not as it should be—a good reason to dig deeper.</p>
</li>
<li>
<p>The results revealed that people lied in 14 percent of e-mails, 21 percent of texts, 27 percent of face-to-face conversations, and 37 percent of telephone calls. According to Hancock, people are reluctant to lie in e-mails because their words are recorded and what they say can come back to haunt them. So if you want to minimize the risk of a lie, ask others to e-mail you.</p>
</li>
<li>
<p>People have a strong tendency to underestimate how long a project will take and that people working in groups are especially likely to have unrealistic expectations.</p>
</li>
<li>
<p>Even when they are trying to be realistic, people tend to imagine that everything will go according to plan, and they do not consider the inevitable unexpected delays and unforeseen problems.</p>
</li>
</ul>
<h2 id="chapter-10---personality">Chapter 10 - Personality</h2>
<ul>
<li>Psychologists have created several questionnaires to carefully measure people’s responses on each of the Big Five dimensions.</li>
<li>Unfortunately, they tend to involve a large number of questions, and so take a considerable amount of time to complete.</li>
<li>However, some researchers have created a quick and easy version that will help you discover your position on each of the five main dimensions.</li>
<li>It does not provide a perfect description but is a useful guide to the fundamental forces that make up your personality.</li>
</ul>
<h2 id="conclusion">Conclusion</h2>
<ul>
<li><strong>Develop the Gratitude Attitude</strong>. Having people list three things that they are grateful for in life or three events that have gone especially well over the past week can significantly increase their level of happiness for about a month. This, in turn, can cause them to be more optimistic about the future and can improve their physical health.</li>
<li><strong>Be a Giver</strong>. People become much happier after even the smallest acts of kindness. Those who give a few dollars to the needy, buy a small surprise gift for a loved one, donate blood, or help a friend are inclined to experience a fast-acting and significant boost in happiness.</li>
<li><strong>Hang a Mirror in Your Kitchen</strong>. Placing a mirror in front of people when they are presented with different food options results in a remarkable 32 percent reduction in their consumption of unhealthy food. Seeing their own reflection makes them more aware of their body and more likely to eat food that is good for them.</li>
<li><strong>Buy a Potted Plant for the Office</strong>. Adding plants to an office results in a 15 percent boost in the number of creative ideas reported by male employees and helps their female counterparts to produce more original solutions to problems. The plants help reduce stress and induce good moods, which, in turn, promote creativity.</li>
<li><strong>Touch People Lightly on The Upper Arm</strong>. Lightly touching someone on their upper arm makes them far more likely to agree to a request because the touch is unconsciously perceived as a sign of high status. In one dating study, the touch produced a 20 percent increase in the number of people who accepted an invitation to dance in a nightclub and a 10 percent increase in those who would give their telephone number to a stranger on the street.</li>
<li><strong>Deal with Potential Liars by Closing Your Eyes and Asking for an E-mail</strong>. The most reliable cues to lying are in the words that people use, with liars tending to lack detail, use more “ums” and “ahs,” and avoid self-references (“me,” “mine,” “I”). In addition, people are about 20 percent less likely to lie in an e-mail than in a telephone call, because their words are on record and so are more likely to come back and haunt them.</li>
<li><strong>Visualize Yourself Doing, Not Achieving</strong>. People who visualize themselves taking the practical steps needed to achieve their goals are far more likely to succeed than those who simply fantasize about their dreams becoming a reality. One especially effective technique involves adopting a third-person perspective: those who visualize themselves as others see them are about 20 percent more successful than those who adopt a first-person point of view.</li>
</ul>
]]></content>
        </item>
        
        <item>
            <title>Automatic Type Annotations in Python</title>
            <link>https://blog.miguens.one/posts/2021/06/automatic-type-annotations-in-python/</link>
            <pubDate>Thu, 17 Jun 2021 00:00:00 +0000</pubDate>
            
            <guid>https://blog.miguens.one/posts/2021/06/automatic-type-annotations-in-python/</guid>
            <description>&lt;p&gt;In a previous post, I explained how to use type annotations in Python. You can find the post &lt;a href=&#34;https://blog.miguens.one/posts/2021/05/type-annotations-in-python/&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Now, we will see how to migrate code without type annotations using two tools: pyannotate and MonkeyType&lt;/p&gt;
&lt;h2 id=&#34;pyannotate&#34;&gt;pyannotate&lt;/h2&gt;
&lt;p&gt;Pyannotate is a project started by Dropbox and published in &lt;a href=&#34;https://github.com/dropbox/pyannotate&#34;&gt;Github&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;It is intended to be used alongside your test scripts. It requires minor modifications to your existing code to add &lt;em&gt;start&lt;/em&gt; and &lt;em&gt;stop&lt;/em&gt; statements. The statements mentioned will indicate where pyannotate should record the types.&lt;/p&gt;</description>
            <content type="html"><![CDATA[<p>In a previous post, I explained how to use type annotations in Python. You can find the post <a href="https://blog.miguens.one/posts/2021/05/type-annotations-in-python/">here</a>.</p>
<p>Now, we will see how to migrate code without type annotations using two tools: pyannotate and MonkeyType</p>
<h2 id="pyannotate">pyannotate</h2>
<p>Pyannotate is a project started by Dropbox and published in <a href="https://github.com/dropbox/pyannotate">Github</a>.</p>
<p>It is intended to be used alongside your test scripts. It requires minor modifications to your existing code to add <em>start</em> and <em>stop</em> statements. The statements mentioned will indicate where pyannotate should record the types.</p>
<p>The tool works in two steps: First, it will monitor the execution of the tests and record the types, and the second step is to write the type into our existing code.</p>
<p>Pyannotate allows us to use python annotations or to save the type as comments in our source code. The last option is handy if we are dealing with legacy code in Python 2</p>
<h3 id="example">Example</h3>
<p>We need to install the package: <code>pip install pyannotate</code></p>
<p>I will reuse the example of my previous post regarding python annotations:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-Python" data-lang="Python"><span style="display:flex;"><span><span style="color:#66d9ef">def</span> <span style="color:#a6e22e">print_me</span>(message):
</span></span><span style="display:flex;"><span>    <span style="color:#e6db74">&#39;&#39;&#39;
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">    This function prints a message
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">    &#39;&#39;&#39;</span>
</span></span><span style="display:flex;"><span>    world_string <span style="color:#f92672">=</span> <span style="color:#e6db74">&#39;World&#39;</span>
</span></span><span style="display:flex;"><span>    print(message <span style="color:#f92672">+</span> <span style="color:#e6db74">&#39; &#39;</span> <span style="color:#f92672">+</span> world_string)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>print_me(<span style="color:#e6db74">&#39;Hello&#39;</span>)
</span></span></code></pre></div><p>I will modify the code above to include the calls required by pyannotate to collect the data:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-Python" data-lang="Python"><span style="display:flex;"><span><span style="color:#f92672">from</span> pyannotate_runtime <span style="color:#f92672">import</span> collect_types
</span></span><span style="display:flex;"><span>collect_types<span style="color:#f92672">.</span>init_types_collection()
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">def</span> <span style="color:#a6e22e">print_me</span>(message):
</span></span><span style="display:flex;"><span>    <span style="color:#e6db74">&#39;&#39;&#39;
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">    This function prints a message
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">    &#39;&#39;&#39;</span>
</span></span><span style="display:flex;"><span>    world_string <span style="color:#f92672">=</span> <span style="color:#e6db74">&#39;World&#39;</span>
</span></span><span style="display:flex;"><span>    print(message <span style="color:#f92672">+</span> <span style="color:#e6db74">&#39; &#39;</span> <span style="color:#f92672">+</span> world_string)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>collect_types<span style="color:#f92672">.</span>start()
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>print_me(<span style="color:#e6db74">&#39;Hello&#39;</span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>collect_types<span style="color:#f92672">.</span>stop()
</span></span><span style="display:flex;"><span>collect_types<span style="color:#f92672">.</span>dump_stats(<span style="color:#e6db74">&#39;example-types.dump&#39;</span>)
</span></span></code></pre></div><p>After running our program <code>python example.py</code>, we should see a new file generated in the same folder: <code>example-types.dump</code>. The file contains the information about the type annotations.</p>
<p>Finally, we can run: <code>pyannotate --type-info example-types.dump --py3 -w example.py</code>. The example file is modified to include the type annotations in the <code>print_me</code> function.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-Python" data-lang="Python"><span style="display:flex;"><span>[<span style="color:#f92672">...</span>]
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">def</span> <span style="color:#a6e22e">print_me</span>(message: str) <span style="color:#f92672">-&gt;</span> <span style="color:#66d9ef">None</span>:
</span></span><span style="display:flex;"><span>[<span style="color:#f92672">...</span>]
</span></span></code></pre></div><h2 id="monkeytype">MonkeyType</h2>
<p>MonkeyType was developed by Instagram and released in <a href="https://github.com/Instagram/MonkeyType">Github</a>.</p>
<p>The difference with pyannotate is that we don&rsquo;t need to modify our existing code. Instead, call our program running <code>monkeytype</code>, replacing the usual call to our python interpreter.</p>
<p>As pyannotate, MonkeyType also requires two steps: A first step to collect the types and a second step to apply the steps. The tool allows us to modify our code directly with the detected types or create python stubs (<code>.ipyi</code> files).</p>
<p>Python stub contains information about the signatures of the functions but not the implementation. So from that point of view, it is very similar to <code>.h</code>  files (if you are familiar with C++).</p>
<h3 id="example-1">Example</h3>
<p>First, let&rsquo;s proceed to install the program: <code>pip install monkeytype</code></p>
<p>Again, I will reuse the previous example, but I will save the logic as a module (as monkeytype operates with modules)</p>
<p>My module (<code>print_me/__init__.py</code>)</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-Python" data-lang="Python"><span style="display:flex;"><span><span style="color:#66d9ef">def</span> <span style="color:#a6e22e">print_me</span>(message):
</span></span><span style="display:flex;"><span>    <span style="color:#e6db74">&#39;&#39;&#39;
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">    This function prints a message
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">    &#39;&#39;&#39;</span>
</span></span><span style="display:flex;"><span>    world_string <span style="color:#f92672">=</span> <span style="color:#e6db74">&#39;World&#39;</span>
</span></span><span style="display:flex;"><span>    print(message <span style="color:#f92672">+</span> <span style="color:#e6db74">&#39; &#39;</span> <span style="color:#f92672">+</span> world_string)
</span></span></code></pre></div><p>My example (<code>example.py</code>):</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-Python" data-lang="Python"><span style="display:flex;"><span><span style="color:#f92672">import</span> print_me
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>print_me<span style="color:#f92672">.</span>print_me(<span style="color:#e6db74">&#39;Hello&#39;</span>)
</span></span></code></pre></div><p>We can run our program, but using monkeytype rather than Python: <code>monkeytype run example.py</code>. After running the program, you will see a monkeytype.sqlite3. The file is the database with the information of annotations type obtained during the execution of the example.</p>
<p>Last, we can apply the types to our existing code running: <code>monkeytype apply print_me</code>, and we can see the changes in the <code>print_me/__init__.py</code> file:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-Python" data-lang="Python"><span style="display:flex;"><span>[<span style="color:#f92672">...</span>]
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">def</span> <span style="color:#a6e22e">print_me</span>(message: str) <span style="color:#f92672">-&gt;</span> <span style="color:#66d9ef">None</span>:
</span></span><span style="display:flex;"><span>[<span style="color:#f92672">...</span>]
</span></span></code></pre></div><h2 id="conclusion">Conclusion</h2>
<p>We have studied two tools that will allow us to migrate code automatically with type annotations. The advantage, in the long term, is to avoid bugs and make our code mode readable. Of course, it is wise to use these tools with a revision control system to monitor the changes made automatically and adjust if necessary.</p>
]]></content>
        </item>
        
        <item>
            <title>Getting to Yes: Negotiating Agreement Without Giving In</title>
            <link>https://blog.miguens.one/posts/2021/06/getting-to-yes-negotiating-agreement-without-giving-in/</link>
            <pubDate>Sun, 13 Jun 2021 00:00:00 +0000</pubDate>
            
            <guid>https://blog.miguens.one/posts/2021/06/getting-to-yes-negotiating-agreement-without-giving-in/</guid>
            <description>&lt;p&gt;Here are my notes of &lt;strong&gt;Getting to Yes: Negotiating Agreement Without Giving In&lt;/strong&gt;
&lt;em&gt;by Roger Fisher and William Ury&lt;/em&gt;&lt;/p&gt;
&lt;h2 id=&#34;1-dont-bargain-over-positions&#34;&gt;1 Don’t Bargain Over Positions&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Arguing over positions is inefficient&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Bargaining over positions creates incentives that stall settlement. In positional bargaining you try to improve the chance that any settlement reached is favorable to you by starting with an extreme position, by stubbornly holding to it, by deceiving the other party as to your true views, and by making small concessions only as necessary to keep the negotiation going.&lt;/p&gt;</description>
            <content type="html"><![CDATA[<p>Here are my notes of <strong>Getting to Yes: Negotiating Agreement Without Giving In</strong>
<em>by Roger Fisher and William Ury</em></p>
<h2 id="1-dont-bargain-over-positions">1 Don’t Bargain Over Positions</h2>
<ul>
<li>
<p>Arguing over positions is inefficient</p>
</li>
<li>
<p>Bargaining over positions creates incentives that stall settlement. In positional bargaining you try to improve the chance that any settlement reached is favorable to you by starting with an extreme position, by stubbornly holding to it, by deceiving the other party as to your true views, and by making small concessions only as necessary to keep the negotiation going.</p>
</li>
<li>
<p>When there are many parties, positional bargaining is even worse</p>
</li>
<li>
<p>Once they have painfully developed and agreed upon a position, it becomes much harder to change it. Altering a position proves equally difficult when additional participants are higher authorities who, while absent from the table, must nevertheless give their approval.</p>
</li>
<li>
<p>Pursuing a soft and friendly form of positional bargaining makes you vulnerable to someone who plays a hard game of positional bargaining.</p>
</li>
<li>
<p>Each move you make within a negotiation is not only a move that deals with rent, salary, or other substantive questions; it also helps structure the rules of the game you are playing.</p>
</li>
<li>
<p>These four points define a straightforward method of negotiation that can be used under almost any circumstance.</p>
</li>
</ul>
<ol>
<li>
<p>People:    Separate the people from the problem.</p>
</li>
<li>
<p>Interests:    Focus on interests, not positions.</p>
</li>
<li>
<p>Options:    Invent multiple options looking for mutual gains before deciding what to do.</p>
</li>
<li>
<p>Criteria:    Insist that the result be based on some objective standard.</p>
</li>
</ol>
<ul>
<li>Trying to decide in the presence of an adversary narrows your vision. Having a lot at stake inhibits creativity.</li>
</ul>
<h2 id="2-separate-the-people-from-the-problem">2 Separate the People from the Problem</h2>
<ul>
<li>
<p>Every negotiator has two kinds of interests: in the substance and in the relationship</p>
</li>
<li>
<p>Disentangle the relationship from the substance; deal directly with the people problem</p>
</li>
</ul>
<h3 id="perception">Perception</h3>
<ul>
<li>
<p>Put yourself in their shoes.</p>
</li>
<li>
<p>Don’t blame them for your problem.</p>
</li>
<li>
<p>But even if blaming is justified, it is usually counterproductive.</p>
</li>
<li>
<p>Discuss each other’s perceptions.</p>
</li>
<li>
<p>Look for opportunities to act inconsistently with their perceptions.</p>
</li>
<li>
<p>Give them a stake in the outcome by making sure they participate in the process.</p>
</li>
<li>
<p>Pay attention to “core concerns.”</p>
</li>
<li>
<p>Many emotions in negotiation are driven by a core set of five interests: autonomy, the desire to make your own choices and control your own fate; appreciation, the desire to be recognized and valued; affiliation, the desire to belong as an accepted member of some peer group; role, the desire to have a meaningful purpose; and status, the desire to feel fairly seen and acknowledged.</p>
</li>
<li>
<p>Consider the role of identity.</p>
</li>
<li>
<p>As human beings, we apply our general tendency toward either-or thinking to our self-perception: “I am a kind person.” “I’m a good manager.”</p>
</li>
<li>
<p>If you find a counterpart’s behavior oddly out of character or feel as if you have unexpectedly stepped on a land mine in your conversation, think about whether they might be experiencing a threat to their identity from something you have said or might say.</p>
</li>
</ul>
<h3 id="make-emotions-explicit-and-acknowledge-them-as-legitimate">Make emotions explicit and acknowledge them as legitimate.</h3>
<ul>
<li>
<p>Allow the other side to let off steam.</p>
</li>
<li>
<p>People obtain psychological release through the simple process of recounting their grievances to an attentive audience.</p>
</li>
</ul>
<h3 id="use-symbolic-gestures">Use symbolic gestures.</h3>
<ul>
<li>On many occasions an apology can defuse emotions effectively, even when you do not acknowledge personal responsibility for the action or admit an intention to harm. An apology may be one of the least costly and most rewarding investments you can make.</li>
</ul>
<h3 id="communication">Communication</h3>
<ul>
<li>
<p>Negotiation is a process of communicating back and forth for the purpose of reaching a joint decision. Communication is never an easy thing, even between people who have an enormous background of shared values and experience.</p>
</li>
<li>
<p>Frequently each side has given up on the other and is no longer attempting any serious communication with it. Instead they talk merely to impress third parties or their own constituency.</p>
</li>
<li>
<p>Effective communication between the parties is all but impossible if each plays to the gallery.</p>
</li>
<li>
<p>To reduce the dominating and distracting effect that the press, home audiences, and third parties may have, it is useful to establish private and confidential means of communicating with the other side.</p>
</li>
<li>
<p>Important decisions are typically made when no more than two people are in the room.</p>
</li>
<li>
<p>Speak about yourself, not about them.</p>
</li>
<li>
<p>“I feel let down” instead of “You broke your word.”</p>
</li>
<li>
<p>Speak for a purpose.</p>
</li>
</ul>
<h3 id="prevention-works-best">Prevention works best</h3>
<ul>
<li>
<p>The techniques just described for dealing with problems of perception, emotion, and communication usually work well. However, the best time for handling people problems is before they become people problems.</p>
</li>
<li>
<p>Face the problem, not the people.</p>
</li>
<li>
<p>Separating the people from the problem is not something you can do once and forget about; you have to keep working at it. The basic approach is to deal with the people as human beings and with the problem on its merits.</p>
</li>
</ul>
<h2 id="3-focus-on-interests-not-positions">3 Focus on Interests, Not Positions</h2>
<ul>
<li>
<p>Reconciling interests rather than positions works for two reasons. First, for every interest there usually exist several possible positions that could satisfy it.</p>
</li>
<li>
<p>Behind opposed positions lie shared and compatible interests, as well as conflicting ones. We tend to assume that because the other side’s positions are opposed to ours, their interests must also be opposed.</p>
</li>
</ul>
<h2 id="4-invent-options-for-mutual-gain">4 Invent Options for Mutual Gain</h2>
<ul>
<li>Thinking that “solving their problem is their problem”</li>
</ul>
<h3 id="prescription">PRESCRIPTION</h3>
<ul>
<li>
<p>Separate inventing from deciding</p>
</li>
<li>
<p>Before brainstorming:</p>
</li>
</ul>
<ol>
<li>
<p>Define your purpose.</p>
</li>
<li>
<p>Choose a few participants.</p>
</li>
<li>
<p>Change the environment.</p>
</li>
<li>
<p>Design an informal atmosphere.</p>
</li>
<li>
<p>Choose a facilitator.</p>
</li>
</ol>
<ul>
<li>During brainstorming:</li>
</ul>
<ol>
<li>Seat the participants</li>
<li>Clarify the ground rules, including the no-criticism rule.</li>
<li>Brainstorm.</li>
<li>Record the ideas in full view.</li>
</ol>
<ul>
<li>After brainstorming:</li>
</ul>
<ol>
<li>Star the most promising ideas.</li>
<li>Invent improvements for promising ideas.</li>
<li>Set up a time to evaluate ideas and decide.</li>
</ol>
<ul>
<li>
<p>Consider brainstorming with the other side.</p>
</li>
<li>
<p>Make their decision easy</p>
</li>
<li>
<p>Since success for you in a negotiation depends upon the other side’s making a decision you want, you should do what you can to make that decision an easy one. Rather than make things difficult for the other side, you want to confront them with a choice that is as painless as possible. Impressed with the merits of their own case, people usually pay too little attention to ways of advancing their case by taking care of interests on the other side.</p>
</li>
<li>
<p>Making threats is not enough. In addition to the content of the decision you would like them to make, you will want to consider from their point of view the consequences of following that decision. If you were they, what results would you most fear? What would you hope for?</p>
</li>
<li>
<p>We often try to influence others by threats and warnings of what will happen if they do not decide as we would like. Offers are usually more effective.</p>
</li>
</ul>
<h2 id="6-what-if-they-are-more-powerful">6 What If They Are More Powerful?</h2>
<ul>
<li>The most any method of negotiation can do is to meet two objectives: first, to protect you against making an agreement you should reject and second, to help you make the most of the assets you do have so that any agreement you reach will satisfy your interests as well as possible.</li>
</ul>
<h3 id="protecting-yourself">Protecting yourself</h3>
<ul>
<li>
<p>Negotiators commonly try to protect themselves against such an outcome by establishing in advance the worst acceptable outcome—their “bottom line.”</p>
</li>
<li>
<p>But the protection afforded by adopting a bottom line involves high costs. It limits your ability to benefit from what you learn during negotiation.</p>
</li>
<li>
<p>A bottom line also inhibits imagination. It reduces the incentive to invent a tailor-made solution that would reconcile differing interests in a way more advantageous for both you and them.</p>
</li>
<li>
<p>The reason you negotiate is to produce something better than the results you can obtain without negotiating. What are those results? What is that alternative? What is your BATNA—your Best Alternative To a Negotiated Agreement?</p>
</li>
<li>
<p>The insecurity of an unknown BATNA. If you have not thought carefully about what you will do if you fail to reach an agreement, you are negotiating with your eyes closed.</p>
</li>
<li>
<p>In most circumstances, however, the greater danger is that you are too committed to reaching agreement. Not having developed any alternative to a negotiated solution, you are unduly pessimistic about what would happen if negotiations broke off.</p>
</li>
<li>
<p>Formulate a trip wire.</p>
</li>
<li>
<p>To give you early warning that the content of a possible agreement is beginning to run the risk of being too unattractive, it is useful to identify one far from perfect agreement that is better than your BATNA.</p>
</li>
<li>
<p>The better your BATNA, the greater your power.</p>
</li>
<li>
<p>What is true for negotiations between individuals is equally true for negotiations between organizations. The relative negotiating power of a large industry and a small town trying to raise taxes on a factory is determined not by the relative size of their respective budgets, or their political clout, but by each side’s best alternative.</p>
</li>
<li>
<p>Generating possible BATNAs requires three distinct operations:</p>
</li>
</ul>
<ol>
<li>inventing a list of actions you might conceivably take if no agreement is reached;</li>
<li>improving some of the more promising ideas and converting them into practical alternatives; and</li>
<li>selecting, tentatively, the one alternative that seems best.</li>
</ol>
<ul>
<li>
<p>The desirability of disclosing your BATNA to the other side depends upon your assessment of the other side’s thinking.</p>
</li>
<li>
<p>If your best alternative to a negotiated agreement is worse for you than they think, disclosing it will weaken rather than strengthen your hand.</p>
</li>
<li>
<p>Consider the other side’s BATNA. You should also think about the alternatives to a negotiated agreement available to the other side.</p>
</li>
<li>
<p>If they appear to overestimate their BATNA, you will want to help them think through whether their expectations are realistic.</p>
</li>
<li>
<p>If both sides have attractive BATNAs, the best outcome of the negotiation—for both parties—may well be not to reach agreement.</p>
</li>
<li>
<p>The stronger they appear in terms of physical or economic power, the more you benefit by negotiating on the merits.</p>
</li>
<li>
<p>The more easily and happily you can walk away from a negotiation, the greater your capacity to affect its outcome.</p>
</li>
</ul>
<h2 id="7-what-if-they-wont-play">7 What If They Won’t Play?</h2>
<h3 id="negotiation-jujitsu">Negotiation jujitsu</h3>
<ul>
<li>
<p>If the other side announces a firm position, you may be tempted to criticize and reject it.</p>
</li>
<li>
<p>If you do, you will end up playing the positional bargaining game.</p>
</li>
<li>
<p>Rejecting their position only locks them in. Defending your proposal only locks you in.</p>
</li>
<li>
<p>How can you prevent the cycle of action and reaction? Do not push back.</p>
</li>
<li>
<p>When they assert their positions, do not reject them. When they attack your ideas, don’t defend them. When they attack you, don’t counterattack.</p>
</li>
<li>
<p>Don’t attack their position, look behind it.</p>
</li>
<li>
<p>Don’t defend your ideas, invite criticism and advice.</p>
</li>
<li>
<p>Recast an attack on you as an attack on the problem.</p>
</li>
<li>
<p>Ask questions and pause.</p>
</li>
<li>
<p>The first is to use questions instead of statements. Statements generate resistance, whereas questions generate answers. Questions allow the other side to get their points across and let you understand them.</p>
</li>
<li>
<p>Silence is one of your best weapons. Use it. If they have made an unreasonable proposal or an attack you regard as unjustified, the best thing to do may be to sit there and not say a word.</p>
</li>
<li>
<p>If you have asked an honest question to which they have provided an insufficient answer, just wait.</p>
</li>
<li>
<p>Silence often creates the impression of a stalemate</p>
</li>
<li>
<p>Don’t take them off the hook by going right on with another question or some comment of your own.</p>
</li>
<li>
<p>Note that in most situations you do not have to get anyone’s consent to start using the one-text procedure. Simply prepare a draft and ask for criticism.</p>
</li>
<li>
<p>“Please correct me if I’m wrong”</p>
</li>
<li>
<p>“We appreciate what you’ve done for us”</p>
</li>
<li>
<p>“Our concern is fairness”</p>
</li>
<li>
<p>“We would like to settle this on the basis of independent standards, not of who can do what to whom”</p>
</li>
<li>
<p>“Trust is a separate Issue”</p>
</li>
<li>
<p>“Let me see if I understand what you’re saying”</p>
</li>
<li>
<p>In principled negotiation you present your reasons first before offering a proposal. If principles come afterward, they appear not as the objective criteria that any proposal should satisfy but as mere justifications for an arbitrary position.</p>
</li>
</ul>
<h2 id="8-what-if-they-use-dirty-tricks">8 What If They Use Dirty Tricks?</h2>
<ul>
<li>
<p>Common response is to respond in kind. If they start outrageously high, you start outrageously low. If they are deceptive, so are you. If they make threats, you make counter-threats.</p>
</li>
<li>
<p>Effective counter to a one-sided substantive proposal is to examine the legitimacy of the principle that the proposal reflects. Tricky bargaining tactics are in effect one-sided proposals about negotiating procedure, about the negotiating game that the parties are going to play. To counter them, you will want to engage in principled negotiation about the negotiating process.</p>
</li>
<li>
<p>Discussing the tactic not only makes it less effective, it also may cause the other side to worry about alienating you completely.</p>
</li>
<li>
<p>The most important purpose of bringing the tactic up explicitly, however, is to give you an opportunity to negotiate about the rules of the game.</p>
</li>
<li>
<p>Separate the people from the problem.</p>
</li>
<li>
<p>Focus on interests, not positions.</p>
</li>
<li>
<p>Invent options for mutual gain.</p>
</li>
<li>
<p>Insist on using objective criteria.</p>
</li>
</ul>
<h3 id="some-common-tricks">Some common tricks</h3>
<ol>
<li>Ambiguous authority.</li>
</ol>
<blockquote>
<p>After they have pressed you as hard as they can and you have worked out what you believe to be a firm agreement, they announce that they must take it to someone else for approval. This technique is designed to give them a “second bite at the apple.”</p></blockquote>
<blockquote>
<p>Make concessions, only you will make concessions. Do not assume that the other side has full authority just because they are there negotiating with you.</p></blockquote>
<blockquote>
<p>Before starting on any give-and-take, find out about the authority on the other side.</p></blockquote>
<blockquote>
<p>Insist on reciprocity. “All right. We will treat it as a joint draft to which neither side is committed.</p></blockquote>
<blockquote>
<p>“If your boss approves this draft tomorrow, I’ll stick by it. Otherwise each of us should feel free to propose changes.”</p></blockquote>
<blockquote>
<p>“nothing is agreed until everything is agreed,”</p></blockquote>
<p>so that any effort to reopen one issue automatically reopens all issues.</p>
<ol start="2">
<li>Dubious intentions.</li>
</ol>
<blockquote>
<p>Where the issue is one of possible misrepresentation of their intention to comply with the agreement, it is often possible to build compliance features into the agreement itself.</p></blockquote>
<blockquote>
<p>Less than full disclosure is not the same as deception.</p></blockquote>
<blockquote>
<p>Good faith negotiation does not require total disclosure.</p></blockquote>
<ol start="3">
<li>Psychological warfare</li>
</ol>
<p><strong>Stressful situations.</strong></p>
<blockquote>
<p>Contrary to the accepted wisdom, it is sometimes advantageous to accept an offer to meet on the other side’s turf. It may put them at ease, making them more open to your suggestions.</p></blockquote>
<blockquote>
<p>Be aware that the setting might have been deliberately designed to make you want to conclude negotiations promptly and, if necessary, to yield points to do so. If you find the physical surroundings prejudicial, do not hesitate to say so.</p></blockquote>
<p><strong>Personal attacks.</strong></p>
<blockquote>
<p>The good-guy/bad-guy routine.</p></blockquote>
<blockquote>
<p>Threats. Threats are one of the most abused tactics in negotiation.</p></blockquote>
<blockquote>
<p>You can also warn the other side about your likely actions in the event of no agreement, so long as you can show how those actions are intended to safeguard your interests, not to coerce or punish the other side.</p></blockquote>
<ol start="4">
<li>Positional pressure tactics</li>
</ol>
<p><strong>Refusal to negotiate.</strong></p>
<blockquote>
<p>First, recognize the tactic as a possible negotiating ploy: an attempt to use their entry into negotiation as a bargaining chip to obtain some concession on substance.</p></blockquote>
<blockquote>
<p>Second, talk about their refusal to negotiate. Communicate either directly or through third parties.</p></blockquote>
<p><strong>Extreme demands.</strong></p>
<blockquote>
<p>Bringing the tactic to their attention works well here. Ask for principled justification of their position until it looks ridiculous even to them.</p></blockquote>
<p><strong>Escalating demands.</strong></p>
<blockquote>
<p>A negotiator may raise one of his demands for every concession he makes on another.</p></blockquote>
<blockquote>
<p>Psychological effect of making you want to agree quickly before he raises any more of his demands.</p></blockquote>
<blockquote>
<p>But lock-in tactics are gambles. You may call the other side’s bluff and force them to make a concession, which they will then have to explain to their constituency.</p></blockquote>
<blockquote>
<p>Like threats, lock-in tactics depend on communication.</p></blockquote>
<p><strong>A calculated delay.</strong></p>
<blockquote>
<p>Postpone coming to a decision until a time they think favorable.</p></blockquote>
<p><strong>“Take it or leave it.”</strong></p>
<blockquote>
<p>As an alternative to explicitly recognizing the “Take it or leave it” tactic and negotiating about it, consider ignoring it at first. Keep talking as if you didn’t hear it, or change the subject, perhaps by introducing other solutions.</p></blockquote>
<h2 id="in-conclusion">In Conclusion</h2>
<ul>
<li>
<p>If your BATNA is fine and negotiation looks unpromising, there is no reason to invest much time in negotiation.</p>
</li>
<li>
<p>Don’t assume that you have a BATNA better than negotiating or that you don’t. Think it through. Then decide whether negotiating makes sense.</p>
</li>
</ul>
]]></content>
        </item>
        
        <item>
            <title>Bargaining with the Devil: When to Negotiate, When to Fight</title>
            <link>https://blog.miguens.one/posts/2021/06/bargaining-with-the-devil-when-to-negotiate-when-to-fight/</link>
            <pubDate>Sat, 12 Jun 2021 00:00:00 +0000</pubDate>
            
            <guid>https://blog.miguens.one/posts/2021/06/bargaining-with-the-devil-when-to-negotiate-when-to-fight/</guid>
            <description>&lt;p&gt;Notes of the book:&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Bargaining with the Devil: When to Negotiate, When to Fight&lt;/strong&gt;
&lt;em&gt;by Mnookin, Robert&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;First, for an act to be evil, the perpetrator must intend to inflict harm. Carelessness is not enough. Second, the harm must be very serious. I use the word grievous to connote harms that are severe. Third, the infliction of harm must lack an adequate justification or excuse.&lt;/p&gt;
&lt;h2 id=&#34;interests&#34;&gt;Interests&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;What are my interests? What are my adversary’s interests?&lt;/strong&gt;&lt;/p&gt;</description>
            <content type="html"><![CDATA[<p>Notes of the book:</p>
<p><strong>Bargaining with the Devil: When to Negotiate, When to Fight</strong>
<em>by Mnookin, Robert</em></p>
<p>First, for an act to be evil, the perpetrator must intend to inflict harm. Carelessness is not enough. Second, the harm must be very serious. I use the word grievous to connote harms that are severe. Third, the infliction of harm must lack an adequate justification or excuse.</p>
<h2 id="interests">Interests</h2>
<p><strong>What are my interests? What are my adversary’s interests?</strong></p>
<ul>
<li>
<p>When individuals are in conflict, they often think in terms of “positions”—what they want or demand. Interests are the fundamental needs and concerns that lie underneath positions. There is only one way to meet a position, but often many ways to serve an interest.</p>
</li>
<li>
<p>People in conflict often find it difficult to articulate their interests. This is usually because they haven’t thought about them, or are not used to thinking about goals on this level. They know what they want—or what they say they want—but not why they want it.</p>
</li>
<li>
<p>What are my basic goals in this situation? What am I trying to achieve—and why? In the big scheme of things, what’s important to me?</p>
</li>
<li>
<p>Next, given the available information, what do you know about your adversary’s interests? What do they value—and why?</p>
</li>
</ul>
<h2 id="alternatives">Alternatives</h2>
<p><strong>What are my alternatives to negotiation? What are my adversary’s?</strong></p>
<ul>
<li>Once you have evaluated your alternatives, identify the best of the lot. This is your Best Alternative to a Negotiated Agreement, or “BATNA.”</li>
</ul>
<h2 id="negotiated-outcomes">Negotiated outcomes</h2>
<p><strong>Are there potential negotiated outcomes that can satisfy both sides’ interests better than our respective alternatives to negotiation?</strong></p>
<h2 id="costs">Costs</h2>
<p><strong>What are the expected costs of negotiation?</strong></p>
<ul>
<li>
<p>Transaction Costs: The negotiation process involves costs in terms of time, money, manpower, and other resources.</p>
</li>
<li>
<p>The negotiation process may also impose costs arising from the disclosure of information.</p>
</li>
<li>
<p>Spillover Costs: Negotiating with one party may adversely affect you in future dealings with other parties. One such cost may involve reputation.</p>
</li>
<li>
<p>A related spillover cost concerns precedent.</p>
</li>
</ul>
<h2 id="implementation">Implementation:</h2>
<p><strong>If a deal is struck, will it be implemented?</strong></p>
<ul>
<li>
<p>Put a great deal of effort into preventing such defections by building penalties into the deal.</p>
</li>
<li>
<p>With an adversary who has violated agreements in the past, the lack of any enforcement mechanism may be a deal killer.</p>
</li>
<li>
<p>What issues of recognition and legitimacy are implicated in my decision?</p>
</li>
</ul>
<h2 id="conclusion">CONCLUSION</h2>
<p>There are also deeper critiques of cost-benefit analysis,</p>
<ul>
<li>
<p>The first is that it favors analytic over intuitive reasoning.</p>
<ul>
<li>The analytic side of the brain doesn’t understand intuition, so it may discount or ignore valuable information.</li>
</ul>
</li>
<li>
<p>A second criticism of cost-benefit analysis is that it values pragmatic concerns over moral categorical principles.</p>
<ul>
<li>
<p>Get advice from others in evaluating the alternatives: don’t do the analysis alone.</p>
</li>
<li>
<p>Have a presumption in favor of negotiation, but make it rebuttable.</p>
</li>
<li>
<p>If you think the costs and benefits of negotiating are roughly equal to those of not negotiating, I would apply a presumption in favor of negotiation.</p>
</li>
<li>
<p>When deciding on behalf of others, don’t allow your own moral intuitions to override a pragmatic assessment.</p>
</li>
</ul>
</li>
</ul>
]]></content>
        </item>
        
        <item>
            <title>How to download all certificates of UDEMY</title>
            <link>https://blog.miguens.one/posts/2021/06/how-to-download-all-certificates-of-udemy/</link>
            <pubDate>Sun, 06 Jun 2021 00:00:00 +0000</pubDate>
            
            <guid>https://blog.miguens.one/posts/2021/06/how-to-download-all-certificates-of-udemy/</guid>
            <description>&lt;p&gt;A simple script using Selenium to download all the certicates of Udemy, as they do not provide API&lt;/p&gt;
&lt;p&gt;There is room for improvement, mostly removing the time.sleep calls. That part of code is there because the initial load of the page does not provide that data, as it is query via an internal API and the data fill with JavaScript.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;from&lt;/span&gt; selenium &lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; webdriver
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; time
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; os
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;from&lt;/span&gt; urllib.parse &lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; urlparse
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; requests
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;USERNAME&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;xxxx@gmail.com&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;PASSWORD&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;xxxxxx&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;LOGIN_WEBPAGE&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;https://www.udemy.com/join/login-popup/?skip_suggest=1&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;USERNAME_XPATH&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;//*[@id=&amp;#34;email--1&amp;#34;]&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;PASSWORD_XPATH&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;//*[@id=&amp;#34;id_password&amp;#34;]&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;LOGIN_BUTTON&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;//*[@id=&amp;#34;submit-id-submit&amp;#34;]&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;do_login&lt;/span&gt;(driver):
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    driver&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;get(LOGIN_WEBPAGE)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    driver&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;find_element_by_xpath(USERNAME_XPATH)&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;send_keys(USERNAME)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    driver&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;find_element_by_xpath(PASSWORD_XPATH)&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;send_keys(PASSWORD)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    driver&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;find_element_by_xpath(LOGIN_BUTTON)&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;click()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;get_number_pages&lt;/span&gt;(driver, webpage):
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    driver&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;get(webpage &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;?p=1&amp;#39;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    time&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;sleep(&lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;) &lt;span style=&#34;color:#75715e&#34;&gt;# Some Javascript in Udemy makes detecting the courses slow&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    elems &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; driver&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;find_elements_by_xpath(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;//a[@href]&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    number &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; elem &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; elems:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; webpage &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; elem&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;get_attribute(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;href&amp;#34;&lt;/span&gt;):
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            text &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; elem&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;get_attribute(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;href&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            elems &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; text&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;split(webpage &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;?p=&amp;#39;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; len(elems) &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                new_number &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; int(elems[&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;])
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; new_number &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; number:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                    number &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; new_number
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; number
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;COURSES_WEBPAGE&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;https://www.udemy.com/home/my-courses/&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;CATEGORIES_COURSES&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;learning/&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;archived/&amp;#39;&lt;/span&gt;]
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;get_courses_id_by_pagination&lt;/span&gt;(driver, webpage):
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    driver&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;get(webpage)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    time&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;sleep(&lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;) &lt;span style=&#34;color:#75715e&#34;&gt;# Some Javascript in Udemy makes detecting the courses slow&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    elems &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; driver&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;find_elements_by_xpath(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;//a[@href]&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    result &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; set()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; elem &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; elems:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;?course_id=&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; elem&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;get_attribute(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;href&amp;#34;&lt;/span&gt;):
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            text &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; elem&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;get_attribute(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;href&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            elems &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; text&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;split(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;?course_id=&amp;#39;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; len(elems) &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                result&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;add(elems[&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;])
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; result
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;get_courses_id_by_category&lt;/span&gt;(driver, webpage):
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    number_of_pages &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; get_number_pages(driver, webpage)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    ids &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; set()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; number &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; range(&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, number_of_pages&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;):
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        result&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;get_courses_id_by_pagination(driver, webpage &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;?p=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;{}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;format(number))
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        ids &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; result&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;union(ids)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; ids
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;get_courses_id&lt;/span&gt;(driver):
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    ids &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; set()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; category &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; CATEGORIES_COURSES:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        result &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; get_courses_id_by_category(driver, COURSES_WEBPAGE &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; category)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        ids &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; result&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;union(ids)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; ids
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;COURSE_URL_REDIRECT &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;https://www.udemy.com/course-dashboard-redirect/?course_id=&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;CERTIFICATE_URL_PREFIX &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;https://www.udemy.com/certificate/&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;CERTIFICATE_PDF_SCHEMA &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;https://udemy-certificate.s3.amazonaws.com/pdf/&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;{}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;.pdf&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;get_certificate_url&lt;/span&gt;(driver, course_id):
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    driver&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;get(COURSE_URL_REDIRECT &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;{}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;format(course_id))
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    time&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;sleep(&lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    elems &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; driver&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;find_elements_by_xpath(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;//a[@href]&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    certificate_url &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;None&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; elem &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; elems:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; CERTIFICATE_URL_PREFIX &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; elem&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;get_attribute(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;href&amp;#34;&lt;/span&gt;):
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            certificate_url &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; elem&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;get_attribute(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;href&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#66d9ef&#34;&gt;break&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; certificate_url &lt;span style=&#34;color:#f92672&#34;&gt;is&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;None&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    certificate_id &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; certificate_url&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;split(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;https://www.udemy.com/certificate/&amp;#39;&lt;/span&gt;)[&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;]&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;split(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;/&amp;#39;&lt;/span&gt;)[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;]
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; CERTIFICATE_PDF_SCHEMA&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;format(certificate_id)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;DESTINATION &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;r&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;D:/Vault/Diplomas/Udemy/&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;download&lt;/span&gt;(url):
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    a &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; urlparse(url)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    filename &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; os&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;path&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;basename(a&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;path)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    r &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; requests&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;get(url, allow_redirects&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;True&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    open(DESTINATION &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; filename, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;wb&amp;#39;&lt;/span&gt;)&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;write(r&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;content)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;opts &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; webdriver&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;FirefoxOptions()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;opts&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;binary_location &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;r&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;C:/Program Files/Mozilla Firefox/firefox.exe&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;opts&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;add_argument(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;--headless&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;driver &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; webdriver&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;Firefox(options&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;opts)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;do_login(driver)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;ids &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; get_courses_id(driver)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; course_id &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; ids:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    url &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; get_certificate_url(driver, course_id)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; url &lt;span style=&#34;color:#f92672&#34;&gt;is&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;not&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;None&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        download(url)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;driver&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;close()
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
            <content type="html"><![CDATA[<p>A simple script using Selenium to download all the certicates of Udemy, as they do not provide API</p>
<p>There is room for improvement, mostly removing the time.sleep calls. That part of code is there because the initial load of the page does not provide that data, as it is query via an internal API and the data fill with JavaScript.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">from</span> selenium <span style="color:#f92672">import</span> webdriver
</span></span><span style="display:flex;"><span><span style="color:#f92672">import</span> time
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">import</span> os
</span></span><span style="display:flex;"><span><span style="color:#f92672">from</span> urllib.parse <span style="color:#f92672">import</span> urlparse
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">import</span> requests
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>USERNAME<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;xxxx@gmail.com&#34;</span>
</span></span><span style="display:flex;"><span>PASSWORD<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;xxxxxx&#34;</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>LOGIN_WEBPAGE<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;https://www.udemy.com/join/login-popup/?skip_suggest=1&#34;</span>
</span></span><span style="display:flex;"><span>USERNAME_XPATH<span style="color:#f92672">=</span><span style="color:#e6db74">&#39;//*[@id=&#34;email--1&#34;]&#39;</span>
</span></span><span style="display:flex;"><span>PASSWORD_XPATH<span style="color:#f92672">=</span><span style="color:#e6db74">&#39;//*[@id=&#34;id_password&#34;]&#39;</span>
</span></span><span style="display:flex;"><span>LOGIN_BUTTON<span style="color:#f92672">=</span><span style="color:#e6db74">&#39;//*[@id=&#34;submit-id-submit&#34;]&#39;</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">def</span> <span style="color:#a6e22e">do_login</span>(driver):
</span></span><span style="display:flex;"><span>    driver<span style="color:#f92672">.</span>get(LOGIN_WEBPAGE)
</span></span><span style="display:flex;"><span>    driver<span style="color:#f92672">.</span>find_element_by_xpath(USERNAME_XPATH)<span style="color:#f92672">.</span>send_keys(USERNAME)
</span></span><span style="display:flex;"><span>    driver<span style="color:#f92672">.</span>find_element_by_xpath(PASSWORD_XPATH)<span style="color:#f92672">.</span>send_keys(PASSWORD)
</span></span><span style="display:flex;"><span>    driver<span style="color:#f92672">.</span>find_element_by_xpath(LOGIN_BUTTON)<span style="color:#f92672">.</span>click()
</span></span><span style="display:flex;"><span>    
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">def</span> <span style="color:#a6e22e">get_number_pages</span>(driver, webpage):
</span></span><span style="display:flex;"><span>    driver<span style="color:#f92672">.</span>get(webpage <span style="color:#f92672">+</span> <span style="color:#e6db74">&#39;?p=1&#39;</span>)
</span></span><span style="display:flex;"><span>    time<span style="color:#f92672">.</span>sleep(<span style="color:#ae81ff">10</span>) <span style="color:#75715e"># Some Javascript in Udemy makes detecting the courses slow</span>
</span></span><span style="display:flex;"><span>    elems <span style="color:#f92672">=</span> driver<span style="color:#f92672">.</span>find_elements_by_xpath(<span style="color:#e6db74">&#34;//a[@href]&#34;</span>)
</span></span><span style="display:flex;"><span>    number <span style="color:#f92672">=</span> <span style="color:#ae81ff">1</span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">for</span> elem <span style="color:#f92672">in</span> elems:
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">if</span> webpage <span style="color:#f92672">in</span> elem<span style="color:#f92672">.</span>get_attribute(<span style="color:#e6db74">&#34;href&#34;</span>):
</span></span><span style="display:flex;"><span>            text <span style="color:#f92672">=</span> elem<span style="color:#f92672">.</span>get_attribute(<span style="color:#e6db74">&#34;href&#34;</span>)
</span></span><span style="display:flex;"><span>            elems <span style="color:#f92672">=</span> text<span style="color:#f92672">.</span>split(webpage <span style="color:#f92672">+</span> <span style="color:#e6db74">&#39;?p=&#39;</span>)
</span></span><span style="display:flex;"><span>            <span style="color:#66d9ef">if</span> len(elems) <span style="color:#f92672">&gt;</span> <span style="color:#ae81ff">1</span>:
</span></span><span style="display:flex;"><span>                new_number <span style="color:#f92672">=</span> int(elems[<span style="color:#ae81ff">1</span>])
</span></span><span style="display:flex;"><span>                <span style="color:#66d9ef">if</span> new_number <span style="color:#f92672">&gt;</span> number:
</span></span><span style="display:flex;"><span>                    number <span style="color:#f92672">=</span> new_number
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">return</span> number
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>COURSES_WEBPAGE<span style="color:#f92672">=</span><span style="color:#e6db74">&#39;https://www.udemy.com/home/my-courses/&#39;</span>
</span></span><span style="display:flex;"><span>CATEGORIES_COURSES<span style="color:#f92672">=</span>[<span style="color:#e6db74">&#39;learning/&#39;</span>, <span style="color:#e6db74">&#39;archived/&#39;</span>]
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">def</span> <span style="color:#a6e22e">get_courses_id_by_pagination</span>(driver, webpage):
</span></span><span style="display:flex;"><span>    driver<span style="color:#f92672">.</span>get(webpage)
</span></span><span style="display:flex;"><span>    time<span style="color:#f92672">.</span>sleep(<span style="color:#ae81ff">10</span>) <span style="color:#75715e"># Some Javascript in Udemy makes detecting the courses slow</span>
</span></span><span style="display:flex;"><span>    elems <span style="color:#f92672">=</span> driver<span style="color:#f92672">.</span>find_elements_by_xpath(<span style="color:#e6db74">&#34;//a[@href]&#34;</span>)
</span></span><span style="display:flex;"><span>    result <span style="color:#f92672">=</span> set()
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">for</span> elem <span style="color:#f92672">in</span> elems:
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">if</span> <span style="color:#e6db74">&#39;?course_id=&#39;</span> <span style="color:#f92672">in</span> elem<span style="color:#f92672">.</span>get_attribute(<span style="color:#e6db74">&#34;href&#34;</span>):
</span></span><span style="display:flex;"><span>            text <span style="color:#f92672">=</span> elem<span style="color:#f92672">.</span>get_attribute(<span style="color:#e6db74">&#34;href&#34;</span>)
</span></span><span style="display:flex;"><span>            elems <span style="color:#f92672">=</span> text<span style="color:#f92672">.</span>split(<span style="color:#e6db74">&#39;?course_id=&#39;</span>)
</span></span><span style="display:flex;"><span>            <span style="color:#66d9ef">if</span> len(elems) <span style="color:#f92672">&gt;</span> <span style="color:#ae81ff">1</span>:
</span></span><span style="display:flex;"><span>                result<span style="color:#f92672">.</span>add(elems[<span style="color:#ae81ff">1</span>])
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">return</span> result
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">def</span> <span style="color:#a6e22e">get_courses_id_by_category</span>(driver, webpage):
</span></span><span style="display:flex;"><span>    number_of_pages <span style="color:#f92672">=</span> get_number_pages(driver, webpage)
</span></span><span style="display:flex;"><span>    ids <span style="color:#f92672">=</span> set()
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">for</span> number <span style="color:#f92672">in</span> range(<span style="color:#ae81ff">1</span>, number_of_pages<span style="color:#f92672">+</span><span style="color:#ae81ff">1</span>):
</span></span><span style="display:flex;"><span>        result<span style="color:#f92672">=</span>get_courses_id_by_pagination(driver, webpage <span style="color:#f92672">+</span> <span style="color:#e6db74">&#39;?p=</span><span style="color:#e6db74">{}</span><span style="color:#e6db74">&#39;</span><span style="color:#f92672">.</span>format(number))
</span></span><span style="display:flex;"><span>        ids <span style="color:#f92672">=</span> result<span style="color:#f92672">.</span>union(ids)
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">return</span> ids
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">def</span> <span style="color:#a6e22e">get_courses_id</span>(driver):
</span></span><span style="display:flex;"><span>    ids <span style="color:#f92672">=</span> set()
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">for</span> category <span style="color:#f92672">in</span> CATEGORIES_COURSES:
</span></span><span style="display:flex;"><span>        result <span style="color:#f92672">=</span> get_courses_id_by_category(driver, COURSES_WEBPAGE <span style="color:#f92672">+</span> category)
</span></span><span style="display:flex;"><span>        ids <span style="color:#f92672">=</span> result<span style="color:#f92672">.</span>union(ids)
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">return</span> ids
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>COURSE_URL_REDIRECT <span style="color:#f92672">=</span> <span style="color:#e6db74">&#39;https://www.udemy.com/course-dashboard-redirect/?course_id=&#39;</span>
</span></span><span style="display:flex;"><span>CERTIFICATE_URL_PREFIX <span style="color:#f92672">=</span> <span style="color:#e6db74">&#39;https://www.udemy.com/certificate/&#39;</span>
</span></span><span style="display:flex;"><span>CERTIFICATE_PDF_SCHEMA <span style="color:#f92672">=</span> <span style="color:#e6db74">&#39;https://udemy-certificate.s3.amazonaws.com/pdf/</span><span style="color:#e6db74">{}</span><span style="color:#e6db74">.pdf&#39;</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">def</span> <span style="color:#a6e22e">get_certificate_url</span>(driver, course_id):
</span></span><span style="display:flex;"><span>    driver<span style="color:#f92672">.</span>get(COURSE_URL_REDIRECT <span style="color:#f92672">+</span> <span style="color:#e6db74">&#39;</span><span style="color:#e6db74">{}</span><span style="color:#e6db74">&#39;</span><span style="color:#f92672">.</span>format(course_id))
</span></span><span style="display:flex;"><span>    time<span style="color:#f92672">.</span>sleep(<span style="color:#ae81ff">5</span>)
</span></span><span style="display:flex;"><span>    elems <span style="color:#f92672">=</span> driver<span style="color:#f92672">.</span>find_elements_by_xpath(<span style="color:#e6db74">&#34;//a[@href]&#34;</span>)
</span></span><span style="display:flex;"><span>    certificate_url <span style="color:#f92672">=</span> <span style="color:#66d9ef">None</span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">for</span> elem <span style="color:#f92672">in</span> elems:
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">if</span> CERTIFICATE_URL_PREFIX <span style="color:#f92672">in</span> elem<span style="color:#f92672">.</span>get_attribute(<span style="color:#e6db74">&#34;href&#34;</span>):
</span></span><span style="display:flex;"><span>            certificate_url <span style="color:#f92672">=</span> elem<span style="color:#f92672">.</span>get_attribute(<span style="color:#e6db74">&#34;href&#34;</span>)
</span></span><span style="display:flex;"><span>            <span style="color:#66d9ef">break</span>
</span></span><span style="display:flex;"><span>    
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">if</span> certificate_url <span style="color:#f92672">is</span> <span style="color:#66d9ef">None</span>:
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">return</span>
</span></span><span style="display:flex;"><span>    
</span></span><span style="display:flex;"><span>    certificate_id <span style="color:#f92672">=</span> certificate_url<span style="color:#f92672">.</span>split(<span style="color:#e6db74">&#39;https://www.udemy.com/certificate/&#39;</span>)[<span style="color:#ae81ff">1</span>]<span style="color:#f92672">.</span>split(<span style="color:#e6db74">&#39;/&#39;</span>)[<span style="color:#ae81ff">0</span>]
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">return</span> CERTIFICATE_PDF_SCHEMA<span style="color:#f92672">.</span>format(certificate_id)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>DESTINATION <span style="color:#f92672">=</span> <span style="color:#e6db74">r</span><span style="color:#e6db74">&#34;D:/Vault/Diplomas/Udemy/&#34;</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">def</span> <span style="color:#a6e22e">download</span>(url):
</span></span><span style="display:flex;"><span>    a <span style="color:#f92672">=</span> urlparse(url)
</span></span><span style="display:flex;"><span>    filename <span style="color:#f92672">=</span> os<span style="color:#f92672">.</span>path<span style="color:#f92672">.</span>basename(a<span style="color:#f92672">.</span>path)
</span></span><span style="display:flex;"><span>    r <span style="color:#f92672">=</span> requests<span style="color:#f92672">.</span>get(url, allow_redirects<span style="color:#f92672">=</span><span style="color:#66d9ef">True</span>)
</span></span><span style="display:flex;"><span>    open(DESTINATION <span style="color:#f92672">+</span> filename, <span style="color:#e6db74">&#39;wb&#39;</span>)<span style="color:#f92672">.</span>write(r<span style="color:#f92672">.</span>content)
</span></span><span style="display:flex;"><span>    
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>opts <span style="color:#f92672">=</span> webdriver<span style="color:#f92672">.</span>FirefoxOptions()
</span></span><span style="display:flex;"><span>opts<span style="color:#f92672">.</span>binary_location <span style="color:#f92672">=</span> <span style="color:#e6db74">r</span><span style="color:#e6db74">&#34;C:/Program Files/Mozilla Firefox/firefox.exe&#34;</span>
</span></span><span style="display:flex;"><span>opts<span style="color:#f92672">.</span>add_argument(<span style="color:#e6db74">&#34;--headless&#34;</span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>driver <span style="color:#f92672">=</span> webdriver<span style="color:#f92672">.</span>Firefox(options<span style="color:#f92672">=</span>opts)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>do_login(driver)
</span></span><span style="display:flex;"><span>ids <span style="color:#f92672">=</span> get_courses_id(driver)
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">for</span> course_id <span style="color:#f92672">in</span> ids:
</span></span><span style="display:flex;"><span>    url <span style="color:#f92672">=</span> get_certificate_url(driver, course_id)
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">if</span> url <span style="color:#f92672">is</span> <span style="color:#f92672">not</span> <span style="color:#66d9ef">None</span>:
</span></span><span style="display:flex;"><span>        download(url)
</span></span><span style="display:flex;"><span>driver<span style="color:#f92672">.</span>close()
</span></span></code></pre></div>]]></content>
        </item>
        
        <item>
            <title>Distributed Storage with CEPH</title>
            <link>https://blog.miguens.one/posts/2021/06/distributed-storage-with-ceph/</link>
            <pubDate>Sat, 05 Jun 2021 00:00:00 +0000</pubDate>
            
            <guid>https://blog.miguens.one/posts/2021/06/distributed-storage-with-ceph/</guid>
            <description>&lt;h2 id=&#34;what-is-ceph&#34;&gt;What is ceph&lt;/h2&gt;
&lt;p&gt;Ceph is a software-defined storage solution designed to address the object, block, and file storage needs of data centers adopting open source as the new norm for high-growth block storage, object stores, and data lakes.&lt;/p&gt;
&lt;p&gt;Ceph aims primarily for entirely distributed operation without a single point of failure, scalable to the exabyte level, and freely available.&lt;/p&gt;
&lt;p&gt;In this way, administrators have a single, consolidated system that avoids silos and collects the storage within a common management framework. As a result, Ceph consolidates several storage use cases and improves resource utilization. It also lets an organization deploy servers where needed.&lt;/p&gt;</description>
            <content type="html"><![CDATA[<h2 id="what-is-ceph">What is ceph</h2>
<p>Ceph is a software-defined storage solution designed to address the object, block, and file storage needs of data centers adopting open source as the new norm for high-growth block storage, object stores, and data lakes.</p>
<p>Ceph aims primarily for entirely distributed operation without a single point of failure, scalable to the exabyte level, and freely available.</p>
<p>In this way, administrators have a single, consolidated system that avoids silos and collects the storage within a common management framework. As a result, Ceph consolidates several storage use cases and improves resource utilization. It also lets an organization deploy servers where needed.</p>
<p>Ceph is more challenging to install and maintain than some of the competitors, so if you are looking for a system that addresses a single problem, and you can &ldquo;outsource&rdquo; the redundancy requirements to hardware (or several servers with switchover), ceph might not be your solution for quick deployment.</p>
<h2 id="alternatives-to-ceph">Alternatives to ceph</h2>
<p>As we can use ceph in three categories: filesystem, object storage, and block devices, we need to see for alternatives in each of the fronts:</p>
<h3 id="filesystem">Filesystem</h3>
<p>Sharing a filesystem is the oldest challenge, where we can find classic alternatives to ceph, such as:</p>
<ul>
<li>
<p><a href="https://en.wikipedia.org/wiki/Network_File_System">NFS</a>: Network File System (NFS) is a distributed file system protocol originally developed by Sun Microsystems (Sun) in 1984, allowing a user on a client computer to access files over a computer network much like local storage is accessed. Like many other protocols, NFS builds on the Open Network Computing Remote Procedure Call (ONC RPC) system. NFS is an open standard defined in a Request for Comments (RFC), allowing anyone to implement the protocol.</p>
</li>
<li>
<p><a href="https://en.wikipedia.org/wiki/Samba_%28software%29" title="https://en.wikipedia.org/wiki/Samba_(software)">Samba</a>(SMB): Samba is a free software re-implementation of the SMB networking protocol and was initially developed by Andrew Tridgell. Samba provides file and print services for various Microsoft Windows clients. It can integrate with a Microsoft Windows Server domain, either as a Domain Controller (DC) or as a domain member. In addition, as of version 4, it supports Active Directory and Microsoft Windows NT domains.</p>
</li>
</ul>
<h3 id="object-storage">Object Storage</h3>
<ul>
<li><a href="https://min.io/">Minio</a>: Object Storage for the era of the Hybrid Cloud. MinIO&rsquo;s high-performance, Kubernetes-native object storage suite is built for the demands of the hybrid cloud. Software-defined, it delivers
a consistent experience across every Kubernetes environment.</li>
</ul>
<h3 id="block-devices">Block devices</h3>
<ul>
<li><a href="https://en.wikipedia.org/wiki/LIO_%28SCSI_target%29" title="https://en.wikipedia.org/wiki/LIO_(SCSI_target) ">LIO</a>: In computing, Linux-IO (LIO) Target is an open-source implementation of the SCSI target that has become the standard one included in the Linux kernel. Internally, LIO does not initiate sessions but instead provides one or more Logical Unit Numbers (LUNs), waits for SCSI commands from a SCSI initiator, and performs required input/output data transfers. LIO supports standard storage fabrics, including FCoE, Fibre Channel, IEEE 1394, iSCSI, iSCSI Extensions for RDMA (iSER), SCSI RDMA Protocol (SRP), and USB. It is included in most Linux distributions; native support for LIO in QEMU/KVM, libvirt, and OpenStack makes LIO a storage option for cloud deployments.</li>
</ul>
<p><em>Source of all descriptions: Official webpage and Wikipedia</em></p>
<h2 id="summary">Summary</h2>
<p>I will install ceph and test the functionality for sharing a filesystem and the object-store. I consider those two the most important parts of ceph over the possibility of defining and sharing block devices.</p>
<p>The logic behind my tests is that most development nowadays moves toward microservices and containerization, moving away from virtualization techniques. Therefore, the possibility of having centralized storage for block devices is significant. Instead, in microservices and container, I consider more important to be able to mount volumes in our container and save/read data in object storages.</p>
<h2 id="installing-ceph">Installing ceph</h2>
<p>As the latest version (pacific), the recommend installation way is via the command <code>cephadm</code>. The application deploys and manages a ceph cluster. It does this by connecting the manager daemon to hosts via SSH. The manager daemon can add, remove, and update ceph containers.</p>
<p>The requirements are:</p>
<ul>
<li>Python 3</li>
<li>Systemd</li>
<li>Podman or Docker for running containers</li>
<li>Time synchronization (such as chrony or NTP)</li>
<li>LVM2 for provisioning storage devices</li>
</ul>
<p>To install, we shall run the following commands as root. The installation will leave the executable in the <code>/usr/sbin</code> directory.</p>
<ul>
<li>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-console" data-lang="console"><span style="display:flex;"><span>curl --remote-name --location https://github.com/ceph/ceph/raw/pacific/src/cephadm/cephadm
</span></span></code></pre></div></li>
<li>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-console" data-lang="console"><span style="display:flex;"><span>chmod +x cephadm
</span></span></code></pre></div></li>
<li>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-console" data-lang="console"><span style="display:flex;"><span>./cephadm add-repo --release pacific
</span></span></code></pre></div></li>
<li>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-console" data-lang="console"><span style="display:flex;"><span>./cephadm install
</span></span></code></pre></div></li>
</ul>
<p>Now to provide the services to start a cluster, we need to boostrap:</p>
<p><code>cephadm bootstrap --mon-IP &lt;YOUR LOCAL IP ADDRESS&gt;</code></p>
<p>After the installation, you will see something similar to the following.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-console" data-lang="console"><span style="display:flex;"><span>Ceph Dashboard is now available at:
</span></span><span style="display:flex;"><span> 
</span></span><span style="display:flex;"><span>             URL: https://BARE:8443/
</span></span><span style="display:flex;"><span>            User: admin
</span></span><span style="display:flex;"><span>        Password: &lt;some random password&gt;
</span></span><span style="display:flex;"><span> 
</span></span><span style="display:flex;"><span>You can access the Ceph CLI with:
</span></span><span style="display:flex;"><span> 
</span></span><span style="display:flex;"><span>        sudo /usr/sbin/cephadm shell --fsid 6945738e-c42a-11eb-b8ba-ff25ba285015 -c /etc/ceph/ceph.conf -k /etc/ceph/ceph.client.admin.keyring
</span></span><span style="display:flex;"><span> 
</span></span><span style="display:flex;"><span>Please consider enabling telemetry to help improve Ceph:
</span></span><span style="display:flex;"><span> 
</span></span><span style="display:flex;"><span>        ceph telemetry on
</span></span><span style="display:flex;"><span> 
</span></span><span style="display:flex;"><span>For more information, see:
</span></span><span style="display:flex;"><span> 
</span></span><span style="display:flex;"><span>        https://docs.ceph.com/docs/master/mgr/telemetry/ 
</span></span></code></pre></div><p>You can access the web interface from the machine you installed ceph.</p>
<p>If you wish to access from another machine, consider a port forward with ssh, for example:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-console" data-lang="console"><span style="display:flex;"><span>ssh luis@bare.local -L 8443:localhost:8443
</span></span></code></pre></div><p>After the forwarding, we can access another machine via <code>https://localhost:8443</code>, log in and change the random password generated by the bootstrap command.</p>
<h3 id="install-ceph-cli">Install ceph cli</h3>
<p>To install the <code>ceph</code> command, we run:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-console" data-lang="console"><span style="display:flex;"><span>cephadm install ceph-common
</span></span></code></pre></div><h2 id="adding-a-disk-to-the-cluster">Adding a disk to the cluster</h2>
<p>To add all available unused space to CEPH, we have the command:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-console" data-lang="console"><span style="display:flex;"><span>ceph orch apply osd --all-available-devices
</span></span></code></pre></div><p>We can add <code>--dry-run</code>, to simulate the command rather than execute.</p>
<p>Otherwise, we will need to specify the device to use</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-console" data-lang="console"><span style="display:flex;"><span>ceph orch daemon add osd &lt;hostname&gt;:/dev/sd&lt;letter&gt;
</span></span></code></pre></div><p><strong>Important to note that it is different from the minio object store, in which we will specify a directory to use. In ceph, we need to select a storage device, raw, without any filesystem nor partitions.</strong></p>
<p>In my case, I have two external USB Disks that I am going to use for storage. Because the disk contains some old data, I will (partially) zero the devices.</p>
<h3 id="zeroing-existing-hard-drives">Zeroing existing hard drives</h3>
<p>The steps to zero one of the external USB disks, located in <code>/dev/sdd</code> are:</p>
<p><strong>EXTREME CAUTION: Double check your command. Otherwise, you could end up destroying important data or your own OS.</strong></p>
<ol>
<li>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-console" data-lang="console"><span style="display:flex;"><span>dd if=/dev/zero of=/dev/sdd
</span></span></code></pre></div></li>
<li>
<p>Let it run for some seconds and CTRL+C the command</p>
</li>
</ol>
<h3 id="adding-the-disks-to-the-cluster-example">Adding the disks to the cluster: example</h3>
<p>After zeroing both devices, I will run:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-console" data-lang="console"><span style="display:flex;"><span>ceph orch apply osd --all-available-devices --dry-run`
</span></span></code></pre></div><p>You will need to execute the command twice, the first to trigger the scan and the second time to see the results.</p>
<p>After a while (3 minutes in my case), the system detected both devices, and I executed:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-console" data-lang="console"><span style="display:flex;"><span>ceph orch apply osd --all-available-devices`
</span></span></code></pre></div><h2 id="running-without-redundancy">Running without redundancy</h2>
<p>We will need to change some rules regarding the size of the pool. By default, ceph is fault-tolerant, which means that data get replicated along with several devices, or at least enough information is saved to build the information back.</p>
<p>In our case, we are only experimenting with ceph, and I don&rsquo;t have the resources for a recommended installation.
However, in production, you should remember that you need several machines (&gt;3) with several hard drives (&gt;3 per machine) to do a robust, fault-tolerant installation.</p>
<p>We will proceed to disable the functionality mentioned above of ceph, using it as a single device. We need to modify the following relevant values in a cluster configuration (via web GUI), using level advance:</p>
<ul>
<li>osd_pool_default_size to 1</li>
<li>osd_pool_default_min size to 1</li>
<li>mon_allow_pool_size_one to True</li>
</ul>
<p>Nonetheless, the device_health device was already created with a size of 3. This is a pool created automatically by ceph to store the health data of the whole cluster. We can change and remove the redundancy, running:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-console" data-lang="console"><span style="display:flex;"><span>ceph osd pool set device_health_metrics size 1
</span></span></code></pre></div><h2 id="creating-a-filesystem">Creating a filesystem</h2>
<p>Now I will create a new filesystem in Ceph, named Bigfoot, and limit it to 1 replica.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-console" data-lang="console"><span style="display:flex;"><span>ceph fs volume create Bigfoot
</span></span></code></pre></div><h3 id="testing-the-filesystem">Testing the filesystem</h3>
<p>First, we need to install <code>ceph-fuse</code> in the machine we want to perform the test:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-console" data-lang="console"><span style="display:flex;"><span>apt-get install ceph-fuse ceph-common
</span></span></code></pre></div><p>Adapt the installation command in case you are in a not Debian-based distribution.</p>
<p>Now, we can mount:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-console" data-lang="console"><span style="display:flex;"><span>ceph-fuse -id admin -m 192.168.178.30:6789 ./test/
</span></span></code></pre></div><p>I created several directories and files in the test mount point and checking in the Dashboard, and you can see the user is connected to the cluster. You can also see in the Dashboard the directories created in the root of Bigfoot.</p>
<h2 id="creating-an-object-storage">Creating an object storage</h2>
<p>Now, let&rsquo;s set up our object storage. First, we need to create a pool the services and the pool:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-console" data-lang="console"><span style="display:flex;"><span>ceph orch apply rgw Bigfoot &#39;--placement=1 BARE&#39; --port=8000
</span></span></code></pre></div><p>We also need to add object storage to the Dashboard.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-console" data-lang="console"><span style="display:flex;"><span>radosgw-admin user create --uid=1000 --display-name=admin --system
</span></span></code></pre></div><p>Next, need to save the credentials and pass them to the ceph dashboard. For that, we can run:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-console" data-lang="console"><span style="display:flex;"><span>radosgw-admin user info --uid=1000`
</span></span></code></pre></div><p>And saving the access and secret key in files, we run the commands:</p>
<ul>
<li><code>ceph dashboard set-rgw-API-access-key -i access.key</code></li>
<li><code>ceph dashboard set-rgw-API-secret-key -i secret.key</code></li>
</ul>
<p>We should see in the dashboard access to the Object Gateway, and we can create a Bucket with the name bigfoot and owner the user 1000 I create previously. We can leave all options of the Bucket as by default.</p>
<h3 id="testing-the-object-storage">Testing the object storage</h3>
<p>First, we need to install s3fs, so we execute as root:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-console" data-lang="console"><span style="display:flex;"><span>apt-get install s3fs
</span></span></code></pre></div><p>We also need to create a file with the credentials for s3fs. For that, we will need the <code>access.key</code> and <code>secret.key</code> files of the last part:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-console" data-lang="console"><span style="display:flex;"><span>echo $(cat user):$(cat secret) &gt; s3password
</span></span></code></pre></div><p>Finally we can mount the object storage with:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-console" data-lang="console"><span style="display:flex;"><span>s3fs bigfoot /root/test -o passwd_file=/root/s3password -o url=http://192.168.178.30:8000/ -o use_path_request_style
</span></span></code></pre></div><p>With an editor, I created five files with random text and saved them. In the Dashboard, I can see that the object storage now contains five objects.</p>
<h2 id="creating-a-block-device">Creating a block device</h2>
<p>Last we can create an image to use as a remote block device for virtual machines thanks to iSCSI.</p>
<p>First, we need to create a pool for our block disks, so we type:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-console" data-lang="console"><span style="display:flex;"><span>ceph osd pool create hdpool
</span></span><span style="display:flex;"><span>ceph osd pool application enable hdpool rbd
</span></span></code></pre></div><p>Next, we go to the Dashboard, and under Block -&gt; Images, we click on &ldquo;Create&rdquo;</p>
<p>We fill all data required by &ldquo;*&rdquo;, and leave the rest as default. For example, I used the Name of Shared_Disk and 5GB of space.</p>
<p>This way, we can create a block disk and share it with virtualization software or operating systems (Windows 10, Linux, etc.) supporting iSCSI.</p>
]]></content>
        </item>
        
        <item>
            <title>El arte de no amargarse la vida</title>
            <link>https://blog.miguens.one/posts/2021/06/el-arte-de-no-amargarse-la-vida/</link>
            <pubDate>Fri, 04 Jun 2021 00:00:00 +0000</pubDate>
            
            <guid>https://blog.miguens.one/posts/2021/06/el-arte-de-no-amargarse-la-vida/</guid>
            <description>&lt;p&gt;Estas son mis notas de un libro de Rafael Santedreu. Su modo de enfocar la vida ayuda a poner todo en perspectiva cuando sientes que te estas ahogando.&lt;/p&gt;
&lt;h2 id=&#34;la-sinopsis-obtenida-de-amazon&#34;&gt;La sinopsis (obtenida de Amazon)&lt;/h2&gt;
&lt;p&gt;Rafael Santandreu explica que muchos de los problemas emocionales actuales son causa de una mala filosofía de vida. Con gran facilidad nos creemos deprimidos, ansiosos o muy desgraciados. El arte de no amargarse la vida cuenta que todos estos trastornos emocionales podrían calificarse de terribilitis. En nuestra sociedad tenemos muchas creencias que nos hacen ser infelices como que si no tienes pareja eres desdichado o que hay que tener un puesto de trabajo muy importante para realizarse.&lt;/p&gt;</description>
            <content type="html"><![CDATA[<p>Estas son mis notas de un libro de Rafael Santedreu. Su modo de enfocar la vida ayuda a poner todo en perspectiva cuando sientes que te estas ahogando.</p>
<h2 id="la-sinopsis-obtenida-de-amazon">La sinopsis (obtenida de Amazon)</h2>
<p>Rafael Santandreu explica que muchos de los problemas emocionales actuales son causa de una mala filosofía de vida. Con gran facilidad nos creemos deprimidos, ansiosos o muy desgraciados. El arte de no amargarse la vida cuenta que todos estos trastornos emocionales podrían calificarse de terribilitis. En nuestra sociedad tenemos muchas creencias que nos hacen ser infelices como que si no tienes pareja eres desdichado o que hay que tener un puesto de trabajo muy importante para realizarse.</p>
<p>El libro se puede comprar <a href="https://www.amazon.com/El-arte-amargarse-vida-Spanish/dp/849754546X">aqui</a></p>
<h2 id="una-mente-en-forma-una-vida-emocionante">Una mente en forma, una vida emocionante</h2>
<p>La depresión, la ansiedad y la obsesión son lo principales oponentes de una mente en forma. Una mente que no esta en forma es proclive al neuroticismo, es decir, torturarse mentalmente a uno mismo.</p>
<h2 id="el-origen-de-las-emociones">El origen de las emociones</h2>
<ul>
<li>Tenemos la percepción de que hay una relación lineal (de causa y efecto) entre hechos y emociones</li>
<li>La psicología cognitiva, nuestro método de transformación personal, nos dice que esto no es así. Entre los hechos externos y los efectos emocionales existe una instancia intermedia: los pensamientos (ideas, mi diálogo interno)</li>
</ul>
<h3 id="hay-algo-terrible">¿Hay algo terrible?</h3>
<p>Uno de los mejores criterios para saber si algo es «un poco malo» o «muy malo» es preguntarse: «¿En qué medida eso me impide hacer cosas valiosas en mi vida?».</p>
<h2 id="preferencias-en-vez-de-exigencias">Preferencias en vez de exigencias</h2>
<ul>
<li>
<p>Las amenazas sólo existen en nuestra cabeza.</p>
</li>
<li>
<p>Hay billones de creencias irracionales, pero podemos clasificarlas todas en tres grupos.</p>
</li>
</ul>
<ol>
<li>¡Debo! Hacerlo todo bien o muy bien.</li>
<li>La gente ¡me debería! Tratar siempre bien, con justicia y consideración.</li>
<li>Las cosas ¡me deben! Ser favorables.</li>
</ol>
<ul>
<li>
<p>Son exigencias infantiles, «debería» tajantes, inflexibles y poco realistas.</p>
</li>
<li>
<p>Las creencias racionales correspondientes serian:</p>
</li>
</ul>
<ol>
<li>Me gustaría hacerlo todo bien, pero no lo necesito para disfrutar del día.</li>
<li>Sería genial que todo el mundo me tratase bien, pero puedo pasar sin ello.</li>
<li>¡Cómo me gustaría que las cosas me fuesen favorables! Pero no siempre va a ser así y lo acepto. Aun así, todavía puedo ser feliz.</li>
</ol>
<p>Una persona madura es aquella que no exige, sino que prefiere.</p>
<h2 id="el-top-ten-de-las-creencias-irracionales">El top ten de las creencias irracionales</h2>
<ul>
<li>Solemos terribilizar sobre hechos que nos han acaecido, pero también sobre hechos que podrían suceder.</li>
<li>Nadie necesita ninguna de las cosas que se suelen desear: ni pareja, ni seguridad laboral ni salud, en realidad.</li>
<li>Se trata de preferencias y objetivos legítimos, pero jamás condiciones indispensables para la felicidad.</li>
<li>El hecho de que muchísima gente, quizá la mayoría, compartan algunas de las falsas ideas mencionadas no significa que sean válidas.</li>
</ul>
<h2 id="obstáculos-que-dificultan-la-terapia">Obstáculos que dificultan la terapia</h2>
<ul>
<li>A veces la gente se opone a la por el miedo a dejar de preocuparse.</li>
<li>¡Abajo El Secreto! es una superstición opuesta asociada: «Si deseo mucho algo, lo conseguiré».</li>
<li>En vez, condiciones intermedias son las más importantes: adquirir habilidades y trabajar. Y, aun así, muchas veces, no lo conseguiremos.</li>
</ul>
<h2 id="la-rutina-del-debate">La rutina del debate</h2>
<ul>
<li>
<p>Aprender terapia cognitiva es muy parecido a aprender otro idioma. Es similar en el sentido de que se trata de comprender y luego practicar. Es gradual. Y, al final, resulta algo natural.</p>
</li>
<li>
<p>Pero es más fácil aprender terapia cognitiva que un idioma. ¡No es tan difícil! No requiere años, sino tan sólo unos meses.</p>
</li>
<li>
<p>Una de las vías clásicas para convertir en un hábito la nueva forma racional de pensar—y sentir—consiste en detectar las creencias irracionales y reemplazarlas por creencias racionales.</p>
</li>
</ul>
<h3 id="paso-1-descubrir-las-creencias-irracionales">Paso 1. Descubrir las creencias irracionales</h3>
<h3 id="paso-2-combatir-las-creencias-irracionales">Paso 2. Combatir las creencias irracionales</h3>
<ul>
<li>El argumento comparativo: «¿Existen otras personas que son felices en la misma situación?»</li>
<li>El argumento de las posibilidades: «Aun con esta adversidad, ¿podría llevar a cabo objetivos interesantes por mí y por los demás?»</li>
</ul>
<h3 id="paso-3-establecer-la-creencia-racional">Paso 3. Establecer la creencia racional</h3>
<ul>
<li>
<p>Eliminar las emociones por completo sería imposible y desaconsejable. Es totalmente natural tener cierto nivel de emociones negativas.</p>
</li>
<li>
<p>Pero tener una mente racional sí nos permitirá decir adiós—prácticamente para siempre—al malestar emocional desbordante e invalidante.</p>
</li>
<li>
<p>Detectar todos los días qué creencias irracionales hemos sostenido a lo largo de la jornada. Se trata de ideas que me han producido malestar emocional. Combatir esas ideas irracionales mediante la argumentación de la comparación, la argumentación de las posibilidades y la argumentación existencial. Formular finalmente las creencias racionales correspondientes.</p>
</li>
<li>
<p>La terapia cognitiva es una terapia de argumentos, no un ejercicio de pensamiento positivo.</p>
</li>
<li>
<p>La clave está en perseverar. Si empleamos la rutina del debate, habrá que realizarla todos los días, durante unos seis meses. <strong>La clave de este trabajo es perseverar</strong></p>
</li>
<li>
<p>Si le damos demasiada importancia a la comodidad vamos a ser muy infelices.</p>
</li>
<li>
<p>La comodidad viene y va. Es así, es inevitable.</p>
</li>
<li>
<p>Un exceso de comodidad es incompatible con el disfrute activo de la vida.</p>
</li>
<li>
<p><strong>¡Quejarse es una pérdida de tiempo!</strong></p>
</li>
<li>
<p>«creer» estúpidamente que necesitas entretenerte para estar bien es el origen de la neurosis.</p>
</li>
<li>
<p>La tolerancia a la frustración es una habilidad muy valiosa, pero, además, si nos relajamos, no lo sufriremos tanto y, a cambio, obtendremos una especie de pasaporte para hacer lo que queremos hacer.</p>
</li>
<li>
<p>La solución para los indecisos siempre pasa por darse cuenta de que ninguno de los dos fallos son «terribles»: pueden ser «un poco malos», pero nada más.</p>
</li>
<li>
<p>Ser capaz de «estar abajo» de buen humor te hace superior y te permite disfrutar más de la vida.</p>
</li>
<li>
<p>Nadie «necesita» a nadie, así que tampoco necesitamos la aprobación de los demás.</p>
</li>
</ul>
<h2 id="mejorar-las-relaciones-incluida-la-pareja">Mejorar las relaciones (incluida la pareja)</h2>
<p>¡Demonios, qué fácil nos resulta juzgar! Pero no nos damos cuenta de que cada uno de estos juicios sumarísimos nos vuelve literalmente locos, nos hace débiles y nos aleja de la felicidad.</p>
<ul>
<li>
<p>El secreto para tener los mejores amigos es el siguiente: pedirle a cada amigo sólo lo que pueda dar. Nunca lo que no pueda dar.</p>
</li>
<li>
<p>Al amigo que siempre llega tarde, es mejor pasarlo a buscar a su casa. Al que es poco generoso, no le pidas dinero. Al que se va de la lengua, no le cuentes confidencias… Pero aprovecha el resto de sus cualidades. Así, entre todos, tendrás todo lo que se le puede pedir a la amistad.</p>
</li>
<li>
<p>Si deseamos que nuestra pareja acceda a ir de vacaciones a Cancún el próximo verano, es mucho mejor intentar seducirle para que lo haga, que no insistir en que «debe» ir para complacernos. Nuestro trabajo consistirá, entonces, en convencerle de que en Cancún se lo pasará genial, pese a sus reticencias</p>
</li>
<li>
<p>Cuando tratamos de conseguir justicia en nuestras relaciones, nos frustramos porque lo que es justicia para mí es posible que no lo sea para ti.</p>
</li>
<li>
<p><strong>La justicia está por debajo de la felicidad</strong>. Cuando la justicia me impida ser feliz, es mejor dejarla estar.</p>
</li>
<li>
<p>Algunas empresas obligan a sus empleados a trabajar a un ritmo demasiado alto. A eso hay que decir «no». ¡No vale la pena trabajar en condiciones laborales insanas! Recordemos que no necesitamos ese empleo.</p>
</li>
<li>
<p>Una persona racional trabaja a un ritmo adecuado para disfrutar.</p>
</li>
<li>
<p>Si, finalmente, la empresa no está contenta con ello, habrá que aceptar su decisión de prescindir de nuestros servicios.</p>
</li>
<li>
<p>Pero tengo que decir que, en la práctica, en muchos casos, las personas que transforman así su manera de trabajar, acaban siendo las más valoradas en su empresa.</p>
</li>
<li>
<p>Quizá no tengan un rendimiento bruto tan alto como otras, pero la calidad de su trabajo y su positividad son tan altas que destacan por encima de los demás.</p>
</li>
<li>
<p>Pensemos que las empresas también necesitan gente feliz y entusiasta. Al menos, las empresas en las que merece la pena trabajar.</p>
</li>
<li>
<p>Depender mentalmente de un empleo es psicológicamente malo.</p>
</li>
</ul>
<h2 id="final">Final</h2>
<ul>
<li>
<p>Las adversidades forman parte de la vida y son, en gran medida, inevitables. Si las aceptamos, no nos molestarán tanto.</p>
</li>
<li>
<p>Podemos poner las bases para que las cosas sean favorables, pero no siempre conseguiremos nuestros deseos. ¡Mala suerte! Pero no pasa nada,</p>
</li>
<li>
<p>La felicidad no depende de logros o situaciones ideales, sino de nuestra salud mental.</p>
</li>
<li>
<p>Hay que dejar de mirar al pasado con nostalgia. Aquel tiempo pasado no fue mejor, es una ficción de nuestra mente. La única diferencia es que en «aquel pasado» no mirábamos al «pasado».</p>
</li>
<li>
<p>Los complejos de inferioridad/superioridad también se dan entre algunos adultos neuróticos. Suelen creer que tienen problemas de autoestima porque se ven atrapados en la inferioridad cuando desearían secretamente ser superiores: es una falsa superioridad/inferioridad que sólo está en su cabeza.</p>
</li>
<li>
<p>Las recaídas o bajones son inevitables. Las recaídas son períodos de vuelta a la depresión, a la ansiedad o a la obsesión después de semanas o meses de mejora continuada. Las recaídas forman parte del proceso.</p>
</li>
<li>
<p>Además, suele suceder que después de una recaída, viene una mejora más pronunciada. Efectivamente, los avances más significativos se dan justo después de una pequeña crisis en el curso del desarrollo de la terapia.</p>
</li>
<li>
<p><strong>Es mejor trabajar a nivel cognitivo que conductual.</strong></p>
</li>
</ul>
]]></content>
        </item>
        
        <item>
            <title>Type Annotations in Python</title>
            <link>https://blog.miguens.one/posts/2021/05/type-annotations-in-python/</link>
            <pubDate>Sat, 29 May 2021 00:00:00 +0000</pubDate>
            
            <guid>https://blog.miguens.one/posts/2021/05/type-annotations-in-python/</guid>
            <description>&lt;h2 id=&#34;what-are-type-annotations&#34;&gt;What are type annotations&lt;/h2&gt;
&lt;p&gt;Python is a dynamic typed language, meaning that types are associated with the variable&amp;rsquo;s value, not the variable itself. This means that variables can take on any value at any point, and are only type checked before performing an action with them.&lt;/p&gt;
&lt;p&gt;Type Annotations are a new feature added in PEP 484 that allow for adding type hints to variables. They are used to inform someone reading the code what the type of a variable should be. This brings a sense of statically typed control to the dynamically typed Python. This is accomplished by adding &amp;ldquo;&lt;code&gt;: &amp;lt;type&amp;gt;&lt;/code&gt;&amp;rdquo; after initializing/declaring a variable.&lt;/p&gt;</description>
            <content type="html"><![CDATA[<h2 id="what-are-type-annotations">What are type annotations</h2>
<p>Python is a dynamic typed language, meaning that types are associated with the variable&rsquo;s value, not the variable itself. This means that variables can take on any value at any point, and are only type checked before performing an action with them.</p>
<p>Type Annotations are a new feature added in PEP 484 that allow for adding type hints to variables. They are used to inform someone reading the code what the type of a variable should be. This brings a sense of statically typed control to the dynamically typed Python. This is accomplished by adding &ldquo;<code>: &lt;type&gt;</code>&rdquo; after initializing/declaring a variable.</p>
<p>We can also define the return value of a function of a method, for that we need to add &ldquo;<code>-&gt; &lt;type&gt;</code>&rdquo; at the end of our function or method signature.</p>
<p>Last, we can expand the type annotations to variables as well, using the &ldquo;<code>: &lt;type&gt;</code>&rdquo; structure.</p>
<h2 id="example">Example</h2>
<p>Let&rsquo;s start with a simple example; printing &ldquo;Hello World&rdquo;</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#66d9ef">def</span> <span style="color:#a6e22e">print_me</span>(message: str) <span style="color:#f92672">-&gt;</span> <span style="color:#66d9ef">None</span>:
</span></span><span style="display:flex;"><span>    <span style="color:#e6db74">&#39;&#39;&#39;
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">    This function prints a message
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">    &#39;&#39;&#39;</span>
</span></span><span style="display:flex;"><span>    world_string: str <span style="color:#f92672">=</span> <span style="color:#e6db74">&#39;World&#39;</span>
</span></span><span style="display:flex;"><span>    print(message <span style="color:#f92672">+</span> <span style="color:#e6db74">&#39; &#39;</span> <span style="color:#f92672">+</span> world_string)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>print_me(<span style="color:#e6db74">&#39;Hello&#39;</span>)
</span></span></code></pre></div><p>If we run the program above, we can see the output <code>Hello World</code></p>
<h2 id="problem">Problem</h2>
<p>Let&rsquo;s change a bit the program and introduce some bugs:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#66d9ef">def</span> <span style="color:#a6e22e">print_me</span>(message: int) <span style="color:#f92672">-&gt;</span> <span style="color:#66d9ef">None</span>:
</span></span><span style="display:flex;"><span>    <span style="color:#e6db74">&#39;&#39;&#39;
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">    This function prints a message
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">    &#39;&#39;&#39;</span>
</span></span><span style="display:flex;"><span>    world_string: int <span style="color:#f92672">=</span> <span style="color:#e6db74">&#39;World&#39;</span> <span style="color:#75715e"># Bug: world_string is expecting an integer</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    print(message <span style="color:#f92672">+</span> <span style="color:#e6db74">&#39; &#39;</span> <span style="color:#f92672">+</span> world_string)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">return</span> <span style="color:#66d9ef">True</span> <span style="color:#75715e"># Bug: The function is expecting NoneType as return</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>print_me(<span style="color:#e6db74">&#39;Hello&#39;</span>) <span style="color:#75715e"># Bug: print_me is expecting and integer as argument</span>
</span></span></code></pre></div><p>We should expect the program to raise errors, but if we run the program above, we get the <code>Hello World</code> output.</p>
<h2 id="explanation">Explanation</h2>
<p>It is important to note that yhe Python runtime does not enforce function and variable type annotations. The annotations can be used by third party tools such as type checkers, IDEs, linters.</p>
<p>A good static analysis tool is <a href="https://mypy.readthedocs.io/en/stable/">mypy</a>. The description of the tool according to its authors:</p>
<p>Mypy is a static type checker for Python 3 and Python 2.7. If you sprinkle your code with type annotations, mypy can type check your code and find common bugs. As mypy is a static analyzer, or a lint-like tool, the type annotations are just hints for mypy and don’t interfere when running your program. You run your program with a standard Python interpreter, and the annotations are treated effectively as comments.</p>
<p>We can install the tool quickly with <code>pip install mypy</code> and running the tool:</p>
<pre tabindex="0"><code class="language-terminal" data-lang="terminal">(base) luis@luis-XPS-15-9570:~/Workspace/Python-test$ mypy test.py 
test.py:5: error: Incompatible types in assignment (expression has type &#34;str&#34;, variable has type &#34;int&#34;)
test.py:7: error: Unsupported operand types for + (&#34;int&#34; and &#34;str&#34;)
test.py:9: error: No return value expected
test.py:11: error: Argument 1 to &#34;print_me&#34; has incompatible type &#34;str&#34;; expected &#34;int&#34;
Found 4 errors in 1 file (checked 1 source file)
</code></pre><p>We can see that the tool, mypy, identifies the bug introduced before (and also the concatenation bug in the print function)</p>
<h2 id="conclusion">Conclusion</h2>
<p>If we want to make use of type annotations, it is important to set-up our IDE to use and highligh any errors during our coding, as well as using an static analysis tool during our CI/CD pipeline or testing scripts.</p>
<h2 id="alternative">Alternative</h2>
<p>If we want type checking during runtime, we need to assert the types in Python. For example:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#66d9ef">def</span> <span style="color:#a6e22e">print_me</span>(message):
</span></span><span style="display:flex;"><span>    <span style="color:#e6db74">&#39;&#39;&#39;
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">    This function prints a message
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">    &#39;&#39;&#39;</span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">assert</span> type(message) <span style="color:#f92672">is</span> str
</span></span><span style="display:flex;"><span>    world_string <span style="color:#f92672">=</span> <span style="color:#e6db74">&#39;World&#39;</span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">assert</span> type(world_string) <span style="color:#f92672">is</span> str
</span></span><span style="display:flex;"><span>    print(message <span style="color:#f92672">+</span> <span style="color:#e6db74">&#39; &#39;</span> <span style="color:#f92672">+</span> world_string)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">assert</span> type(print_me(<span style="color:#e6db74">&#39;Hello&#39;</span>)) <span style="color:#f92672">is</span> type(<span style="color:#66d9ef">None</span>)
</span></span></code></pre></div><p>In the example above, we will check, during runtime, the type of the arguments of the function, return and the variable defined inside the function. Of course, the resulting code is slower (as we need to do checks during runtime) and more difficult to read, therefore, my recommendation is to use the type annotations and mypy.</p>
<h2 id="more-information">More information</h2>
<ul>
<li><a href="https://www.python.org/dev/peps/pep-0484/">PEP 484 &ndash; Type hints</a></li>
<li><a href="https://www.python.org/dev/peps/pep-0526/">PEP 526 &ndash; Syntax for Variable Annotations</a></li>
<li><a href="https://docs.python.org/3/library/typing.html">typing &ndash; python module</a></li>
<li></li>
</ul>
]]></content>
        </item>
        
        <item>
            <title>How to use Two-Factor Authentication (2FA)</title>
            <link>https://blog.miguens.one/posts/2021/05/how-to-use-two-factor-authentication-2fa/</link>
            <pubDate>Fri, 21 May 2021 00:00:00 +0000</pubDate>
            
            <guid>https://blog.miguens.one/posts/2021/05/how-to-use-two-factor-authentication-2fa/</guid>
            <description>&lt;p&gt;Two-Factor Authentication (2FA) works by adding a layer of security to your online accounts. It requires an additional log in credential &amp;ndash; beyond just the username and password &amp;ndash; to gain account access. Getting that second credential requires access to something that belongs to you, for example, a mobile phone.&lt;/p&gt;
&lt;p&gt;In this article, I will explain how to set up 2FA on your mobile phone. Several apps can generate the codes (additional login credentials) to be used with 2FA. The three most popular choices are:&lt;/p&gt;</description>
            <content type="html"><![CDATA[<p>Two-Factor Authentication (2FA) works by adding a layer of security to your online accounts. It requires an additional log in credential &ndash; beyond just the username and password &ndash; to gain account access. Getting that second credential requires access to something that belongs to you, for example, a mobile phone.</p>
<p>In this article, I will explain how to set up 2FA on your mobile phone. Several apps can generate the codes (additional login credentials) to be used with 2FA. The three most popular choices are:</p>
<h2 id="google-authenticator">Google Authenticator</h2>
<p>Google Authenticator is a software-based authenticator by Google that implements two-step verification services using the Time-based One-time Password Algorithm (TOTP; specified in RFC 6238) and HMAC-based One-time Password algorithm (HOTP; specified in RFC 4226) for authenticating users of software applications.</p>
<p>When logging into a site supporting Authenticator (including Google services) or using Authenticator-supporting third-party applications such as password managers or file hosting services, Authenticator generates a six- to eight-digit one-time password which users must enter in addition to their usual login details.</p>
<p>It can be downloaded from the app store for Android devices and iPhone</p>
<h2 id="microsoft-authenticator">Microsoft Authenticator</h2>
<p>The same but from Microsoft instead of Google.</p>
<p>It can be installed following the official instructions at <a href="https://www.microsoft.com/en-us/account/authenticator">https://www.microsoft.com/en-us/account/authenticator</a></p>
<h2 id="freeotp">FreeOTP</h2>
<p>Another choice that is available for Android and iOS devices. It completely open-source and developed by RedHat. Due to its independence, I will instruct you on how to install and set up this app.</p>
<p>It can be downloaded following the instructions at <a href="https://freeotp.github.io/">https://freeotp.github.io/</a></p>
<p>In this example, I will install the FreeOTP app on an iOS (Apple) device. After going to <a href="https://freeotp.github.io/">https://freeotp.github.io/</a> and clicking on the button &ldquo;Download on the App Store&rdquo;, I will follow the instructions of the app store to install the app.</p>
<p>Once the app has been installed, the first we open, we see &ldquo;No tokens have been added yet&rdquo; and a button to add a new token under that message.</p>
<p>Clicking on the button mentioned above, the device will prompt permission to use the camera. After accepting the permission request, the app will try to scan a QR code.</p>
<p>For testing purposes, we can point our camera to the following QR code:</p>
<p><img src="/img/qr-code-test.png" alt="QR Code Example"></p>
<p>After scanning the QR code, the app will request you to select an icon. Select any icon and click Next.</p>
<p>Last, if everything went well, you will see a button with the selected icon and the text: &ldquo;blog.miguens.one, TestUser&rdquo;. Pressing on top of the icon will display a six digits code for 30 seconds. This code changes every time, and you must enter the digits in the website that is requesting the code for the Two-Factor Authentication (2FA)</p>
]]></content>
        </item>
        
        <item>
            <title>How to manage your pension fund in The Netherlands</title>
            <link>https://blog.miguens.one/posts/2021/05/how-to-manage-your-pension-fund-in-the-netherlands/</link>
            <pubDate>Wed, 19 May 2021 00:00:00 +0000</pubDate>
            
            <guid>https://blog.miguens.one/posts/2021/05/how-to-manage-your-pension-fund-in-the-netherlands/</guid>
            <description>&lt;p&gt;This article is written from the perspective of an employee in The Netherlands. In this case, a person can usually have three types of pension funds:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;A mandatory pension fund managed by the government: SVB.&lt;/li&gt;
&lt;li&gt;An optional pension fund made up of employee contributions and employer contributions. It depends on the company policy and the collective employment conditions (CAO) of the sector you are working in.&lt;/li&gt;
&lt;li&gt;A self-managed pension fund made up of personal contributions.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;My objective is to explain this last type of pension fund: self-managed pension fund.&lt;/p&gt;</description>
            <content type="html"><![CDATA[<p>This article is written from the perspective of an employee in The Netherlands. In this case, a person can usually have three types of pension funds:</p>
<ul>
<li>A mandatory pension fund managed by the government: SVB.</li>
<li>An optional pension fund made up of employee contributions and employer contributions. It depends on the company policy and the collective employment conditions (CAO) of the sector you are working in.</li>
<li>A self-managed pension fund made up of personal contributions.</li>
</ul>
<p>My objective is to explain this last type of pension fund: self-managed pension fund.</p>
<h1 id="self-managed-pensions-funds">Self-managed Pensions Funds</h1>
<p>To manage our pension fund, we need to open an account with an organization approved by the Dutch authorities. But, unfortunately, we cannot use any broker, such as Trading212 or others.</p>
<p>The most popular choices I could find are DEGIRO (<a href="https://www.degiro.nl/pensioenrekening.html">https://www.degiro.nl/pensioenrekening.html</a>) and Brand New Day (<a href="https://new.brandnewday.nl/%29">https://new.brandnewday.nl/)</a>.</p>
<p>Given the limited choices of organizations to manage our money, you might ask why to invest in a pension fund instead of investing or trading in your preferred platform. The answer relies on the tax break we obtain when investing in a pension fund account instead of a regular broker account.</p>
<p>Both are very similar. DEGIRO allows us to take control and invest for your supplementary pension in stocks, bonds, investment funds, ETFs (trackers) of your choice, while Brand New Day is limited to some bonds and investment funds.</p>
<p>Due to the flexibility of DEGIRO and my familiarity with their services, I will proceed with that broker, although everything discussed below is also applicable to Brand New Day.</p>
<h1 id="opening-an-account-in-degiro">Opening an account in DEGIRO</h1>
<p>Even if you are a client of DEGIRO, you cannot invest towards your taxed advantaged pension fund using the same account.
Luckily DEGIRO allows you to create several accounts per person, which means that you can open an account with your existing email, a new username and go through verifying your identity in the platform.</p>
<h2 id="adding-funds-to-degiro">Adding funds to DEGIRO</h2>
<p>After opening an account in DEGIRO, the broker will provide you with an account number to add funds to your new account. The amount of funds tax-free to contribute is not infinite but limited by your annual margin of the current year and past years.</p>
<h2 id="calculating-your-annual-margin">Calculating your annual margin</h2>
<p>To calculate the annual margin, we can go to Belastingdienst and fill a provisionary tax declaration for the current year. At the moment of writing this article, you can fill the provisionary assessment for 2021.</p>
<p>You will need your previous tax declarations to check your total yearly income (the total from work income, extra payments, bonus, etc.). In addition, if you and your employer contribute to a pension fund arranged by your employer, you will need the A-factor that can be checked in the unified pension overview (UPO) of the company that managed the pension on behalf of your employer.</p>
<p>The UPO document with the A-factor is usually generated in September-October and obtained on the insurance company&rsquo;s webpage with your DigiD.
If this is the first time you use the annual margin, you will probably have many unused reservation margins from previous years. Therefore, you can increase the margin using the reservation space to add up to the last seven years. In simple terms, that means that if you have not used the annual margin (or at least not wholly) of an earlier year, you can increase the annual margin in the current year.</p>
<p>You can use the reservation margin of the previous years to complement the current year&rsquo;s margin, adding a maximum between 7K to 8K</p>
<p>In summary: To calculate the annual margin, you need to collect all previous tax declarations and unified pension overviews of at least seven years. Afterward, you will calculate the annual margin using the values contained in the previously mentioned documents using a provisionary tax assessment for the current year in the webpage of Belastingdienst (<a href="https://www.belastingdienst.nl/">https://www.belastingdienst.nl/</a>)</p>
<h3 id="collecting-the-unified-pension-overview-upo-documents">Collecting the Unified Pension Overview (UPO) documents</h3>
<p>In the first place, you can consult all pension funds under your name (in The Netherlands) using the <a href="https://www.mijnpensioenoverzicht.nl">&ldquo;My Pension Overview&rdquo;</a>. Then, after logging with your DigiD, you should be able to see all companies with a pension fund under your name, as well as the government pension (SVB).</p>
<p>The webpage gives you an overview of what you can expect in the future regarding monthly payments with the current pension, but our goal is to list all companies that manage a pension under your name.</p>
<p>If you expand in each pension entry of the web page, you can see more information and a link to log in on the pension provider. Doing this in each pension provider, you should be able to go to every pension provider&rsquo;s documents (or past correspondence) and download your UPO documents.</p>
<h3 id="collecting-all-past-tax-declarations">Collecting all past tax declarations</h3>
<p>You can consult your past declaration by logging in on Belastingdienst (<a href="https://www.belastingdienst.nl/">https://www.belastingdienst.nl/</a>) and going to the section Belastingaangifte.</p>
<h3 id="glueing-all-together">Glueing all together</h3>
<p>Once you have all documents, I recommend filling a table containing the relevant data: Year, Total income, and A-Factor.</p>
<p>Pension companies produce the UPO document in September-October. So, for example, if you are trying to calculate the annual margin for 2021 in May, you will need the UPO of 2020, which is not generated until September.</p>
<p>In that case, you can estimate the A-Factor by copying your data from 2019 or applying proportionality if your situation has changed. You can also calculate the A-Factor yourself using the instructions of this webpage (<a href="https://www.iexgeld.nl/Artikel/150656/Dit-is-de-Factor-A-en-zo-bereken-je-m.aspx">https://www.iexgeld.nl/Artikel/150656/Dit-is-de-Factor-A-en-zo-bereken-je-m.aspx</a>).</p>
<p>I will advise against spending time calculating the A-Factor and instead use an approximation. That way, you can start making monthly contributions based on the estimation. You have several months (from October until December) to correct the contributions to match the annual space calculated with the correct figures once you received the UPO.</p>
<p>Remember that the tax authorities do not care about your monthly contributions but only the annual amount. Therefore, if your approximation of the A-Factor is conservative, and since you still have three months to correct the total annual contribution to your pension fund, the risk of overshooting and losing the tax advantages is very low.</p>
<h3 id="making-a-provisionary-tax-assessment">Making a provisionary tax assessment</h3>
<p>First, we enter into &ldquo;Mijn Belastingdienst&rdquo; (<a href="https://mijn.belastingdienst.nl/">https://mijn.belastingdienst.nl</a>) and log in with the DigiD. Next, we should go to the Inkomstenbelasting section. Last, we can find the option (Belastingjaar 2021) to fill a provisionary tax return for the current year (in this case, 2021).</p>
<p>To speed up the process, we can allow Belastingdienst to copy all relevant data from a previous declaration. Remember to update the data with your estimation for your current income (inkomsten) and update any fields that differ from the last year to your current year.</p>
<p>To calculate our annual space for the pension, we can go to &ldquo;Expenses&rdquo; (Uitgaven) and select the first option &ldquo;, Expenses for annuities, only with a pension deficit&rdquo; (Uitgaven voor lijfrente, alleen bij een pensioentekort).</p>
<p>Clicking next, Belastingdienst will ask for the entity you used to save your pension fund and the amount you used. For this effect, I enter a number relatively high (50.000 EUR) as I am not going to submit the declaration, and I intend to calculate the maximum amount annuity deduction for this year.</p>
<p>All the data collected previously (Total income and A-Factor) should be relatively easy to fill all the data and obtain the maximum amount of money you can contribute (tax-free) to your pension.</p>
<p>The calculation obtained does not mean that you should invest all that money in your pension fund, but rather consider the tax brackets that apply to your income and, with this calculation, decide how much makes sense to you to contribute to your pension.</p>
<p><strong>Please be aware that this is not official advice but rather the views and opinions of a financial <em>aficionado</em></strong></p>
]]></content>
        </item>
        
        <item>
            <title>How to use C&#43;&#43; in Jupyter Lab</title>
            <link>https://blog.miguens.one/posts/2021/04/how-to-use-c-in-jupyter-lab/</link>
            <pubDate>Thu, 08 Apr 2021 00:00:00 +0000</pubDate>
            
            <guid>https://blog.miguens.one/posts/2021/04/how-to-use-c-in-jupyter-lab/</guid>
            <description>&lt;h2 id=&#34;how-to-use-c-in-jupyter-lab&#34;&gt;How to use C++ in Jupyter Lab&lt;/h2&gt;
&lt;p&gt;One of the main extension points of the Jupyter stack is the kernel, the part of the infrastructure responsible for executing the user’s code. Jupyter kernels exist for numerous programming languages.
Most Jupyter kernels are implemented in the target programming language: the reference implementation ipykernel in Python, IJulia in Julia&lt;/p&gt;
&lt;p&gt;Xeus is a C++ implementation of the Jupyter kernel protocol. It is not a kernel itself but a library that facilitates the authoring of kernels, and other applications making use of the Jupyter kernel protocol.&lt;/p&gt;</description>
            <content type="html"><![CDATA[<h2 id="how-to-use-c-in-jupyter-lab">How to use C++ in Jupyter Lab</h2>
<p>One of the main extension points of the Jupyter stack is the kernel, the part of the infrastructure responsible for executing the user’s code. Jupyter kernels exist for numerous programming languages.
Most Jupyter kernels are implemented in the target programming language: the reference implementation ipykernel in Python, IJulia in Julia</p>
<p>Xeus is a C++ implementation of the Jupyter kernel protocol. It is not a kernel itself but a library that facilitates the authoring of kernels, and other applications making use of the Jupyter kernel protocol.</p>
<p>Interpreted C++ is already a reality at CERN with the Cling C++ interpreter in the context of the ROOT data analysis environment.</p>
<p>As a first example for a kernel based on xeus, the guys from Jupyter have implemented xeus-cling, a pure C++ kernel.</p>
<h2 id="installation">Installation</h2>
<p>The first step is to install miniconda using the instructions, in my case I will use a docker container:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>docker run -it -p 8889:8888 continuumio/miniconda3 /bin/bash
</span></span></code></pre></div><p>After the docker starts, we can install C++ support and a jupyter-lab using:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>conda install xeus-cling jupyterlab -c conda-forge
</span></span></code></pre></div><p>Last, let&rsquo;s start the jupyter-lab</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>jupyter-lab --ip<span style="color:#f92672">=</span>* --no-browser --allow-root
</span></span></code></pre></div><p>We will need the token displayed, and now we connect to our spawned jupyter-lab in the port 8889 (remember that we redirect 8888 to 8889 during <code>docker run</code> to prevent conflict with our existing jupyter.</p>
<p>In the new jupyter, we will see the option to create a new C++11 notebook.</p>
<h2 id="testing">Testing</h2>
<p>We can create a new jupyter notebook with C++11 as the kernel and run a <code>hello world</code> program</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-c++" data-lang="c++"><span style="display:flex;"><span><span style="color:#75715e">#include</span> <span style="color:#75715e">&lt;iostream&gt;</span><span style="color:#75715e">
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">int</span> <span style="color:#a6e22e">main</span>() {
</span></span><span style="display:flex;"><span>    std<span style="color:#f92672">::</span>cout <span style="color:#f92672">&lt;&lt;</span> <span style="color:#e6db74">&#34;Hello World!&#34;</span>;
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">return</span> <span style="color:#ae81ff">0</span>;
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-c++" data-lang="c++"><span style="display:flex;"><span>main()
</span></span></code></pre></div><pre><code>Hello World!
0
</code></pre>
]]></content>
        </item>
        
        <item>
            <title>Profiling a Python program</title>
            <link>https://blog.miguens.one/posts/2021/03/profiling-a-python-program/</link>
            <pubDate>Thu, 25 Mar 2021 00:00:00 +0000</pubDate>
            
            <guid>https://blog.miguens.one/posts/2021/03/profiling-a-python-program/</guid>
            <description>&lt;p&gt;If we wish to know how long it takes for a portion of code to run, an obvious answer is to time it:&lt;/p&gt;
&lt;p&gt;For example:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;from&lt;/span&gt; time &lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; time
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;start &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; time()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# do_something()&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;end &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; time()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;print(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;It took {end - start} seconds!&amp;#39;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;When the program grows, doing this is impractical, but python provides us, by default, with the cProfile module to get information about the running time of our program&amp;rsquo;s functions.&lt;/p&gt;
&lt;p&gt;Using cProfile is to import it into our program and pass the python code we wish to analyse.&lt;/p&gt;</description>
            <content type="html"><![CDATA[<p>If we wish to know how long it takes for a portion of code to run, an obvious answer is to time it:</p>
<p>For example:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#f92672">from</span> time <span style="color:#f92672">import</span> time
</span></span><span style="display:flex;"><span>start <span style="color:#f92672">=</span> time()
</span></span><span style="display:flex;"><span><span style="color:#75715e"># do_something()</span>
</span></span><span style="display:flex;"><span>end <span style="color:#f92672">=</span> time()
</span></span><span style="display:flex;"><span>print(<span style="color:#e6db74">&#39;It took {end - start} seconds!&#39;</span>)
</span></span></code></pre></div><p>When the program grows, doing this is impractical, but python provides us, by default, with the cProfile module to get information about the running time of our program&rsquo;s functions.</p>
<p>Using cProfile is to import it into our program and pass the python code we wish to analyse.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#f92672">import</span> cProfile
</span></span><span style="display:flex;"><span>cProfile<span style="color:#f92672">.</span>run(<span style="color:#e6db74">&#34;do_something()&#34;</span>)
</span></span></code></pre></div><p>This method is more valuable than time the function, as the output includes more information, including sub-functions called in the function do_something()</p>
<p>An even better approach is to run our whole program. For that, we call the python interpreter as:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>python -m cProfile myprogram.py
</span></span></code></pre></div><p>We can arrange the output sorted by time:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>python -m cProfile -s time myprogram.py
</span></span></code></pre></div><p>Last, if we need to investigate our program&rsquo;s performance further, we can store the profiling results in a file and use another utility to analyse the data. For example:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>python -m cProfile -o myprogram.prof myprogram.py
</span></span></code></pre></div><p>Now we can use install <a href="https://jiffyclub.github.io/snakeviz/">SnakeViz</a> via pip, and start SnakevViz:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>snakeviz myprogram.prof
</span></span></code></pre></div><p>The user interface is quite user-friendly and easy to research your data in the provided interface via your web browser.</p>
]]></content>
        </item>
        
        <item>
            <title>Parallelism in Python: Linux vs Windows.</title>
            <link>https://blog.miguens.one/posts/2021/03/parallelism-in-python-linux-vs-windows./</link>
            <pubDate>Wed, 24 Mar 2021 00:00:00 +0000</pubDate>
            
            <guid>https://blog.miguens.one/posts/2021/03/parallelism-in-python-linux-vs-windows./</guid>
            <description>&lt;p&gt;In Linux, when you start a child process, it is &lt;strong&gt;Forked&lt;/strong&gt;. It means that the child process inherits the memory state of the parent process. On Windows (and by default on Mac), however, processes are &lt;strong&gt;Spawned&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;Even though processes usually speed up the execution of a program by using multiple cores on a computer, starting each process can be time-consuming.&lt;/p&gt;
&lt;p&gt;The fact that on Windows and Mac Python needs to &lt;em&gt;pickle&lt;/em&gt; the objects to create child processes adds an overhead that may offset the benefits of running on separated processes. It is especially relevant when you have many small tasks to perform, instead of a couple of long-running ones.&lt;/p&gt;</description>
            <content type="html"><![CDATA[<p>In Linux, when you start a child process, it is <strong>Forked</strong>. It means that the child process inherits the memory state of the parent process. On Windows (and by default on Mac), however, processes are <strong>Spawned</strong>.</p>
<p>Even though processes usually speed up the execution of a program by using multiple cores on a computer, starting each process can be time-consuming.</p>
<p>The fact that on Windows and Mac Python needs to <em>pickle</em> the objects to create child processes adds an overhead that may offset the benefits of running on separated processes. It is especially relevant when you have many small tasks to perform, instead of a couple of long-running ones.</p>
<p>Therefore, when using processes, instead of threads, improving the speed of the program is not granted. You should always benchmark your application to understand where and how different components can affect its behavior.</p>
]]></content>
        </item>
        
        <item>
            <title>Parallelism in Python.</title>
            <link>https://blog.miguens.one/posts/2021/03/parallelism-in-python./</link>
            <pubDate>Mon, 22 Mar 2021 00:00:00 +0000</pubDate>
            
            <guid>https://blog.miguens.one/posts/2021/03/parallelism-in-python./</guid>
            <description>&lt;p&gt;In Python, &lt;strong&gt;by default&lt;/strong&gt; we have three options to add parallel processing to our applications:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;threading&lt;/li&gt;
&lt;li&gt;multiprocessing&lt;/li&gt;
&lt;li&gt;concurrent.futures&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The first option, &lt;code&gt;threading&lt;/code&gt; is useful with I/O and networking tasks, as the parallelization remains in a single core.&lt;/p&gt;
&lt;p&gt;The second option, &lt;code&gt;multiprocessing&lt;/code&gt;, is used with intensive CPU tasks, and the processing will be distributed in all the cores of our machine. The disadvantage of &lt;code&gt;multiprocessing&lt;/code&gt; is that all the information and objects should be serializable. To know is an object is serializable, you can try to &lt;code&gt;pickle&lt;/code&gt; and &lt;code&gt;unpickle&lt;/code&gt;. If the process goes without error, you can use  &lt;code&gt;multiprocessing&lt;/code&gt; as a rule of the tumb.&lt;/p&gt;</description>
            <content type="html"><![CDATA[<p>In Python, <strong>by default</strong> we have three options to add parallel processing to our applications:</p>
<ul>
<li>threading</li>
<li>multiprocessing</li>
<li>concurrent.futures</li>
</ul>
<p>The first option, <code>threading</code> is useful with I/O and networking tasks, as the parallelization remains in a single core.</p>
<p>The second option, <code>multiprocessing</code>, is used with intensive CPU tasks, and the processing will be distributed in all the cores of our machine. The disadvantage of <code>multiprocessing</code> is that all the information and objects should be serializable. To know is an object is serializable, you can try to <code>pickle</code> and <code>unpickle</code>. If the process goes without error, you can use  <code>multiprocessing</code> as a rule of the tumb.</p>
<p>The last option, <code>concurrent.futures</code> offers an API to use <code>threading</code> and <code>multiprocessing</code> with the same interface. The interface, in my opinion, is cleaner, and you can start programming and later on decide if you want to make use of <code>threading</code> or <code>multiprocessing</code> as the backend.</p>
<p>In this example, I will use the backend of <code>threading</code></p>
<p>Let&rsquo;s start. First, we import the modules.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#f92672">import</span> concurrent.futures
</span></span><span style="display:flex;"><span><span style="color:#f92672">import</span> time
</span></span></code></pre></div><p>Now let&rsquo;s write a function that waits 5 seconds and return the text passed as the argument</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#66d9ef">def</span> <span style="color:#a6e22e">echo</span>(text):
</span></span><span style="display:flex;"><span>    time<span style="color:#f92672">.</span>sleep(<span style="color:#ae81ff">5</span>)
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">return</span> text
</span></span></code></pre></div><p>Now, lets try:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#f92672">%%</span>time
</span></span><span style="display:flex;"><span>print(echo(<span style="color:#e6db74">&#39;Hello&#39;</span>) <span style="color:#f92672">+</span> <span style="color:#e6db74">&#39; &#39;</span> <span style="color:#f92672">+</span> echo(<span style="color:#e6db74">&#39;world&#39;</span>))
</span></span></code></pre></div><pre><code>Hello world
Wall time: 10 s
</code></pre>
<p>As expected, the command took 10s to complete</p>
<p>Now we are going to apply the concurrent.futures to our application. The differences are that in this case, we do not call our functions directly, but we pass the function name and the arguments as arguments of the <code>submit</code> function of <code>concurrent.futures.Executor</code>. Another critical difference is the immediate return of our call is a <code>Future</code> object, and if we want the actual return, we must use the <code>result()</code> method.</p>
<p>If you did not understand the last paragraph, do not despair, it is easier to see with an example:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#75715e"># First we must initialize the executor</span>
</span></span><span style="display:flex;"><span>executor <span style="color:#f92672">=</span> concurrent<span style="color:#f92672">.</span>futures<span style="color:#f92672">.</span>ThreadPoolExecutor()
</span></span></code></pre></div><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#75715e"># Now we can submit the tasks</span>
</span></span><span style="display:flex;"><span>example_task <span style="color:#f92672">=</span> executor<span style="color:#f92672">.</span>submit(echo, <span style="color:#e6db74">&#39;Hello&#39;</span>)
</span></span></code></pre></div><p>Now we can see that the tasks are not functions, but a <code>Future</code> object.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span>print(type(example_task))
</span></span></code></pre></div><pre><code>&lt;class 'concurrent.futures._base.Future'&gt;
</code></pre>
<p>And if we wanted the return value, we use the <code>result()</code> method.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span>print(example_task<span style="color:#f92672">.</span>result())
</span></span></code></pre></div><pre><code>Hello
</code></pre>
<p>Now to print <code>Hello world</code>, we do:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#f92672">%%</span>time
</span></span><span style="display:flex;"><span>task1 <span style="color:#f92672">=</span> executor<span style="color:#f92672">.</span>submit(echo, <span style="color:#e6db74">&#39;Hello&#39;</span>)
</span></span><span style="display:flex;"><span>task2 <span style="color:#f92672">=</span> executor<span style="color:#f92672">.</span>submit(echo, <span style="color:#e6db74">&#39;world&#39;</span>)
</span></span><span style="display:flex;"><span>print(task1<span style="color:#f92672">.</span>result() <span style="color:#f92672">+</span> <span style="color:#e6db74">&#39; &#39;</span> <span style="color:#f92672">+</span> task2<span style="color:#f92672">.</span>result())
</span></span></code></pre></div><pre><code>Hello world
Wall time: 5.01 s
</code></pre>
<p>We see that it took 5 seconds.</p>
]]></content>
        </item>
        
        <item>
            <title>Investing with Python: Part 2 - Stocks</title>
            <link>https://blog.miguens.one/posts/2021/01/investing-with-python-part-2-stocks/</link>
            <pubDate>Sun, 17 Jan 2021 00:00:00 +0000</pubDate>
            
            <guid>https://blog.miguens.one/posts/2021/01/investing-with-python-part-2-stocks/</guid>
            <description>&lt;p&gt;This is a continuation of the previous post. Here I will apply the Black Litterman model to a portfolio of stocks.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; pandas &lt;span style=&#34;color:#66d9ef&#34;&gt;as&lt;/span&gt; pd
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; yfinance &lt;span style=&#34;color:#66d9ef&#34;&gt;as&lt;/span&gt; yf
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; openpyxl
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;from&lt;/span&gt; currency_converter &lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; CurrencyConverter
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; numpy &lt;span style=&#34;color:#66d9ef&#34;&gt;as&lt;/span&gt; np
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;from&lt;/span&gt; pypfopt &lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; BlackLittermanModel
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;from&lt;/span&gt; pypfopt &lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; black_litterman, risk_models
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# Declare constants&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;PORTFOLIO&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;/mnt/wd-bigfoot/share/luis/OneDrive/Documents/Portfolio/00 portfolio.xlsx&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;STOCKS_SHEET&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Stocks&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;START_DATE&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;2010-01-01&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;END_DATE&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;2021-01-08&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;ALL_WORLD&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;IWDA.AS&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;TOTAL_FUNDS&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;40e3&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;# 40.000 EUR&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# Open the portfolio and get the stocks&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;stocks_pd &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; pd&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;read_excel(PORTFOLIO, engine&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;openpyxl&amp;#39;&lt;/span&gt;, sheet_name&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;STOCKS_SHEET)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;stocks_pd&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;index &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; stocks_pd[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Symbol&amp;#39;&lt;/span&gt;]
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;stocks_pd &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; stocks_pd[[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Company Name&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Prediction&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Pesimistic&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Optimistic&amp;#39;&lt;/span&gt;]]
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;stocks_pd
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;div&gt;
&lt;style scoped&gt;
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }

    .dataframe tbody tr th {
        vertical-align: top;
    }

    .dataframe thead th {
        text-align: right;
    }
&lt;/style&gt;
&lt;table border=&#34;1&#34; class=&#34;dataframe&#34;&gt;
  &lt;thead&gt;
    &lt;tr style=&#34;text-align: right;&#34;&gt;
      &lt;th&gt;&lt;/th&gt;
      &lt;th&gt;Company Name&lt;/th&gt;
      &lt;th&gt;Prediction&lt;/th&gt;
      &lt;th&gt;Pesimistic&lt;/th&gt;
      &lt;th&gt;Optimistic&lt;/th&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;Symbol&lt;/th&gt;
      &lt;th&gt;&lt;/th&gt;
      &lt;th&gt;&lt;/th&gt;
      &lt;th&gt;&lt;/th&gt;
      &lt;th&gt;&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;th&gt;AMD&lt;/th&gt;
      &lt;td&gt;Advanced Micro Devices, Inc.&lt;/td&gt;
      &lt;td&gt;0.20&lt;/td&gt;
      &lt;td&gt;0.03&lt;/td&gt;
      &lt;td&gt;0.40&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;AIR.PA&lt;/th&gt;
      &lt;td&gt;Airbus SE&lt;/td&gt;
      &lt;td&gt;0.10&lt;/td&gt;
      &lt;td&gt;0.03&lt;/td&gt;
      &lt;td&gt;0.20&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;GOOGL&lt;/th&gt;
      &lt;td&gt;Alphabet Inc.&lt;/td&gt;
      &lt;td&gt;0.10&lt;/td&gt;
      &lt;td&gt;0.03&lt;/td&gt;
      &lt;td&gt;0.30&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;AMZN&lt;/th&gt;
      &lt;td&gt;Amazon.com, Inc.&lt;/td&gt;
      &lt;td&gt;0.20&lt;/td&gt;
      &lt;td&gt;0.05&lt;/td&gt;
      &lt;td&gt;0.50&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;AAPL&lt;/th&gt;
      &lt;td&gt;Apple Inc.&lt;/td&gt;
      &lt;td&gt;0.15&lt;/td&gt;
      &lt;td&gt;0.00&lt;/td&gt;
      &lt;td&gt;0.40&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;BA.L&lt;/th&gt;
      &lt;td&gt;BAE Systems plc&lt;/td&gt;
      &lt;td&gt;0.00&lt;/td&gt;
      &lt;td&gt;-0.05&lt;/td&gt;
      &lt;td&gt;0.05&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;CSCO&lt;/th&gt;
      &lt;td&gt;Cisco Systems, Inc.&lt;/td&gt;
      &lt;td&gt;0.00&lt;/td&gt;
      &lt;td&gt;-0.05&lt;/td&gt;
      &lt;td&gt;0.05&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;BN.PA&lt;/th&gt;
      &lt;td&gt;Danone S.A.&lt;/td&gt;
      &lt;td&gt;0.00&lt;/td&gt;
      &lt;td&gt;-0.05&lt;/td&gt;
      &lt;td&gt;0.05&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;FB&lt;/th&gt;
      &lt;td&gt;Facebook, Inc.&lt;/td&gt;
      &lt;td&gt;0.05&lt;/td&gt;
      &lt;td&gt;-0.05&lt;/td&gt;
      &lt;td&gt;0.05&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;GE&lt;/th&gt;
      &lt;td&gt;General Electric Company&lt;/td&gt;
      &lt;td&gt;0.05&lt;/td&gt;
      &lt;td&gt;0.00&lt;/td&gt;
      &lt;td&gt;0.05&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;HYU.F&lt;/th&gt;
      &lt;td&gt;Hyundai Corporation&lt;/td&gt;
      &lt;td&gt;0.10&lt;/td&gt;
      &lt;td&gt;0.00&lt;/td&gt;
      &lt;td&gt;0.30&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;IDR.MC&lt;/th&gt;
      &lt;td&gt;Indra Sistemas, S.A.&lt;/td&gt;
      &lt;td&gt;0.00&lt;/td&gt;
      &lt;td&gt;-0.05&lt;/td&gt;
      &lt;td&gt;0.02&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;INTC&lt;/th&gt;
      &lt;td&gt;Intel Corporation&lt;/td&gt;
      &lt;td&gt;0.00&lt;/td&gt;
      &lt;td&gt;-0.02&lt;/td&gt;
      &lt;td&gt;0.05&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;IBM&lt;/th&gt;
      &lt;td&gt;International Business Machines Corporation&lt;/td&gt;
      &lt;td&gt;0.05&lt;/td&gt;
      &lt;td&gt;-0.02&lt;/td&gt;
      &lt;td&gt;0.10&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;IAG.MC&lt;/th&gt;
      &lt;td&gt;International Consolidated Airlines Group, S.A.&lt;/td&gt;
      &lt;td&gt;0.50&lt;/td&gt;
      &lt;td&gt;-0.10&lt;/td&gt;
      &lt;td&gt;1.00&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;PHIA.AS&lt;/th&gt;
      &lt;td&gt;Koninklijke Philips N.V.&lt;/td&gt;
      &lt;td&gt;0.00&lt;/td&gt;
      &lt;td&gt;-0.05&lt;/td&gt;
      &lt;td&gt;0.05&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;MEL.MC&lt;/th&gt;
      &lt;td&gt;Meliá Hotels International, S.A.&lt;/td&gt;
      &lt;td&gt;0.20&lt;/td&gt;
      &lt;td&gt;0.00&lt;/td&gt;
      &lt;td&gt;0.50&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;MRK&lt;/th&gt;
      &lt;td&gt;Merck &amp;amp; Co., Inc.&lt;/td&gt;
      &lt;td&gt;0.05&lt;/td&gt;
      &lt;td&gt;0.00&lt;/td&gt;
      &lt;td&gt;0.05&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;MSFT&lt;/th&gt;
      &lt;td&gt;Microsoft Corporation&lt;/td&gt;
      &lt;td&gt;0.10&lt;/td&gt;
      &lt;td&gt;0.00&lt;/td&gt;
      &lt;td&gt;0.15&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;NESN.SW&lt;/th&gt;
      &lt;td&gt;Nestlé S.A.&lt;/td&gt;
      &lt;td&gt;0.00&lt;/td&gt;
      &lt;td&gt;-0.05&lt;/td&gt;
      &lt;td&gt;0.03&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;NFLX&lt;/th&gt;
      &lt;td&gt;Netflix, Inc.&lt;/td&gt;
      &lt;td&gt;0.05&lt;/td&gt;
      &lt;td&gt;-0.01&lt;/td&gt;
      &lt;td&gt;0.15&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;NHH.MC&lt;/th&gt;
      &lt;td&gt;NH Hotel Group, S.A.&lt;/td&gt;
      &lt;td&gt;0.20&lt;/td&gt;
      &lt;td&gt;-0.05&lt;/td&gt;
      &lt;td&gt;0.50&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;NOKIA.HE&lt;/th&gt;
      &lt;td&gt;Nokia Corporation&lt;/td&gt;
      &lt;td&gt;0.05&lt;/td&gt;
      &lt;td&gt;-0.05&lt;/td&gt;
      &lt;td&gt;0.20&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;NVDA&lt;/th&gt;
      &lt;td&gt;NVIDIA Corporation&lt;/td&gt;
      &lt;td&gt;0.10&lt;/td&gt;
      &lt;td&gt;-0.05&lt;/td&gt;
      &lt;td&gt;0.30&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;ORCL&lt;/th&gt;
      &lt;td&gt;Oracle Corporation&lt;/td&gt;
      &lt;td&gt;0.05&lt;/td&gt;
      &lt;td&gt;0.00&lt;/td&gt;
      &lt;td&gt;0.05&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;PEP&lt;/th&gt;
      &lt;td&gt;PepsiCo, Inc.&lt;/td&gt;
      &lt;td&gt;0.00&lt;/td&gt;
      &lt;td&gt;-0.05&lt;/td&gt;
      &lt;td&gt;0.05&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;QCOM&lt;/th&gt;
      &lt;td&gt;QUALCOMM Incorporated&lt;/td&gt;
      &lt;td&gt;0.05&lt;/td&gt;
      &lt;td&gt;-0.02&lt;/td&gt;
      &lt;td&gt;0.15&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;SSUN.F&lt;/th&gt;
      &lt;td&gt;Samsung Electronics Co., Ltd.&lt;/td&gt;
      &lt;td&gt;0.10&lt;/td&gt;
      &lt;td&gt;-0.02&lt;/td&gt;
      &lt;td&gt;0.20&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;SIE.DE&lt;/th&gt;
      &lt;td&gt;Siemens Aktiengesellschaft&lt;/td&gt;
      &lt;td&gt;0.05&lt;/td&gt;
      &lt;td&gt;-0.02&lt;/td&gt;
      &lt;td&gt;0.10&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;ENR.DE&lt;/th&gt;
      &lt;td&gt;Siemens Energy AG&lt;/td&gt;
      &lt;td&gt;0.05&lt;/td&gt;
      &lt;td&gt;-0.02&lt;/td&gt;
      &lt;td&gt;0.10&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;SPOT&lt;/th&gt;
      &lt;td&gt;Spotify Technology S.A.&lt;/td&gt;
      &lt;td&gt;0.02&lt;/td&gt;
      &lt;td&gt;-0.05&lt;/td&gt;
      &lt;td&gt;0.10&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;TSLA&lt;/th&gt;
      &lt;td&gt;Tesla, Inc.&lt;/td&gt;
      &lt;td&gt;0.00&lt;/td&gt;
      &lt;td&gt;-0.20&lt;/td&gt;
      &lt;td&gt;0.05&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;TXN&lt;/th&gt;
      &lt;td&gt;Texas Instruments Incorporated&lt;/td&gt;
      &lt;td&gt;0.05&lt;/td&gt;
      &lt;td&gt;0.00&lt;/td&gt;
      &lt;td&gt;0.10&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;BA&lt;/th&gt;
      &lt;td&gt;The Boeing Company&lt;/td&gt;
      &lt;td&gt;0.05&lt;/td&gt;
      &lt;td&gt;-0.05&lt;/td&gt;
      &lt;td&gt;0.10&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;KHC&lt;/th&gt;
      &lt;td&gt;The Kraft Heinz Company&lt;/td&gt;
      &lt;td&gt;0.00&lt;/td&gt;
      &lt;td&gt;-0.05&lt;/td&gt;
      &lt;td&gt;0.05&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;PG&lt;/th&gt;
      &lt;td&gt;The Procter &amp;amp; Gamble Company&lt;/td&gt;
      &lt;td&gt;0.05&lt;/td&gt;
      &lt;td&gt;-0.05&lt;/td&gt;
      &lt;td&gt;0.05&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;DIS&lt;/th&gt;
      &lt;td&gt;The Walt Disney Company&lt;/td&gt;
      &lt;td&gt;0.05&lt;/td&gt;
      &lt;td&gt;-0.05&lt;/td&gt;
      &lt;td&gt;0.20&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;TMO&lt;/th&gt;
      &lt;td&gt;Thermo Fisher Scientific Inc.&lt;/td&gt;
      &lt;td&gt;0.05&lt;/td&gt;
      &lt;td&gt;-0.05&lt;/td&gt;
      &lt;td&gt;0.15&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;TM&lt;/th&gt;
      &lt;td&gt;Toyota Motor Corporation&lt;/td&gt;
      &lt;td&gt;0.05&lt;/td&gt;
      &lt;td&gt;-0.02&lt;/td&gt;
      &lt;td&gt;0.10&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;UBER&lt;/th&gt;
      &lt;td&gt;Uber Technologies, Inc.&lt;/td&gt;
      &lt;td&gt;0.10&lt;/td&gt;
      &lt;td&gt;-0.10&lt;/td&gt;
      &lt;td&gt;0.20&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;UL&lt;/th&gt;
      &lt;td&gt;Unilever PLC&lt;/td&gt;
      &lt;td&gt;0.00&lt;/td&gt;
      &lt;td&gt;-0.05&lt;/td&gt;
      &lt;td&gt;0.05&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;


&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# Get the historical data of the stocks and exchange to EUR&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;stocks &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; pd&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;DataFrame()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;cc &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; CurrencyConverter(fallback_on_missing_rate&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;True&lt;/span&gt;, fallback_on_wrong_date&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;True&amp;#39;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; symbol &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; stocks_pd&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;index:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    history &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; yf&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;download(symbol, start&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;START_DATE, end&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;END_DATE)[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Adj Close&amp;#39;&lt;/span&gt;]
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    dataframe &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; pd&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;DataFrame(history)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    currency &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; yf&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;Ticker(symbol)&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;info[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;currency&amp;#39;&lt;/span&gt;]&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;upper()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    dataframe&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;columns &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; [ symbol &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;:&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; currency ]
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;# Add Market Cap to the stocks_pd&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    stocks_pd&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;at[symbol, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Market Cap&amp;#39;&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; cc&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;convert(yf&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;Ticker(symbol)&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;info[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;marketCap&amp;#39;&lt;/span&gt;],
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                                                  currency, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;EUR&amp;#39;&lt;/span&gt;, 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                                                  dataframe&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;index[&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;]&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;to_pydatetime())
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;# Add column with security in EUR if needed&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; currency&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;lower() &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;eur&amp;#39;&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; index &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; dataframe&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;index:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            original_value &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; dataframe&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;at[index, symbol &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;:&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; currency]
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            value &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; cc&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;convert(original_value, currency, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;EUR&amp;#39;&lt;/span&gt;, date&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;index&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;to_pydatetime())
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            dataframe&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;at[index, symbol &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;:EUR&amp;#39;&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; value
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;# Merge everything&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    stocks &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; pd&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;concat([ stocks, dataframe], axis&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;columns&amp;#39;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# Fill any NA values with the best forward or backarwd value&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;stocks&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;fillna(method&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;ffill&amp;#39;&lt;/span&gt;, inplace&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;True&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;del&lt;/span&gt; cc, symbol, history, dataframe, currency, original_value, value, index
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;pre&gt;&lt;code&gt;[*********************100%***********************]  1 of 1 completed
[*********************100%***********************]  1 of 1 completed
[*********************100%***********************]  1 of 1 completed
[*********************100%***********************]  1 of 1 completed
[*********************100%***********************]  1 of 1 completed
[*********************100%***********************]  1 of 1 completed
[*********************100%***********************]  1 of 1 completed
[*********************100%***********************]  1 of 1 completed
[*********************100%***********************]  1 of 1 completed
[*********************100%***********************]  1 of 1 completed
[*********************100%***********************]  1 of 1 completed
[*********************100%***********************]  1 of 1 completed
[*********************100%***********************]  1 of 1 completed
[*********************100%***********************]  1 of 1 completed
[*********************100%***********************]  1 of 1 completed
[*********************100%***********************]  1 of 1 completed
[*********************100%***********************]  1 of 1 completed
[*********************100%***********************]  1 of 1 completed
[*********************100%***********************]  1 of 1 completed
[*********************100%***********************]  1 of 1 completed
[*********************100%***********************]  1 of 1 completed
[*********************100%***********************]  1 of 1 completed
[*********************100%***********************]  1 of 1 completed
[*********************100%***********************]  1 of 1 completed
[*********************100%***********************]  1 of 1 completed
[*********************100%***********************]  1 of 1 completed
[*********************100%***********************]  1 of 1 completed
[*********************100%***********************]  1 of 1 completed
[*********************100%***********************]  1 of 1 completed
[*********************100%***********************]  1 of 1 completed
[*********************100%***********************]  1 of 1 completed
[*********************100%***********************]  1 of 1 completed
[*********************100%***********************]  1 of 1 completed
[*********************100%***********************]  1 of 1 completed
[*********************100%***********************]  1 of 1 completed
[*********************100%***********************]  1 of 1 completed
[*********************100%***********************]  1 of 1 completed
[*********************100%***********************]  1 of 1 completed
[*********************100%***********************]  1 of 1 completed
[*********************100%***********************]  1 of 1 completed
[*********************100%***********************]  1 of 1 completed
&lt;/code&gt;&lt;/pre&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;stocks_pd
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;



&lt;div&gt;
&lt;style scoped&gt;
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }

    .dataframe tbody tr th {
        vertical-align: top;
    }

    .dataframe thead th {
        text-align: right;
    }
&lt;/style&gt;
&lt;table border=&#34;1&#34; class=&#34;dataframe&#34;&gt;
  &lt;thead&gt;
    &lt;tr style=&#34;text-align: right;&#34;&gt;
      &lt;th&gt;&lt;/th&gt;
      &lt;th&gt;Company Name&lt;/th&gt;
      &lt;th&gt;Prediction&lt;/th&gt;
      &lt;th&gt;Pesimistic&lt;/th&gt;
      &lt;th&gt;Optimistic&lt;/th&gt;
      &lt;th&gt;Market Cap&lt;/th&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;Symbol&lt;/th&gt;
      &lt;th&gt;&lt;/th&gt;
      &lt;th&gt;&lt;/th&gt;
      &lt;th&gt;&lt;/th&gt;
      &lt;th&gt;&lt;/th&gt;
      &lt;th&gt;&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;th&gt;AMD&lt;/th&gt;
      &lt;td&gt;Advanced Micro Devices, Inc.&lt;/td&gt;
      &lt;td&gt;0.20&lt;/td&gt;
      &lt;td&gt;0.03&lt;/td&gt;
      &lt;td&gt;0.40&lt;/td&gt;
      &lt;td&gt;8.148238e+10&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;AIR.PA&lt;/th&gt;
      &lt;td&gt;Airbus SE&lt;/td&gt;
      &lt;td&gt;0.10&lt;/td&gt;
      &lt;td&gt;0.03&lt;/td&gt;
      &lt;td&gt;0.20&lt;/td&gt;
      &lt;td&gt;7.461750e+10&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;GOOGL&lt;/th&gt;
      &lt;td&gt;Alphabet Inc.&lt;/td&gt;
      &lt;td&gt;0.10&lt;/td&gt;
      &lt;td&gt;0.03&lt;/td&gt;
      &lt;td&gt;0.30&lt;/td&gt;
      &lt;td&gt;1.183262e+12&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;AMZN&lt;/th&gt;
      &lt;td&gt;Amazon.com, Inc.&lt;/td&gt;
      &lt;td&gt;0.20&lt;/td&gt;
      &lt;td&gt;0.05&lt;/td&gt;
      &lt;td&gt;0.50&lt;/td&gt;
      &lt;td&gt;1.355935e+12&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;AAPL&lt;/th&gt;
      &lt;td&gt;Apple Inc.&lt;/td&gt;
      &lt;td&gt;0.15&lt;/td&gt;
      &lt;td&gt;0.00&lt;/td&gt;
      &lt;td&gt;0.40&lt;/td&gt;
      &lt;td&gt;1.765546e+12&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;BA.L&lt;/th&gt;
      &lt;td&gt;BAE Systems plc&lt;/td&gt;
      &lt;td&gt;0.00&lt;/td&gt;
      &lt;td&gt;-0.05&lt;/td&gt;
      &lt;td&gt;0.05&lt;/td&gt;
      &lt;td&gt;1.787769e+10&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;CSCO&lt;/th&gt;
      &lt;td&gt;Cisco Systems, Inc.&lt;/td&gt;
      &lt;td&gt;0.00&lt;/td&gt;
      &lt;td&gt;-0.05&lt;/td&gt;
      &lt;td&gt;0.05&lt;/td&gt;
      &lt;td&gt;1.811978e+11&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;BN.PA&lt;/th&gt;
      &lt;td&gt;Danone S.A.&lt;/td&gt;
      &lt;td&gt;0.00&lt;/td&gt;
      &lt;td&gt;-0.05&lt;/td&gt;
      &lt;td&gt;0.05&lt;/td&gt;
      &lt;td&gt;3.849391e+10&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;FB&lt;/th&gt;
      &lt;td&gt;Facebook, Inc.&lt;/td&gt;
      &lt;td&gt;0.05&lt;/td&gt;
      &lt;td&gt;-0.05&lt;/td&gt;
      &lt;td&gt;0.05&lt;/td&gt;
      &lt;td&gt;7.102801e+11&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;GE&lt;/th&gt;
      &lt;td&gt;General Electric Company&lt;/td&gt;
      &lt;td&gt;0.05&lt;/td&gt;
      &lt;td&gt;0.00&lt;/td&gt;
      &lt;td&gt;0.05&lt;/td&gt;
      &lt;td&gt;9.526443e+10&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;HYU.F&lt;/th&gt;
      &lt;td&gt;Hyundai Corporation&lt;/td&gt;
      &lt;td&gt;0.10&lt;/td&gt;
      &lt;td&gt;0.00&lt;/td&gt;
      &lt;td&gt;0.30&lt;/td&gt;
      &lt;td&gt;3.768063e+10&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;IDR.MC&lt;/th&gt;
      &lt;td&gt;Indra Sistemas, S.A.&lt;/td&gt;
      &lt;td&gt;0.00&lt;/td&gt;
      &lt;td&gt;-0.05&lt;/td&gt;
      &lt;td&gt;0.02&lt;/td&gt;
      &lt;td&gt;1.320735e+09&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;INTC&lt;/th&gt;
      &lt;td&gt;Intel Corporation&lt;/td&gt;
      &lt;td&gt;0.00&lt;/td&gt;
      &lt;td&gt;-0.02&lt;/td&gt;
      &lt;td&gt;0.05&lt;/td&gt;
      &lt;td&gt;2.213519e+11&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;IBM&lt;/th&gt;
      &lt;td&gt;International Business Machines Corporation&lt;/td&gt;
      &lt;td&gt;0.05&lt;/td&gt;
      &lt;td&gt;-0.02&lt;/td&gt;
      &lt;td&gt;0.10&lt;/td&gt;
      &lt;td&gt;1.000500e+11&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;IAG.MC&lt;/th&gt;
      &lt;td&gt;International Consolidated Airlines Group, S.A.&lt;/td&gt;
      &lt;td&gt;0.50&lt;/td&gt;
      &lt;td&gt;-0.10&lt;/td&gt;
      &lt;td&gt;1.00&lt;/td&gt;
      &lt;td&gt;1.080973e+10&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;PHIA.AS&lt;/th&gt;
      &lt;td&gt;Koninklijke Philips N.V.&lt;/td&gt;
      &lt;td&gt;0.00&lt;/td&gt;
      &lt;td&gt;-0.05&lt;/td&gt;
      &lt;td&gt;0.05&lt;/td&gt;
      &lt;td&gt;4.355928e+10&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;MEL.MC&lt;/th&gt;
      &lt;td&gt;Meliá Hotels International, S.A.&lt;/td&gt;
      &lt;td&gt;0.20&lt;/td&gt;
      &lt;td&gt;0.00&lt;/td&gt;
      &lt;td&gt;0.50&lt;/td&gt;
      &lt;td&gt;1.345669e+09&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;MRK&lt;/th&gt;
      &lt;td&gt;Merck &amp;amp; Co., Inc.&lt;/td&gt;
      &lt;td&gt;0.05&lt;/td&gt;
      &lt;td&gt;0.00&lt;/td&gt;
      &lt;td&gt;0.05&lt;/td&gt;
      &lt;td&gt;1.683183e+11&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;MSFT&lt;/th&gt;
      &lt;td&gt;Microsoft Corporation&lt;/td&gt;
      &lt;td&gt;0.10&lt;/td&gt;
      &lt;td&gt;0.00&lt;/td&gt;
      &lt;td&gt;0.15&lt;/td&gt;
      &lt;td&gt;1.537831e+12&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;NESN.SW&lt;/th&gt;
      &lt;td&gt;Nestlé S.A.&lt;/td&gt;
      &lt;td&gt;0.00&lt;/td&gt;
      &lt;td&gt;-0.05&lt;/td&gt;
      &lt;td&gt;0.03&lt;/td&gt;
      &lt;td&gt;2.751414e+11&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;NFLX&lt;/th&gt;
      &lt;td&gt;Netflix, Inc.&lt;/td&gt;
      &lt;td&gt;0.05&lt;/td&gt;
      &lt;td&gt;-0.01&lt;/td&gt;
      &lt;td&gt;0.15&lt;/td&gt;
      &lt;td&gt;2.033889e+11&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;NHH.MC&lt;/th&gt;
      &lt;td&gt;NH Hotel Group, S.A.&lt;/td&gt;
      &lt;td&gt;0.20&lt;/td&gt;
      &lt;td&gt;-0.05&lt;/td&gt;
      &lt;td&gt;0.50&lt;/td&gt;
      &lt;td&gt;1.475451e+09&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;NOKIA.HE&lt;/th&gt;
      &lt;td&gt;Nokia Corporation&lt;/td&gt;
      &lt;td&gt;0.05&lt;/td&gt;
      &lt;td&gt;-0.05&lt;/td&gt;
      &lt;td&gt;0.20&lt;/td&gt;
      &lt;td&gt;1.926819e+10&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;NVDA&lt;/th&gt;
      &lt;td&gt;NVIDIA Corporation&lt;/td&gt;
      &lt;td&gt;0.10&lt;/td&gt;
      &lt;td&gt;-0.05&lt;/td&gt;
      &lt;td&gt;0.30&lt;/td&gt;
      &lt;td&gt;2.806550e+11&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;ORCL&lt;/th&gt;
      &lt;td&gt;Oracle Corporation&lt;/td&gt;
      &lt;td&gt;0.05&lt;/td&gt;
      &lt;td&gt;0.00&lt;/td&gt;
      &lt;td&gt;0.05&lt;/td&gt;
      &lt;td&gt;1.641228e+11&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;PEP&lt;/th&gt;
      &lt;td&gt;PepsiCo, Inc.&lt;/td&gt;
      &lt;td&gt;0.00&lt;/td&gt;
      &lt;td&gt;-0.05&lt;/td&gt;
      &lt;td&gt;0.05&lt;/td&gt;
      &lt;td&gt;1.651222e+11&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;QCOM&lt;/th&gt;
      &lt;td&gt;QUALCOMM Incorporated&lt;/td&gt;
      &lt;td&gt;0.05&lt;/td&gt;
      &lt;td&gt;-0.02&lt;/td&gt;
      &lt;td&gt;0.15&lt;/td&gt;
      &lt;td&gt;1.291990e+11&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;SSUN.F&lt;/th&gt;
      &lt;td&gt;Samsung Electronics Co., Ltd.&lt;/td&gt;
      &lt;td&gt;0.10&lt;/td&gt;
      &lt;td&gt;-0.02&lt;/td&gt;
      &lt;td&gt;0.20&lt;/td&gt;
      &lt;td&gt;4.059750e+11&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;SIE.DE&lt;/th&gt;
      &lt;td&gt;Siemens Aktiengesellschaft&lt;/td&gt;
      &lt;td&gt;0.05&lt;/td&gt;
      &lt;td&gt;-0.02&lt;/td&gt;
      &lt;td&gt;0.10&lt;/td&gt;
      &lt;td&gt;1.086902e+11&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;ENR.DE&lt;/th&gt;
      &lt;td&gt;Siemens Energy AG&lt;/td&gt;
      &lt;td&gt;0.05&lt;/td&gt;
      &lt;td&gt;-0.02&lt;/td&gt;
      &lt;td&gt;0.10&lt;/td&gt;
      &lt;td&gt;2.160643e+10&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;SPOT&lt;/th&gt;
      &lt;td&gt;Spotify Technology S.A.&lt;/td&gt;
      &lt;td&gt;0.02&lt;/td&gt;
      &lt;td&gt;-0.05&lt;/td&gt;
      &lt;td&gt;0.10&lt;/td&gt;
      &lt;td&gt;4.376889e+10&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;TSLA&lt;/th&gt;
      &lt;td&gt;Tesla, Inc.&lt;/td&gt;
      &lt;td&gt;0.00&lt;/td&gt;
      &lt;td&gt;-0.20&lt;/td&gt;
      &lt;td&gt;0.05&lt;/td&gt;
      &lt;td&gt;5.454659e+11&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;TXN&lt;/th&gt;
      &lt;td&gt;Texas Instruments Incorporated&lt;/td&gt;
      &lt;td&gt;0.05&lt;/td&gt;
      &lt;td&gt;0.00&lt;/td&gt;
      &lt;td&gt;0.10&lt;/td&gt;
      &lt;td&gt;1.416198e+11&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;BA&lt;/th&gt;
      &lt;td&gt;The Boeing Company&lt;/td&gt;
      &lt;td&gt;0.05&lt;/td&gt;
      &lt;td&gt;-0.05&lt;/td&gt;
      &lt;td&gt;0.10&lt;/td&gt;
      &lt;td&gt;1.208403e+11&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;KHC&lt;/th&gt;
      &lt;td&gt;The Kraft Heinz Company&lt;/td&gt;
      &lt;td&gt;0.00&lt;/td&gt;
      &lt;td&gt;-0.05&lt;/td&gt;
      &lt;td&gt;0.05&lt;/td&gt;
      &lt;td&gt;4.085665e+10&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;PG&lt;/th&gt;
      &lt;td&gt;The Procter &amp;amp; Gamble Company&lt;/td&gt;
      &lt;td&gt;0.05&lt;/td&gt;
      &lt;td&gt;-0.05&lt;/td&gt;
      &lt;td&gt;0.05&lt;/td&gt;
      &lt;td&gt;2.802307e+11&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;DIS&lt;/th&gt;
      &lt;td&gt;The Walt Disney Company&lt;/td&gt;
      &lt;td&gt;0.05&lt;/td&gt;
      &lt;td&gt;-0.05&lt;/td&gt;
      &lt;td&gt;0.20&lt;/td&gt;
      &lt;td&gt;2.940217e+11&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;TMO&lt;/th&gt;
      &lt;td&gt;Thermo Fisher Scientific Inc.&lt;/td&gt;
      &lt;td&gt;0.05&lt;/td&gt;
      &lt;td&gt;-0.05&lt;/td&gt;
      &lt;td&gt;0.15&lt;/td&gt;
      &lt;td&gt;1.527621e+11&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;TM&lt;/th&gt;
      &lt;td&gt;Toyota Motor Corporation&lt;/td&gt;
      &lt;td&gt;0.05&lt;/td&gt;
      &lt;td&gt;-0.02&lt;/td&gt;
      &lt;td&gt;0.10&lt;/td&gt;
      &lt;td&gt;1.805378e+11&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;UBER&lt;/th&gt;
      &lt;td&gt;Uber Technologies, Inc.&lt;/td&gt;
      &lt;td&gt;0.10&lt;/td&gt;
      &lt;td&gt;-0.10&lt;/td&gt;
      &lt;td&gt;0.20&lt;/td&gt;
      &lt;td&gt;8.531728e+10&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;UL&lt;/th&gt;
      &lt;td&gt;Unilever PLC&lt;/td&gt;
      &lt;td&gt;0.00&lt;/td&gt;
      &lt;td&gt;-0.05&lt;/td&gt;
      &lt;td&gt;0.05&lt;/td&gt;
      &lt;td&gt;1.977436e+11&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;


&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# Get market reference (MSCI All World Accumulative ETF in USD)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;market &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; pd&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;DataFrame(yf&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;download(ALL_WORLD, start&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;START_DATE, end&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;END_DATE)[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Adj Close&amp;#39;&lt;/span&gt;])
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;market&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;columns &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; [&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Market Ref:USD&amp;#39;&lt;/span&gt;]
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;cc &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; CurrencyConverter(fallback_on_missing_rate&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;True&lt;/span&gt;, fallback_on_wrong_date&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;True&amp;#39;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; index &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; market&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;index:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    original_value &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; market&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;at[index, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Market Ref:USD&amp;#39;&lt;/span&gt;]
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    value &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; cc&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;convert(original_value, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;USD&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;EUR&amp;#39;&lt;/span&gt;, date&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;index&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;to_pydatetime())
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    market&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;at[index, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Market Ref:EUR&amp;#39;&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; value
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# Fill any NA values with the best forward or backarwd value&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;market&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;fillna(method&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;ffill&amp;#39;&lt;/span&gt;, inplace&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;True&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;del&lt;/span&gt; cc, original_value, value, index
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;pre&gt;&lt;code&gt;[*********************100%***********************]  1 of 1 completed
&lt;/code&gt;&lt;/pre&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# Clean up dataframes and keep only EUR with the symbol name&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# Same for Market&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; column &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; stocks&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;columns:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;:EUR&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;not&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; column:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            stocks&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;drop(column, axis&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;columns&amp;#39;&lt;/span&gt;, inplace&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;True&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    symbol, currency &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; column&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;split(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;:&amp;#39;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    stocks&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;rename(mapper&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;{column: symbol}, axis&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;columns&amp;#39;&lt;/span&gt;, inplace&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;True&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; column &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; market&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;columns:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;:EUR&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;not&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; column:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            market&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;drop(column, axis&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;columns&amp;#39;&lt;/span&gt;, inplace&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;True&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    symbol, currency &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; column&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;split(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;:&amp;#39;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    market&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;rename(mapper&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;{column: symbol}, axis&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;columns&amp;#39;&lt;/span&gt;, inplace&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;True&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;del&lt;/span&gt; column, symbol, currency
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# Create a checkpoint&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;stocks&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;to_csv(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;cache_stocks.csv&amp;#39;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;market&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;to_csv(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;cache_market.csv&amp;#39;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# Restore Checkpoint&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;stocks &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; pd&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;read_csv(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;cache_stocks.csv&amp;#39;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;stocks&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;set_index(pd&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;DatetimeIndex(stocks[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Date&amp;#39;&lt;/span&gt;]), inplace&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;True&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;stocks&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;drop([&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Date&amp;#39;&lt;/span&gt;], axis&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;columns&amp;#39;&lt;/span&gt;, inplace&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;True&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;market &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; pd&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;read_csv(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;cache_market.csv&amp;#39;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;market&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;set_index(pd&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;DatetimeIndex(market[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Date&amp;#39;&lt;/span&gt;]), inplace&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;True&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;market&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;drop([&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Date&amp;#39;&lt;/span&gt;], axis&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;columns&amp;#39;&lt;/span&gt;, inplace&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;True&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# Construct the dictionary with your views&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;views &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; stocks_pd[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Prediction&amp;#39;&lt;/span&gt;]&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;to_dict()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# Construct a uncertanties dictionary&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;optimistic &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; stocks_pd[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Optimistic&amp;#39;&lt;/span&gt;]&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;to_dict()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;pesimistic &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; stocks_pd[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Pesimistic&amp;#39;&lt;/span&gt;]&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;to_dict()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;variances &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; []
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; symbol &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; views&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;keys():
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    sigma &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; (optimistic[symbol] &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; pesimistic[symbol])&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    variances&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;append(sigma &lt;span style=&#34;color:#f92672&#34;&gt;**&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;omega &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; np&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;diag(variances)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;del&lt;/span&gt; optimistic, pesimistic, variances, symbol, sigma
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# Construct the Black Litterman &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;S &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; risk_models&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;CovarianceShrinkage(stocks)&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;ledoit_wolf()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;delta &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; black_litterman&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;market_implied_risk_aversion(market[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Market Ref&amp;#39;&lt;/span&gt;])
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# Using a pi equal weighted as the market caps for stocks are too complex to calculate&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;bl &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; BlackLittermanModel(S, pi&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;market&amp;#34;&lt;/span&gt;, market_caps&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;stocks_pd[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Market Cap&amp;#39;&lt;/span&gt;], 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                         risk_aversion&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;delta, absolute_views&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;views, omega&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;omega)
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;ret_bl &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; bl&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;bl_returns()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;S_bl &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; bl&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;bl_cov()
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;from&lt;/span&gt; pypfopt &lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; EfficientFrontier, objective_functions
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;ef &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; EfficientFrontier(ret_bl, S_bl)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;ef&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;add_objective(objective_functions&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;L2_reg)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;ef&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;max_sharpe()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;weights &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; ef&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;clean_weights()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;pd&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;Series(weights)&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;plot&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;pie(figsize&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;(&lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;));
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;pre&gt;&lt;code&gt;/home/luis/.local/lib/python3.8/site-packages/pypfopt/efficient_frontier.py:195: UserWarning: max_sharpe transforms the optimisation problem so additional objectives may not work as expected.
  warnings.warn(
/home/luis/.local/lib/python3.8/site-packages/pandas/plotting/_matplotlib/core.py:1547: MatplotlibDeprecationWarning: normalize=None does not normalize if the sum is less than 1 but this behavior is deprecated since 3.3 until two minor releases later. After the deprecation period the default value will be normalize=True. To prevent normalization pass normalize=False 
  results = ax.pie(y, labels=blabels, **kwds)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://blog.miguens.one/img/invest-stocks.png&#34; alt=&#34;png&#34;&gt;&lt;/p&gt;</description>
            <content type="html"><![CDATA[<p>This is a continuation of the previous post. Here I will apply the Black Litterman model to a portfolio of stocks.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#f92672">import</span> pandas <span style="color:#66d9ef">as</span> pd
</span></span><span style="display:flex;"><span><span style="color:#f92672">import</span> yfinance <span style="color:#66d9ef">as</span> yf
</span></span><span style="display:flex;"><span><span style="color:#f92672">import</span> openpyxl
</span></span><span style="display:flex;"><span><span style="color:#f92672">from</span> currency_converter <span style="color:#f92672">import</span> CurrencyConverter
</span></span><span style="display:flex;"><span><span style="color:#f92672">import</span> numpy <span style="color:#66d9ef">as</span> np
</span></span><span style="display:flex;"><span><span style="color:#f92672">from</span> pypfopt <span style="color:#f92672">import</span> BlackLittermanModel
</span></span><span style="display:flex;"><span><span style="color:#f92672">from</span> pypfopt <span style="color:#f92672">import</span> black_litterman, risk_models
</span></span></code></pre></div><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#75715e"># Declare constants</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>PORTFOLIO<span style="color:#f92672">=</span><span style="color:#e6db74">&#39;/mnt/wd-bigfoot/share/luis/OneDrive/Documents/Portfolio/00 portfolio.xlsx&#39;</span>
</span></span><span style="display:flex;"><span>STOCKS_SHEET<span style="color:#f92672">=</span><span style="color:#e6db74">&#39;Stocks&#39;</span>
</span></span><span style="display:flex;"><span>START_DATE<span style="color:#f92672">=</span><span style="color:#e6db74">&#39;2010-01-01&#39;</span>
</span></span><span style="display:flex;"><span>END_DATE<span style="color:#f92672">=</span><span style="color:#e6db74">&#39;2021-01-08&#39;</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>ALL_WORLD<span style="color:#f92672">=</span><span style="color:#e6db74">&#39;IWDA.AS&#39;</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>TOTAL_FUNDS<span style="color:#f92672">=</span><span style="color:#ae81ff">40e3</span> <span style="color:#75715e"># 40.000 EUR</span>
</span></span></code></pre></div><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#75715e"># Open the portfolio and get the stocks</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>stocks_pd <span style="color:#f92672">=</span> pd<span style="color:#f92672">.</span>read_excel(PORTFOLIO, engine<span style="color:#f92672">=</span><span style="color:#e6db74">&#39;openpyxl&#39;</span>, sheet_name<span style="color:#f92672">=</span>STOCKS_SHEET)
</span></span><span style="display:flex;"><span>stocks_pd<span style="color:#f92672">.</span>index <span style="color:#f92672">=</span> stocks_pd[<span style="color:#e6db74">&#39;Symbol&#39;</span>]
</span></span><span style="display:flex;"><span>stocks_pd <span style="color:#f92672">=</span> stocks_pd[[<span style="color:#e6db74">&#39;Company Name&#39;</span>, <span style="color:#e6db74">&#39;Prediction&#39;</span>, <span style="color:#e6db74">&#39;Pesimistic&#39;</span>, <span style="color:#e6db74">&#39;Optimistic&#39;</span>]]
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>stocks_pd
</span></span></code></pre></div>


<div>
<style scoped>
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }

    .dataframe tbody tr th {
        vertical-align: top;
    }

    .dataframe thead th {
        text-align: right;
    }
</style>
<table border="1" class="dataframe">
  <thead>
    <tr style="text-align: right;">
      <th></th>
      <th>Company Name</th>
      <th>Prediction</th>
      <th>Pesimistic</th>
      <th>Optimistic</th>
    </tr>
    <tr>
      <th>Symbol</th>
      <th></th>
      <th></th>
      <th></th>
      <th></th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>AMD</th>
      <td>Advanced Micro Devices, Inc.</td>
      <td>0.20</td>
      <td>0.03</td>
      <td>0.40</td>
    </tr>
    <tr>
      <th>AIR.PA</th>
      <td>Airbus SE</td>
      <td>0.10</td>
      <td>0.03</td>
      <td>0.20</td>
    </tr>
    <tr>
      <th>GOOGL</th>
      <td>Alphabet Inc.</td>
      <td>0.10</td>
      <td>0.03</td>
      <td>0.30</td>
    </tr>
    <tr>
      <th>AMZN</th>
      <td>Amazon.com, Inc.</td>
      <td>0.20</td>
      <td>0.05</td>
      <td>0.50</td>
    </tr>
    <tr>
      <th>AAPL</th>
      <td>Apple Inc.</td>
      <td>0.15</td>
      <td>0.00</td>
      <td>0.40</td>
    </tr>
    <tr>
      <th>BA.L</th>
      <td>BAE Systems plc</td>
      <td>0.00</td>
      <td>-0.05</td>
      <td>0.05</td>
    </tr>
    <tr>
      <th>CSCO</th>
      <td>Cisco Systems, Inc.</td>
      <td>0.00</td>
      <td>-0.05</td>
      <td>0.05</td>
    </tr>
    <tr>
      <th>BN.PA</th>
      <td>Danone S.A.</td>
      <td>0.00</td>
      <td>-0.05</td>
      <td>0.05</td>
    </tr>
    <tr>
      <th>FB</th>
      <td>Facebook, Inc.</td>
      <td>0.05</td>
      <td>-0.05</td>
      <td>0.05</td>
    </tr>
    <tr>
      <th>GE</th>
      <td>General Electric Company</td>
      <td>0.05</td>
      <td>0.00</td>
      <td>0.05</td>
    </tr>
    <tr>
      <th>HYU.F</th>
      <td>Hyundai Corporation</td>
      <td>0.10</td>
      <td>0.00</td>
      <td>0.30</td>
    </tr>
    <tr>
      <th>IDR.MC</th>
      <td>Indra Sistemas, S.A.</td>
      <td>0.00</td>
      <td>-0.05</td>
      <td>0.02</td>
    </tr>
    <tr>
      <th>INTC</th>
      <td>Intel Corporation</td>
      <td>0.00</td>
      <td>-0.02</td>
      <td>0.05</td>
    </tr>
    <tr>
      <th>IBM</th>
      <td>International Business Machines Corporation</td>
      <td>0.05</td>
      <td>-0.02</td>
      <td>0.10</td>
    </tr>
    <tr>
      <th>IAG.MC</th>
      <td>International Consolidated Airlines Group, S.A.</td>
      <td>0.50</td>
      <td>-0.10</td>
      <td>1.00</td>
    </tr>
    <tr>
      <th>PHIA.AS</th>
      <td>Koninklijke Philips N.V.</td>
      <td>0.00</td>
      <td>-0.05</td>
      <td>0.05</td>
    </tr>
    <tr>
      <th>MEL.MC</th>
      <td>Meliá Hotels International, S.A.</td>
      <td>0.20</td>
      <td>0.00</td>
      <td>0.50</td>
    </tr>
    <tr>
      <th>MRK</th>
      <td>Merck &amp; Co., Inc.</td>
      <td>0.05</td>
      <td>0.00</td>
      <td>0.05</td>
    </tr>
    <tr>
      <th>MSFT</th>
      <td>Microsoft Corporation</td>
      <td>0.10</td>
      <td>0.00</td>
      <td>0.15</td>
    </tr>
    <tr>
      <th>NESN.SW</th>
      <td>Nestlé S.A.</td>
      <td>0.00</td>
      <td>-0.05</td>
      <td>0.03</td>
    </tr>
    <tr>
      <th>NFLX</th>
      <td>Netflix, Inc.</td>
      <td>0.05</td>
      <td>-0.01</td>
      <td>0.15</td>
    </tr>
    <tr>
      <th>NHH.MC</th>
      <td>NH Hotel Group, S.A.</td>
      <td>0.20</td>
      <td>-0.05</td>
      <td>0.50</td>
    </tr>
    <tr>
      <th>NOKIA.HE</th>
      <td>Nokia Corporation</td>
      <td>0.05</td>
      <td>-0.05</td>
      <td>0.20</td>
    </tr>
    <tr>
      <th>NVDA</th>
      <td>NVIDIA Corporation</td>
      <td>0.10</td>
      <td>-0.05</td>
      <td>0.30</td>
    </tr>
    <tr>
      <th>ORCL</th>
      <td>Oracle Corporation</td>
      <td>0.05</td>
      <td>0.00</td>
      <td>0.05</td>
    </tr>
    <tr>
      <th>PEP</th>
      <td>PepsiCo, Inc.</td>
      <td>0.00</td>
      <td>-0.05</td>
      <td>0.05</td>
    </tr>
    <tr>
      <th>QCOM</th>
      <td>QUALCOMM Incorporated</td>
      <td>0.05</td>
      <td>-0.02</td>
      <td>0.15</td>
    </tr>
    <tr>
      <th>SSUN.F</th>
      <td>Samsung Electronics Co., Ltd.</td>
      <td>0.10</td>
      <td>-0.02</td>
      <td>0.20</td>
    </tr>
    <tr>
      <th>SIE.DE</th>
      <td>Siemens Aktiengesellschaft</td>
      <td>0.05</td>
      <td>-0.02</td>
      <td>0.10</td>
    </tr>
    <tr>
      <th>ENR.DE</th>
      <td>Siemens Energy AG</td>
      <td>0.05</td>
      <td>-0.02</td>
      <td>0.10</td>
    </tr>
    <tr>
      <th>SPOT</th>
      <td>Spotify Technology S.A.</td>
      <td>0.02</td>
      <td>-0.05</td>
      <td>0.10</td>
    </tr>
    <tr>
      <th>TSLA</th>
      <td>Tesla, Inc.</td>
      <td>0.00</td>
      <td>-0.20</td>
      <td>0.05</td>
    </tr>
    <tr>
      <th>TXN</th>
      <td>Texas Instruments Incorporated</td>
      <td>0.05</td>
      <td>0.00</td>
      <td>0.10</td>
    </tr>
    <tr>
      <th>BA</th>
      <td>The Boeing Company</td>
      <td>0.05</td>
      <td>-0.05</td>
      <td>0.10</td>
    </tr>
    <tr>
      <th>KHC</th>
      <td>The Kraft Heinz Company</td>
      <td>0.00</td>
      <td>-0.05</td>
      <td>0.05</td>
    </tr>
    <tr>
      <th>PG</th>
      <td>The Procter &amp; Gamble Company</td>
      <td>0.05</td>
      <td>-0.05</td>
      <td>0.05</td>
    </tr>
    <tr>
      <th>DIS</th>
      <td>The Walt Disney Company</td>
      <td>0.05</td>
      <td>-0.05</td>
      <td>0.20</td>
    </tr>
    <tr>
      <th>TMO</th>
      <td>Thermo Fisher Scientific Inc.</td>
      <td>0.05</td>
      <td>-0.05</td>
      <td>0.15</td>
    </tr>
    <tr>
      <th>TM</th>
      <td>Toyota Motor Corporation</td>
      <td>0.05</td>
      <td>-0.02</td>
      <td>0.10</td>
    </tr>
    <tr>
      <th>UBER</th>
      <td>Uber Technologies, Inc.</td>
      <td>0.10</td>
      <td>-0.10</td>
      <td>0.20</td>
    </tr>
    <tr>
      <th>UL</th>
      <td>Unilever PLC</td>
      <td>0.00</td>
      <td>-0.05</td>
      <td>0.05</td>
    </tr>
  </tbody>
</table>
</div>


<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#75715e"># Get the historical data of the stocks and exchange to EUR</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>stocks <span style="color:#f92672">=</span> pd<span style="color:#f92672">.</span>DataFrame()
</span></span><span style="display:flex;"><span>cc <span style="color:#f92672">=</span> CurrencyConverter(fallback_on_missing_rate<span style="color:#f92672">=</span><span style="color:#66d9ef">True</span>, fallback_on_wrong_date<span style="color:#f92672">=</span><span style="color:#e6db74">&#39;True&#39;</span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">for</span> symbol <span style="color:#f92672">in</span> stocks_pd<span style="color:#f92672">.</span>index:
</span></span><span style="display:flex;"><span>    history <span style="color:#f92672">=</span> yf<span style="color:#f92672">.</span>download(symbol, start<span style="color:#f92672">=</span>START_DATE, end<span style="color:#f92672">=</span>END_DATE)[<span style="color:#e6db74">&#39;Adj Close&#39;</span>]
</span></span><span style="display:flex;"><span>    dataframe <span style="color:#f92672">=</span> pd<span style="color:#f92672">.</span>DataFrame(history)
</span></span><span style="display:flex;"><span>    currency <span style="color:#f92672">=</span> yf<span style="color:#f92672">.</span>Ticker(symbol)<span style="color:#f92672">.</span>info[<span style="color:#e6db74">&#39;currency&#39;</span>]<span style="color:#f92672">.</span>upper()
</span></span><span style="display:flex;"><span>    dataframe<span style="color:#f92672">.</span>columns <span style="color:#f92672">=</span> [ symbol <span style="color:#f92672">+</span> <span style="color:#e6db74">&#39;:&#39;</span> <span style="color:#f92672">+</span> currency ]
</span></span><span style="display:flex;"><span>    
</span></span><span style="display:flex;"><span>    <span style="color:#75715e"># Add Market Cap to the stocks_pd</span>
</span></span><span style="display:flex;"><span>    stocks_pd<span style="color:#f92672">.</span>at[symbol, <span style="color:#e6db74">&#39;Market Cap&#39;</span>] <span style="color:#f92672">=</span> cc<span style="color:#f92672">.</span>convert(yf<span style="color:#f92672">.</span>Ticker(symbol)<span style="color:#f92672">.</span>info[<span style="color:#e6db74">&#39;marketCap&#39;</span>],
</span></span><span style="display:flex;"><span>                                                  currency, <span style="color:#e6db74">&#39;EUR&#39;</span>, 
</span></span><span style="display:flex;"><span>                                                  dataframe<span style="color:#f92672">.</span>index[<span style="color:#f92672">-</span><span style="color:#ae81ff">1</span>]<span style="color:#f92672">.</span>to_pydatetime())
</span></span><span style="display:flex;"><span>    
</span></span><span style="display:flex;"><span>    <span style="color:#75715e"># Add column with security in EUR if needed</span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">if</span> currency<span style="color:#f92672">.</span>lower() <span style="color:#f92672">!=</span> <span style="color:#e6db74">&#39;eur&#39;</span>:
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">for</span> index <span style="color:#f92672">in</span> dataframe<span style="color:#f92672">.</span>index:
</span></span><span style="display:flex;"><span>            original_value <span style="color:#f92672">=</span> dataframe<span style="color:#f92672">.</span>at[index, symbol <span style="color:#f92672">+</span> <span style="color:#e6db74">&#39;:&#39;</span> <span style="color:#f92672">+</span> currency]
</span></span><span style="display:flex;"><span>            value <span style="color:#f92672">=</span> cc<span style="color:#f92672">.</span>convert(original_value, currency, <span style="color:#e6db74">&#39;EUR&#39;</span>, date<span style="color:#f92672">=</span>index<span style="color:#f92672">.</span>to_pydatetime())
</span></span><span style="display:flex;"><span>            dataframe<span style="color:#f92672">.</span>at[index, symbol <span style="color:#f92672">+</span> <span style="color:#e6db74">&#39;:EUR&#39;</span>] <span style="color:#f92672">=</span> value
</span></span><span style="display:flex;"><span>    
</span></span><span style="display:flex;"><span>    <span style="color:#75715e"># Merge everything</span>
</span></span><span style="display:flex;"><span>    stocks <span style="color:#f92672">=</span> pd<span style="color:#f92672">.</span>concat([ stocks, dataframe], axis<span style="color:#f92672">=</span><span style="color:#e6db74">&#39;columns&#39;</span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Fill any NA values with the best forward or backarwd value</span>
</span></span><span style="display:flex;"><span>stocks<span style="color:#f92672">.</span>fillna(method<span style="color:#f92672">=</span><span style="color:#e6db74">&#39;ffill&#39;</span>, inplace<span style="color:#f92672">=</span><span style="color:#66d9ef">True</span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">del</span> cc, symbol, history, dataframe, currency, original_value, value, index
</span></span></code></pre></div><pre><code>[*********************100%***********************]  1 of 1 completed
[*********************100%***********************]  1 of 1 completed
[*********************100%***********************]  1 of 1 completed
[*********************100%***********************]  1 of 1 completed
[*********************100%***********************]  1 of 1 completed
[*********************100%***********************]  1 of 1 completed
[*********************100%***********************]  1 of 1 completed
[*********************100%***********************]  1 of 1 completed
[*********************100%***********************]  1 of 1 completed
[*********************100%***********************]  1 of 1 completed
[*********************100%***********************]  1 of 1 completed
[*********************100%***********************]  1 of 1 completed
[*********************100%***********************]  1 of 1 completed
[*********************100%***********************]  1 of 1 completed
[*********************100%***********************]  1 of 1 completed
[*********************100%***********************]  1 of 1 completed
[*********************100%***********************]  1 of 1 completed
[*********************100%***********************]  1 of 1 completed
[*********************100%***********************]  1 of 1 completed
[*********************100%***********************]  1 of 1 completed
[*********************100%***********************]  1 of 1 completed
[*********************100%***********************]  1 of 1 completed
[*********************100%***********************]  1 of 1 completed
[*********************100%***********************]  1 of 1 completed
[*********************100%***********************]  1 of 1 completed
[*********************100%***********************]  1 of 1 completed
[*********************100%***********************]  1 of 1 completed
[*********************100%***********************]  1 of 1 completed
[*********************100%***********************]  1 of 1 completed
[*********************100%***********************]  1 of 1 completed
[*********************100%***********************]  1 of 1 completed
[*********************100%***********************]  1 of 1 completed
[*********************100%***********************]  1 of 1 completed
[*********************100%***********************]  1 of 1 completed
[*********************100%***********************]  1 of 1 completed
[*********************100%***********************]  1 of 1 completed
[*********************100%***********************]  1 of 1 completed
[*********************100%***********************]  1 of 1 completed
[*********************100%***********************]  1 of 1 completed
[*********************100%***********************]  1 of 1 completed
[*********************100%***********************]  1 of 1 completed
</code></pre>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span>stocks_pd
</span></span></code></pre></div>



<div>
<style scoped>
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }

    .dataframe tbody tr th {
        vertical-align: top;
    }

    .dataframe thead th {
        text-align: right;
    }
</style>
<table border="1" class="dataframe">
  <thead>
    <tr style="text-align: right;">
      <th></th>
      <th>Company Name</th>
      <th>Prediction</th>
      <th>Pesimistic</th>
      <th>Optimistic</th>
      <th>Market Cap</th>
    </tr>
    <tr>
      <th>Symbol</th>
      <th></th>
      <th></th>
      <th></th>
      <th></th>
      <th></th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>AMD</th>
      <td>Advanced Micro Devices, Inc.</td>
      <td>0.20</td>
      <td>0.03</td>
      <td>0.40</td>
      <td>8.148238e+10</td>
    </tr>
    <tr>
      <th>AIR.PA</th>
      <td>Airbus SE</td>
      <td>0.10</td>
      <td>0.03</td>
      <td>0.20</td>
      <td>7.461750e+10</td>
    </tr>
    <tr>
      <th>GOOGL</th>
      <td>Alphabet Inc.</td>
      <td>0.10</td>
      <td>0.03</td>
      <td>0.30</td>
      <td>1.183262e+12</td>
    </tr>
    <tr>
      <th>AMZN</th>
      <td>Amazon.com, Inc.</td>
      <td>0.20</td>
      <td>0.05</td>
      <td>0.50</td>
      <td>1.355935e+12</td>
    </tr>
    <tr>
      <th>AAPL</th>
      <td>Apple Inc.</td>
      <td>0.15</td>
      <td>0.00</td>
      <td>0.40</td>
      <td>1.765546e+12</td>
    </tr>
    <tr>
      <th>BA.L</th>
      <td>BAE Systems plc</td>
      <td>0.00</td>
      <td>-0.05</td>
      <td>0.05</td>
      <td>1.787769e+10</td>
    </tr>
    <tr>
      <th>CSCO</th>
      <td>Cisco Systems, Inc.</td>
      <td>0.00</td>
      <td>-0.05</td>
      <td>0.05</td>
      <td>1.811978e+11</td>
    </tr>
    <tr>
      <th>BN.PA</th>
      <td>Danone S.A.</td>
      <td>0.00</td>
      <td>-0.05</td>
      <td>0.05</td>
      <td>3.849391e+10</td>
    </tr>
    <tr>
      <th>FB</th>
      <td>Facebook, Inc.</td>
      <td>0.05</td>
      <td>-0.05</td>
      <td>0.05</td>
      <td>7.102801e+11</td>
    </tr>
    <tr>
      <th>GE</th>
      <td>General Electric Company</td>
      <td>0.05</td>
      <td>0.00</td>
      <td>0.05</td>
      <td>9.526443e+10</td>
    </tr>
    <tr>
      <th>HYU.F</th>
      <td>Hyundai Corporation</td>
      <td>0.10</td>
      <td>0.00</td>
      <td>0.30</td>
      <td>3.768063e+10</td>
    </tr>
    <tr>
      <th>IDR.MC</th>
      <td>Indra Sistemas, S.A.</td>
      <td>0.00</td>
      <td>-0.05</td>
      <td>0.02</td>
      <td>1.320735e+09</td>
    </tr>
    <tr>
      <th>INTC</th>
      <td>Intel Corporation</td>
      <td>0.00</td>
      <td>-0.02</td>
      <td>0.05</td>
      <td>2.213519e+11</td>
    </tr>
    <tr>
      <th>IBM</th>
      <td>International Business Machines Corporation</td>
      <td>0.05</td>
      <td>-0.02</td>
      <td>0.10</td>
      <td>1.000500e+11</td>
    </tr>
    <tr>
      <th>IAG.MC</th>
      <td>International Consolidated Airlines Group, S.A.</td>
      <td>0.50</td>
      <td>-0.10</td>
      <td>1.00</td>
      <td>1.080973e+10</td>
    </tr>
    <tr>
      <th>PHIA.AS</th>
      <td>Koninklijke Philips N.V.</td>
      <td>0.00</td>
      <td>-0.05</td>
      <td>0.05</td>
      <td>4.355928e+10</td>
    </tr>
    <tr>
      <th>MEL.MC</th>
      <td>Meliá Hotels International, S.A.</td>
      <td>0.20</td>
      <td>0.00</td>
      <td>0.50</td>
      <td>1.345669e+09</td>
    </tr>
    <tr>
      <th>MRK</th>
      <td>Merck &amp; Co., Inc.</td>
      <td>0.05</td>
      <td>0.00</td>
      <td>0.05</td>
      <td>1.683183e+11</td>
    </tr>
    <tr>
      <th>MSFT</th>
      <td>Microsoft Corporation</td>
      <td>0.10</td>
      <td>0.00</td>
      <td>0.15</td>
      <td>1.537831e+12</td>
    </tr>
    <tr>
      <th>NESN.SW</th>
      <td>Nestlé S.A.</td>
      <td>0.00</td>
      <td>-0.05</td>
      <td>0.03</td>
      <td>2.751414e+11</td>
    </tr>
    <tr>
      <th>NFLX</th>
      <td>Netflix, Inc.</td>
      <td>0.05</td>
      <td>-0.01</td>
      <td>0.15</td>
      <td>2.033889e+11</td>
    </tr>
    <tr>
      <th>NHH.MC</th>
      <td>NH Hotel Group, S.A.</td>
      <td>0.20</td>
      <td>-0.05</td>
      <td>0.50</td>
      <td>1.475451e+09</td>
    </tr>
    <tr>
      <th>NOKIA.HE</th>
      <td>Nokia Corporation</td>
      <td>0.05</td>
      <td>-0.05</td>
      <td>0.20</td>
      <td>1.926819e+10</td>
    </tr>
    <tr>
      <th>NVDA</th>
      <td>NVIDIA Corporation</td>
      <td>0.10</td>
      <td>-0.05</td>
      <td>0.30</td>
      <td>2.806550e+11</td>
    </tr>
    <tr>
      <th>ORCL</th>
      <td>Oracle Corporation</td>
      <td>0.05</td>
      <td>0.00</td>
      <td>0.05</td>
      <td>1.641228e+11</td>
    </tr>
    <tr>
      <th>PEP</th>
      <td>PepsiCo, Inc.</td>
      <td>0.00</td>
      <td>-0.05</td>
      <td>0.05</td>
      <td>1.651222e+11</td>
    </tr>
    <tr>
      <th>QCOM</th>
      <td>QUALCOMM Incorporated</td>
      <td>0.05</td>
      <td>-0.02</td>
      <td>0.15</td>
      <td>1.291990e+11</td>
    </tr>
    <tr>
      <th>SSUN.F</th>
      <td>Samsung Electronics Co., Ltd.</td>
      <td>0.10</td>
      <td>-0.02</td>
      <td>0.20</td>
      <td>4.059750e+11</td>
    </tr>
    <tr>
      <th>SIE.DE</th>
      <td>Siemens Aktiengesellschaft</td>
      <td>0.05</td>
      <td>-0.02</td>
      <td>0.10</td>
      <td>1.086902e+11</td>
    </tr>
    <tr>
      <th>ENR.DE</th>
      <td>Siemens Energy AG</td>
      <td>0.05</td>
      <td>-0.02</td>
      <td>0.10</td>
      <td>2.160643e+10</td>
    </tr>
    <tr>
      <th>SPOT</th>
      <td>Spotify Technology S.A.</td>
      <td>0.02</td>
      <td>-0.05</td>
      <td>0.10</td>
      <td>4.376889e+10</td>
    </tr>
    <tr>
      <th>TSLA</th>
      <td>Tesla, Inc.</td>
      <td>0.00</td>
      <td>-0.20</td>
      <td>0.05</td>
      <td>5.454659e+11</td>
    </tr>
    <tr>
      <th>TXN</th>
      <td>Texas Instruments Incorporated</td>
      <td>0.05</td>
      <td>0.00</td>
      <td>0.10</td>
      <td>1.416198e+11</td>
    </tr>
    <tr>
      <th>BA</th>
      <td>The Boeing Company</td>
      <td>0.05</td>
      <td>-0.05</td>
      <td>0.10</td>
      <td>1.208403e+11</td>
    </tr>
    <tr>
      <th>KHC</th>
      <td>The Kraft Heinz Company</td>
      <td>0.00</td>
      <td>-0.05</td>
      <td>0.05</td>
      <td>4.085665e+10</td>
    </tr>
    <tr>
      <th>PG</th>
      <td>The Procter &amp; Gamble Company</td>
      <td>0.05</td>
      <td>-0.05</td>
      <td>0.05</td>
      <td>2.802307e+11</td>
    </tr>
    <tr>
      <th>DIS</th>
      <td>The Walt Disney Company</td>
      <td>0.05</td>
      <td>-0.05</td>
      <td>0.20</td>
      <td>2.940217e+11</td>
    </tr>
    <tr>
      <th>TMO</th>
      <td>Thermo Fisher Scientific Inc.</td>
      <td>0.05</td>
      <td>-0.05</td>
      <td>0.15</td>
      <td>1.527621e+11</td>
    </tr>
    <tr>
      <th>TM</th>
      <td>Toyota Motor Corporation</td>
      <td>0.05</td>
      <td>-0.02</td>
      <td>0.10</td>
      <td>1.805378e+11</td>
    </tr>
    <tr>
      <th>UBER</th>
      <td>Uber Technologies, Inc.</td>
      <td>0.10</td>
      <td>-0.10</td>
      <td>0.20</td>
      <td>8.531728e+10</td>
    </tr>
    <tr>
      <th>UL</th>
      <td>Unilever PLC</td>
      <td>0.00</td>
      <td>-0.05</td>
      <td>0.05</td>
      <td>1.977436e+11</td>
    </tr>
  </tbody>
</table>
</div>


<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#75715e"># Get market reference (MSCI All World Accumulative ETF in USD)</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>market <span style="color:#f92672">=</span> pd<span style="color:#f92672">.</span>DataFrame(yf<span style="color:#f92672">.</span>download(ALL_WORLD, start<span style="color:#f92672">=</span>START_DATE, end<span style="color:#f92672">=</span>END_DATE)[<span style="color:#e6db74">&#39;Adj Close&#39;</span>])
</span></span><span style="display:flex;"><span>market<span style="color:#f92672">.</span>columns <span style="color:#f92672">=</span> [<span style="color:#e6db74">&#39;Market Ref:USD&#39;</span>]
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>cc <span style="color:#f92672">=</span> CurrencyConverter(fallback_on_missing_rate<span style="color:#f92672">=</span><span style="color:#66d9ef">True</span>, fallback_on_wrong_date<span style="color:#f92672">=</span><span style="color:#e6db74">&#39;True&#39;</span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">for</span> index <span style="color:#f92672">in</span> market<span style="color:#f92672">.</span>index:
</span></span><span style="display:flex;"><span>    original_value <span style="color:#f92672">=</span> market<span style="color:#f92672">.</span>at[index, <span style="color:#e6db74">&#39;Market Ref:USD&#39;</span>]
</span></span><span style="display:flex;"><span>    value <span style="color:#f92672">=</span> cc<span style="color:#f92672">.</span>convert(original_value, <span style="color:#e6db74">&#39;USD&#39;</span>, <span style="color:#e6db74">&#39;EUR&#39;</span>, date<span style="color:#f92672">=</span>index<span style="color:#f92672">.</span>to_pydatetime())
</span></span><span style="display:flex;"><span>    market<span style="color:#f92672">.</span>at[index, <span style="color:#e6db74">&#39;Market Ref:EUR&#39;</span>] <span style="color:#f92672">=</span> value
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Fill any NA values with the best forward or backarwd value</span>
</span></span><span style="display:flex;"><span>market<span style="color:#f92672">.</span>fillna(method<span style="color:#f92672">=</span><span style="color:#e6db74">&#39;ffill&#39;</span>, inplace<span style="color:#f92672">=</span><span style="color:#66d9ef">True</span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">del</span> cc, original_value, value, index
</span></span></code></pre></div><pre><code>[*********************100%***********************]  1 of 1 completed
</code></pre>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#75715e"># Clean up dataframes and keep only EUR with the symbol name</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Same for Market</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">for</span> column <span style="color:#f92672">in</span> stocks<span style="color:#f92672">.</span>columns:
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">if</span> <span style="color:#e6db74">&#39;:EUR&#39;</span> <span style="color:#f92672">not</span> <span style="color:#f92672">in</span> column:
</span></span><span style="display:flex;"><span>            stocks<span style="color:#f92672">.</span>drop(column, axis<span style="color:#f92672">=</span><span style="color:#e6db74">&#39;columns&#39;</span>, inplace<span style="color:#f92672">=</span><span style="color:#66d9ef">True</span>)
</span></span><span style="display:flex;"><span>    symbol, currency <span style="color:#f92672">=</span> column<span style="color:#f92672">.</span>split(<span style="color:#e6db74">&#39;:&#39;</span>)
</span></span><span style="display:flex;"><span>    stocks<span style="color:#f92672">.</span>rename(mapper<span style="color:#f92672">=</span>{column: symbol}, axis<span style="color:#f92672">=</span><span style="color:#e6db74">&#39;columns&#39;</span>, inplace<span style="color:#f92672">=</span><span style="color:#66d9ef">True</span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">for</span> column <span style="color:#f92672">in</span> market<span style="color:#f92672">.</span>columns:
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">if</span> <span style="color:#e6db74">&#39;:EUR&#39;</span> <span style="color:#f92672">not</span> <span style="color:#f92672">in</span> column:
</span></span><span style="display:flex;"><span>            market<span style="color:#f92672">.</span>drop(column, axis<span style="color:#f92672">=</span><span style="color:#e6db74">&#39;columns&#39;</span>, inplace<span style="color:#f92672">=</span><span style="color:#66d9ef">True</span>)
</span></span><span style="display:flex;"><span>    symbol, currency <span style="color:#f92672">=</span> column<span style="color:#f92672">.</span>split(<span style="color:#e6db74">&#39;:&#39;</span>)
</span></span><span style="display:flex;"><span>    market<span style="color:#f92672">.</span>rename(mapper<span style="color:#f92672">=</span>{column: symbol}, axis<span style="color:#f92672">=</span><span style="color:#e6db74">&#39;columns&#39;</span>, inplace<span style="color:#f92672">=</span><span style="color:#66d9ef">True</span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">del</span> column, symbol, currency
</span></span></code></pre></div><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#75715e"># Create a checkpoint</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>stocks<span style="color:#f92672">.</span>to_csv(<span style="color:#e6db74">&#39;cache_stocks.csv&#39;</span>)
</span></span><span style="display:flex;"><span>market<span style="color:#f92672">.</span>to_csv(<span style="color:#e6db74">&#39;cache_market.csv&#39;</span>)
</span></span></code></pre></div><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#75715e"># Restore Checkpoint</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>stocks <span style="color:#f92672">=</span> pd<span style="color:#f92672">.</span>read_csv(<span style="color:#e6db74">&#39;cache_stocks.csv&#39;</span>)
</span></span><span style="display:flex;"><span>stocks<span style="color:#f92672">.</span>set_index(pd<span style="color:#f92672">.</span>DatetimeIndex(stocks[<span style="color:#e6db74">&#39;Date&#39;</span>]), inplace<span style="color:#f92672">=</span><span style="color:#66d9ef">True</span>)
</span></span><span style="display:flex;"><span>stocks<span style="color:#f92672">.</span>drop([<span style="color:#e6db74">&#39;Date&#39;</span>], axis<span style="color:#f92672">=</span><span style="color:#e6db74">&#39;columns&#39;</span>, inplace<span style="color:#f92672">=</span><span style="color:#66d9ef">True</span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>market <span style="color:#f92672">=</span> pd<span style="color:#f92672">.</span>read_csv(<span style="color:#e6db74">&#39;cache_market.csv&#39;</span>)
</span></span><span style="display:flex;"><span>market<span style="color:#f92672">.</span>set_index(pd<span style="color:#f92672">.</span>DatetimeIndex(market[<span style="color:#e6db74">&#39;Date&#39;</span>]), inplace<span style="color:#f92672">=</span><span style="color:#66d9ef">True</span>)
</span></span><span style="display:flex;"><span>market<span style="color:#f92672">.</span>drop([<span style="color:#e6db74">&#39;Date&#39;</span>], axis<span style="color:#f92672">=</span><span style="color:#e6db74">&#39;columns&#39;</span>, inplace<span style="color:#f92672">=</span><span style="color:#66d9ef">True</span>)
</span></span></code></pre></div><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#75715e"># Construct the dictionary with your views</span>
</span></span><span style="display:flex;"><span>views <span style="color:#f92672">=</span> stocks_pd[<span style="color:#e6db74">&#39;Prediction&#39;</span>]<span style="color:#f92672">.</span>to_dict()
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Construct a uncertanties dictionary</span>
</span></span><span style="display:flex;"><span>optimistic <span style="color:#f92672">=</span> stocks_pd[<span style="color:#e6db74">&#39;Optimistic&#39;</span>]<span style="color:#f92672">.</span>to_dict()
</span></span><span style="display:flex;"><span>pesimistic <span style="color:#f92672">=</span> stocks_pd[<span style="color:#e6db74">&#39;Pesimistic&#39;</span>]<span style="color:#f92672">.</span>to_dict()
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>variances <span style="color:#f92672">=</span> []
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">for</span> symbol <span style="color:#f92672">in</span> views<span style="color:#f92672">.</span>keys():
</span></span><span style="display:flex;"><span>    sigma <span style="color:#f92672">=</span> (optimistic[symbol] <span style="color:#f92672">-</span> pesimistic[symbol])<span style="color:#f92672">/</span><span style="color:#ae81ff">2</span>
</span></span><span style="display:flex;"><span>    variances<span style="color:#f92672">.</span>append(sigma <span style="color:#f92672">**</span> <span style="color:#ae81ff">2</span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>omega <span style="color:#f92672">=</span> np<span style="color:#f92672">.</span>diag(variances)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">del</span> optimistic, pesimistic, variances, symbol, sigma
</span></span></code></pre></div><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#75715e"># Construct the Black Litterman </span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>S <span style="color:#f92672">=</span> risk_models<span style="color:#f92672">.</span>CovarianceShrinkage(stocks)<span style="color:#f92672">.</span>ledoit_wolf()
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>delta <span style="color:#f92672">=</span> black_litterman<span style="color:#f92672">.</span>market_implied_risk_aversion(market[<span style="color:#e6db74">&#39;Market Ref&#39;</span>])
</span></span></code></pre></div><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#75715e"># Using a pi equal weighted as the market caps for stocks are too complex to calculate</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>bl <span style="color:#f92672">=</span> BlackLittermanModel(S, pi<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;market&#34;</span>, market_caps<span style="color:#f92672">=</span>stocks_pd[<span style="color:#e6db74">&#39;Market Cap&#39;</span>], 
</span></span><span style="display:flex;"><span>                         risk_aversion<span style="color:#f92672">=</span>delta, absolute_views<span style="color:#f92672">=</span>views, omega<span style="color:#f92672">=</span>omega)
</span></span></code></pre></div><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span>ret_bl <span style="color:#f92672">=</span> bl<span style="color:#f92672">.</span>bl_returns()
</span></span><span style="display:flex;"><span>S_bl <span style="color:#f92672">=</span> bl<span style="color:#f92672">.</span>bl_cov()
</span></span></code></pre></div><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#f92672">from</span> pypfopt <span style="color:#f92672">import</span> EfficientFrontier, objective_functions
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>ef <span style="color:#f92672">=</span> EfficientFrontier(ret_bl, S_bl)
</span></span><span style="display:flex;"><span>ef<span style="color:#f92672">.</span>add_objective(objective_functions<span style="color:#f92672">.</span>L2_reg)
</span></span><span style="display:flex;"><span>ef<span style="color:#f92672">.</span>max_sharpe()
</span></span><span style="display:flex;"><span>weights <span style="color:#f92672">=</span> ef<span style="color:#f92672">.</span>clean_weights()
</span></span><span style="display:flex;"><span>pd<span style="color:#f92672">.</span>Series(weights)<span style="color:#f92672">.</span>plot<span style="color:#f92672">.</span>pie(figsize<span style="color:#f92672">=</span>(<span style="color:#ae81ff">10</span>,<span style="color:#ae81ff">10</span>));
</span></span></code></pre></div><pre><code>/home/luis/.local/lib/python3.8/site-packages/pypfopt/efficient_frontier.py:195: UserWarning: max_sharpe transforms the optimisation problem so additional objectives may not work as expected.
  warnings.warn(
/home/luis/.local/lib/python3.8/site-packages/pandas/plotting/_matplotlib/core.py:1547: MatplotlibDeprecationWarning: normalize=None does not normalize if the sum is less than 1 but this behavior is deprecated since 3.3 until two minor releases later. After the deprecation period the default value will be normalize=True. To prevent normalization pass normalize=False 
  results = ax.pie(y, labels=blabels, **kwds)
</code></pre>
<p><img src="/img/invest-stocks.png" alt="png"></p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#f92672">from</span> pypfopt <span style="color:#f92672">import</span> DiscreteAllocation
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>da <span style="color:#f92672">=</span> DiscreteAllocation(weights, stocks<span style="color:#f92672">.</span>iloc[<span style="color:#f92672">-</span><span style="color:#ae81ff">1</span>], total_portfolio_value<span style="color:#f92672">=</span>TOTAL_FUNDS)
</span></span><span style="display:flex;"><span>alloc, leftover <span style="color:#f92672">=</span> da<span style="color:#f92672">.</span>greedy_portfolio()
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>allocation <span style="color:#f92672">=</span> pd<span style="color:#f92672">.</span>DataFrame(data<span style="color:#f92672">=</span>stocks_pd[<span style="color:#e6db74">&#39;Company Name&#39;</span>], 
</span></span><span style="display:flex;"><span>                          index<span style="color:#f92672">=</span>stocks_pd<span style="color:#f92672">.</span>index, columns<span style="color:#f92672">=</span>[<span style="color:#e6db74">&#39;Company Name&#39;</span>])
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">for</span> key <span style="color:#f92672">in</span> alloc<span style="color:#f92672">.</span>keys():
</span></span><span style="display:flex;"><span>    allocation<span style="color:#f92672">.</span>at[key, <span style="color:#e6db74">&#39;Desired Position&#39;</span>] <span style="color:#f92672">=</span> alloc[key]
</span></span><span style="display:flex;"><span>    allocation<span style="color:#f92672">.</span>at[key, <span style="color:#e6db74">&#39;Last Price EUR&#39;</span>] <span style="color:#f92672">=</span> int(stocks<span style="color:#f92672">.</span>iloc[<span style="color:#f92672">-</span><span style="color:#ae81ff">1</span>][key] <span style="color:#f92672">*</span> <span style="color:#ae81ff">100</span>)<span style="color:#f92672">/</span><span style="color:#ae81ff">100</span>
</span></span><span style="display:flex;"><span>    allocation<span style="color:#f92672">.</span>at[key, <span style="color:#e6db74">&#39;Total Funds EUR&#39;</span>] <span style="color:#f92672">=</span> int(stocks<span style="color:#f92672">.</span>iloc[<span style="color:#f92672">-</span><span style="color:#ae81ff">1</span>][key] <span style="color:#f92672">*</span> alloc[key] <span style="color:#f92672">*</span> <span style="color:#ae81ff">100</span>)<span style="color:#f92672">/</span><span style="color:#ae81ff">100</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>allocation<span style="color:#f92672">.</span>fillna(<span style="color:#ae81ff">0</span>, inplace<span style="color:#f92672">=</span><span style="color:#66d9ef">True</span>)
</span></span><span style="display:flex;"><span>allocation[<span style="color:#e6db74">&#39;Desired Position&#39;</span>] <span style="color:#f92672">=</span> allocation[<span style="color:#e6db74">&#39;Desired Position&#39;</span>]<span style="color:#f92672">.</span>astype(int)
</span></span><span style="display:flex;"><span>allocation
</span></span></code></pre></div>


<div>
<style scoped>
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }

    .dataframe tbody tr th {
        vertical-align: top;
    }

    .dataframe thead th {
        text-align: right;
    }
</style>
<table border="1" class="dataframe">
  <thead>
    <tr style="text-align: right;">
      <th></th>
      <th>Company Name</th>
      <th>Desired Position</th>
      <th>Last Price EUR</th>
      <th>Total Funds EUR</th>
    </tr>
    <tr>
      <th>Symbol</th>
      <th></th>
      <th></th>
      <th></th>
      <th></th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>AMD</th>
      <td>Advanced Micro Devices, Inc.</td>
      <td>46</td>
      <td>81.66</td>
      <td>3756.74</td>
    </tr>
    <tr>
      <th>AIR.PA</th>
      <td>Airbus SE</td>
      <td>19</td>
      <td>89.62</td>
      <td>1702.78</td>
    </tr>
    <tr>
      <th>GOOGL</th>
      <td>Alphabet Inc.</td>
      <td>2</td>
      <td>1522.77</td>
      <td>3045.55</td>
    </tr>
    <tr>
      <th>AMZN</th>
      <td>Amazon.com, Inc.</td>
      <td>2</td>
      <td>2713.83</td>
      <td>5427.66</td>
    </tr>
    <tr>
      <th>AAPL</th>
      <td>Apple Inc.</td>
      <td>28</td>
      <td>112.19</td>
      <td>3141.34</td>
    </tr>
    <tr>
      <th>BA.L</th>
      <td>BAE Systems plc</td>
      <td>0</td>
      <td>0.00</td>
      <td>0.00</td>
    </tr>
    <tr>
      <th>CSCO</th>
      <td>Cisco Systems, Inc.</td>
      <td>0</td>
      <td>0.00</td>
      <td>0.00</td>
    </tr>
    <tr>
      <th>BN.PA</th>
      <td>Danone S.A.</td>
      <td>0</td>
      <td>0.00</td>
      <td>0.00</td>
    </tr>
    <tr>
      <th>FB</th>
      <td>Facebook, Inc.</td>
      <td>7</td>
      <td>230.63</td>
      <td>1614.46</td>
    </tr>
    <tr>
      <th>GE</th>
      <td>General Electric Company</td>
      <td>80</td>
      <td>9.66</td>
      <td>773.20</td>
    </tr>
    <tr>
      <th>HYU.F</th>
      <td>Hyundai Corporation</td>
      <td>29</td>
      <td>34.29</td>
      <td>994.69</td>
    </tr>
    <tr>
      <th>IDR.MC</th>
      <td>Indra Sistemas, S.A.</td>
      <td>0</td>
      <td>0.00</td>
      <td>0.00</td>
    </tr>
    <tr>
      <th>INTC</th>
      <td>Intel Corporation</td>
      <td>0</td>
      <td>0.00</td>
      <td>0.00</td>
    </tr>
    <tr>
      <th>IBM</th>
      <td>International Business Machines Corporation</td>
      <td>5</td>
      <td>109.24</td>
      <td>546.21</td>
    </tr>
    <tr>
      <th>IAG.MC</th>
      <td>International Consolidated Airlines Group, S.A.</td>
      <td>374</td>
      <td>1.73</td>
      <td>649.82</td>
    </tr>
    <tr>
      <th>PHIA.AS</th>
      <td>Koninklijke Philips N.V.</td>
      <td>0</td>
      <td>0.00</td>
      <td>0.00</td>
    </tr>
    <tr>
      <th>MEL.MC</th>
      <td>Meliá Hotels International, S.A.</td>
      <td>237</td>
      <td>5.53</td>
      <td>1311.79</td>
    </tr>
    <tr>
      <th>MRK</th>
      <td>Merck &amp; Co., Inc.</td>
      <td>12</td>
      <td>71.47</td>
      <td>857.75</td>
    </tr>
    <tr>
      <th>MSFT</th>
      <td>Microsoft Corporation</td>
      <td>13</td>
      <td>186.91</td>
      <td>2429.83</td>
    </tr>
    <tr>
      <th>NESN.SW</th>
      <td>Nestlé S.A.</td>
      <td>0</td>
      <td>0.00</td>
      <td>0.00</td>
    </tr>
    <tr>
      <th>NFLX</th>
      <td>Netflix, Inc.</td>
      <td>3</td>
      <td>436.74</td>
      <td>1310.22</td>
    </tr>
    <tr>
      <th>NHH.MC</th>
      <td>NH Hotel Group, S.A.</td>
      <td>159</td>
      <td>3.46</td>
      <td>550.14</td>
    </tr>
    <tr>
      <th>NOKIA.HE</th>
      <td>Nokia Corporation</td>
      <td>48</td>
      <td>3.23</td>
      <td>155.20</td>
    </tr>
    <tr>
      <th>NVDA</th>
      <td>NVIDIA Corporation</td>
      <td>5</td>
      <td>457.92</td>
      <td>2289.63</td>
    </tr>
    <tr>
      <th>ORCL</th>
      <td>Oracle Corporation</td>
      <td>15</td>
      <td>54.12</td>
      <td>811.92</td>
    </tr>
    <tr>
      <th>PEP</th>
      <td>PepsiCo, Inc.</td>
      <td>0</td>
      <td>0.00</td>
      <td>0.00</td>
    </tr>
    <tr>
      <th>QCOM</th>
      <td>QUALCOMM Incorporated</td>
      <td>9</td>
      <td>132.99</td>
      <td>1196.92</td>
    </tr>
    <tr>
      <th>SSUN.F</th>
      <td>Samsung Electronics Co., Ltd.</td>
      <td>1</td>
      <td>1382.00</td>
      <td>1382.00</td>
    </tr>
    <tr>
      <th>SIE.DE</th>
      <td>Siemens Aktiengesellschaft</td>
      <td>2</td>
      <td>124.30</td>
      <td>248.60</td>
    </tr>
    <tr>
      <th>ENR.DE</th>
      <td>Siemens Energy AG</td>
      <td>0</td>
      <td>0.00</td>
      <td>0.00</td>
    </tr>
    <tr>
      <th>SPOT</th>
      <td>Spotify Technology S.A.</td>
      <td>0</td>
      <td>0.00</td>
      <td>0.00</td>
    </tr>
    <tr>
      <th>TSLA</th>
      <td>Tesla, Inc.</td>
      <td>2</td>
      <td>700.34</td>
      <td>1400.68</td>
    </tr>
    <tr>
      <th>TXN</th>
      <td>Texas Instruments Incorporated</td>
      <td>5</td>
      <td>143.26</td>
      <td>716.30</td>
    </tr>
    <tr>
      <th>BA</th>
      <td>The Boeing Company</td>
      <td>7</td>
      <td>182.55</td>
      <td>1277.86</td>
    </tr>
    <tr>
      <th>KHC</th>
      <td>The Kraft Heinz Company</td>
      <td>0</td>
      <td>0.00</td>
      <td>0.00</td>
    </tr>
    <tr>
      <th>PG</th>
      <td>The Procter &amp; Gamble Company</td>
      <td>0</td>
      <td>0.00</td>
      <td>0.00</td>
    </tr>
    <tr>
      <th>DIS</th>
      <td>The Walt Disney Company</td>
      <td>6</td>
      <td>153.26</td>
      <td>919.56</td>
    </tr>
    <tr>
      <th>TMO</th>
      <td>Thermo Fisher Scientific Inc.</td>
      <td>2</td>
      <td>429.14</td>
      <td>858.29</td>
    </tr>
    <tr>
      <th>TM</th>
      <td>Toyota Motor Corporation</td>
      <td>4</td>
      <td>131.02</td>
      <td>524.09</td>
    </tr>
    <tr>
      <th>UBER</th>
      <td>Uber Technologies, Inc.</td>
      <td>2</td>
      <td>48.17</td>
      <td>96.34</td>
    </tr>
    <tr>
      <th>UL</th>
      <td>Unilever PLC</td>
      <td>0</td>
      <td>0.00</td>
      <td>0.00</td>
    </tr>
  </tbody>
</table>
</div>


<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span>allocation<span style="color:#f92672">.</span>to_excel(<span style="color:#e6db74">&#39;/mnt/wd-bigfoot/share/luis/OneDrive/Documents/Portfolio/99 Last Allocation of Stocks.xlsx&#39;</span>, 
</span></span><span style="display:flex;"><span>                    index<span style="color:#f92672">=</span><span style="color:#66d9ef">True</span>)
</span></span></code></pre></div>]]></content>
        </item>
        
        <item>
            <title>Investing with Python: Part 1 - ETFs</title>
            <link>https://blog.miguens.one/posts/2021/01/investing-with-python-part-1-etfs/</link>
            <pubDate>Sat, 16 Jan 2021 00:00:00 +0000</pubDate>
            
            <guid>https://blog.miguens.one/posts/2021/01/investing-with-python-part-1-etfs/</guid>
            <description>&lt;h2 id=&#34;what-is-the-black-litterman-model&#34;&gt;What Is the Black-Litterman Model?&lt;/h2&gt;
&lt;p&gt;The Black-Litterman (BL) Model is an analytical tool used by portfolio managers to optimize asset allocation within an investor’s risk tolerance and market views.&lt;/p&gt;
&lt;p&gt;The BL model starts from a neutral position using modern portfolio theory (MPT), and then takes additional input from investors&amp;rsquo; views to determine how the ultimate asset allocation should deviate from the initial portfolio weights.&lt;/p&gt;
&lt;p&gt;I will use the &lt;a href=&#34;https://pyportfolioopt.readthedocs.io/en/latest/&#34;&gt;PyPortfolioOpt&lt;/a&gt; is a library that implements portfolio optimization methods, including classical efficient frontier techniques and Black-Litterman allocation.&lt;/p&gt;</description>
            <content type="html"><![CDATA[<h2 id="what-is-the-black-litterman-model">What Is the Black-Litterman Model?</h2>
<p>The Black-Litterman (BL) Model is an analytical tool used by portfolio managers to optimize asset allocation within an investor’s risk tolerance and market views.</p>
<p>The BL model starts from a neutral position using modern portfolio theory (MPT), and then takes additional input from investors&rsquo; views to determine how the ultimate asset allocation should deviate from the initial portfolio weights.</p>
<p>I will use the <a href="https://pyportfolioopt.readthedocs.io/en/latest/">PyPortfolioOpt</a> is a library that implements portfolio optimization methods, including classical efficient frontier techniques and Black-Litterman allocation.</p>
<p>We will also need <a href="https://pypi.org/project/yfinance/">yfinance</a> to retrieve the quotes of my securities</p>
<p>After installing the library, we execute</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#f92672">import</span> pandas <span style="color:#66d9ef">as</span> pd
</span></span><span style="display:flex;"><span><span style="color:#f92672">import</span> yfinance <span style="color:#66d9ef">as</span> yf
</span></span><span style="display:flex;"><span><span style="color:#f92672">import</span> openpyxl
</span></span><span style="display:flex;"><span><span style="color:#f92672">from</span> currency_converter <span style="color:#f92672">import</span> CurrencyConverter
</span></span><span style="display:flex;"><span><span style="color:#f92672">import</span> numpy <span style="color:#66d9ef">as</span> np
</span></span><span style="display:flex;"><span><span style="color:#f92672">from</span> pypfopt <span style="color:#f92672">import</span> BlackLittermanModel
</span></span><span style="display:flex;"><span><span style="color:#f92672">from</span> pypfopt <span style="color:#f92672">import</span> black_litterman, risk_models
</span></span></code></pre></div><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#75715e"># Declare constants</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>PORTFOLIO<span style="color:#f92672">=</span><span style="color:#e6db74">&#39;/mnt/wd-bigfoot/share/luis/OneDrive/Documents/Portfolio/00 portfolio.xlsx&#39;</span>
</span></span><span style="display:flex;"><span>ETFS_SHEET<span style="color:#f92672">=</span><span style="color:#e6db74">&#39;ETFs&#39;</span>
</span></span><span style="display:flex;"><span>START_DATE<span style="color:#f92672">=</span><span style="color:#e6db74">&#39;2010-01-01&#39;</span>
</span></span><span style="display:flex;"><span>END_DATE<span style="color:#f92672">=</span><span style="color:#e6db74">&#39;2021-01-08&#39;</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>ALL_WORLD<span style="color:#f92672">=</span><span style="color:#e6db74">&#39;IWDA.AS&#39;</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>TOTAL_FUNDS<span style="color:#f92672">=</span><span style="color:#ae81ff">10e3</span> <span style="color:#75715e"># 10.000 EUR</span>
</span></span></code></pre></div><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#75715e"># Open the portfolio and get the ETFs</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>etfs_pd <span style="color:#f92672">=</span> pd<span style="color:#f92672">.</span>read_excel(PORTFOLIO, engine<span style="color:#f92672">=</span><span style="color:#e6db74">&#39;openpyxl&#39;</span>, sheet_name<span style="color:#f92672">=</span>ETFS_SHEET)
</span></span><span style="display:flex;"><span>etfs_pd<span style="color:#f92672">.</span>index <span style="color:#f92672">=</span> etfs_pd[<span style="color:#e6db74">&#39;Symbol&#39;</span>]
</span></span><span style="display:flex;"><span>etfs_pd <span style="color:#f92672">=</span> etfs_pd[[<span style="color:#e6db74">&#39;ETF Name&#39;</span>, <span style="color:#e6db74">&#39;Prediction&#39;</span>, <span style="color:#e6db74">&#39;Pesimistic&#39;</span>, <span style="color:#e6db74">&#39;Optimistic&#39;</span>]]
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>etfs_pd
</span></span></code></pre></div>


<div>
<style scoped>
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }

    .dataframe tbody tr th {
        vertical-align: top;
    }

    .dataframe thead th {
        text-align: right;
    }
</style>
<table border="1" class="dataframe">
  <thead>
    <tr style="text-align: right;">
      <th></th>
      <th>ETF Name</th>
      <th>Prediction</th>
      <th>Pesimistic</th>
      <th>Optimistic</th>
    </tr>
    <tr>
      <th>Symbol</th>
      <th></th>
      <th></th>
      <th></th>
      <th></th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>MIDD.L</th>
      <td>iShares FTSE 250 UCITS ETF GBP (Dist)</td>
      <td>0.03</td>
      <td>0.00</td>
      <td>0.05</td>
    </tr>
    <tr>
      <th>CEBL.DE</th>
      <td>iShares VII PLC - iShares MSCI EM Asia ETF USD...</td>
      <td>0.10</td>
      <td>0.04</td>
      <td>0.10</td>
    </tr>
    <tr>
      <th>DBPD.DE</th>
      <td>Xtrackers ShortDAX x2 Daily Swap UCITS ETF 1C</td>
      <td>-0.05</td>
      <td>-0.10</td>
      <td>0.00</td>
    </tr>
    <tr>
      <th>VUKE.DE</th>
      <td>Vanguard FTSE 100 UCITS ETF GBP Accumulation</td>
      <td>0.08</td>
      <td>0.05</td>
      <td>0.10</td>
    </tr>
    <tr>
      <th>XMOV.DE</th>
      <td>Xtrackers Future Mobility UCITS ETF1C</td>
      <td>0.15</td>
      <td>0.05</td>
      <td>0.20</td>
    </tr>
    <tr>
      <th>TRET.AS</th>
      <td>VanEck Vectors Global Real Estate UCITS ETF</td>
      <td>0.03</td>
      <td>0.00</td>
      <td>0.05</td>
    </tr>
    <tr>
      <th>TGBT.AS</th>
      <td>VanEck Vectors iBoxx EUR Sovereign Diversified...</td>
      <td>0.05</td>
      <td>0.03</td>
      <td>0.07</td>
    </tr>
    <tr>
      <th>DBX1.DE</th>
      <td>Xtrackers MSCI Emerging Markets Swap UCITS ETF 1C</td>
      <td>0.05</td>
      <td>0.00</td>
      <td>0.07</td>
    </tr>
    <tr>
      <th>IWDA.AS</th>
      <td>iShares Core MSCI World UCITS ETF USD (Acc)</td>
      <td>0.05</td>
      <td>0.02</td>
      <td>0.07</td>
    </tr>
    <tr>
      <th>CSPX.AS</th>
      <td>iShares Core S&amp;amp;P 500 UCITS ETF USD (Acc)</td>
      <td>0.05</td>
      <td>0.07</td>
      <td>0.05</td>
    </tr>
    <tr>
      <th>EXSA.DE</th>
      <td>iShares STOXX Europe 600 UCITS ETF (DE)</td>
      <td>0.02</td>
      <td>-0.02</td>
      <td>0.04</td>
    </tr>
    <tr>
      <th>EQQQ.DE</th>
      <td>Invesco EQQQ NASDAQ-100 UCITS ETF</td>
      <td>0.10</td>
      <td>0.05</td>
      <td>0.15</td>
    </tr>
  </tbody>
</table>
</div>


<p>I have the symbol, the ETF Name, and my views. My views express what I think it is going to happen with that ETF over the year. Later, I will take a step back, taking a pesimitic side and fill the matching row. Last, I will do my optimistic view.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#75715e"># Get the historical data of the ETFs and exchange to EUR</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>etfs <span style="color:#f92672">=</span> pd<span style="color:#f92672">.</span>DataFrame()
</span></span><span style="display:flex;"><span>cc <span style="color:#f92672">=</span> CurrencyConverter(fallback_on_missing_rate<span style="color:#f92672">=</span><span style="color:#66d9ef">True</span>, fallback_on_wrong_date<span style="color:#f92672">=</span><span style="color:#e6db74">&#39;True&#39;</span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">for</span> symbol <span style="color:#f92672">in</span> etfs_pd<span style="color:#f92672">.</span>index:
</span></span><span style="display:flex;"><span>    history <span style="color:#f92672">=</span> yf<span style="color:#f92672">.</span>download(symbol, start<span style="color:#f92672">=</span>START_DATE, end<span style="color:#f92672">=</span>END_DATE)[<span style="color:#e6db74">&#39;Adj Close&#39;</span>]
</span></span><span style="display:flex;"><span>    dataframe <span style="color:#f92672">=</span> pd<span style="color:#f92672">.</span>DataFrame(history)
</span></span><span style="display:flex;"><span>    currency <span style="color:#f92672">=</span> yf<span style="color:#f92672">.</span>Ticker(symbol)<span style="color:#f92672">.</span>info[<span style="color:#e6db74">&#39;currency&#39;</span>]<span style="color:#f92672">.</span>upper()
</span></span><span style="display:flex;"><span>    dataframe<span style="color:#f92672">.</span>columns <span style="color:#f92672">=</span> [ symbol <span style="color:#f92672">+</span> <span style="color:#e6db74">&#39;:&#39;</span> <span style="color:#f92672">+</span> currency ]
</span></span><span style="display:flex;"><span>    
</span></span><span style="display:flex;"><span>    <span style="color:#75715e"># Add column with security in EUR if needed</span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">if</span> currency<span style="color:#f92672">.</span>lower <span style="color:#f92672">!=</span> <span style="color:#e6db74">&#39;eur&#39;</span>:
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">for</span> index <span style="color:#f92672">in</span> dataframe<span style="color:#f92672">.</span>index:
</span></span><span style="display:flex;"><span>            original_value <span style="color:#f92672">=</span> dataframe<span style="color:#f92672">.</span>at[index, symbol <span style="color:#f92672">+</span> <span style="color:#e6db74">&#39;:&#39;</span> <span style="color:#f92672">+</span> currency]
</span></span><span style="display:flex;"><span>            value <span style="color:#f92672">=</span> cc<span style="color:#f92672">.</span>convert(original_value, currency, <span style="color:#e6db74">&#39;EUR&#39;</span>, date<span style="color:#f92672">=</span>index<span style="color:#f92672">.</span>to_pydatetime())
</span></span><span style="display:flex;"><span>            dataframe<span style="color:#f92672">.</span>at[index, symbol <span style="color:#f92672">+</span> <span style="color:#e6db74">&#39;:EUR&#39;</span>] <span style="color:#f92672">=</span> value
</span></span><span style="display:flex;"><span>    
</span></span><span style="display:flex;"><span>    <span style="color:#75715e"># Merge everything</span>
</span></span><span style="display:flex;"><span>    etfs <span style="color:#f92672">=</span> pd<span style="color:#f92672">.</span>concat([ etfs, dataframe], axis<span style="color:#f92672">=</span><span style="color:#e6db74">&#39;columns&#39;</span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Fill any NA values with the best forward or backarwd value</span>
</span></span><span style="display:flex;"><span>etfs<span style="color:#f92672">.</span>fillna(method<span style="color:#f92672">=</span><span style="color:#e6db74">&#39;ffill&#39;</span>, inplace<span style="color:#f92672">=</span><span style="color:#66d9ef">True</span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">del</span> cc, symbol, history, dataframe, currency, original_value, value, index
</span></span></code></pre></div><pre><code>[*********************100%***********************]  1 of 1 completed
[*********************100%***********************]  1 of 1 completed
[*********************100%***********************]  1 of 1 completed
[*********************100%***********************]  1 of 1 completed
[*********************100%***********************]  1 of 1 completed
[*********************100%***********************]  1 of 1 completed
[*********************100%***********************]  1 of 1 completed
[*********************100%***********************]  1 of 1 completed
[*********************100%***********************]  1 of 1 completed
[*********************100%***********************]  1 of 1 completed
[*********************100%***********************]  1 of 1 completed
[*********************100%***********************]  1 of 1 completed
</code></pre>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#75715e"># Get market reference (MSCI All World Accumulative ETF in USD)</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>market <span style="color:#f92672">=</span> pd<span style="color:#f92672">.</span>DataFrame(yf<span style="color:#f92672">.</span>download(ALL_WORLD, start<span style="color:#f92672">=</span>START_DATE, end<span style="color:#f92672">=</span>END_DATE)[<span style="color:#e6db74">&#39;Adj Close&#39;</span>])
</span></span><span style="display:flex;"><span>market<span style="color:#f92672">.</span>columns <span style="color:#f92672">=</span> [<span style="color:#e6db74">&#39;Market Ref:USD&#39;</span>]
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>cc <span style="color:#f92672">=</span> CurrencyConverter(fallback_on_missing_rate<span style="color:#f92672">=</span><span style="color:#66d9ef">True</span>, fallback_on_wrong_date<span style="color:#f92672">=</span><span style="color:#e6db74">&#39;True&#39;</span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">for</span> index <span style="color:#f92672">in</span> market<span style="color:#f92672">.</span>index:
</span></span><span style="display:flex;"><span>    original_value <span style="color:#f92672">=</span> market<span style="color:#f92672">.</span>at[index, <span style="color:#e6db74">&#39;Market Ref:USD&#39;</span>]
</span></span><span style="display:flex;"><span>    value <span style="color:#f92672">=</span> cc<span style="color:#f92672">.</span>convert(original_value, <span style="color:#e6db74">&#39;USD&#39;</span>, <span style="color:#e6db74">&#39;EUR&#39;</span>, date<span style="color:#f92672">=</span>index<span style="color:#f92672">.</span>to_pydatetime())
</span></span><span style="display:flex;"><span>    market<span style="color:#f92672">.</span>at[index, <span style="color:#e6db74">&#39;Market Ref:EUR&#39;</span>] <span style="color:#f92672">=</span> value
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Fill any NA values with the best forward or backarwd value</span>
</span></span><span style="display:flex;"><span>market<span style="color:#f92672">.</span>fillna(method<span style="color:#f92672">=</span><span style="color:#e6db74">&#39;ffill&#39;</span>, inplace<span style="color:#f92672">=</span><span style="color:#66d9ef">True</span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">del</span> cc, original_value, value, index
</span></span></code></pre></div><pre><code>[*********************100%***********************]  1 of 1 completed
</code></pre>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#75715e"># Clean up dataframes and keep only EUR with the symbol name</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Same for Market</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">for</span> column <span style="color:#f92672">in</span> etfs<span style="color:#f92672">.</span>columns:
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">if</span> <span style="color:#e6db74">&#39;:EUR&#39;</span> <span style="color:#f92672">not</span> <span style="color:#f92672">in</span> column:
</span></span><span style="display:flex;"><span>            etfs<span style="color:#f92672">.</span>drop(column, axis<span style="color:#f92672">=</span><span style="color:#e6db74">&#39;columns&#39;</span>, inplace<span style="color:#f92672">=</span><span style="color:#66d9ef">True</span>)
</span></span><span style="display:flex;"><span>    symbol, currency <span style="color:#f92672">=</span> column<span style="color:#f92672">.</span>split(<span style="color:#e6db74">&#39;:&#39;</span>)
</span></span><span style="display:flex;"><span>    etfs<span style="color:#f92672">.</span>rename(mapper<span style="color:#f92672">=</span>{column: symbol}, axis<span style="color:#f92672">=</span><span style="color:#e6db74">&#39;columns&#39;</span>, inplace<span style="color:#f92672">=</span><span style="color:#66d9ef">True</span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">for</span> column <span style="color:#f92672">in</span> market<span style="color:#f92672">.</span>columns:
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">if</span> <span style="color:#e6db74">&#39;:EUR&#39;</span> <span style="color:#f92672">not</span> <span style="color:#f92672">in</span> column:
</span></span><span style="display:flex;"><span>            market<span style="color:#f92672">.</span>drop(column, axis<span style="color:#f92672">=</span><span style="color:#e6db74">&#39;columns&#39;</span>, inplace<span style="color:#f92672">=</span><span style="color:#66d9ef">True</span>)
</span></span><span style="display:flex;"><span>    symbol, currency <span style="color:#f92672">=</span> column<span style="color:#f92672">.</span>split(<span style="color:#e6db74">&#39;:&#39;</span>)
</span></span><span style="display:flex;"><span>    market<span style="color:#f92672">.</span>rename(mapper<span style="color:#f92672">=</span>{column: symbol}, axis<span style="color:#f92672">=</span><span style="color:#e6db74">&#39;columns&#39;</span>, inplace<span style="color:#f92672">=</span><span style="color:#66d9ef">True</span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">del</span> column, symbol, currency
</span></span></code></pre></div><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#75715e"># Create a checkpoint</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>etfs<span style="color:#f92672">.</span>to_csv(<span style="color:#e6db74">&#39;cache_etfs.csv&#39;</span>)
</span></span><span style="display:flex;"><span>market<span style="color:#f92672">.</span>to_csv(<span style="color:#e6db74">&#39;cache_market.csv&#39;</span>)
</span></span></code></pre></div><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#75715e"># Restore Checkpoint</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>etfs <span style="color:#f92672">=</span> pd<span style="color:#f92672">.</span>read_csv(<span style="color:#e6db74">&#39;cache_etfs.csv&#39;</span>)
</span></span><span style="display:flex;"><span>etfs<span style="color:#f92672">.</span>set_index(pd<span style="color:#f92672">.</span>DatetimeIndex(etfs[<span style="color:#e6db74">&#39;Date&#39;</span>]), inplace<span style="color:#f92672">=</span><span style="color:#66d9ef">True</span>)
</span></span><span style="display:flex;"><span>etfs<span style="color:#f92672">.</span>drop([<span style="color:#e6db74">&#39;Date&#39;</span>], axis<span style="color:#f92672">=</span><span style="color:#e6db74">&#39;columns&#39;</span>, inplace<span style="color:#f92672">=</span><span style="color:#66d9ef">True</span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>market <span style="color:#f92672">=</span> pd<span style="color:#f92672">.</span>read_csv(<span style="color:#e6db74">&#39;cache_market.csv&#39;</span>)
</span></span><span style="display:flex;"><span>market<span style="color:#f92672">.</span>set_index(pd<span style="color:#f92672">.</span>DatetimeIndex(market[<span style="color:#e6db74">&#39;Date&#39;</span>]), inplace<span style="color:#f92672">=</span><span style="color:#66d9ef">True</span>)
</span></span><span style="display:flex;"><span>market<span style="color:#f92672">.</span>drop([<span style="color:#e6db74">&#39;Date&#39;</span>], axis<span style="color:#f92672">=</span><span style="color:#e6db74">&#39;columns&#39;</span>, inplace<span style="color:#f92672">=</span><span style="color:#66d9ef">True</span>)
</span></span></code></pre></div><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#75715e"># Construct the dictionary with your views</span>
</span></span><span style="display:flex;"><span>views <span style="color:#f92672">=</span> etfs_pd[<span style="color:#e6db74">&#39;Prediction&#39;</span>]<span style="color:#f92672">.</span>to_dict()
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Construct a uncertanties dictionary</span>
</span></span><span style="display:flex;"><span>optimistic <span style="color:#f92672">=</span> etfs_pd[<span style="color:#e6db74">&#39;Optimistic&#39;</span>]<span style="color:#f92672">.</span>to_dict()
</span></span><span style="display:flex;"><span>pesimistic <span style="color:#f92672">=</span> etfs_pd[<span style="color:#e6db74">&#39;Pesimistic&#39;</span>]<span style="color:#f92672">.</span>to_dict()
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>variances <span style="color:#f92672">=</span> []
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">for</span> symbol <span style="color:#f92672">in</span> views<span style="color:#f92672">.</span>keys():
</span></span><span style="display:flex;"><span>    sigma <span style="color:#f92672">=</span> (optimistic[symbol] <span style="color:#f92672">-</span> pesimistic[symbol])<span style="color:#f92672">/</span><span style="color:#ae81ff">2</span>
</span></span><span style="display:flex;"><span>    variances<span style="color:#f92672">.</span>append(sigma <span style="color:#f92672">**</span> <span style="color:#ae81ff">2</span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>omega <span style="color:#f92672">=</span> np<span style="color:#f92672">.</span>diag(variances)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">del</span> optimistic, pesimistic, variances, symbol, sigma
</span></span></code></pre></div><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#75715e"># Construct the Black Litterman </span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>S <span style="color:#f92672">=</span> risk_models<span style="color:#f92672">.</span>CovarianceShrinkage(etfs)<span style="color:#f92672">.</span>ledoit_wolf()
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>delta <span style="color:#f92672">=</span> black_litterman<span style="color:#f92672">.</span>market_implied_risk_aversion(market[<span style="color:#e6db74">&#39;Market Ref&#39;</span>])
</span></span></code></pre></div><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#75715e"># Using a pi equal weighted as the market caps for ETFs are too complex to calculate</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>bl <span style="color:#f92672">=</span> BlackLittermanModel(S, pi<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;equal&#34;</span>, risk_aversion<span style="color:#f92672">=</span>delta,
</span></span><span style="display:flex;"><span>                        absolute_views<span style="color:#f92672">=</span>views, omega<span style="color:#f92672">=</span>omega)
</span></span></code></pre></div><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span>ret_bl <span style="color:#f92672">=</span> bl<span style="color:#f92672">.</span>bl_returns()
</span></span><span style="display:flex;"><span>S_bl <span style="color:#f92672">=</span> bl<span style="color:#f92672">.</span>bl_cov()
</span></span></code></pre></div><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#f92672">from</span> pypfopt <span style="color:#f92672">import</span> EfficientFrontier, objective_functions
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>ef <span style="color:#f92672">=</span> EfficientFrontier(ret_bl, S_bl)
</span></span><span style="display:flex;"><span>ef<span style="color:#f92672">.</span>add_objective(objective_functions<span style="color:#f92672">.</span>L2_reg)
</span></span><span style="display:flex;"><span>ef<span style="color:#f92672">.</span>max_sharpe()
</span></span><span style="display:flex;"><span>weights <span style="color:#f92672">=</span> ef<span style="color:#f92672">.</span>clean_weights()
</span></span><span style="display:flex;"><span>pd<span style="color:#f92672">.</span>Series(weights)<span style="color:#f92672">.</span>plot<span style="color:#f92672">.</span>pie(figsize<span style="color:#f92672">=</span>(<span style="color:#ae81ff">10</span>,<span style="color:#ae81ff">10</span>));
</span></span></code></pre></div><pre><code>/home/luis/.local/lib/python3.8/site-packages/pypfopt/efficient_frontier.py:195: UserWarning: max_sharpe transforms the optimisation problem so additional objectives may not work as expected.
  warnings.warn(
</code></pre>
<p><img src="/img/invest-etf.png" alt="png"></p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#f92672">from</span> pypfopt <span style="color:#f92672">import</span> DiscreteAllocation
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>da <span style="color:#f92672">=</span> DiscreteAllocation(weights, etfs<span style="color:#f92672">.</span>iloc[<span style="color:#f92672">-</span><span style="color:#ae81ff">1</span>], total_portfolio_value<span style="color:#f92672">=</span>TOTAL_FUNDS)
</span></span><span style="display:flex;"><span>alloc, leftover <span style="color:#f92672">=</span> da<span style="color:#f92672">.</span>greedy_portfolio()
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>allocation <span style="color:#f92672">=</span> pd<span style="color:#f92672">.</span>DataFrame(data<span style="color:#f92672">=</span>etfs_pd[<span style="color:#e6db74">&#39;ETF Name&#39;</span>], index<span style="color:#f92672">=</span>etfs_pd<span style="color:#f92672">.</span>index, columns<span style="color:#f92672">=</span>[<span style="color:#e6db74">&#39;ETF Name&#39;</span>])
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">for</span> key <span style="color:#f92672">in</span> alloc<span style="color:#f92672">.</span>keys():
</span></span><span style="display:flex;"><span>    allocation<span style="color:#f92672">.</span>at[key, <span style="color:#e6db74">&#39;Desired Position&#39;</span>] <span style="color:#f92672">=</span> alloc[key]
</span></span><span style="display:flex;"><span>    allocation<span style="color:#f92672">.</span>at[key, <span style="color:#e6db74">&#39;Last Price EUR&#39;</span>] <span style="color:#f92672">=</span> int(etfs<span style="color:#f92672">.</span>iloc[<span style="color:#f92672">-</span><span style="color:#ae81ff">1</span>][key] <span style="color:#f92672">*</span> <span style="color:#ae81ff">100</span>)<span style="color:#f92672">/</span><span style="color:#ae81ff">100</span>
</span></span><span style="display:flex;"><span>    allocation<span style="color:#f92672">.</span>at[key, <span style="color:#e6db74">&#39;Total Funds EUR&#39;</span>] <span style="color:#f92672">=</span> int(etfs<span style="color:#f92672">.</span>iloc[<span style="color:#f92672">-</span><span style="color:#ae81ff">1</span>][key] <span style="color:#f92672">*</span> alloc[key] <span style="color:#f92672">*</span> <span style="color:#ae81ff">100</span>)<span style="color:#f92672">/</span><span style="color:#ae81ff">100</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>allocation<span style="color:#f92672">.</span>fillna(<span style="color:#ae81ff">0</span>, inplace<span style="color:#f92672">=</span><span style="color:#66d9ef">True</span>)
</span></span><span style="display:flex;"><span>allocation[<span style="color:#e6db74">&#39;Desired Position&#39;</span>] <span style="color:#f92672">=</span> allocation[<span style="color:#e6db74">&#39;Desired Position&#39;</span>]<span style="color:#f92672">.</span>astype(int)
</span></span><span style="display:flex;"><span>allocation
</span></span></code></pre></div>

<div>
<style scoped>
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }

    .dataframe tbody tr th {
        vertical-align: top;
    }

    .dataframe thead th {
        text-align: right;
    }
</style>
<table border="1" class="dataframe">
  <thead>
    <tr style="text-align: right;">
      <th></th>
      <th>ETF Name</th>
      <th>Desired Position</th>
      <th>Last Price EUR</th>
      <th>Total Funds EUR</th>
    </tr>
    <tr>
      <th>Symbol</th>
      <th></th>
      <th></th>
      <th></th>
      <th></th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>MIDD.L</th>
      <td>iShares FTSE 250 UCITS ETF GBP (Dist)</td>
      <td>0</td>
      <td>0.00</td>
      <td>0.00</td>
    </tr>
    <tr>
      <th>CEBL.DE</th>
      <td>iShares VII PLC - iShares MSCI EM Asia ETF USD...</td>
      <td>7</td>
      <td>167.13</td>
      <td>1169.97</td>
    </tr>
    <tr>
      <th>DBPD.DE</th>
      <td>Xtrackers ShortDAX x2 Daily Swap UCITS ETF 1C</td>
      <td>437</td>
      <td>1.86</td>
      <td>814.30</td>
    </tr>
    <tr>
      <th>VUKE.DE</th>
      <td>Vanguard FTSE 100 UCITS ETF GBP Accumulation</td>
      <td>34</td>
      <td>33.43</td>
      <td>1136.79</td>
    </tr>
    <tr>
      <th>XMOV.DE</th>
      <td>Xtrackers Future Mobility UCITS ETF1C</td>
      <td>22</td>
      <td>57.91</td>
      <td>1274.23</td>
    </tr>
    <tr>
      <th>TRET.AS</th>
      <td>VanEck Vectors Global Real Estate UCITS ETF</td>
      <td>6</td>
      <td>33.00</td>
      <td>198.03</td>
    </tr>
    <tr>
      <th>TGBT.AS</th>
      <td>VanEck Vectors iBoxx EUR Sovereign Diversified...</td>
      <td>66</td>
      <td>14.74</td>
      <td>973.36</td>
    </tr>
    <tr>
      <th>DBX1.DE</th>
      <td>Xtrackers MSCI Emerging Markets Swap UCITS ETF 1C</td>
      <td>17</td>
      <td>47.34</td>
      <td>804.78</td>
    </tr>
    <tr>
      <th>IWDA.AS</th>
      <td>iShares Core MSCI World UCITS ETF USD (Acc)</td>
      <td>12</td>
      <td>60.79</td>
      <td>729.59</td>
    </tr>
    <tr>
      <th>CSPX.AS</th>
      <td>iShares Core S&amp;amp;P 500 UCITS ETF USD (Acc)</td>
      <td>2</td>
      <td>312.65</td>
      <td>625.30</td>
    </tr>
    <tr>
      <th>EXSA.DE</th>
      <td>iShares STOXX Europe 600 UCITS ETF (DE)</td>
      <td>18</td>
      <td>40.40</td>
      <td>727.37</td>
    </tr>
    <tr>
      <th>EQQQ.DE</th>
      <td>Invesco EQQQ NASDAQ-100 UCITS ETF</td>
      <td>5</td>
      <td>257.39</td>
      <td>1286.99</td>
    </tr>
  </tbody>
</table>
</div>

<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span>allocation<span style="color:#f92672">.</span>to_excel(<span style="color:#e6db74">&#39;/mnt/wd-bigfoot/share/luis/OneDrive/Documents/Portfolio/99 Last Allocation of ETFs.xlsx&#39;</span>, 
</span></span><span style="display:flex;"><span>                    index<span style="color:#f92672">=</span><span style="color:#66d9ef">True</span>)
</span></span></code></pre></div><p>And like that, I have allocate a collection of ETF, with my views and trying to maximize the return and minimize the risk.</p>
<p>In the next post, I will repeat this procedure for Stocks.</p>
]]></content>
        </item>
        
        <item>
            <title>Trading in Python: Part 2</title>
            <link>https://blog.miguens.one/posts/2020/12/trading-in-python-part-2/</link>
            <pubDate>Tue, 15 Dec 2020 00:00:00 +0000</pubDate>
            
            <guid>https://blog.miguens.one/posts/2020/12/trading-in-python-part-2/</guid>
            <description>&lt;p&gt;In the previous post, we wrote the basics of stock trading in Python. We saw how to make a small wallet to record transactions, how to fetch data from investing.com in a python object and we wrote some generic classes to buy and sell when a security crosses a thresold.&lt;/p&gt;
&lt;p&gt;Now we will continue our exercise writing a program to run several strategias over a period of time.&lt;/p&gt;
&lt;p&gt;As we are going to run different scenarios, it is a good idea to use parallelisation in our design.&lt;/p&gt;</description>
            <content type="html"><![CDATA[<p>In the previous post, we wrote the basics of stock trading in Python. We saw how to make a small wallet to record transactions, how to fetch data from investing.com in a python object and we wrote some generic classes to buy and sell when a security crosses a thresold.</p>
<p>Now we will continue our exercise writing a program to run several strategias over a period of time.</p>
<p>As we are going to run different scenarios, it is a good idea to use parallelisation in our design.</p>
<p>Here is the code:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#f92672">%</span>cat Simulation<span style="color:#f92672">.</span>py
</span></span></code></pre></div><pre><code>import multiprocessing
import time
import json
from datetime import datetime, timedelta

import numpy as np
import pandas as pd

from Security import Security
from Wallet import Wallet
from Strategies import *
from Global import *

from tqdm.notebook import tqdm, trange

def simulate(portfolio_excel, years, p_bar=None):

    date_format='%Y-%m-%d'
    today = datetime.today()
    time_ago = datetime.today() - timedelta(days=365*years)
    today_str = today.strftime(date_format)
    time_ago_str = time_ago.strftime(date_format)


    portfolio = pd.read_excel(portfolio_excel, engine='openpyxl').astype(str) 

    cases = []
    
    if p_bar is not None:
        p_bar.reset(total=len(portfolio))
        p_bar.set_description('Fetching information for scenario: {} year(s)'.format(years))
        
    for index, row in portfolio.iterrows():
        try:
            isin = row['ISIN']
            country = row['Country'] if row['Country'] != 'nan' else None
            exchange = row['Exchange'] if row['Exchange'] != 'nan' else None
            currency = row['Currency'] if row['Currency'] != 'nan' else 'EUR'

            stock = Security(isin, currency, country, exchange)

            case = Strategy_Hold_And_Sell(stock)
            cases.append(case)
          
            magic_numbers = [20, 50, 100, 200]
            for i in magic_numbers:
                for j in magic_numbers:
                    if i != j:
                        for k in ['SMA', 'EMA']:
                                case = Strategy_Buy_Value0_LT_Value1(stock, (k, i, j))
                                cases.append(case)

            for i in [0.0, 0.25, 0.5]:
                case = Strategy_Buy_dSMA20(stock, i)
                cases.append(case)


        except Exception as e:
            print(e)
            continue
        
        if p_bar is not None:
            p_bar.update()

    running_jobs = []

    manager = multiprocessing.Manager()
    results = manager.list()

    jobs_todo = [ multiprocessing.Process(target=case.simulate,
                                          args=(time_ago_str, today_str, 5.0, results,),
                                          name=case.security.name
                                         ) for case in cases ]
    if p_bar is not None:
        p_bar.reset(total=len(jobs_todo))
        p_bar.set_description('Running simulation of scenario: {} year(s)'.format(years))
    
    while jobs_todo or running_jobs:
        while len(running_jobs) &lt; 4 and len(jobs_todo) &gt; 0:
            job = jobs_todo.pop()
            job.start()
            running_jobs.append(job)

        counter=0
        for job in running_jobs:
            if not job.is_alive():
                job.join()
                running_jobs.remove(job)
                counter = counter + 1
        
        if p_bar is not None:
            p_bar.update(counter)

        time.sleep(0.1)

    dataframe=pd.DataFrame(results[:])  
    dataframe_result=pd.DataFrame()

    for isin in dataframe['ISIN'].drop_duplicates().values:
        isin_dataframe = dataframe[dataframe['ISIN'] == isin]
        yield_hold = isin_dataframe[isin_dataframe['Strategy'] == 'Buy, Hold and Sell']['Yield'].sum()
        sorted_dataframe = isin_dataframe.sort_values(by='Yield', ascending=False)
        yield_winner_strategy = sorted_dataframe.iloc[0]['Yield']
        if yield_winner_strategy &gt; yield_hold:
            winner_dataframe = isin_dataframe[isin_dataframe['Yield'] &gt;= yield_winner_strategy].copy()
            winner_dataframe['Strategy Yield Increment'] = yield_winner_strategy - yield_hold
        else:
            winner_dataframe = isin_dataframe[isin_dataframe['Strategy'] == 'Buy, Hold and Sell'].copy()
            winner_dataframe['Strategy Yield Increment'] = 0
        dataframe_result = dataframe_result.append(winner_dataframe)
    
    return dataframe_result
</code></pre>
<p>Now that we have our files in place, we can start playing.</p>
<p>First, let&rsquo;s do the imports</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#f92672">from</span> Simulation <span style="color:#f92672">import</span> simulate
</span></span><span style="display:flex;"><span><span style="color:#f92672">import</span> pandas <span style="color:#66d9ef">as</span> pd
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">from</span> tqdm.notebook <span style="color:#f92672">import</span> tqdm, trange
</span></span></code></pre></div><p>We also need to provide information about the ETFs and Stocks we want to simulate.</p>
<p>We do that in an excel file, that should like:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span>pd<span style="color:#f92672">.</span>read_excel(<span style="color:#e6db74">&#39;excel/portfolio.xlsx&#39;</span>, engine<span style="color:#f92672">=</span><span style="color:#e6db74">&#39;openpyxl&#39;</span>)<span style="color:#f92672">.</span>astype(str) 
</span></span></code></pre></div>

<div>
<style scoped>
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }

    .dataframe tbody tr th {
        vertical-align: top;
    }

    .dataframe thead th {
        text-align: right;
    }
</style>
<table border="1" class="dataframe">
  <thead>
    <tr style="text-align: right;">
      <th></th>
      <th>Security Name</th>
      <th>Security Type</th>
      <th>Ticker</th>
      <th>ISIN</th>
      <th>Country</th>
      <th>Exchange</th>
      <th>Currency</th>
      <th>Strategy</th>
      <th>Strategy Class Name</th>
      <th>Strategy Config</th>
      <th>Yield</th>
      <th>Yield Increase due to strategy</th>
      <th>Monitor</th>
      <th>Position</th>
      <th>Action</th>
      <th>Broker</th>
      <th>Last Entry</th>
      <th>Log</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>0</th>
      <td>Advanced Micro Devices Inc</td>
      <td>Stocks</td>
      <td>AMD</td>
      <td>US0079031078</td>
      <td>United States</td>
      <td>NASDAQ</td>
      <td>USD</td>
      <td>Buy, Hold and Sell</td>
      <td>Strategy_Hold_And_Sell</td>
      <td>[]</td>
      <td>0.91</td>
      <td>0.0</td>
      <td>Yes</td>
      <td>Yes</td>
      <td>Strategy</td>
      <td>DeGiro</td>
      <td>2020-12-30</td>
      <td>nan</td>
    </tr>
    <tr>
      <th>1</th>
      <td>Airbus Group SE</td>
      <td>Stocks</td>
      <td>AIR</td>
      <td>NL0000235190</td>
      <td>France</td>
      <td>Paris</td>
      <td>EUR</td>
      <td>Buy on SMA 100 days LT SMA 200 days</td>
      <td>Strategy_Buy_Value0_LT_Value1</td>
      <td>["SMA", 100, 200]</td>
      <td>0.62</td>
      <td>0.92</td>
      <td>Yes</td>
      <td>No</td>
      <td>Strategy</td>
      <td>DeGiro</td>
      <td>2020-12-28</td>
      <td>Yield 40% with hold position with the hypothes...</td>
    </tr>
    <tr>
      <th>2</th>
      <td>Alphabet Inc Class A</td>
      <td>Stocks</td>
      <td>GOOGL</td>
      <td>US02079K3059</td>
      <td>United States</td>
      <td>NASDAQ</td>
      <td>USD</td>
      <td>Buy on SMA 20 days LT SMA 100 days</td>
      <td>Strategy_Buy_Value0_LT_Value1</td>
      <td>["SMA", 20, 100]</td>
      <td>0.33</td>
      <td>0.15</td>
      <td>Yes</td>
      <td>No</td>
      <td>Strategy</td>
      <td>DeGiro</td>
      <td>2020-12-30</td>
      <td>Sell position</td>
    </tr>
    <tr>
      <th>3</th>
      <td>Amazon.com Inc</td>
      <td>Stocks</td>
      <td>AMZN</td>
      <td>US0231351067</td>
      <td>United States</td>
      <td>NASDAQ</td>
      <td>USD</td>
      <td>Buy, Hold and Sell</td>
      <td>Strategy_Hold_And_Sell</td>
      <td>[]</td>
      <td>0.61</td>
      <td>0.0</td>
      <td>Yes</td>
      <td>Yes</td>
      <td>Strategy</td>
      <td>DeGiro</td>
      <td>2020-12-28</td>
      <td>nan</td>
    </tr>
    <tr>
      <th>4</th>
      <td>Apple Inc</td>
      <td>Stocks</td>
      <td>AAPL</td>
      <td>US0378331005</td>
      <td>United States</td>
      <td>NASDAQ</td>
      <td>USD</td>
      <td>Buy, Hold and Sell</td>
      <td>Strategy_Hold_And_Sell</td>
      <td>[]</td>
      <td>0.68</td>
      <td>0.0</td>
      <td>Yes</td>
      <td>Yes</td>
      <td>Strategy</td>
      <td>DeGiro</td>
      <td>2020-12-30</td>
      <td>nan</td>
    </tr>
    <tr>
      <th>5</th>
      <td>BAE Systems PLC</td>
      <td>Stocks</td>
      <td>BAES</td>
      <td>GB0002634946</td>
      <td>United Kingdom</td>
      <td>London</td>
      <td>GBP</td>
      <td>Buy on SMA 20 days LT SMA 200 days</td>
      <td>Strategy_Buy_Value0_LT_Value1</td>
      <td>["SMA", 20, 200]</td>
      <td>0.27</td>
      <td>0.37</td>
      <td>Yes</td>
      <td>No</td>
      <td>Strategy</td>
      <td>Trading212</td>
      <td>2020-12-30</td>
      <td>Sell position</td>
    </tr>
    <tr>
      <th>6</th>
      <td>Boeing Co</td>
      <td>Stocks</td>
      <td>BA</td>
      <td>US0970231058</td>
      <td>United States</td>
      <td>NYSE</td>
      <td>USD</td>
      <td>nan</td>
      <td>nan</td>
      <td>nan</td>
      <td>0.5</td>
      <td>nan</td>
      <td>No</td>
      <td>Yes</td>
      <td>Evaluate Jun 21</td>
      <td>DeGiro</td>
      <td>2020-12-30</td>
      <td>Potential yield of 50% if it recovers in one y...</td>
    </tr>
    <tr>
      <th>7</th>
      <td>Cisco Systems Inc</td>
      <td>Stocks</td>
      <td>CSCO</td>
      <td>US17275R1023</td>
      <td>United States</td>
      <td>NASDAQ</td>
      <td>USD</td>
      <td>Buy on SMA 50 days LT SMA 100 days</td>
      <td>Strategy_Buy_Value0_LT_Value1</td>
      <td>["SMA", 50, 100]</td>
      <td>0.22</td>
      <td>0.35</td>
      <td>Yes</td>
      <td>No</td>
      <td>Strategy</td>
      <td>DeGiro</td>
      <td>2020-12-28</td>
      <td>nan</td>
    </tr>
    <tr>
      <th>8</th>
      <td>Coca-Cola Company</td>
      <td>Stocks</td>
      <td>KO</td>
      <td>US1912161007</td>
      <td>United States</td>
      <td>NYSE</td>
      <td>USD</td>
      <td>Buy on EMA 50 days LT EMA 200 days</td>
      <td>Strategy_Buy_Value0_LT_Value1</td>
      <td>["EMA", 50, 200]</td>
      <td>0.22</td>
      <td>0.32</td>
      <td>Yes</td>
      <td>No</td>
      <td>nan</td>
      <td>nan</td>
      <td>NaT</td>
      <td>nan</td>
    </tr>
    <tr>
      <th>9</th>
      <td>GlaxoSmithKline PLC</td>
      <td>Stocks</td>
      <td>GSK</td>
      <td>GB0009252882</td>
      <td>United Kingdom</td>
      <td>London</td>
      <td>GBP</td>
      <td>Buy, Hold and Sell</td>
      <td>Strategy_Hold_And_Sell</td>
      <td>[]</td>
      <td>0.14</td>
      <td>0.0</td>
      <td>No</td>
      <td>No</td>
      <td>Not interested</td>
      <td>nan</td>
      <td>NaT</td>
      <td>nan</td>
    </tr>
    <tr>
      <th>10</th>
      <td>Hyundai Motor Co DRC</td>
      <td>Stocks</td>
      <td>05380</td>
      <td>USY384721251</td>
      <td>Germany</td>
      <td>Frankfurt</td>
      <td>EUR</td>
      <td>Buy on SMA 20 days LT SMA 200 days</td>
      <td>Strategy_Buy_Value0_LT_Value1</td>
      <td>["SMA", 20, 200]</td>
      <td>0.29</td>
      <td>0.07</td>
      <td>Yes</td>
      <td>No</td>
      <td>Strategy</td>
      <td>DeGiro</td>
      <td>2020-12-30</td>
      <td>Sell position</td>
    </tr>
    <tr>
      <th>11</th>
      <td>International Business Machines</td>
      <td>Stocks</td>
      <td>IBM</td>
      <td>US4592001014</td>
      <td>United States</td>
      <td>NYSE</td>
      <td>EUR</td>
      <td>Buy on SMA 50 days LT SMA 100 days</td>
      <td>Strategy_Buy_Value0_LT_Value1</td>
      <td>["SMA", 50, 100]</td>
      <td>0.46</td>
      <td>0.54</td>
      <td>Yes</td>
      <td>Yes</td>
      <td>Strategy</td>
      <td>DeGiro</td>
      <td>2020-12-28</td>
      <td>nan</td>
    </tr>
    <tr>
      <th>12</th>
      <td>International Consolidated Airlines Group S.A.</td>
      <td>Stocks</td>
      <td>ICAG</td>
      <td>ES0177542018</td>
      <td>Spain</td>
      <td>Madrid</td>
      <td>EUR</td>
      <td>Buy, Hold and Sell</td>
      <td>Strategy_Hold_And_Sell</td>
      <td>[]</td>
      <td>0.32</td>
      <td>nan</td>
      <td>No</td>
      <td>Yes</td>
      <td>Sell on value</td>
      <td>DeGiro</td>
      <td>2020-12-29</td>
      <td>After reaching pre-Covid level of 4.78 EUR per...</td>
    </tr>
    <tr>
      <th>13</th>
      <td>Invesco Physical Gold ETC</td>
      <td>Etfs</td>
      <td>SGLD</td>
      <td>IE00B579F325</td>
      <td>Netherlands</td>
      <td>Amsterdam</td>
      <td>EUR</td>
      <td>Buy on EMA 50 days LT EMA 20 days</td>
      <td>Strategy_Buy_Value0_LT_Value1</td>
      <td>["EMA", 50, 20]</td>
      <td>0.16</td>
      <td>0.05</td>
      <td>No</td>
      <td>No</td>
      <td>Not interested</td>
      <td>nan</td>
      <td>NaT</td>
      <td>nan</td>
    </tr>
    <tr>
      <th>14</th>
      <td>iShares Core MSCI World UCITS ETF USD (Acc)</td>
      <td>Etfs</td>
      <td>IWDA</td>
      <td>IE00B4L5Y983</td>
      <td>Netherlands</td>
      <td>Amsterdam</td>
      <td>USD</td>
      <td>Buy on EMA 50 days LT EMA 200 days</td>
      <td>Strategy_Buy_Value0_LT_Value1</td>
      <td>["EMA", 50, 200]</td>
      <td>0.32</td>
      <td>0.37</td>
      <td>Yes</td>
      <td>No</td>
      <td>Strategy</td>
      <td>DeGiro</td>
      <td>2020-12-30</td>
      <td>Sell position</td>
    </tr>
    <tr>
      <th>15</th>
      <td>iShares Core S&amp;P 500 UCITS ETF USD (Acc)</td>
      <td>Etfs</td>
      <td>CSP1</td>
      <td>IE00B5BMR087</td>
      <td>Netherlands</td>
      <td>Amsterdam</td>
      <td>USD</td>
      <td>Buy on SMA 20 days LT SMA 100 days</td>
      <td>Strategy_Buy_Value0_LT_Value1</td>
      <td>["SMA", 20, 100]</td>
      <td>0.27</td>
      <td>0.31</td>
      <td>Yes</td>
      <td>No</td>
      <td>Strategy</td>
      <td>DeGiro</td>
      <td>2020-12-30</td>
      <td>Sell position</td>
    </tr>
    <tr>
      <th>16</th>
      <td>iShares European Property Yield UCITS ETF EUR ...</td>
      <td>Etfs</td>
      <td>IPRE</td>
      <td>IE00BGDQ0L74</td>
      <td>Germany</td>
      <td>Xetra</td>
      <td>EUR</td>
      <td>Buy on EMA 50 days LT EMA 200 days</td>
      <td>Strategy_Buy_Value0_LT_Value1</td>
      <td>["EMA", 50, 200]</td>
      <td>0.28</td>
      <td>0.4</td>
      <td>Yes</td>
      <td>No</td>
      <td>Strategy</td>
      <td>nan</td>
      <td>NaT</td>
      <td>nan</td>
    </tr>
    <tr>
      <th>17</th>
      <td>JPMorgan Funds - Global Healthcare Fund</td>
      <td>Funds</td>
      <td>Fund</td>
      <td>LU0432979887</td>
      <td>United States</td>
      <td>Funds</td>
      <td>USD</td>
      <td>Buy, Hold and Sell</td>
      <td>nan</td>
      <td>nan</td>
      <td>0.3</td>
      <td>nan</td>
      <td>No</td>
      <td>Yes</td>
      <td>Hold</td>
      <td>DeGiro</td>
      <td>2020-12-30</td>
      <td>Info: https://am.jpmorgan.com/gb/en/asset-mana...</td>
    </tr>
    <tr>
      <th>18</th>
      <td>Kraft Heinz Co</td>
      <td>Stocks</td>
      <td>KHC</td>
      <td>US5007541064</td>
      <td>United States</td>
      <td>NASDAQ</td>
      <td>USD</td>
      <td>Buy on SMA 50 days LT SMA 100 days</td>
      <td>Strategy_Buy_Value0_LT_Value1</td>
      <td>["SMA", 50, 100]</td>
      <td>0.33</td>
      <td>0.3</td>
      <td>Yes</td>
      <td>Yes</td>
      <td>Strategy</td>
      <td>DeGiro</td>
      <td>2020-12-28</td>
      <td>nan</td>
    </tr>
    <tr>
      <th>19</th>
      <td>Lockheed Martin Corporation</td>
      <td>Stocks</td>
      <td>LMT</td>
      <td>US5398301094</td>
      <td>United States</td>
      <td>NYSE</td>
      <td>USD</td>
      <td>Buy on EMA 50 days LT EMA 100 days</td>
      <td>Strategy_Buy_Value0_LT_Value1</td>
      <td>["EMA", 50, 100]</td>
      <td>0.18</td>
      <td>0.35</td>
      <td>No</td>
      <td>No</td>
      <td>Not interested</td>
      <td>nan</td>
      <td>2020-12-30</td>
      <td>nan</td>
    </tr>
    <tr>
      <th>20</th>
      <td>Melia Hotels</td>
      <td>Stocks</td>
      <td>MEL</td>
      <td>ES0176252718</td>
      <td>Spain</td>
      <td>Madrid</td>
      <td>EUR</td>
      <td>nan</td>
      <td>nan</td>
      <td>nan</td>
      <td>0.13</td>
      <td>0.42</td>
      <td>No</td>
      <td>Yes</td>
      <td>Sell on value</td>
      <td>DeGiro</td>
      <td>2020-12-29</td>
      <td>Potential yield of 37% if it recovers in one y...</td>
    </tr>
    <tr>
      <th>21</th>
      <td>Merck &amp; Company Inc</td>
      <td>Stocks</td>
      <td>MRK</td>
      <td>US58933Y1055</td>
      <td>United States</td>
      <td>NYSE</td>
      <td>USD</td>
      <td>Buy, Hold and Sell</td>
      <td>Strategy_Hold_And_Sell</td>
      <td>[]</td>
      <td>0.06</td>
      <td>0.0</td>
      <td>No</td>
      <td>Yes</td>
      <td>Sell on value</td>
      <td>DeGiro</td>
      <td>2020-12-30</td>
      <td>24% yield if it recovers to pre-COVID 90$ in 6...</td>
    </tr>
    <tr>
      <th>22</th>
      <td>Microsoft Corporation</td>
      <td>Stocks</td>
      <td>MSFT</td>
      <td>US5949181045</td>
      <td>United States</td>
      <td>NASDAQ</td>
      <td>USD</td>
      <td>Buy, Hold and Sell</td>
      <td>Strategy_Hold_And_Sell</td>
      <td>[]</td>
      <td>0.28</td>
      <td>0.0</td>
      <td>Yes</td>
      <td>Yes</td>
      <td>Strategy</td>
      <td>DeGiro</td>
      <td>2020-12-28</td>
      <td>nan</td>
    </tr>
    <tr>
      <th>23</th>
      <td>Nestle SA</td>
      <td>Stocks</td>
      <td>NESN</td>
      <td>CH0038863350</td>
      <td>Switzerland</td>
      <td>Switzerland</td>
      <td>CHF</td>
      <td>Buy on EMA 50 days LT EMA 100 days</td>
      <td>Strategy_Buy_Value0_LT_Value1</td>
      <td>["EMA", 50, 100]</td>
      <td>0.13</td>
      <td>0.0</td>
      <td>No</td>
      <td>No</td>
      <td>Not interested</td>
      <td>DeGiro</td>
      <td>2020-12-30</td>
      <td>nan</td>
    </tr>
    <tr>
      <th>24</th>
      <td>NH Hoteles</td>
      <td>Stocks</td>
      <td>NHH</td>
      <td>ES0161560018</td>
      <td>Spain</td>
      <td>Madrid</td>
      <td>EUR</td>
      <td>nan</td>
      <td>nan</td>
      <td>nan</td>
      <td>0.35</td>
      <td>0.61</td>
      <td>No</td>
      <td>Yes</td>
      <td>Sell on value</td>
      <td>DeGiro</td>
      <td>2020-12-28</td>
      <td>Potential yield of 19% if it recovers in one y...</td>
    </tr>
    <tr>
      <th>25</th>
      <td>Nokia Oyj</td>
      <td>Stocks</td>
      <td>NOKIA</td>
      <td>FI0009000681</td>
      <td>Finland</td>
      <td>Helsinki</td>
      <td>EUR</td>
      <td>Buy on SMA 20 days LT SMA 100 days</td>
      <td>Strategy_Buy_Value0_LT_Value1</td>
      <td>["SMA", 20, 100]</td>
      <td>0.54</td>
      <td>0.67</td>
      <td>Yes</td>
      <td>Yes</td>
      <td>Strategy</td>
      <td>DeGiro</td>
      <td>2020-12-30</td>
      <td>nan</td>
    </tr>
    <tr>
      <th>26</th>
      <td>NVIDIA Corporation</td>
      <td>Stocks</td>
      <td>NVDA</td>
      <td>US67066G1040</td>
      <td>United States</td>
      <td>NASDAQ</td>
      <td>USD</td>
      <td>Buy, Hold and Sell</td>
      <td>Strategy_Hold_And_Sell</td>
      <td>[]</td>
      <td>0.97</td>
      <td>0.0</td>
      <td>Yes</td>
      <td>Yes</td>
      <td>Strategy</td>
      <td>Trading212</td>
      <td>2020-12-30</td>
      <td>nan</td>
    </tr>
    <tr>
      <th>27</th>
      <td>PepsiCo Inc</td>
      <td>Stocks</td>
      <td>PEP</td>
      <td>US7134481081</td>
      <td>United States</td>
      <td>NASDAQ</td>
      <td>USD</td>
      <td>Buy on EMA 50 days LT EMA 200 days</td>
      <td>Strategy_Buy_Value0_LT_Value1</td>
      <td>["EMA", 50, 200]</td>
      <td>0.23</td>
      <td>0.25</td>
      <td>Yes</td>
      <td>No</td>
      <td>Strategy</td>
      <td>DeGiro</td>
      <td>2020-12-30</td>
      <td>nan</td>
    </tr>
    <tr>
      <th>28</th>
      <td>Procter &amp; Gamble Company</td>
      <td>Stocks</td>
      <td>PG</td>
      <td>US7427181091</td>
      <td>United States</td>
      <td>NYSE</td>
      <td>USD</td>
      <td>Buy on EMA 50 days LT EMA 100 days</td>
      <td>Strategy_Buy_Value0_LT_Value1</td>
      <td>["EMA", 50, 100]</td>
      <td>0.19</td>
      <td>0.05</td>
      <td>Yes</td>
      <td>Yes</td>
      <td>Strategy</td>
      <td>DeGiro</td>
      <td>2020-05-01</td>
      <td>nan</td>
    </tr>
    <tr>
      <th>29</th>
      <td>Qualcomm Incorporated</td>
      <td>Stocks</td>
      <td>QCOM</td>
      <td>US7475251036</td>
      <td>United States</td>
      <td>NASDAQ</td>
      <td>USD</td>
      <td>Buy, Hold and Sell</td>
      <td>Strategy_Hold_And_Sell</td>
      <td>[]</td>
      <td>0.53</td>
      <td>0.0</td>
      <td>Yes</td>
      <td>Yes</td>
      <td>Strategy</td>
      <td>DeGiro</td>
      <td>2020-12-30</td>
      <td>nan</td>
    </tr>
    <tr>
      <th>30</th>
      <td>Samsung Electronics Co Ltd DRC Pref</td>
      <td>Stocks</td>
      <td>SAME_pq</td>
      <td>US7960502018</td>
      <td>Germany</td>
      <td>Frankfurt</td>
      <td>EUR</td>
      <td>Buy, Hold and Sell</td>
      <td>Strategy_Hold_And_Sell</td>
      <td>[]</td>
      <td>0.47</td>
      <td>0.0</td>
      <td>Yes</td>
      <td>Yes</td>
      <td>Strategy</td>
      <td>DeGiro</td>
      <td>2020-12-30</td>
      <td>nan</td>
    </tr>
    <tr>
      <th>31</th>
      <td>Seagate Technology PLC</td>
      <td>Stocks</td>
      <td>STX</td>
      <td>IE00B58JVZ52</td>
      <td>United States</td>
      <td>NASDAQ</td>
      <td>USD</td>
      <td>Buy on EMA 50 days LT EMA 200 days</td>
      <td>Strategy_Buy_Value0_LT_Value1</td>
      <td>["EMA", 50, 200]</td>
      <td>0.31</td>
      <td>0.33</td>
      <td>Yes</td>
      <td>No</td>
      <td>Strategy</td>
      <td>nan</td>
      <td>NaT</td>
      <td>nan</td>
    </tr>
    <tr>
      <th>32</th>
      <td>Siemens AG Class N</td>
      <td>Stocks</td>
      <td>SIEGn</td>
      <td>DE0007236101</td>
      <td>Germany</td>
      <td>Xetra</td>
      <td>EUR</td>
      <td>Buy on SMA 50 days LT SMA 200 days</td>
      <td>Strategy_Buy_Value0_LT_Value1</td>
      <td>["SMA", 50, 200]</td>
      <td>0.81</td>
      <td>0.67</td>
      <td>Yes</td>
      <td>No</td>
      <td>Strategy</td>
      <td>DeGiro</td>
      <td>2020-12-30</td>
      <td>nan</td>
    </tr>
    <tr>
      <th>33</th>
      <td>Siemens Energy AG</td>
      <td>Stocks</td>
      <td>ENR1n</td>
      <td>DE000ENER6Y0</td>
      <td>Germany</td>
      <td>Xetra</td>
      <td>EUR</td>
      <td>Buy, Hold and Sell</td>
      <td>Strategy_Hold_And_Sell</td>
      <td>[]</td>
      <td>0.32</td>
      <td>0.0</td>
      <td>Yes</td>
      <td>Yes</td>
      <td>Strategy</td>
      <td>DeGiro</td>
      <td>2020-12-28</td>
      <td>nan</td>
    </tr>
    <tr>
      <th>34</th>
      <td>Telefonaktiebolaget LM Ericsson B ADR</td>
      <td>Stocks</td>
      <td>ERIC</td>
      <td>US2948216088</td>
      <td>United States</td>
      <td>NASDAQ</td>
      <td>USD</td>
      <td>Buy on SMA 100 days LT SMA 200 days</td>
      <td>Strategy_Buy_Value0_LT_Value1</td>
      <td>["SMA", 100, 200]</td>
      <td>0.6</td>
      <td>0.39</td>
      <td>Yes</td>
      <td>No</td>
      <td>Strategy</td>
      <td>nan</td>
      <td>NaT</td>
      <td>nan</td>
    </tr>
    <tr>
      <th>35</th>
      <td>Texas Instruments Incorporated</td>
      <td>Stocks</td>
      <td>TXN</td>
      <td>US8825081040</td>
      <td>United States</td>
      <td>NASDAQ</td>
      <td>USD</td>
      <td>Buy on EMA 50 days LT EMA 200 days</td>
      <td>Strategy_Buy_Value0_LT_Value1</td>
      <td>["EMA", 50, 200]</td>
      <td>0.36</td>
      <td>0.21</td>
      <td>Yes</td>
      <td>No</td>
      <td>Strategy</td>
      <td>DeGiro</td>
      <td>2020-12-30</td>
      <td>nan</td>
    </tr>
    <tr>
      <th>36</th>
      <td>Thermo Fisher Scientific Inc</td>
      <td>Stocks</td>
      <td>TMO</td>
      <td>US8835561023</td>
      <td>United States</td>
      <td>NYSE</td>
      <td>USD</td>
      <td>Buy, Hold and Sell</td>
      <td>Strategy_Hold_And_Sell</td>
      <td>[]</td>
      <td>0.28</td>
      <td>0.0</td>
      <td>Yes</td>
      <td>Yes</td>
      <td>Strategy</td>
      <td>DeGiro</td>
      <td>2020-12-28</td>
      <td>nan</td>
    </tr>
    <tr>
      <th>37</th>
      <td>Toyota Motor Corporation ADR</td>
      <td>Stocks</td>
      <td>TM</td>
      <td>US8923313071</td>
      <td>United States</td>
      <td>NYSE</td>
      <td>USD</td>
      <td>Buy on SMA 20 days LT SMA 200 days</td>
      <td>Strategy_Buy_Value0_LT_Value1</td>
      <td>["SMA", 20, 200]</td>
      <td>0.2</td>
      <td>0.22</td>
      <td>Yes</td>
      <td>No</td>
      <td>Strategy</td>
      <td>DeGiro</td>
      <td>2020-12-30</td>
      <td>nan</td>
    </tr>
    <tr>
      <th>38</th>
      <td>VanEck Vectors Global Real Estate UCITS ETF</td>
      <td>Etfs</td>
      <td>TRET</td>
      <td>NL0009690239</td>
      <td>Netherlands</td>
      <td>Amsterdam</td>
      <td>EUR</td>
      <td>Buy on SMA 100 days LT SMA 200 days</td>
      <td>Strategy_Buy_Value0_LT_Value1</td>
      <td>["SMA", 100, 200]</td>
      <td>0.19</td>
      <td>0.4</td>
      <td>Yes</td>
      <td>No</td>
      <td>Not interested</td>
      <td>DeGiro</td>
      <td>2020-12-30</td>
      <td>nan</td>
    </tr>
    <tr>
      <th>39</th>
      <td>Vanguard FTSE 100 UCITS GBP Acc</td>
      <td>Etfs</td>
      <td>VUKG</td>
      <td>IE00BFMXYP42</td>
      <td>United Kingdom</td>
      <td>London</td>
      <td>GBP</td>
      <td>Buy on EMA 100 days LT EMA 200 days</td>
      <td>Strategy_Buy_Value0_LT_Value1</td>
      <td>["EMA", 100, 200]</td>
      <td>0.29</td>
      <td>0.47</td>
      <td>Yes</td>
      <td>Yes</td>
      <td>Strategy</td>
      <td>nan</td>
      <td>NaT</td>
      <td>nan</td>
    </tr>
    <tr>
      <th>40</th>
      <td>Vanguard FTSE 250 UCITS ETF GBP Accumulation</td>
      <td>Etfs</td>
      <td>VMIG</td>
      <td>IE00BFMXVQ44</td>
      <td>United Kingdom</td>
      <td>London</td>
      <td>GBP</td>
      <td>Buy on EMA 100 days LT EMA 200 days</td>
      <td>Strategy_Buy_Value0_LT_Value1</td>
      <td>["EMA", 100, 200]</td>
      <td>0.56</td>
      <td>0.68</td>
      <td>Yes</td>
      <td>No</td>
      <td>Strategy</td>
      <td>Trading212</td>
      <td>2020-12-30</td>
      <td>nan</td>
    </tr>
    <tr>
      <th>41</th>
      <td>Vanguard FTSE All-World UCITS ETF USD Accumula...</td>
      <td>Etfs</td>
      <td>VWCE</td>
      <td>IE00BK5BQT80</td>
      <td>Germany</td>
      <td>Xetra</td>
      <td>USD</td>
      <td>Buy on EMA 50 days LT EMA 200 days</td>
      <td>Strategy_Buy_Value0_LT_Value1</td>
      <td>["EMA", 50, 200]</td>
      <td>0.26</td>
      <td>0.32</td>
      <td>Yes</td>
      <td>No</td>
      <td>Strategy</td>
      <td>DeGiro</td>
      <td>2020-12-30</td>
      <td>nan</td>
    </tr>
    <tr>
      <th>42</th>
      <td>Walt Disney Company</td>
      <td>Stocks</td>
      <td>DIS</td>
      <td>US2546871060</td>
      <td>United States</td>
      <td>NYSE</td>
      <td>USD</td>
      <td>Buy on EMA 100 days LT EMA 200 days</td>
      <td>Strategy_Buy_Value0_LT_Value1</td>
      <td>["EMA", 100, 200]</td>
      <td>0.37</td>
      <td>0.26</td>
      <td>Yes</td>
      <td>No</td>
      <td>Strategy</td>
      <td>nan</td>
      <td>NaT</td>
      <td>nan</td>
    </tr>
    <tr>
      <th>43</th>
      <td>Xtrackers Future Mobility UCITS ETF1C</td>
      <td>Etfs</td>
      <td>XMOV</td>
      <td>IE00BGV5VR99</td>
      <td>Germany</td>
      <td>Xetra</td>
      <td>EUR</td>
      <td>Buy on SMA 50 days LT SMA 200 days</td>
      <td>Strategy_Buy_Value0_LT_Value1</td>
      <td>["SMA", 50, 200]</td>
      <td>0.36</td>
      <td>0.08</td>
      <td>Yes</td>
      <td>No</td>
      <td>Not interested</td>
      <td>nan</td>
      <td>NaT</td>
      <td>nan</td>
    </tr>
    <tr>
      <th>44</th>
      <td>Xtrackers LevDAX Daily Swap UCITS ETF 1C</td>
      <td>Etfs</td>
      <td>DBPE</td>
      <td>LU0411075376</td>
      <td>Germany</td>
      <td>Xetra</td>
      <td>EUR</td>
      <td>Buy on EMA 100 days LT EMA 200 days</td>
      <td>Strategy_Buy_Value0_LT_Value1</td>
      <td>["EMA", 100, 200]</td>
      <td>1.29</td>
      <td>1.35</td>
      <td>Yes</td>
      <td>No</td>
      <td>Strategy</td>
      <td>nan</td>
      <td>NaT</td>
      <td>nan</td>
    </tr>
    <tr>
      <th>45</th>
      <td>Xtrackers MSCI Emerging Markets Swap UCITS ETF 1C</td>
      <td>Etfs</td>
      <td>XMEM</td>
      <td>LU0292107645</td>
      <td>Germany</td>
      <td>Xetra</td>
      <td>USD</td>
      <td>Buy on SMA 50 days LT SMA 100 days</td>
      <td>Strategy_Buy_Value0_LT_Value1</td>
      <td>["SMA", 50, 100]</td>
      <td>0.27</td>
      <td>0.34</td>
      <td>Yes</td>
      <td>No</td>
      <td>Strategy</td>
      <td>DeGiro</td>
      <td>2020-12-30</td>
      <td>nan</td>
    </tr>
    <tr>
      <th>46</th>
      <td>Xtrackers ShortDAX Daily Swap UCITS ETF 1C</td>
      <td>Etfs</td>
      <td>XSDX</td>
      <td>LU0292106241</td>
      <td>Germany</td>
      <td>Xetra</td>
      <td>EUR</td>
      <td>Buy on EMA 100 days LT EMA 200 days</td>
      <td>Strategy_Buy_Value0_LT_Value1</td>
      <td>["EMA", 100, 200]</td>
      <td>0.23</td>
      <td>0.4</td>
      <td>Yes</td>
      <td>Yes</td>
      <td>Strategy</td>
      <td>DeGiro</td>
      <td>2020-12-30</td>
      <td>nan</td>
    </tr>
    <tr>
      <th>47</th>
      <td>Yum! Brands Inc</td>
      <td>Stocks</td>
      <td>YUM</td>
      <td>US9884981013</td>
      <td>United States</td>
      <td>NYSE</td>
      <td>USD</td>
      <td>Buy on EMA 100 days LT EMA 200 days</td>
      <td>Strategy_Buy_Value0_LT_Value1</td>
      <td>["EMA", 100, 200]</td>
      <td>0.11</td>
      <td>0.12</td>
      <td>Yes</td>
      <td>No</td>
      <td>Not interested</td>
      <td>nan</td>
      <td>NaT</td>
      <td>nan</td>
    </tr>
  </tbody>
</table>
</div>

<p>Any column after currency is not required in the first run. Those columns are the results of running the simulation with the best perfoming strategy.</p>
<p>Now we can perform the simulation in several scenarios. Please ignore any warnings regarding some currency exchange or data missing. The program will make the best assumption taking previous data and interpolating. Also in some securities, no dividends are available &mdash; which is expected.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span>final_dataframe <span style="color:#f92672">=</span> pd<span style="color:#f92672">.</span>DataFrame()
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>YEARS <span style="color:#f92672">=</span> [<span style="color:#ae81ff">1</span>, <span style="color:#ae81ff">3</span>]
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>p_bar <span style="color:#f92672">=</span> tqdm()
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">for</span> years <span style="color:#f92672">in</span> tqdm(YEARS, desc<span style="color:#f92672">=</span><span style="color:#e6db74">&#39;Processing scenarios&#39;</span>):
</span></span><span style="display:flex;"><span>    print(<span style="color:#e6db74">&#39;Processing Simulation for period of </span><span style="color:#e6db74">{}</span><span style="color:#e6db74"> year(s)&#39;</span><span style="color:#f92672">.</span>format(years))
</span></span><span style="display:flex;"><span>    dataframe_result <span style="color:#f92672">=</span> simulate(<span style="color:#e6db74">&#39;./excel/portfolio.xlsx&#39;</span>, years, p_bar)
</span></span><span style="display:flex;"><span>    
</span></span><span style="display:flex;"><span>    dataframe_result[<span style="color:#e6db74">&#39;Simulation Period&#39;</span>] <span style="color:#f92672">=</span> <span style="color:#e6db74">&#39;</span><span style="color:#e6db74">{}</span><span style="color:#e6db74"> year(s)&#39;</span><span style="color:#f92672">.</span>format(years)
</span></span><span style="display:flex;"><span>    dataframe_result[<span style="color:#e6db74">&#39;Yield per Year&#39;</span>] <span style="color:#f92672">=</span> round(dataframe_result[<span style="color:#e6db74">&#39;Yield&#39;</span>]<span style="color:#f92672">/</span>years,<span style="color:#ae81ff">2</span>)
</span></span><span style="display:flex;"><span>    dataframe_result[<span style="color:#e6db74">&#39;Strategy Yield Increment Per Year&#39;</span>] <span style="color:#f92672">=</span> round(dataframe_result[<span style="color:#e6db74">&#39;Strategy Yield Increment&#39;</span>]<span style="color:#f92672">/</span>years,<span style="color:#ae81ff">2</span>)
</span></span><span style="display:flex;"><span>    dataframe_result <span style="color:#f92672">=</span> dataframe_result[[<span style="color:#e6db74">&#39;Security Name&#39;</span>, <span style="color:#e6db74">&#39;Security Type&#39;</span>, <span style="color:#e6db74">&#39;Country&#39;</span>, <span style="color:#e6db74">&#39;Exchange&#39;</span>, <span style="color:#e6db74">&#39;Strategy&#39;</span>, <span style="color:#e6db74">&#39;Simulation Period&#39;</span>, \
</span></span><span style="display:flex;"><span>                                         <span style="color:#e6db74">&#39;Yield per Year&#39;</span>, <span style="color:#e6db74">&#39;Strategy Yield Increment Per Year&#39;</span>, <span style="color:#e6db74">&#39;Strategy Class Name&#39;</span>, <span style="color:#e6db74">&#39;Strategy Config&#39;</span>]]
</span></span><span style="display:flex;"><span>    final_dataframe <span style="color:#f92672">=</span> final_dataframe<span style="color:#f92672">.</span>append(dataframe_result)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>p_bar<span style="color:#f92672">.</span>close()
</span></span></code></pre></div><p>Now we can see the best strategy and save the results:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span>final_dataframe<span style="color:#f92672">.</span>to_csv(<span style="color:#e6db74">&#39;./excel/_simulations.csv&#39;</span>,index<span style="color:#f92672">=</span><span style="color:#66d9ef">False</span>)
</span></span><span style="display:flex;"><span>display<span style="color:#f92672">.</span>display(final_dataframe)
</span></span></code></pre></div>

<table border="1">
  <thead>
    <tr style="text-align: right;">
      <th></th>
      <th>Security Name</th>
      <th>Security Type</th>
      <th>Country</th>
      <th>Exchange</th>
      <th>Strategy</th>
      <th>Simulation Period</th>
      <th>Yield per Year</th>
      <th>Strategy Yield Increment Per Year</th>
      <th>Strategy Class Name</th>
      <th>Strategy Config</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>1</th>
      <td>Xtrackers ShortDAX Daily Swap UCITS ETF 1C</td>
      <td>Etfs</td>
      <td>Germany</td>
      <td>Xetra</td>
      <td>Buy on dSMA20 &gt; 0.5</td>
      <td>1 year(s)</td>
      <td>0.00</td>
      <td>0.47</td>
      <td>Strategy_Buy_dSMA20</td>
      <td>0.5</td>
    </tr>
    <tr>
      <th>53</th>
      <td>Xtrackers LevDAX Daily Swap UCITS ETF 1C</td>
      <td>Etfs</td>
      <td>Germany</td>
      <td>Xetra</td>
      <td>Buy, Hold and Sell</td>
      <td>1 year(s)</td>
      <td>1.56</td>
      <td>0.00</td>
      <td>Strategy_Hold_And_Sell</td>
      <td>[]</td>
    </tr>
    <tr>
      <th>81</th>
      <td>Xtrackers (IE) Plc - Xtrackers Future Mobility...</td>
      <td>Etfs</td>
      <td>Germany</td>
      <td>Xetra</td>
      <td>Buy, Hold and Sell</td>
      <td>1 year(s)</td>
      <td>1.00</td>
      <td>0.00</td>
      <td>Strategy_Hold_And_Sell</td>
      <td>[]</td>
    </tr>
    <tr>
      <th>110</th>
      <td>VanEck Vectors Global Real Estate UCITS ETF</td>
      <td>Etfs</td>
      <td>Netherlands</td>
      <td>Amsterdam</td>
      <td>Buy on EMA 20 days LT EMA 50 days</td>
      <td>1 year(s)</td>
      <td>0.42</td>
      <td>0.05</td>
      <td>Strategy_Buy_Value0_LT_Value1</td>
      <td>["EMA", 20, 50]</td>
    </tr>
    <tr>
      <th>138</th>
      <td>Siemens Energy AG</td>
      <td>Stocks</td>
      <td>Germany</td>
      <td>Xetra</td>
      <td>Buy, Hold and Sell</td>
      <td>1 year(s)</td>
      <td>0.32</td>
      <td>0.00</td>
      <td>Strategy_Hold_And_Sell</td>
      <td>[]</td>
    </tr>
    <tr>
      <th>165</th>
      <td>Siemens AG Class N</td>
      <td>Stocks</td>
      <td>Germany</td>
      <td>Xetra</td>
      <td>Buy, Hold and Sell</td>
      <td>1 year(s)</td>
      <td>1.22</td>
      <td>0.00</td>
      <td>Strategy_Hold_And_Sell</td>
      <td>[]</td>
    </tr>
    <tr>
      <th>194</th>
      <td>Samsung Electronics Co Ltd DRC Pref</td>
      <td>Stocks</td>
      <td>Germany</td>
      <td>Frankfurt</td>
      <td>Buy, Hold and Sell</td>
      <td>1 year(s)</td>
      <td>0.95</td>
      <td>0.00</td>
      <td>Strategy_Hold_And_Sell</td>
      <td>[]</td>
    </tr>
    <tr>
      <th>213</th>
      <td>Nokia Oyj</td>
      <td>Stocks</td>
      <td>Finland</td>
      <td>Helsinki</td>
      <td>Buy on EMA 50 days LT EMA 100 days</td>
      <td>1 year(s)</td>
      <td>0.90</td>
      <td>0.54</td>
      <td>Strategy_Buy_Value0_LT_Value1</td>
      <td>["EMA", 50, 100]</td>
    </tr>
    <tr>
      <th>251</th>
      <td>NH Hoteles</td>
      <td>Stocks</td>
      <td>Spain</td>
      <td>Madrid</td>
      <td>Buy on SMA 20 days LT SMA 50 days</td>
      <td>1 year(s)</td>
      <td>1.54</td>
      <td>0.90</td>
      <td>Strategy_Buy_Value0_LT_Value1</td>
      <td>["SMA", 20, 50]</td>
    </tr>
    <tr>
      <th>277</th>
      <td>Melia Hotels</td>
      <td>Stocks</td>
      <td>Spain</td>
      <td>Madrid</td>
      <td>Buy, Hold and Sell</td>
      <td>1 year(s)</td>
      <td>1.03</td>
      <td>0.00</td>
      <td>Strategy_Hold_And_Sell</td>
      <td>[]</td>
    </tr>
    <tr>
      <th>306</th>
      <td>iShares European Property Yield UCITS ETF EUR ...</td>
      <td>Etfs</td>
      <td>Germany</td>
      <td>Xetra</td>
      <td>Buy on EMA 20 days LT EMA 50 days</td>
      <td>1 year(s)</td>
      <td>0.37</td>
      <td>0.11</td>
      <td>Strategy_Buy_Value0_LT_Value1</td>
      <td>["EMA", 20, 50]</td>
    </tr>
    <tr>
      <th>320</th>
      <td>Invesco Physical Gold ETC</td>
      <td>Etfs</td>
      <td>Netherlands</td>
      <td>Amsterdam</td>
      <td>Buy on SMA 100 days LT SMA 50 days</td>
      <td>1 year(s)</td>
      <td>0.11</td>
      <td>0.12</td>
      <td>Strategy_Buy_Value0_LT_Value1</td>
      <td>["SMA", 100, 50]</td>
    </tr>
    <tr>
      <th>363</th>
      <td>International Consolidated Airlines Group S.A.</td>
      <td>Stocks</td>
      <td>Spain</td>
      <td>Madrid</td>
      <td>Buy on SMA 20 days LT SMA 50 days</td>
      <td>1 year(s)</td>
      <td>1.11</td>
      <td>1.08</td>
      <td>Strategy_Buy_Value0_LT_Value1</td>
      <td>["SMA", 20, 50]</td>
    </tr>
    <tr>
      <th>387</th>
      <td>International Business Machines</td>
      <td>Stocks</td>
      <td>United States</td>
      <td>NYSE</td>
      <td>Buy on EMA 20 days LT EMA 100 days</td>
      <td>1 year(s)</td>
      <td>0.59</td>
      <td>0.21</td>
      <td>Strategy_Buy_Value0_LT_Value1</td>
      <td>["EMA", 20, 100]</td>
    </tr>
    <tr>
      <th>417</th>
      <td>Hyundai Motor Co DRC</td>
      <td>Stocks</td>
      <td>Germany</td>
      <td>Frankfurt</td>
      <td>Buy, Hold and Sell</td>
      <td>1 year(s)</td>
      <td>1.30</td>
      <td>0.00</td>
      <td>Strategy_Hold_And_Sell</td>
      <td>[]</td>
    </tr>
    <tr>
      <th>447</th>
      <td>Airbus Group SE</td>
      <td>Stocks</td>
      <td>France</td>
      <td>Paris</td>
      <td>Buy on SMA 20 days LT SMA 50 days</td>
      <td>1 year(s)</td>
      <td>1.27</td>
      <td>0.52</td>
      <td>Strategy_Buy_Value0_LT_Value1</td>
      <td>["SMA", 20, 50]</td>
    </tr>
    <tr>
      <th>9</th>
      <td>Xtrackers ShortDAX Daily Swap UCITS ETF 1C</td>
      <td>Etfs</td>
      <td>Germany</td>
      <td>Xetra</td>
      <td>Buy on EMA 100 days LT EMA 200 days</td>
      <td>3 year(s)</td>
      <td>0.01</td>
      <td>0.12</td>
      <td>Strategy_Buy_Value0_LT_Value1</td>
      <td>["EMA", 100, 200]</td>
    </tr>
    <tr>
      <th>16</th>
      <td>Xtrackers ShortDAX Daily Swap UCITS ETF 1C</td>
      <td>Etfs</td>
      <td>Germany</td>
      <td>Xetra</td>
      <td>Buy on SMA 50 days LT SMA 200 days</td>
      <td>3 year(s)</td>
      <td>0.01</td>
      <td>0.12</td>
      <td>Strategy_Buy_Value0_LT_Value1</td>
      <td>["SMA", 50, 200]</td>
    </tr>
    <tr>
      <th>43</th>
      <td>Xtrackers LevDAX Daily Swap UCITS ETF 1C</td>
      <td>Etfs</td>
      <td>Germany</td>
      <td>Xetra</td>
      <td>Buy on EMA 50 days LT EMA 200 days</td>
      <td>3 year(s)</td>
      <td>0.57</td>
      <td>0.48</td>
      <td>Strategy_Buy_Value0_LT_Value1</td>
      <td>["EMA", 50, 200]</td>
    </tr>
    <tr>
      <th>81</th>
      <td>Xtrackers (IE) Plc - Xtrackers Future Mobility...</td>
      <td>Etfs</td>
      <td>Germany</td>
      <td>Xetra</td>
      <td>Buy, Hold and Sell</td>
      <td>3 year(s)</td>
      <td>0.15</td>
      <td>0.00</td>
      <td>Strategy_Hold_And_Sell</td>
      <td>[]</td>
    </tr>
    <tr>
      <th>93</th>
      <td>VanEck Vectors Global Real Estate UCITS ETF</td>
      <td>Etfs</td>
      <td>Netherlands</td>
      <td>Amsterdam</td>
      <td>Buy on EMA 100 days LT EMA 200 days</td>
      <td>3 year(s)</td>
      <td>0.13</td>
      <td>0.10</td>
      <td>Strategy_Buy_Value0_LT_Value1</td>
      <td>["EMA", 100, 200]</td>
    </tr>
    <tr>
      <th>138</th>
      <td>Siemens Energy AG</td>
      <td>Stocks</td>
      <td>Germany</td>
      <td>Xetra</td>
      <td>Buy, Hold and Sell</td>
      <td>3 year(s)</td>
      <td>0.11</td>
      <td>0.00</td>
      <td>Strategy_Hold_And_Sell</td>
      <td>[]</td>
    </tr>
    <tr>
      <th>156</th>
      <td>Siemens AG Class N</td>
      <td>Stocks</td>
      <td>Germany</td>
      <td>Xetra</td>
      <td>Buy on SMA 50 days LT SMA 200 days</td>
      <td>3 year(s)</td>
      <td>0.51</td>
      <td>0.37</td>
      <td>Strategy_Buy_Value0_LT_Value1</td>
      <td>["SMA", 50, 200]</td>
    </tr>
    <tr>
      <th>193</th>
      <td>Samsung Electronics Co Ltd DRC Pref</td>
      <td>Stocks</td>
      <td>Germany</td>
      <td>Frankfurt</td>
      <td>Buy, Hold and Sell</td>
      <td>3 year(s)</td>
      <td>0.25</td>
      <td>0.00</td>
      <td>Strategy_Hold_And_Sell</td>
      <td>[]</td>
    </tr>
    <tr>
      <th>220</th>
      <td>Nokia Oyj</td>
      <td>Stocks</td>
      <td>Finland</td>
      <td>Helsinki</td>
      <td>Buy on SMA 20 days LT SMA 100 days</td>
      <td>3 year(s)</td>
      <td>0.27</td>
      <td>0.32</td>
      <td>Strategy_Buy_Value0_LT_Value1</td>
      <td>["SMA", 20, 100]</td>
    </tr>
    <tr>
      <th>233</th>
      <td>NH Hoteles</td>
      <td>Stocks</td>
      <td>Spain</td>
      <td>Madrid</td>
      <td>Buy on EMA 100 days LT EMA 200 days</td>
      <td>3 year(s)</td>
      <td>0.19</td>
      <td>0.32</td>
      <td>Strategy_Buy_Value0_LT_Value1</td>
      <td>["EMA", 100, 200]</td>
    </tr>
    <tr>
      <th>265</th>
      <td>Melia Hotels</td>
      <td>Stocks</td>
      <td>Spain</td>
      <td>Madrid</td>
      <td>Buy on EMA 100 days LT EMA 20 days</td>
      <td>3 year(s)</td>
      <td>0.05</td>
      <td>0.19</td>
      <td>Strategy_Buy_Value0_LT_Value1</td>
      <td>["EMA", 100, 20]</td>
    </tr>
    <tr>
      <th>295</th>
      <td>iShares European Property Yield UCITS ETF EUR ...</td>
      <td>Etfs</td>
      <td>Germany</td>
      <td>Xetra</td>
      <td>Buy on EMA 50 days LT EMA 200 days</td>
      <td>3 year(s)</td>
      <td>0.10</td>
      <td>0.08</td>
      <td>Strategy_Buy_Value0_LT_Value1</td>
      <td>["EMA", 50, 200]</td>
    </tr>
    <tr>
      <th>321</th>
      <td>Invesco Physical Gold ETC</td>
      <td>Etfs</td>
      <td>Netherlands</td>
      <td>Amsterdam</td>
      <td>Buy on EMA 100 days LT EMA 20 days</td>
      <td>3 year(s)</td>
      <td>0.13</td>
      <td>0.03</td>
      <td>Strategy_Buy_Value0_LT_Value1</td>
      <td>["EMA", 100, 20]</td>
    </tr>
    <tr>
      <th>345</th>
      <td>International Consolidated Airlines Group S.A.</td>
      <td>Stocks</td>
      <td>Spain</td>
      <td>Madrid</td>
      <td>Buy on EMA 100 days LT EMA 200 days</td>
      <td>3 year(s)</td>
      <td>0.02</td>
      <td>0.25</td>
      <td>Strategy_Buy_Value0_LT_Value1</td>
      <td>["EMA", 100, 200]</td>
    </tr>
    <tr>
      <th>382</th>
      <td>International Business Machines</td>
      <td>Stocks</td>
      <td>United States</td>
      <td>NYSE</td>
      <td>Buy on SMA 50 days LT SMA 100 days</td>
      <td>3 year(s)</td>
      <td>0.24</td>
      <td>0.27</td>
      <td>Strategy_Buy_Value0_LT_Value1</td>
      <td>["SMA", 50, 100]</td>
    </tr>
    <tr>
      <th>414</th>
      <td>Hyundai Motor Co DRC</td>
      <td>Stocks</td>
      <td>Germany</td>
      <td>Frankfurt</td>
      <td>Buy on SMA 20 days LT SMA 200 days</td>
      <td>3 year(s)</td>
      <td>0.16</td>
      <td>0.11</td>
      <td>Strategy_Buy_Value0_LT_Value1</td>
      <td>["SMA", 20, 200]</td>
    </tr>
    <tr>
      <th>430</th>
      <td>Airbus Group SE</td>
      <td>Stocks</td>
      <td>France</td>
      <td>Paris</td>
      <td>Buy on SMA 100 days LT SMA 200 days</td>
      <td>3 year(s)</td>
      <td>0.45</td>
      <td>0.43</td>
      <td>Strategy_Buy_Value0_LT_Value1</td>
      <td>["SMA", 100, 200]</td>
    </tr>
  </tbody>
</table>


<p>In the future, I will focus on investing with python. From the results, I am not convinced that trading is the best approach. I will focus my efforts about selection of securities and balancing a portfolio.</p>
<p>Until next time</p>
]]></content>
        </item>
        
        <item>
            <title>Trading in Python: Part 1</title>
            <link>https://blog.miguens.one/posts/2020/12/trading-in-python-part-1/</link>
            <pubDate>Sun, 13 Dec 2020 00:00:00 +0000</pubDate>
            
            <guid>https://blog.miguens.one/posts/2020/12/trading-in-python-part-1/</guid>
            <description>&lt;h2 id=&#34;what-is-the-difference-between-trading-and-investing&#34;&gt;What is the difference between Trading and Investing?&lt;/h2&gt;
&lt;p&gt;Trading and investing both involve seeking profit in the stock market, but they pursue that goal in different ways.&lt;/p&gt;
&lt;p&gt;Traders jump in and out of stocks within weeks, days, even minutes, with the aim of short-term profits. They often focus on a stock’s technical factors rather than a company’s long-term prospects. What matters to traders is which direction the stock will move next and how the trader can profit from that move.&lt;/p&gt;</description>
            <content type="html"><![CDATA[<h2 id="what-is-the-difference-between-trading-and-investing">What is the difference between Trading and Investing?</h2>
<p>Trading and investing both involve seeking profit in the stock market, but they pursue that goal in different ways.</p>
<p>Traders jump in and out of stocks within weeks, days, even minutes, with the aim of short-term profits. They often focus on a stock’s technical factors rather than a company’s long-term prospects. What matters to traders is which direction the stock will move next and how the trader can profit from that move.</p>
<p>Investors have a longer-term outlook. They think in terms of years and often hold stocks through the market’s ups and downs.</p>
<p>For this activity, I will be using <a href="https://jupyter.org/">Jupyter Lab</a>, and this article is a Markdown version of my notebook.</p>
<p>In the first place, we need to install the <code>investpy</code> library (you can find it <a href="https://investpy.readthedocs.io/">here</a>). The library is a API to connect to <a href="https://www.investing.com">investing.com</a> and retrieve information about an ETF or a stock security.</p>
<p>After that, we can make our own wrapper to facilitate the treatment of data, and convert the data to EUR, as it will be the currency we will use in this example.</p>
<p>Save the code in the file <code>Security.py</code> in the same location of your Jupyter Notebook</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">from</span> datetime <span style="color:#f92672">import</span> datetime, timedelta
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">import</span> pandas <span style="color:#66d9ef">as</span> pd
</span></span><span style="display:flex;"><span>    
</span></span><span style="display:flex;"><span>    <span style="color:#75715e"># import sys</span>
</span></span><span style="display:flex;"><span>    <span style="color:#75715e"># sys.path.append(&#39;/home/luis/projects/TradingMachine/lib/investpy&#39;)</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">import</span> investpy
</span></span><span style="display:flex;"><span>    
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">from</span> currency_converter <span style="color:#f92672">import</span> CurrencyConverter, RateNotFoundError
</span></span><span style="display:flex;"><span>    cc <span style="color:#f92672">=</span> CurrencyConverter(<span style="color:#e6db74">&#39;http://www.ecb.int/stats/eurofxref/eurofxref-hist.zip&#39;</span>,
</span></span><span style="display:flex;"><span>                          fallback_on_missing_rate<span style="color:#f92672">=</span><span style="color:#66d9ef">True</span>,
</span></span><span style="display:flex;"><span>                          fallback_on_missing_rate_method<span style="color:#f92672">=</span><span style="color:#e6db74">&#39;linear_interpolation&#39;</span>)
</span></span><span style="display:flex;"><span>         
</span></span><span style="display:flex;"><span>        
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">class</span> <span style="color:#a6e22e">Security</span>:
</span></span><span style="display:flex;"><span>        <span style="color:#a6e22e">@staticmethod</span>
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">def</span> <span style="color:#a6e22e">get_investingcom_instrument</span>(search_code, country<span style="color:#f92672">=</span><span style="color:#66d9ef">None</span>, exchange<span style="color:#f92672">=</span><span style="color:#66d9ef">None</span>):
</span></span><span style="display:flex;"><span>            results <span style="color:#f92672">=</span> []
</span></span><span style="display:flex;"><span>            countries <span style="color:#f92672">=</span> <span style="color:#66d9ef">None</span>
</span></span><span style="display:flex;"><span>            <span style="color:#66d9ef">if</span> country <span style="color:#f92672">is</span> <span style="color:#f92672">not</span> <span style="color:#66d9ef">None</span>:
</span></span><span style="display:flex;"><span>                countries <span style="color:#f92672">=</span> [country]
</span></span><span style="display:flex;"><span>            
</span></span><span style="display:flex;"><span>            <span style="color:#66d9ef">try</span>:
</span></span><span style="display:flex;"><span>                <span style="color:#66d9ef">for</span> i <span style="color:#f92672">in</span> investpy<span style="color:#f92672">.</span>search_quotes(text<span style="color:#f92672">=</span>search_code, countries<span style="color:#f92672">=</span>countries):
</span></span><span style="display:flex;"><span>                    <span style="color:#66d9ef">if</span> exchange <span style="color:#f92672">is</span> <span style="color:#f92672">not</span> <span style="color:#66d9ef">None</span>:
</span></span><span style="display:flex;"><span>                        <span style="color:#66d9ef">if</span> exchange<span style="color:#f92672">.</span>lower() <span style="color:#f92672">==</span> i<span style="color:#f92672">.</span>exchange<span style="color:#f92672">.</span>lower():
</span></span><span style="display:flex;"><span>                            results<span style="color:#f92672">.</span>append(i)
</span></span><span style="display:flex;"><span>                    <span style="color:#66d9ef">else</span>:
</span></span><span style="display:flex;"><span>                        results<span style="color:#f92672">.</span>append(i)
</span></span><span style="display:flex;"><span>            <span style="color:#66d9ef">except</span>:
</span></span><span style="display:flex;"><span>                <span style="color:#66d9ef">pass</span>
</span></span><span style="display:flex;"><span>            
</span></span><span style="display:flex;"><span>            <span style="color:#66d9ef">if</span> len(results) <span style="color:#f92672">==</span> <span style="color:#ae81ff">0</span>:
</span></span><span style="display:flex;"><span>                <span style="color:#66d9ef">raise</span> <span style="color:#a6e22e">Exception</span>(<span style="color:#e6db74">&#39;No results found on investing.com for </span><span style="color:#e6db74">{}</span><span style="color:#e6db74"> / </span><span style="color:#e6db74">{}</span><span style="color:#e6db74"> / </span><span style="color:#e6db74">{}</span><span style="color:#e6db74">&#39;</span><span style="color:#f92672">.</span>format(search_code, country, exchange))
</span></span><span style="display:flex;"><span>            <span style="color:#66d9ef">if</span> len(results) <span style="color:#f92672">&gt;</span> <span style="color:#ae81ff">1</span>:
</span></span><span style="display:flex;"><span>                print_results <span style="color:#f92672">=</span> []
</span></span><span style="display:flex;"><span>                <span style="color:#66d9ef">for</span> result <span style="color:#f92672">in</span> results:
</span></span><span style="display:flex;"><span>                    print_results<span style="color:#f92672">.</span>append((result<span style="color:#f92672">.</span>country, result<span style="color:#f92672">.</span>exchange))
</span></span><span style="display:flex;"><span>                <span style="color:#66d9ef">raise</span> <span style="color:#a6e22e">Exception</span>(<span style="color:#e6db74">&#39;Several results found for </span><span style="color:#e6db74">{}</span><span style="color:#e6db74"> / </span><span style="color:#e6db74">{}</span><span style="color:#e6db74"> / </span><span style="color:#e6db74">{}</span><span style="color:#e6db74"> </span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">&#39;</span><span style="color:#f92672">.</span>format(search_code, country, exchange) <span style="color:#f92672">+</span>
</span></span><span style="display:flex;"><span>                                <span style="color:#e6db74">&#39;</span><span style="color:#e6db74">{}</span><span style="color:#e6db74">&#39;</span><span style="color:#f92672">.</span>format(print_results))
</span></span><span style="display:flex;"><span>    
</span></span><span style="display:flex;"><span>                
</span></span><span style="display:flex;"><span>            <span style="color:#66d9ef">return</span> results[<span style="color:#ae81ff">0</span>]
</span></span><span style="display:flex;"><span>            
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">def</span> <span style="color:#a6e22e">_get_data</span>(self):
</span></span><span style="display:flex;"><span>            date_format<span style="color:#f92672">=</span><span style="color:#e6db74">&#39;</span><span style="color:#e6db74">%d</span><span style="color:#e6db74">/%m/%Y&#39;</span>
</span></span><span style="display:flex;"><span>            today <span style="color:#f92672">=</span> datetime<span style="color:#f92672">.</span>today()
</span></span><span style="display:flex;"><span>            time_ago <span style="color:#f92672">=</span> datetime<span style="color:#f92672">.</span>today() <span style="color:#f92672">-</span> timedelta(days<span style="color:#f92672">=</span><span style="color:#ae81ff">2000</span>)
</span></span><span style="display:flex;"><span>            today_str <span style="color:#f92672">=</span> today<span style="color:#f92672">.</span>strftime(date_format)
</span></span><span style="display:flex;"><span>            time_ago_str <span style="color:#f92672">=</span> time_ago<span style="color:#f92672">.</span>strftime(date_format)
</span></span><span style="display:flex;"><span>            
</span></span><span style="display:flex;"><span>            data <span style="color:#f92672">=</span> self<span style="color:#f92672">.</span>investingapi<span style="color:#f92672">.</span>retrieve_historical_data(from_date<span style="color:#f92672">=</span>time_ago_str, to_date<span style="color:#f92672">=</span>today_str)
</span></span><span style="display:flex;"><span>    
</span></span><span style="display:flex;"><span>            exchange <span style="color:#f92672">=</span> list()
</span></span><span style="display:flex;"><span>            <span style="color:#66d9ef">for</span> element <span style="color:#f92672">in</span> data<span style="color:#f92672">.</span>index:
</span></span><span style="display:flex;"><span>                <span style="color:#66d9ef">try</span>:
</span></span><span style="display:flex;"><span>                    exchange<span style="color:#f92672">.</span>append(cc<span style="color:#f92672">.</span>convert(<span style="color:#ae81ff">1</span>, self<span style="color:#f92672">.</span>currency, <span style="color:#e6db74">&#39;EUR&#39;</span>, element<span style="color:#f92672">.</span>to_pydatetime()))
</span></span><span style="display:flex;"><span>                <span style="color:#66d9ef">except</span> RateNotFoundError <span style="color:#66d9ef">as</span> e:
</span></span><span style="display:flex;"><span>                    print(<span style="color:#e6db74">&#39;INFO: </span><span style="color:#e6db74">{}</span><span style="color:#e6db74">. Taking yesterday value&#39;</span><span style="color:#f92672">.</span>format(e))
</span></span><span style="display:flex;"><span>                    exchange<span style="color:#f92672">.</span>append(cc<span style="color:#f92672">.</span>convert(<span style="color:#ae81ff">1</span>, self<span style="color:#f92672">.</span>currency, <span style="color:#e6db74">&#39;EUR&#39;</span>, element<span style="color:#f92672">.</span>to_pydatetime() <span style="color:#f92672">-</span> timedelta(days<span style="color:#f92672">=</span><span style="color:#ae81ff">1</span>)))
</span></span><span style="display:flex;"><span>    
</span></span><span style="display:flex;"><span>            data[<span style="color:#e6db74">&#39;Exchange Rate&#39;</span>] <span style="color:#f92672">=</span> exchange
</span></span><span style="display:flex;"><span>            data[<span style="color:#e6db74">&#39;EUR Value&#39;</span>] <span style="color:#f92672">=</span> data[<span style="color:#e6db74">&#39;Close&#39;</span>] <span style="color:#f92672">*</span> data[<span style="color:#e6db74">&#39;Exchange Rate&#39;</span>]
</span></span><span style="display:flex;"><span>           
</span></span><span style="display:flex;"><span>            <span style="color:#66d9ef">return</span> data
</span></span><span style="display:flex;"><span>        
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">def</span> <span style="color:#a6e22e">_moving_averages_holder</span>(self):
</span></span><span style="display:flex;"><span>            data <span style="color:#f92672">=</span> pd<span style="color:#f92672">.</span>DataFrame(index<span style="color:#f92672">=</span>self<span style="color:#f92672">.</span>quotes<span style="color:#f92672">.</span>index<span style="color:#f92672">.</span>copy())
</span></span><span style="display:flex;"><span>            data[<span style="color:#e6db74">&#39;Current Value&#39;</span>] <span style="color:#f92672">=</span> self<span style="color:#f92672">.</span>quotes[<span style="color:#e6db74">&#39;EUR Value&#39;</span>]<span style="color:#f92672">.</span>copy()
</span></span><span style="display:flex;"><span>            moving_avg <span style="color:#f92672">=</span> [<span style="color:#ae81ff">1</span>, <span style="color:#ae81ff">10</span>, <span style="color:#ae81ff">50</span>, <span style="color:#ae81ff">100</span>, <span style="color:#ae81ff">200</span>, <span style="color:#ae81ff">400</span>]
</span></span><span style="display:flex;"><span>            
</span></span><span style="display:flex;"><span>            <span style="color:#66d9ef">return</span> data 
</span></span><span style="display:flex;"><span>        
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">def</span> <span style="color:#a6e22e">_get_dividends</span>(self):
</span></span><span style="display:flex;"><span>            <span style="color:#66d9ef">try</span>:
</span></span><span style="display:flex;"><span>                data <span style="color:#f92672">=</span> investpy<span style="color:#f92672">.</span>stocks<span style="color:#f92672">.</span>get_stock_dividends(self<span style="color:#f92672">.</span>ticker, self<span style="color:#f92672">.</span>country)
</span></span><span style="display:flex;"><span>                data <span style="color:#f92672">=</span> data<span style="color:#f92672">.</span>set_index([<span style="color:#e6db74">&#39;Date&#39;</span>])
</span></span><span style="display:flex;"><span>            <span style="color:#66d9ef">except</span> <span style="color:#a6e22e">RuntimeError</span>:
</span></span><span style="display:flex;"><span>                print(<span style="color:#e6db74">&#39;INFO: No dividends for </span><span style="color:#e6db74">{}</span><span style="color:#e6db74"> (</span><span style="color:#e6db74">{}</span><span style="color:#e6db74">/</span><span style="color:#e6db74">{}</span><span style="color:#e6db74">)&#39;</span><span style="color:#f92672">.</span>format(self<span style="color:#f92672">.</span>name, self<span style="color:#f92672">.</span>ticker, self<span style="color:#f92672">.</span>country))
</span></span><span style="display:flex;"><span>                data <span style="color:#f92672">=</span> <span style="color:#66d9ef">None</span>
</span></span><span style="display:flex;"><span>            <span style="color:#66d9ef">finally</span>:
</span></span><span style="display:flex;"><span>                <span style="color:#66d9ef">return</span> data
</span></span><span style="display:flex;"><span>     
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">def</span> <span style="color:#a6e22e">__init__</span>(self, isin, currency<span style="color:#f92672">=</span><span style="color:#e6db74">&#39;EUR&#39;</span>, country<span style="color:#f92672">=</span><span style="color:#66d9ef">None</span>, exchange<span style="color:#f92672">=</span><span style="color:#66d9ef">None</span>):
</span></span><span style="display:flex;"><span>            self<span style="color:#f92672">.</span>investingapi <span style="color:#f92672">=</span> self<span style="color:#f92672">.</span>get_investingcom_instrument(search_code<span style="color:#f92672">=</span>isin, country<span style="color:#f92672">=</span>country, exchange<span style="color:#f92672">=</span>exchange)
</span></span><span style="display:flex;"><span>    
</span></span><span style="display:flex;"><span>            self<span style="color:#f92672">.</span>currency <span style="color:#f92672">=</span> currency 
</span></span><span style="display:flex;"><span>            self<span style="color:#f92672">.</span>isin <span style="color:#f92672">=</span> isin
</span></span><span style="display:flex;"><span>            self<span style="color:#f92672">.</span>security_type <span style="color:#f92672">=</span> self<span style="color:#f92672">.</span>investingapi<span style="color:#f92672">.</span>pair_type
</span></span><span style="display:flex;"><span>            self<span style="color:#f92672">.</span>name <span style="color:#f92672">=</span> self<span style="color:#f92672">.</span>investingapi<span style="color:#f92672">.</span>name
</span></span><span style="display:flex;"><span>            self<span style="color:#f92672">.</span>country <span style="color:#f92672">=</span> self<span style="color:#f92672">.</span>investingapi<span style="color:#f92672">.</span>country
</span></span><span style="display:flex;"><span>            self<span style="color:#f92672">.</span>exchange <span style="color:#f92672">=</span> self<span style="color:#f92672">.</span>investingapi<span style="color:#f92672">.</span>exchange
</span></span><span style="display:flex;"><span>            self<span style="color:#f92672">.</span>ticker <span style="color:#f92672">=</span> self<span style="color:#f92672">.</span>investingapi<span style="color:#f92672">.</span>symbol
</span></span><span style="display:flex;"><span>            
</span></span><span style="display:flex;"><span>            self<span style="color:#f92672">.</span>quotes <span style="color:#f92672">=</span> self<span style="color:#f92672">.</span>_get_data()
</span></span><span style="display:flex;"><span>            self<span style="color:#f92672">.</span>_averages <span style="color:#f92672">=</span> self<span style="color:#f92672">.</span>_moving_averages_holder()
</span></span><span style="display:flex;"><span>            self<span style="color:#f92672">.</span>dividends <span style="color:#f92672">=</span> self<span style="color:#f92672">.</span>_get_dividends()
</span></span><span style="display:flex;"><span>            
</span></span><span style="display:flex;"><span>            self<span style="color:#f92672">.</span>last_performance <span style="color:#f92672">=</span> {
</span></span><span style="display:flex;"><span>                <span style="color:#e6db74">&#39;dSMA_200/dt&#39;</span>: round(self<span style="color:#f92672">.</span>moving_average(<span style="color:#e6db74">&#39;SMA&#39;</span>, <span style="color:#ae81ff">200</span>)<span style="color:#f92672">.</span>diff()[<span style="color:#f92672">-</span><span style="color:#ae81ff">5</span>:]<span style="color:#f92672">.</span>mean(), <span style="color:#ae81ff">2</span>),
</span></span><span style="display:flex;"><span>                <span style="color:#e6db74">&#39;dSMA_20/dt&#39;</span>: round(self<span style="color:#f92672">.</span>moving_average(<span style="color:#e6db74">&#39;SMA&#39;</span>, <span style="color:#ae81ff">20</span>)<span style="color:#f92672">.</span>diff()[<span style="color:#f92672">-</span><span style="color:#ae81ff">5</span>:]<span style="color:#f92672">.</span>mean(), <span style="color:#ae81ff">2</span>)
</span></span><span style="display:flex;"><span>            }
</span></span><span style="display:flex;"><span>    
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">def</span> <span style="color:#a6e22e">moving_average</span>(self, avg_type, days):
</span></span><span style="display:flex;"><span>            name <span style="color:#f92672">=</span> <span style="color:#e6db74">&#39;</span><span style="color:#e6db74">{}</span><span style="color:#e6db74"> </span><span style="color:#e6db74">{}</span><span style="color:#e6db74">&#39;</span><span style="color:#f92672">.</span>format(avg_type, days)
</span></span><span style="display:flex;"><span>            data <span style="color:#f92672">=</span> self<span style="color:#f92672">.</span>_averages
</span></span><span style="display:flex;"><span>            <span style="color:#66d9ef">if</span> <span style="color:#f92672">not</span> name <span style="color:#f92672">in</span> data<span style="color:#f92672">.</span>columns:
</span></span><span style="display:flex;"><span>                <span style="color:#66d9ef">if</span> avg_type <span style="color:#f92672">==</span> <span style="color:#e6db74">&#39;SMA&#39;</span>:
</span></span><span style="display:flex;"><span>                    data[name] <span style="color:#f92672">=</span> data[<span style="color:#e6db74">&#39;Current Value&#39;</span>]<span style="color:#f92672">.</span>rolling(window<span style="color:#f92672">=</span>days)<span style="color:#f92672">.</span>mean()
</span></span><span style="display:flex;"><span>                <span style="color:#66d9ef">elif</span> avg_type <span style="color:#f92672">==</span> <span style="color:#e6db74">&#39;EMA&#39;</span>:
</span></span><span style="display:flex;"><span>                    data[name] <span style="color:#f92672">=</span> data[<span style="color:#e6db74">&#39;Current Value&#39;</span>]<span style="color:#f92672">.</span>ewm(span<span style="color:#f92672">=</span>days, adjust<span style="color:#f92672">=</span><span style="color:#66d9ef">False</span>)<span style="color:#f92672">.</span>mean()
</span></span><span style="display:flex;"><span>                <span style="color:#66d9ef">else</span>:
</span></span><span style="display:flex;"><span>                    <span style="color:#66d9ef">raise</span> <span style="color:#a6e22e">Exception</span>(<span style="color:#e6db74">&#39;Moving Average </span><span style="color:#e6db74">{}</span><span style="color:#e6db74"> not recognised&#39;</span><span style="color:#f92672">.</span>format(avg_type))
</span></span><span style="display:flex;"><span>            <span style="color:#66d9ef">return</span> data[name]
</span></span><span style="display:flex;"><span>        
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">def</span> <span style="color:#a6e22e">get_last_quote</span>(self):
</span></span><span style="display:flex;"><span>            <span style="color:#66d9ef">return</span> self<span style="color:#f92672">.</span>quotes<span style="color:#f92672">.</span>iloc[<span style="color:#f92672">-</span><span style="color:#ae81ff">1</span>]
</span></span><span style="display:flex;"><span>        
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">def</span> <span style="color:#a6e22e">get_last_date</span>(self):
</span></span><span style="display:flex;"><span>            result <span style="color:#f92672">=</span> self<span style="color:#f92672">.</span>quotes<span style="color:#f92672">.</span>iloc[<span style="color:#f92672">-</span><span style="color:#ae81ff">1</span>]
</span></span><span style="display:flex;"><span>            <span style="color:#66d9ef">return</span> result<span style="color:#f92672">.</span>name<span style="color:#f92672">.</span>to_pydatetime()<span style="color:#f92672">.</span>strftime(<span style="color:#e6db74">&#39;%Y-%m-</span><span style="color:#e6db74">%d</span><span style="color:#e6db74">&#39;</span>)
</span></span><span style="display:flex;"><span>        
</span></span><span style="display:flex;"><span>    
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">def</span> <span style="color:#a6e22e">test</span>():
</span></span><span style="display:flex;"><span>        stock1 <span style="color:#f92672">=</span> Security(<span style="color:#e6db74">&#39;IBM&#39;</span>, <span style="color:#e6db74">&#39;United States&#39;</span>)
</span></span><span style="display:flex;"><span>        print(<span style="color:#e6db74">&#39;Quotes:&#39;</span>)
</span></span><span style="display:flex;"><span>        print(stock1<span style="color:#f92672">.</span>quotes)
</span></span><span style="display:flex;"><span>        print(<span style="color:#e6db74">&#39;----------------&#39;</span>)
</span></span><span style="display:flex;"><span>        print(<span style="color:#e6db74">&#39;Averages:&#39;</span>)
</span></span><span style="display:flex;"><span>        print(stock1<span style="color:#f92672">.</span>moving_average(<span style="color:#e6db74">&#39;SMA&#39;</span>, <span style="color:#ae81ff">10</span>))
</span></span><span style="display:flex;"><span>        print(<span style="color:#e6db74">&#39;----------------&#39;</span>)
</span></span><span style="display:flex;"><span>        print(<span style="color:#e6db74">&#39;Dividends:&#39;</span>)
</span></span><span style="display:flex;"><span>        print(stock1<span style="color:#f92672">.</span>dividends)
</span></span><span style="display:flex;"><span>        print(<span style="color:#e6db74">&#39;----------------&#39;</span>)
</span></span><span style="display:flex;"><span>        
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">if</span> __name__ <span style="color:#f92672">==</span> <span style="color:#e6db74">&#39;__main__&#39;</span>:
</span></span><span style="display:flex;"><span>        test()
</span></span></code></pre></div><p>We can try now the Security Class, creating an object called <code>melia</code> with the data of a popular hotel chain in Spain</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#f92672">from</span> Security <span style="color:#f92672">import</span> Security
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>melia <span style="color:#f92672">=</span> Security(<span style="color:#e6db74">&#39;Melia&#39;</span>, country<span style="color:#f92672">=</span><span style="color:#e6db74">&#39;Spain&#39;</span>, exchange<span style="color:#f92672">=</span><span style="color:#e6db74">&#39;Madrid&#39;</span>)
</span></span></code></pre></div><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span>print(melia<span style="color:#f92672">.</span>ticker)
</span></span><span style="display:flex;"><span>print(melia<span style="color:#f92672">.</span>get_last_quote())
</span></span></code></pre></div><pre><code>MEL
Open             6.777
High             6.777
Low              6.565
Close            6.615
Volume           0.000
Exchange Rate    1.000
EUR Value        6.615
Name: 2021-03-22 00:00:00, dtype: float64
</code></pre>
<p>We can see that we can retrieve the <code>ticker</code> of the security and the last quotation avaliable in <code>investing.com</code></p>
<p>Our objective is to simulate buying and sharing securities, for that, we need a place to store the transactions. We can create therefore a <code>wallet</code> to record the date, concept and amount of the transaction.</p>
<p>We, therefore, create a new file <code>Wallet.py</code> with the following class:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">import</span> pandas <span style="color:#66d9ef">as</span> pd
</span></span><span style="display:flex;"><span>    
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">class</span> <span style="color:#a6e22e">Wallet</span>:
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">def</span> <span style="color:#a6e22e">__init__</span>(self):
</span></span><span style="display:flex;"><span>            self<span style="color:#f92672">.</span>_wallet <span style="color:#f92672">=</span> pd<span style="color:#f92672">.</span>DataFrame(pd<span style="color:#f92672">.</span>DataFrame(columns<span style="color:#f92672">=</span>[<span style="color:#e6db74">&#39;Date&#39;</span>, <span style="color:#e6db74">&#39;Concept&#39;</span>, <span style="color:#e6db74">&#39;Total&#39;</span>]))
</span></span><span style="display:flex;"><span>            self<span style="color:#f92672">.</span>_counter<span style="color:#f92672">=</span><span style="color:#ae81ff">0</span>
</span></span><span style="display:flex;"><span>            
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">def</span> <span style="color:#a6e22e">add</span>(self, date, concept, value):
</span></span><span style="display:flex;"><span>            self<span style="color:#f92672">.</span>_wallet<span style="color:#f92672">.</span>loc[self<span style="color:#f92672">.</span>_counter] <span style="color:#f92672">=</span> [date, concept, value]
</span></span><span style="display:flex;"><span>            self<span style="color:#f92672">.</span>_counter <span style="color:#f92672">=</span> self<span style="color:#f92672">.</span>_counter <span style="color:#f92672">+</span> <span style="color:#ae81ff">1</span>
</span></span><span style="display:flex;"><span>            
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">def</span> <span style="color:#a6e22e">balance</span>(self):
</span></span><span style="display:flex;"><span>            <span style="color:#66d9ef">return</span> self<span style="color:#f92672">.</span>_wallet[<span style="color:#e6db74">&#39;Total&#39;</span>]<span style="color:#f92672">.</span>sum()
</span></span><span style="display:flex;"><span>        
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">def</span> <span style="color:#a6e22e">transactions</span>(self):
</span></span><span style="display:flex;"><span>            <span style="color:#66d9ef">return</span> self<span style="color:#f92672">.</span>_wallet<span style="color:#f92672">.</span>copy()
</span></span><span style="display:flex;"><span>    
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">def</span> <span style="color:#a6e22e">test</span>():
</span></span><span style="display:flex;"><span>        wallet <span style="color:#f92672">=</span> Wallet()
</span></span><span style="display:flex;"><span>        wallet<span style="color:#f92672">.</span>add(<span style="color:#e6db74">&#39;2020-12-24&#39;</span>, <span style="color:#e6db74">&#39;Gifts given&#39;</span>, <span style="color:#f92672">-</span><span style="color:#ae81ff">100</span>)
</span></span><span style="display:flex;"><span>        wallet<span style="color:#f92672">.</span>add(<span style="color:#e6db74">&#39;2020-12-25&#39;</span>, <span style="color:#e6db74">&#39;Gifts received&#39;</span>, <span style="color:#ae81ff">50</span>)
</span></span><span style="display:flex;"><span>        print(<span style="color:#e6db74">&#39;Balance: </span><span style="color:#e6db74">{}</span><span style="color:#e6db74">&#39;</span><span style="color:#f92672">.</span>format(wallet<span style="color:#f92672">.</span>balance()))
</span></span><span style="display:flex;"><span>        print(<span style="color:#e6db74">&#39;Transactions:&#39;</span>)
</span></span><span style="display:flex;"><span>        print(wallet<span style="color:#f92672">.</span>transactions())
</span></span><span style="display:flex;"><span>    
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">if</span> __name__ <span style="color:#f92672">==</span> <span style="color:#e6db74">&#39;__main__&#39;</span>:
</span></span><span style="display:flex;"><span>        test()
</span></span><span style="display:flex;"><span>    
</span></span></code></pre></div><p>Last, we need some trading strategies. I have implemented the strategy to buy/sell when the price crosses a moving averages (configurable by number of days) and when the simple moving average of the month crosses the moving average of the week.</p>
<p>Here is the code:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">from</span> Security <span style="color:#f92672">import</span> Security
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">from</span> Wallet <span style="color:#f92672">import</span> Wallet
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">from</span> Global <span style="color:#f92672">import</span> <span style="color:#f92672">*</span>
</span></span><span style="display:flex;"><span>    
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">import</span> json
</span></span><span style="display:flex;"><span>    
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">class</span> <span style="color:#a6e22e">Strategy_Common</span>:
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">def</span> <span style="color:#a6e22e">_get_date_or_next_index</span>(self, date):
</span></span><span style="display:flex;"><span>            <span style="color:#66d9ef">return</span> self<span style="color:#f92672">.</span>security<span style="color:#f92672">.</span>quotes<span style="color:#f92672">.</span>index<span style="color:#f92672">.</span>get_loc(date, method<span style="color:#f92672">=</span><span style="color:#e6db74">&#39;backfill&#39;</span>)
</span></span><span style="display:flex;"><span>        
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">def</span> <span style="color:#a6e22e">_get_date_or_previous_index</span>(self, date):
</span></span><span style="display:flex;"><span>            <span style="color:#66d9ef">return</span> self<span style="color:#f92672">.</span>security<span style="color:#f92672">.</span>quotes<span style="color:#f92672">.</span>index<span style="color:#f92672">.</span>get_loc(date, method<span style="color:#f92672">=</span><span style="color:#e6db74">&#39;pad&#39;</span>)
</span></span><span style="display:flex;"><span>        
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">def</span> <span style="color:#a6e22e">_get_start_stop_index</span>(self, start_date, stop_date):
</span></span><span style="display:flex;"><span>            start <span style="color:#f92672">=</span> self<span style="color:#f92672">.</span>_get_date_or_next_index(start_date)
</span></span><span style="display:flex;"><span>            stop <span style="color:#f92672">=</span> self<span style="color:#f92672">.</span>_get_date_or_previous_index(stop_date)
</span></span><span style="display:flex;"><span>            <span style="color:#66d9ef">return</span> start, stop
</span></span><span style="display:flex;"><span>        
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">def</span> <span style="color:#a6e22e">__init__</span>(self, security, config):
</span></span><span style="display:flex;"><span>            self<span style="color:#f92672">.</span>security <span style="color:#f92672">=</span> security
</span></span><span style="display:flex;"><span>            self<span style="color:#f92672">.</span>wallet <span style="color:#f92672">=</span> Wallet()
</span></span><span style="display:flex;"><span>            self<span style="color:#f92672">.</span>keep_always <span style="color:#f92672">=</span> <span style="color:#66d9ef">False</span>
</span></span><span style="display:flex;"><span>            self<span style="color:#f92672">.</span>config <span style="color:#f92672">=</span> config
</span></span><span style="display:flex;"><span>            self<span style="color:#f92672">.</span>cash_funds <span style="color:#f92672">=</span> <span style="color:#ae81ff">10000</span>
</span></span><span style="display:flex;"><span>            
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">def</span> <span style="color:#a6e22e">return_results</span>(self, results):
</span></span><span style="display:flex;"><span>            <span style="color:#66d9ef">if</span> results <span style="color:#f92672">is</span> <span style="color:#f92672">not</span> <span style="color:#66d9ef">None</span>:
</span></span><span style="display:flex;"><span>                result <span style="color:#f92672">=</span> {
</span></span><span style="display:flex;"><span>                    <span style="color:#e6db74">&#39;Security Type&#39;</span>: self<span style="color:#f92672">.</span>security<span style="color:#f92672">.</span>security_type<span style="color:#f92672">.</span>title(), 
</span></span><span style="display:flex;"><span>                    <span style="color:#e6db74">&#39;Security Name&#39;</span>: self<span style="color:#f92672">.</span>security<span style="color:#f92672">.</span>name<span style="color:#f92672">.</span>encode(<span style="color:#e6db74">&#39;ascii&#39;</span>,errors<span style="color:#f92672">=</span><span style="color:#e6db74">&#39;ignore&#39;</span>)<span style="color:#f92672">.</span>decode(<span style="color:#e6db74">&#34;utf-8&#34;</span>),
</span></span><span style="display:flex;"><span>                    <span style="color:#e6db74">&#39;ISIN&#39;</span>: self<span style="color:#f92672">.</span>security<span style="color:#f92672">.</span>isin,
</span></span><span style="display:flex;"><span>                    <span style="color:#e6db74">&#39;Country&#39;</span>: self<span style="color:#f92672">.</span>security<span style="color:#f92672">.</span>country<span style="color:#f92672">.</span>title(),
</span></span><span style="display:flex;"><span>                    <span style="color:#e6db74">&#39;Exchange&#39;</span>: self<span style="color:#f92672">.</span>security<span style="color:#f92672">.</span>exchange,
</span></span><span style="display:flex;"><span>                    <span style="color:#e6db74">&#39;Strategy&#39;</span>: self<span style="color:#f92672">.</span>description,
</span></span><span style="display:flex;"><span>                    <span style="color:#e6db74">&#39;Simulated Balance&#39;</span>: round(self<span style="color:#f92672">.</span>wallet<span style="color:#f92672">.</span>balance(), <span style="color:#ae81ff">4</span>),
</span></span><span style="display:flex;"><span>                    <span style="color:#e6db74">&#39;Yield&#39;</span>: round((self<span style="color:#f92672">.</span>wallet<span style="color:#f92672">.</span>balance() <span style="color:#f92672">-</span> self<span style="color:#f92672">.</span>cash_funds)<span style="color:#f92672">/</span>self<span style="color:#f92672">.</span>cash_funds, <span style="color:#ae81ff">2</span>),
</span></span><span style="display:flex;"><span>                    <span style="color:#e6db74">&#39;Strategy Class Name&#39;</span>: self<span style="color:#f92672">.</span>__class__<span style="color:#f92672">.</span>__name__, 
</span></span><span style="display:flex;"><span>                    <span style="color:#e6db74">&#39;Strategy Config&#39;</span>: json<span style="color:#f92672">.</span>dumps(self<span style="color:#f92672">.</span>config),
</span></span><span style="display:flex;"><span>                }
</span></span><span style="display:flex;"><span>                results<span style="color:#f92672">.</span>append(result)
</span></span><span style="display:flex;"><span>                
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">def</span> <span style="color:#a6e22e">calculate_dividends</span>(self, date, amount_shares):
</span></span><span style="display:flex;"><span>            <span style="color:#66d9ef">if</span> self<span style="color:#f92672">.</span>security<span style="color:#f92672">.</span>dividends <span style="color:#f92672">is</span> <span style="color:#f92672">not</span> <span style="color:#66d9ef">None</span>:
</span></span><span style="display:flex;"><span>                <span style="color:#66d9ef">try</span>:
</span></span><span style="display:flex;"><span>                    dividend <span style="color:#f92672">=</span> self<span style="color:#f92672">.</span>security<span style="color:#f92672">.</span>dividends<span style="color:#f92672">.</span>loc[date][<span style="color:#e6db74">&#39;Dividend&#39;</span>]<span style="color:#f92672">.</span>sum()
</span></span><span style="display:flex;"><span>                <span style="color:#66d9ef">except</span> <span style="color:#a6e22e">KeyError</span>:
</span></span><span style="display:flex;"><span>                    dividend <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>
</span></span><span style="display:flex;"><span>                <span style="color:#66d9ef">if</span> dividend <span style="color:#f92672">&gt;</span> <span style="color:#ae81ff">0</span>:
</span></span><span style="display:flex;"><span>                    self<span style="color:#f92672">.</span>wallet<span style="color:#f92672">.</span>add(date, <span style="color:#e6db74">&#39;DIVIDEND </span><span style="color:#e6db74">{}</span><span style="color:#e6db74"> SHARES&#39;</span><span style="color:#f92672">.</span>format(amount_shares), dividend <span style="color:#f92672">*</span> amount_shares)
</span></span><span style="display:flex;"><span>                    self<span style="color:#f92672">.</span>wallet<span style="color:#f92672">.</span>add(date, <span style="color:#e6db74">&#39;DIVIDEND TAX </span><span style="color:#e6db74">{}</span><span style="color:#e6db74"> SHARES&#39;</span><span style="color:#f92672">.</span>format(amount_shares), <span style="color:#f92672">-</span> dividend <span style="color:#f92672">*</span> amount_shares <span style="color:#f92672">*</span> TAX_RATE)
</span></span><span style="display:flex;"><span>                
</span></span><span style="display:flex;"><span>    
</span></span><span style="display:flex;"><span>    
</span></span><span style="display:flex;"><span>                
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">class</span> <span style="color:#a6e22e">Strategy_Hold_And_Sell</span>(Strategy_Common):
</span></span><span style="display:flex;"><span>        <span style="color:#75715e"># Buy at date_0 and Sell at date_1</span>
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">def</span> <span style="color:#a6e22e">__init__</span>(self, security, config<span style="color:#f92672">=</span>()):
</span></span><span style="display:flex;"><span>            super()<span style="color:#f92672">.</span><span style="color:#a6e22e">__init__</span>(security, config)
</span></span><span style="display:flex;"><span>            self<span style="color:#f92672">.</span>description <span style="color:#f92672">=</span> <span style="color:#e6db74">&#39;Buy, Hold and Sell&#39;</span>
</span></span><span style="display:flex;"><span>            self<span style="color:#f92672">.</span>keep_always <span style="color:#f92672">=</span> <span style="color:#66d9ef">True</span>
</span></span><span style="display:flex;"><span>            
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">def</span> <span style="color:#a6e22e">should_buy</span>(self, date<span style="color:#f92672">=</span><span style="color:#66d9ef">None</span>):
</span></span><span style="display:flex;"><span>            <span style="color:#66d9ef">if</span> date <span style="color:#f92672">is</span> <span style="color:#66d9ef">None</span>:
</span></span><span style="display:flex;"><span>                date <span style="color:#f92672">=</span> self<span style="color:#f92672">.</span>security<span style="color:#f92672">.</span>get_last_date()
</span></span><span style="display:flex;"><span>                print(<span style="color:#e6db74">&#39;INFO No date specified, using: </span><span style="color:#e6db74">{}</span><span style="color:#e6db74">&#39;</span><span style="color:#f92672">.</span>format(date))
</span></span><span style="display:flex;"><span>                
</span></span><span style="display:flex;"><span>            <span style="color:#66d9ef">return</span> <span style="color:#66d9ef">True</span>
</span></span><span style="display:flex;"><span>        
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">def</span> <span style="color:#a6e22e">should_sell</span>(self, date<span style="color:#f92672">=</span><span style="color:#66d9ef">None</span>):
</span></span><span style="display:flex;"><span>            <span style="color:#66d9ef">if</span> date <span style="color:#f92672">is</span> <span style="color:#66d9ef">None</span>:
</span></span><span style="display:flex;"><span>                date <span style="color:#f92672">=</span> self<span style="color:#f92672">.</span>security<span style="color:#f92672">.</span>get_last_date()
</span></span><span style="display:flex;"><span>                print(<span style="color:#e6db74">&#39;INFO No date specified, using: </span><span style="color:#e6db74">{}</span><span style="color:#e6db74">&#39;</span><span style="color:#f92672">.</span>format(date))
</span></span><span style="display:flex;"><span>                
</span></span><span style="display:flex;"><span>            <span style="color:#66d9ef">return</span> <span style="color:#66d9ef">False</span>
</span></span><span style="display:flex;"><span>        
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">def</span> <span style="color:#a6e22e">simulate</span>(self, start_date, stop_date, commission, results<span style="color:#f92672">=</span><span style="color:#66d9ef">None</span>):
</span></span><span style="display:flex;"><span>            cash_funds <span style="color:#f92672">=</span> self<span style="color:#f92672">.</span>cash_funds
</span></span><span style="display:flex;"><span>            self<span style="color:#f92672">.</span>wallet<span style="color:#f92672">.</span>add(start_date, <span style="color:#e6db74">&#39;CASH DEPOSIT&#39;</span>, cash_funds)
</span></span><span style="display:flex;"><span>           
</span></span><span style="display:flex;"><span>            start_index, stop_index <span style="color:#f92672">=</span> self<span style="color:#f92672">.</span>_get_start_stop_index(start_date, stop_date)
</span></span><span style="display:flex;"><span>            
</span></span><span style="display:flex;"><span>            purchased <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>
</span></span><span style="display:flex;"><span>            
</span></span><span style="display:flex;"><span>            <span style="color:#66d9ef">for</span> index, rows <span style="color:#f92672">in</span> self<span style="color:#f92672">.</span>security<span style="color:#f92672">.</span>quotes<span style="color:#f92672">.</span>iloc[start_index:stop_index]<span style="color:#f92672">.</span>iterrows():
</span></span><span style="display:flex;"><span>                date <span style="color:#f92672">=</span> rows<span style="color:#f92672">.</span>name<span style="color:#f92672">.</span>to_pydatetime()<span style="color:#f92672">.</span>strftime(<span style="color:#e6db74">&#39;%Y-%m-</span><span style="color:#e6db74">%d</span><span style="color:#e6db74">&#39;</span>)
</span></span><span style="display:flex;"><span>                <span style="color:#66d9ef">if</span> purchased <span style="color:#f92672">==</span> <span style="color:#ae81ff">0</span> <span style="color:#f92672">and</span> self<span style="color:#f92672">.</span>should_buy(date):
</span></span><span style="display:flex;"><span>                    amount_shares <span style="color:#f92672">=</span> int(self<span style="color:#f92672">.</span>wallet<span style="color:#f92672">.</span>balance()<span style="color:#f92672">/</span>self<span style="color:#f92672">.</span>security<span style="color:#f92672">.</span>quotes<span style="color:#f92672">.</span>loc[date][<span style="color:#e6db74">&#39;EUR Value&#39;</span>])
</span></span><span style="display:flex;"><span>                    self<span style="color:#f92672">.</span>wallet<span style="color:#f92672">.</span>add(date, <span style="color:#e6db74">&#39;BUY </span><span style="color:#e6db74">{}</span><span style="color:#e6db74"> SHARES&#39;</span><span style="color:#f92672">.</span>format(amount_shares), 
</span></span><span style="display:flex;"><span>                                    <span style="color:#f92672">-</span> self<span style="color:#f92672">.</span>security<span style="color:#f92672">.</span>quotes<span style="color:#f92672">.</span>loc[date][<span style="color:#e6db74">&#39;EUR Value&#39;</span>] <span style="color:#f92672">*</span> amount_shares <span style="color:#f92672">*</span> (<span style="color:#ae81ff">1</span> <span style="color:#f92672">+</span> MARKET_FLUCTUATION))
</span></span><span style="display:flex;"><span>                    self<span style="color:#f92672">.</span>wallet<span style="color:#f92672">.</span>add(date, <span style="color:#e6db74">&#39;COMMISSION&#39;</span>, <span style="color:#f92672">-</span> commission)
</span></span><span style="display:flex;"><span>                    self<span style="color:#f92672">.</span>wallet<span style="color:#f92672">.</span>add(date, <span style="color:#e6db74">&#39;ANALYSIS WAGE&#39;</span>, <span style="color:#f92672">-</span> WAGE)
</span></span><span style="display:flex;"><span>                    purchased <span style="color:#f92672">=</span> amount_shares
</span></span><span style="display:flex;"><span>                
</span></span><span style="display:flex;"><span>                self<span style="color:#f92672">.</span>calculate_dividends(date, purchased)
</span></span><span style="display:flex;"><span>    
</span></span><span style="display:flex;"><span>    
</span></span><span style="display:flex;"><span>            self<span style="color:#f92672">.</span>wallet<span style="color:#f92672">.</span>add(date, <span style="color:#e6db74">&#39;SELL </span><span style="color:#e6db74">{}</span><span style="color:#e6db74"> SHARES&#39;</span><span style="color:#f92672">.</span>format(amount_shares), 
</span></span><span style="display:flex;"><span>                            self<span style="color:#f92672">.</span>security<span style="color:#f92672">.</span>quotes<span style="color:#f92672">.</span>loc[date][<span style="color:#e6db74">&#39;EUR Value&#39;</span>] <span style="color:#f92672">*</span> amount_shares <span style="color:#f92672">*</span> (<span style="color:#ae81ff">1</span> <span style="color:#f92672">-</span> MARKET_FLUCTUATION))
</span></span><span style="display:flex;"><span>            self<span style="color:#f92672">.</span>wallet<span style="color:#f92672">.</span>add(date, <span style="color:#e6db74">&#39;COMMISSION&#39;</span>, <span style="color:#f92672">-</span> commission)
</span></span><span style="display:flex;"><span>            self<span style="color:#f92672">.</span>wallet<span style="color:#f92672">.</span>add(date, <span style="color:#e6db74">&#39;ANALYSIS WAGE&#39;</span>, <span style="color:#f92672">-</span> WAGE)
</span></span><span style="display:flex;"><span>    
</span></span><span style="display:flex;"><span>            self<span style="color:#f92672">.</span>return_results(results)
</span></span><span style="display:flex;"><span>            
</span></span><span style="display:flex;"><span>            
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">class</span> <span style="color:#a6e22e">Strategy_Buy_Value0_LT_Value1</span>(Strategy_Common):
</span></span><span style="display:flex;"><span>        <span style="color:#75715e"># Buy and sell between periods start_date and stop_date. Actual buy/sell order given by cross of rolling averages</span>
</span></span><span style="display:flex;"><span>        
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">def</span> <span style="color:#a6e22e">should_buy</span>(self, date<span style="color:#f92672">=</span><span style="color:#66d9ef">None</span>):
</span></span><span style="display:flex;"><span>            <span style="color:#66d9ef">if</span> date <span style="color:#f92672">is</span> <span style="color:#66d9ef">None</span>:
</span></span><span style="display:flex;"><span>                date <span style="color:#f92672">=</span> self<span style="color:#f92672">.</span>security<span style="color:#f92672">.</span>get_last_date()
</span></span><span style="display:flex;"><span>                print(<span style="color:#e6db74">&#39;INFO No date specified, using: </span><span style="color:#e6db74">{}</span><span style="color:#e6db74">&#39;</span><span style="color:#f92672">.</span>format(date))
</span></span><span style="display:flex;"><span>            
</span></span><span style="display:flex;"><span>            value0 <span style="color:#f92672">=</span> self<span style="color:#f92672">.</span>security<span style="color:#f92672">.</span>moving_average(self<span style="color:#f92672">.</span>_type_avg, self<span style="color:#f92672">.</span>_value0)<span style="color:#f92672">.</span>loc[date]
</span></span><span style="display:flex;"><span>            value1 <span style="color:#f92672">=</span> self<span style="color:#f92672">.</span>security<span style="color:#f92672">.</span>moving_average(self<span style="color:#f92672">.</span>_type_avg, self<span style="color:#f92672">.</span>_value1)<span style="color:#f92672">.</span>loc[date]
</span></span><span style="display:flex;"><span>            
</span></span><span style="display:flex;"><span>            <span style="color:#66d9ef">if</span> value0 <span style="color:#f92672">&lt;</span> value1:
</span></span><span style="display:flex;"><span>                <span style="color:#66d9ef">return</span> <span style="color:#66d9ef">True</span>
</span></span><span style="display:flex;"><span>            
</span></span><span style="display:flex;"><span>            <span style="color:#66d9ef">return</span> <span style="color:#66d9ef">False</span>
</span></span><span style="display:flex;"><span>        
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">def</span> <span style="color:#a6e22e">should_sell</span>(self, date<span style="color:#f92672">=</span><span style="color:#66d9ef">None</span>):
</span></span><span style="display:flex;"><span>            <span style="color:#66d9ef">if</span> date <span style="color:#f92672">is</span> <span style="color:#66d9ef">None</span>:
</span></span><span style="display:flex;"><span>                date <span style="color:#f92672">=</span> self<span style="color:#f92672">.</span>security<span style="color:#f92672">.</span>get_last_date()
</span></span><span style="display:flex;"><span>                print(<span style="color:#e6db74">&#39;INFO No date specified, using: </span><span style="color:#e6db74">{}</span><span style="color:#e6db74">&#39;</span><span style="color:#f92672">.</span>format(date))
</span></span><span style="display:flex;"><span>                
</span></span><span style="display:flex;"><span>            <span style="color:#66d9ef">return</span> <span style="color:#f92672">not</span> self<span style="color:#f92672">.</span>should_buy(date)
</span></span><span style="display:flex;"><span>        
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">def</span> <span style="color:#a6e22e">__init__</span>(self, security, config):
</span></span><span style="display:flex;"><span>            super()<span style="color:#f92672">.</span><span style="color:#a6e22e">__init__</span>(security, config)
</span></span><span style="display:flex;"><span>            self<span style="color:#f92672">.</span>_type_avg <span style="color:#f92672">=</span> config[<span style="color:#ae81ff">0</span>]
</span></span><span style="display:flex;"><span>            self<span style="color:#f92672">.</span>_value0 <span style="color:#f92672">=</span> int(config[<span style="color:#ae81ff">1</span>])
</span></span><span style="display:flex;"><span>            self<span style="color:#f92672">.</span>_value1 <span style="color:#f92672">=</span> int(config[<span style="color:#ae81ff">2</span>])
</span></span><span style="display:flex;"><span>            
</span></span><span style="display:flex;"><span>            self<span style="color:#f92672">.</span>description <span style="color:#f92672">=</span> <span style="color:#e6db74">&#39;Buy on </span><span style="color:#e6db74">{}</span><span style="color:#e6db74"> days LT </span><span style="color:#e6db74">{}</span><span style="color:#e6db74"> days&#39;</span><span style="color:#f92672">.</span>format(self<span style="color:#f92672">.</span>_type_avg <span style="color:#f92672">+</span> <span style="color:#e6db74">&#39; &#39;</span> <span style="color:#f92672">+</span> str(self<span style="color:#f92672">.</span>_value0),
</span></span><span style="display:flex;"><span>                                                                  self<span style="color:#f92672">.</span>_type_avg <span style="color:#f92672">+</span> <span style="color:#e6db74">&#39; &#39;</span> <span style="color:#f92672">+</span> str(self<span style="color:#f92672">.</span>_value1))
</span></span><span style="display:flex;"><span>            
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">def</span> <span style="color:#a6e22e">simulate</span>(self, start_date, stop_date, commission, results<span style="color:#f92672">=</span><span style="color:#66d9ef">None</span>):
</span></span><span style="display:flex;"><span>            cash_funds <span style="color:#f92672">=</span> self<span style="color:#f92672">.</span>cash_funds
</span></span><span style="display:flex;"><span>            self<span style="color:#f92672">.</span>wallet<span style="color:#f92672">.</span>add(start_date, <span style="color:#e6db74">&#39;CASH DEPOSIT&#39;</span>, cash_funds)
</span></span><span style="display:flex;"><span>            
</span></span><span style="display:flex;"><span>            start_index, stop_index <span style="color:#f92672">=</span> self<span style="color:#f92672">.</span>_get_start_stop_index(start_date, stop_date)
</span></span><span style="display:flex;"><span>    
</span></span><span style="display:flex;"><span>            purchased <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>
</span></span><span style="display:flex;"><span>            
</span></span><span style="display:flex;"><span>            <span style="color:#66d9ef">for</span> index, rows <span style="color:#f92672">in</span> self<span style="color:#f92672">.</span>security<span style="color:#f92672">.</span>quotes<span style="color:#f92672">.</span>iloc[start_index:stop_index]<span style="color:#f92672">.</span>iterrows():
</span></span><span style="display:flex;"><span>                date <span style="color:#f92672">=</span> rows<span style="color:#f92672">.</span>name<span style="color:#f92672">.</span>to_pydatetime()<span style="color:#f92672">.</span>strftime(<span style="color:#e6db74">&#39;%Y-%m-</span><span style="color:#e6db74">%d</span><span style="color:#e6db74">&#39;</span>)
</span></span><span style="display:flex;"><span>                value <span style="color:#f92672">=</span> rows[<span style="color:#e6db74">&#39;EUR Value&#39;</span>]
</span></span><span style="display:flex;"><span>                
</span></span><span style="display:flex;"><span>                <span style="color:#66d9ef">if</span> purchased <span style="color:#f92672">==</span> <span style="color:#ae81ff">0</span> <span style="color:#f92672">and</span> self<span style="color:#f92672">.</span>should_buy(date):
</span></span><span style="display:flex;"><span>                    amount_shares <span style="color:#f92672">=</span> int(self<span style="color:#f92672">.</span>wallet<span style="color:#f92672">.</span>balance()<span style="color:#f92672">/</span>value)
</span></span><span style="display:flex;"><span>                    self<span style="color:#f92672">.</span>wallet<span style="color:#f92672">.</span>add(date, <span style="color:#e6db74">&#39;BUY </span><span style="color:#e6db74">{}</span><span style="color:#e6db74"> SHARES&#39;</span><span style="color:#f92672">.</span>format(amount_shares), 
</span></span><span style="display:flex;"><span>                                    <span style="color:#f92672">-</span> value<span style="color:#f92672">*</span>amount_shares<span style="color:#f92672">*</span>(<span style="color:#ae81ff">1</span> <span style="color:#f92672">+</span> MARKET_FLUCTUATION))
</span></span><span style="display:flex;"><span>                    self<span style="color:#f92672">.</span>wallet<span style="color:#f92672">.</span>add(date, <span style="color:#e6db74">&#39;COMMISSION&#39;</span>, <span style="color:#f92672">-</span> commission)
</span></span><span style="display:flex;"><span>                    self<span style="color:#f92672">.</span>wallet<span style="color:#f92672">.</span>add(date, <span style="color:#e6db74">&#39;ANALYSIS WAGE&#39;</span>, <span style="color:#f92672">-</span> WAGE)
</span></span><span style="display:flex;"><span>                    
</span></span><span style="display:flex;"><span>                    purchased <span style="color:#f92672">=</span> amount_shares
</span></span><span style="display:flex;"><span>                <span style="color:#66d9ef">elif</span> purchased <span style="color:#f92672">&gt;</span> <span style="color:#ae81ff">0</span> <span style="color:#f92672">and</span> self<span style="color:#f92672">.</span>should_sell(date):
</span></span><span style="display:flex;"><span>                    self<span style="color:#f92672">.</span>wallet<span style="color:#f92672">.</span>add(date, <span style="color:#e6db74">&#39;SELL </span><span style="color:#e6db74">{}</span><span style="color:#e6db74"> SHARES&#39;</span><span style="color:#f92672">.</span>format(purchased), 
</span></span><span style="display:flex;"><span>                                    value<span style="color:#f92672">*</span>purchased<span style="color:#f92672">*</span>(<span style="color:#ae81ff">1</span> <span style="color:#f92672">-</span> MARKET_FLUCTUATION))
</span></span><span style="display:flex;"><span>                    self<span style="color:#f92672">.</span>wallet<span style="color:#f92672">.</span>add(date, <span style="color:#e6db74">&#39;COMMISSION&#39;</span>, <span style="color:#f92672">-</span> commission)
</span></span><span style="display:flex;"><span>                    self<span style="color:#f92672">.</span>wallet<span style="color:#f92672">.</span>add(date, <span style="color:#e6db74">&#39;ANALYSIS WAGE&#39;</span>, <span style="color:#f92672">-</span> WAGE)
</span></span><span style="display:flex;"><span>                    purchased <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>
</span></span><span style="display:flex;"><span>                
</span></span><span style="display:flex;"><span>                self<span style="color:#f92672">.</span>calculate_dividends(date, purchased)
</span></span><span style="display:flex;"><span>    
</span></span><span style="display:flex;"><span>            <span style="color:#66d9ef">if</span> purchased<span style="color:#f92672">&gt;</span><span style="color:#ae81ff">0</span>:
</span></span><span style="display:flex;"><span>                self<span style="color:#f92672">.</span>wallet<span style="color:#f92672">.</span>add(date, <span style="color:#e6db74">&#39;SELL </span><span style="color:#e6db74">{}</span><span style="color:#e6db74"> SHARES&#39;</span><span style="color:#f92672">.</span>format(purchased), 
</span></span><span style="display:flex;"><span>                                value<span style="color:#f92672">*</span>purchased<span style="color:#f92672">*</span>(<span style="color:#ae81ff">1</span> <span style="color:#f92672">-</span> MARKET_FLUCTUATION))
</span></span><span style="display:flex;"><span>                self<span style="color:#f92672">.</span>wallet<span style="color:#f92672">.</span>add(date, <span style="color:#e6db74">&#39;COMMISSION&#39;</span>, <span style="color:#f92672">-</span> commission)
</span></span><span style="display:flex;"><span>                self<span style="color:#f92672">.</span>wallet<span style="color:#f92672">.</span>add(date, <span style="color:#e6db74">&#39;ANALYSIS WAGE&#39;</span>, <span style="color:#f92672">-</span> WAGE)
</span></span><span style="display:flex;"><span>    
</span></span><span style="display:flex;"><span>            self<span style="color:#f92672">.</span>return_results(results)
</span></span><span style="display:flex;"><span>            
</span></span><span style="display:flex;"><span>            
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">class</span> <span style="color:#a6e22e">Strategy_Buy_dSMA20</span>(Strategy_Common):
</span></span><span style="display:flex;"><span>        <span style="color:#75715e"># Buy and sell between periods start_date and stop_date. Actual buy/sell order given by cross of rolling averages</span>
</span></span><span style="display:flex;"><span>        
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">def</span> <span style="color:#a6e22e">should_buy</span>(self, date<span style="color:#f92672">=</span><span style="color:#66d9ef">None</span>):
</span></span><span style="display:flex;"><span>            <span style="color:#66d9ef">if</span> date <span style="color:#f92672">is</span> <span style="color:#66d9ef">None</span>:
</span></span><span style="display:flex;"><span>                date <span style="color:#f92672">=</span> self<span style="color:#f92672">.</span>security<span style="color:#f92672">.</span>get_last_date()
</span></span><span style="display:flex;"><span>                print(<span style="color:#e6db74">&#39;INFO No date specified, using: </span><span style="color:#e6db74">{}</span><span style="color:#e6db74">&#39;</span><span style="color:#f92672">.</span>format(date))
</span></span><span style="display:flex;"><span>                
</span></span><span style="display:flex;"><span>            index <span style="color:#f92672">=</span> self<span style="color:#f92672">.</span>_get_date_or_previous_index(date)
</span></span><span style="display:flex;"><span>            dSMA_20 <span style="color:#f92672">=</span> self<span style="color:#f92672">.</span>security<span style="color:#f92672">.</span>moving_average(<span style="color:#e6db74">&#39;SMA&#39;</span>, <span style="color:#ae81ff">20</span>)<span style="color:#f92672">.</span>diff()[index<span style="color:#f92672">-</span><span style="color:#ae81ff">5</span>:index]<span style="color:#f92672">.</span>mean()
</span></span><span style="display:flex;"><span>            
</span></span><span style="display:flex;"><span>            <span style="color:#66d9ef">if</span> dSMA_20 <span style="color:#f92672">&gt;</span> self<span style="color:#f92672">.</span>_trigger:
</span></span><span style="display:flex;"><span>                <span style="color:#66d9ef">return</span> <span style="color:#66d9ef">True</span>
</span></span><span style="display:flex;"><span>            
</span></span><span style="display:flex;"><span>            <span style="color:#66d9ef">return</span> <span style="color:#66d9ef">False</span>
</span></span><span style="display:flex;"><span>        
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">def</span> <span style="color:#a6e22e">should_sell</span>(self, date<span style="color:#f92672">=</span><span style="color:#66d9ef">None</span>):
</span></span><span style="display:flex;"><span>            <span style="color:#66d9ef">if</span> date <span style="color:#f92672">is</span> <span style="color:#66d9ef">None</span>:
</span></span><span style="display:flex;"><span>                date <span style="color:#f92672">=</span> self<span style="color:#f92672">.</span>security<span style="color:#f92672">.</span>get_last_date()
</span></span><span style="display:flex;"><span>                print(<span style="color:#e6db74">&#39;INFO No date specified, using: </span><span style="color:#e6db74">{}</span><span style="color:#e6db74">&#39;</span><span style="color:#f92672">.</span>format(date))
</span></span><span style="display:flex;"><span>                
</span></span><span style="display:flex;"><span>            index <span style="color:#f92672">=</span> self<span style="color:#f92672">.</span>_get_date_or_previous_index(date)
</span></span><span style="display:flex;"><span>            dSMA_20 <span style="color:#f92672">=</span> self<span style="color:#f92672">.</span>security<span style="color:#f92672">.</span>moving_average(<span style="color:#e6db74">&#39;SMA&#39;</span>, <span style="color:#ae81ff">20</span>)<span style="color:#f92672">.</span>diff()[index<span style="color:#f92672">-</span><span style="color:#ae81ff">5</span>:index]<span style="color:#f92672">.</span>mean() 
</span></span><span style="display:flex;"><span>            
</span></span><span style="display:flex;"><span>            <span style="color:#66d9ef">if</span> dSMA_20 <span style="color:#f92672">&lt;</span> self<span style="color:#f92672">.</span>_trigger:
</span></span><span style="display:flex;"><span>                <span style="color:#66d9ef">return</span> <span style="color:#66d9ef">True</span>
</span></span><span style="display:flex;"><span>            
</span></span><span style="display:flex;"><span>            <span style="color:#66d9ef">return</span> <span style="color:#66d9ef">False</span>
</span></span><span style="display:flex;"><span>    
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">def</span> <span style="color:#a6e22e">__init__</span>(self, security, config<span style="color:#f92672">=</span><span style="color:#ae81ff">0</span>):
</span></span><span style="display:flex;"><span>            super()<span style="color:#f92672">.</span><span style="color:#a6e22e">__init__</span>(security, config)
</span></span><span style="display:flex;"><span>            self<span style="color:#f92672">.</span>_trigger <span style="color:#f92672">=</span> float(config)
</span></span><span style="display:flex;"><span>            self<span style="color:#f92672">.</span>description <span style="color:#f92672">=</span> <span style="color:#e6db74">&#39;Buy on dSMA20 &gt; </span><span style="color:#e6db74">{}</span><span style="color:#e6db74">&#39;</span><span style="color:#f92672">.</span>format(str(self<span style="color:#f92672">.</span>_trigger))
</span></span><span style="display:flex;"><span>                                                           
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">def</span> <span style="color:#a6e22e">simulate</span>(self, start_date, stop_date, commission, results<span style="color:#f92672">=</span><span style="color:#66d9ef">None</span>):
</span></span><span style="display:flex;"><span>            cash_funds <span style="color:#f92672">=</span> self<span style="color:#f92672">.</span>cash_funds
</span></span><span style="display:flex;"><span>            self<span style="color:#f92672">.</span>wallet<span style="color:#f92672">.</span>add(start_date, <span style="color:#e6db74">&#39;CASH DEPOSIT&#39;</span>, cash_funds)
</span></span><span style="display:flex;"><span>            
</span></span><span style="display:flex;"><span>            start_index, stop_index <span style="color:#f92672">=</span> self<span style="color:#f92672">.</span>_get_start_stop_index(start_date, stop_date)
</span></span><span style="display:flex;"><span>    
</span></span><span style="display:flex;"><span>            purchased <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>
</span></span><span style="display:flex;"><span>            
</span></span><span style="display:flex;"><span>            <span style="color:#66d9ef">for</span> index, rows <span style="color:#f92672">in</span> self<span style="color:#f92672">.</span>security<span style="color:#f92672">.</span>quotes<span style="color:#f92672">.</span>iloc[start_index:stop_index]<span style="color:#f92672">.</span>iterrows():
</span></span><span style="display:flex;"><span>                date <span style="color:#f92672">=</span> rows<span style="color:#f92672">.</span>name<span style="color:#f92672">.</span>to_pydatetime()<span style="color:#f92672">.</span>strftime(<span style="color:#e6db74">&#39;%Y-%m-</span><span style="color:#e6db74">%d</span><span style="color:#e6db74">&#39;</span>)
</span></span><span style="display:flex;"><span>                value <span style="color:#f92672">=</span> rows[<span style="color:#e6db74">&#39;EUR Value&#39;</span>]
</span></span><span style="display:flex;"><span>                
</span></span><span style="display:flex;"><span>                <span style="color:#66d9ef">if</span> purchased <span style="color:#f92672">==</span> <span style="color:#ae81ff">0</span> <span style="color:#f92672">and</span> self<span style="color:#f92672">.</span>should_buy(date):
</span></span><span style="display:flex;"><span>                    amount_shares <span style="color:#f92672">=</span> int(self<span style="color:#f92672">.</span>wallet<span style="color:#f92672">.</span>balance()<span style="color:#f92672">/</span>value)
</span></span><span style="display:flex;"><span>                    self<span style="color:#f92672">.</span>wallet<span style="color:#f92672">.</span>add(date, <span style="color:#e6db74">&#39;BUY </span><span style="color:#e6db74">{}</span><span style="color:#e6db74"> SHARES&#39;</span><span style="color:#f92672">.</span>format(amount_shares), 
</span></span><span style="display:flex;"><span>                                    <span style="color:#f92672">-</span> value<span style="color:#f92672">*</span>amount_shares<span style="color:#f92672">*</span>(<span style="color:#ae81ff">1</span> <span style="color:#f92672">+</span> MARKET_FLUCTUATION))
</span></span><span style="display:flex;"><span>                    self<span style="color:#f92672">.</span>wallet<span style="color:#f92672">.</span>add(date, <span style="color:#e6db74">&#39;COMMISSION&#39;</span>, <span style="color:#f92672">-</span> commission)
</span></span><span style="display:flex;"><span>                    self<span style="color:#f92672">.</span>wallet<span style="color:#f92672">.</span>add(date, <span style="color:#e6db74">&#39;ANALYSIS WAGE&#39;</span>, <span style="color:#f92672">-</span> WAGE)
</span></span><span style="display:flex;"><span>                    
</span></span><span style="display:flex;"><span>                    purchased <span style="color:#f92672">=</span> amount_shares
</span></span><span style="display:flex;"><span>                <span style="color:#66d9ef">elif</span> purchased <span style="color:#f92672">&gt;</span> <span style="color:#ae81ff">0</span> <span style="color:#f92672">and</span> self<span style="color:#f92672">.</span>should_sell(date):
</span></span><span style="display:flex;"><span>                    self<span style="color:#f92672">.</span>wallet<span style="color:#f92672">.</span>add(date, <span style="color:#e6db74">&#39;SELL </span><span style="color:#e6db74">{}</span><span style="color:#e6db74"> SHARES&#39;</span><span style="color:#f92672">.</span>format(purchased), 
</span></span><span style="display:flex;"><span>                                    value<span style="color:#f92672">*</span>purchased<span style="color:#f92672">*</span>(<span style="color:#ae81ff">1</span> <span style="color:#f92672">-</span> MARKET_FLUCTUATION))
</span></span><span style="display:flex;"><span>                    self<span style="color:#f92672">.</span>wallet<span style="color:#f92672">.</span>add(date, <span style="color:#e6db74">&#39;COMMISSION&#39;</span>, <span style="color:#f92672">-</span> commission)
</span></span><span style="display:flex;"><span>                    self<span style="color:#f92672">.</span>wallet<span style="color:#f92672">.</span>add(date, <span style="color:#e6db74">&#39;ANALYSIS WAGE&#39;</span>, <span style="color:#f92672">-</span> WAGE)
</span></span><span style="display:flex;"><span>                    purchased <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>
</span></span><span style="display:flex;"><span>                
</span></span><span style="display:flex;"><span>                self<span style="color:#f92672">.</span>calculate_dividends(date, purchased)
</span></span><span style="display:flex;"><span>    
</span></span><span style="display:flex;"><span>            <span style="color:#66d9ef">if</span> purchased<span style="color:#f92672">&gt;</span><span style="color:#ae81ff">0</span>:
</span></span><span style="display:flex;"><span>                self<span style="color:#f92672">.</span>wallet<span style="color:#f92672">.</span>add(date, <span style="color:#e6db74">&#39;SELL </span><span style="color:#e6db74">{}</span><span style="color:#e6db74"> SHARES&#39;</span><span style="color:#f92672">.</span>format(purchased), 
</span></span><span style="display:flex;"><span>                                value<span style="color:#f92672">*</span>purchased<span style="color:#f92672">*</span>(<span style="color:#ae81ff">1</span> <span style="color:#f92672">-</span> MARKET_FLUCTUATION))
</span></span><span style="display:flex;"><span>                self<span style="color:#f92672">.</span>wallet<span style="color:#f92672">.</span>add(date, <span style="color:#e6db74">&#39;COMMISSION&#39;</span>, <span style="color:#f92672">-</span> commission)
</span></span><span style="display:flex;"><span>                self<span style="color:#f92672">.</span>wallet<span style="color:#f92672">.</span>add(date, <span style="color:#e6db74">&#39;ANALYSIS WAGE&#39;</span>, <span style="color:#f92672">-</span> WAGE)
</span></span><span style="display:flex;"><span>            
</span></span><span style="display:flex;"><span>            self<span style="color:#f92672">.</span>return_results(results)
</span></span><span style="display:flex;"><span>    
</span></span></code></pre></div><p>In the next post, I will glue everything together to run a simulation over a period of one year.</p>
]]></content>
        </item>
        
        <item>
            <title>Web automation with Selenium</title>
            <link>https://blog.miguens.one/posts/2020/11/web-automation-with-selenium/</link>
            <pubDate>Mon, 02 Nov 2020 00:00:00 +0000</pubDate>
            
            <guid>https://blog.miguens.one/posts/2020/11/web-automation-with-selenium/</guid>
            <description>&lt;p&gt;If you are a fellow student of The Open University, you have realized that sometimes the emails notifying of the results
of your module are sent up to two days after the result have actually being published.&lt;/p&gt;
&lt;p&gt;That situation leave you with checking manually the website of the Open University for your result, but there is a better way.&lt;/p&gt;
&lt;p&gt;Selenium is a web automation suite that can be used in any language. It simulates the behavior of an user, and you can retrieve
the information you are interested upon.&lt;/p&gt;</description>
            <content type="html"><![CDATA[<p>If you are a fellow student of The Open University, you have realized that sometimes the emails notifying of the results
of your module are sent up to two days after the result have actually being published.</p>
<p>That situation leave you with checking manually the website of the Open University for your result, but there is a better way.</p>
<p>Selenium is a web automation suite that can be used in any language. It simulates the behavior of an user, and you can retrieve
the information you are interested upon.</p>
<p>In our case, we want to log-in in the Open University, go to the section of the results of our module and check if the result have been published.</p>
<p>I have made a small python program to do precisely that:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#75715e">#!/usr/bin/env python</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">from</span> selenium <span style="color:#f92672">import</span> webdriver
</span></span><span style="display:flex;"><span><span style="color:#f92672">import</span> geckodriver_autoinstaller
</span></span><span style="display:flex;"><span><span style="color:#f92672">import</span> smtplib
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>geckodriver_autoinstaller<span style="color:#f92672">.</span>install()  
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>opts <span style="color:#f92672">=</span> webdriver<span style="color:#f92672">.</span>FirefoxOptions()
</span></span><span style="display:flex;"><span>opts<span style="color:#f92672">.</span>add_argument(<span style="color:#e6db74">&#34;--headless&#34;</span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>browser <span style="color:#f92672">=</span> webdriver<span style="color:#f92672">.</span>Firefox(options<span style="color:#f92672">=</span>opts)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Change the following line with your module and edition (ex. B839_2019K)</span>
</span></span><span style="display:flex;"><span>webpage<span style="color:#f92672">=</span><span style="color:#e6db74">&#39;https://msds.open.ac.uk/students/module.aspx?c=B839_2019K&amp;cr=1#result&#39;</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>username <span style="color:#f92672">=</span> <span style="color:#e6db74">&#39;TYPE YOUR USERNAME Fxxxxxx&#39;</span>
</span></span><span style="display:flex;"><span>password <span style="color:#f92672">=</span> <span style="color:#e6db74">&#39;TYPE YOUR PASSWORD&#39;</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>username_xpath<span style="color:#f92672">=</span><span style="color:#e6db74">&#39;//*[@id=&#34;username&#34;]&#39;</span>
</span></span><span style="display:flex;"><span>password_xpath<span style="color:#f92672">=</span><span style="color:#e6db74">&#39;//*[@id=&#34;password&#34;]&#39;</span>
</span></span><span style="display:flex;"><span>login_button_xpath<span style="color:#f92672">=</span><span style="color:#e6db74">&#39;//*[@id=&#34;Form1&#34;]/div[1]/input&#39;</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>module_result<span style="color:#f92672">=</span><span style="color:#e6db74">&#39;//*[@id=&#34;ou-content&#34;]/div/div[1]&#39;</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>browser<span style="color:#f92672">.</span>get(webpage)
</span></span><span style="display:flex;"><span>browser<span style="color:#f92672">.</span>find_element_by_xpath(username_xpath)<span style="color:#f92672">.</span>send_keys(username)
</span></span><span style="display:flex;"><span>browser<span style="color:#f92672">.</span>find_element_by_xpath(password_xpath)<span style="color:#f92672">.</span>send_keys(password)
</span></span><span style="display:flex;"><span>browser<span style="color:#f92672">.</span>find_element_by_xpath(login_button_xpath)<span style="color:#f92672">.</span>click()
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>result_text <span style="color:#f92672">=</span> browser<span style="color:#f92672">.</span>find_element_by_xpath(module_result)<span style="color:#f92672">.</span>text
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Change the following line with the text you see right now (while you are waiting for your results)</span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">if</span> <span style="color:#e6db74">&#39;We plan to make your module result available on Tuesday 8 December 2020&#39;</span> <span style="color:#f92672">not</span> <span style="color:#f92672">in</span> result_text:
</span></span><span style="display:flex;"><span>    server <span style="color:#f92672">=</span> smtplib<span style="color:#f92672">.</span>SMTP(<span style="color:#e6db74">&#39;localhost&#39;</span>)
</span></span><span style="display:flex;"><span>    message <span style="color:#f92672">=</span> <span style="color:#e6db74">&#39;Subject: Results MBA </span><span style="color:#ae81ff">\n\n</span><span style="color:#e6db74">{}</span><span style="color:#e6db74">&#39;</span><span style="color:#f92672">.</span>format(result_text)
</span></span><span style="display:flex;"><span>    server<span style="color:#f92672">.</span>sendmail(<span style="color:#e6db74">&#39;your@email.address&#39;</span>, <span style="color:#e6db74">&#39;your@email.address&#39;</span>, message)
</span></span></code></pre></div><p>Remember to change the code and adapt it to your case. You will also need to have a local email server configure properly to send emails directly or using a relay (I am using my gmail account as a relay for my local postfix server).</p>
<p>Last, you can trigger the script once or twice per day with <code>cron</code> and be notified about the results of your modules.</p>
<p>Good luck, and I hope this trick will relieve your waiting stress.</p>
]]></content>
        </item>
        
        <item>
            <title>Writing Python modules in C&#43;&#43;</title>
            <link>https://blog.miguens.one/posts/2020/08/writing-python-modules-in-c-/</link>
            <pubDate>Tue, 04 Aug 2020 00:00:00 +0000</pubDate>
            
            <guid>https://blog.miguens.one/posts/2020/08/writing-python-modules-in-c-/</guid>
            <description>&lt;h2 id=&#34;how-to-build-libraries-in-c-and-use-them-in-python&#34;&gt;How to build libraries in C++ and use them in Python&lt;/h2&gt;
&lt;p&gt;In this post I will expose one way to create libraries in C++ and expose them to Python.&lt;/p&gt;
&lt;p&gt;This can be very useful when we want to integrate existing piece of code, or write new code that perform better than Python.&lt;/p&gt;
&lt;p&gt;The way exposed in this post will make use of &lt;a href=&#34;https://www.boost.org/&#34;&gt;Boost&lt;/a&gt;, a peer reviewed C++ set of libraries. In paticular, we will use &lt;a href=&#34;https://www.boost.org/doc/libs/1_75_0/libs/python/doc/html/index.html&#34;&gt;Boost-Python&lt;/a&gt;&lt;/p&gt;</description>
            <content type="html"><![CDATA[<h2 id="how-to-build-libraries-in-c-and-use-them-in-python">How to build libraries in C++ and use them in Python</h2>
<p>In this post I will expose one way to create libraries in C++ and expose them to Python.</p>
<p>This can be very useful when we want to integrate existing piece of code, or write new code that perform better than Python.</p>
<p>The way exposed in this post will make use of <a href="https://www.boost.org/">Boost</a>, a peer reviewed C++ set of libraries. In paticular, we will use <a href="https://www.boost.org/doc/libs/1_75_0/libs/python/doc/html/index.html">Boost-Python</a></p>
<h2 id="installing-boost">Installing Boost</h2>
<p>The first step is to install the package <code>Boost</code>:</p>
<pre tabindex="0"><code>wget https://dl.bintray.com/boostorg/release/1.75.0/source/boost_1_75_0.tar.gz
tar -xzf boost_1_75_0.tar.gz
</code></pre><p>We can try if everything is working correctly, with a simple program with Boost (copied from the original documentation)</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-C++" data-lang="C++"><span style="display:flex;"><span><span style="color:#75715e">#include</span> <span style="color:#75715e">&lt;boost/lambda/lambda.hpp&gt;</span><span style="color:#75715e">
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">#include</span> <span style="color:#75715e">&lt;iostream&gt;</span><span style="color:#75715e">
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">#include</span> <span style="color:#75715e">&lt;iterator&gt;</span><span style="color:#75715e">
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">#include</span> <span style="color:#75715e">&lt;algorithm&gt;</span><span style="color:#75715e">
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">int</span> <span style="color:#a6e22e">main</span>()
</span></span><span style="display:flex;"><span>{
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">using</span> <span style="color:#66d9ef">namespace</span> boost<span style="color:#f92672">::</span>lambda;
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">typedef</span> std<span style="color:#f92672">::</span>istream_iterator<span style="color:#f92672">&lt;</span><span style="color:#66d9ef">int</span><span style="color:#f92672">&gt;</span> in;
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    std<span style="color:#f92672">::</span>for_each(
</span></span><span style="display:flex;"><span>        in(std<span style="color:#f92672">::</span>cin), in(), std<span style="color:#f92672">::</span>cout <span style="color:#f92672">&lt;&lt;</span> (_1 <span style="color:#f92672">*</span> <span style="color:#ae81ff">3</span>) <span style="color:#f92672">&lt;&lt;</span> <span style="color:#e6db74">&#34; &#34;</span> );
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>And we compile</p>
<pre tabindex="0"><code>c++ -I ./boost_1_75_0 test-boost.cc -o test-boost
</code></pre><p>We can see that it works if we get the following output running the program</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>luis@BARE:~/projects/How to build libraries in CPP to use in Python$ echo <span style="color:#ae81ff">1</span> <span style="color:#ae81ff">2</span> <span style="color:#ae81ff">3</span> | ./test-boost 
</span></span><span style="display:flex;"><span><span style="color:#ae81ff">3</span> <span style="color:#ae81ff">6</span> <span style="color:#ae81ff">9</span> 
</span></span><span style="display:flex;"><span>luis@BARE:~/projects/How to build libraries in CPP to use in Python$ 
</span></span></code></pre></div><h2 id="installing-boost-python">Installing Boost-Python</h2>
<p>First let&rsquo;s enter into the boost directory <code>boost_1_75_0</code> and we can run <code>./bootstrap.sh --show-libraries</code> to see the non-header only libraries provided by Boost.</p>
<p>We should see something similar to this at the end</p>
<pre tabindex="0"><code>The Boost libraries requiring separate building and installation are:
    - atomic
    - chrono
    - container
    - context
    - contract
    - coroutine
    - date_time
    - exception
    - fiber
    - filesystem
    - graph
    - graph_parallel
    - headers
    - iostreams
    - json
    - locale
    - log
    - math
    - mpi
    - nowide
    - program_options
    - python
    - random
    - regex
    - serialization
    - stacktrace
    - system
    - test
    - thread
    - timer
    - type_erasure
    - wave
</code></pre><p>Now we can install Boost-Python prepare the environment to use Python:</p>
<pre tabindex="0"><code>./bootstrap.sh --with-libraries=python
</code></pre><p>And with the <code>b2</code> tool generated while running <code>bootstrap.sh</code>, we can compile and install Boost-Python</p>
<pre tabindex="0"><code>sudo ./b2 install
</code></pre><p>If you ignore the step of specifying the libraries to build, the full build with take a long time&hellip;.</p>
<h2 id="example">Example</h2>
<p>First, let&rsquo;s copy the content of the tutorial included with Boost into the folder <code>example-1</code></p>
<pre tabindex="0"><code>cp -Rf boost_1_75_0/libs/python/example/tutorial/* example-1/
</code></pre><p>We should have three files in the folder</p>
<pre tabindex="0"><code>luis@BARE:~/projects/How to build libraries in CPP to use in Python/example-1$ ls
hello.cpp  hello.py  Jamfile
luis@BARE:~/projects/How to build libraries in CPP to use in Python/example-1$
</code></pre><p>Now we execute bjam and next we execute <code>python hello.py</code>. If everything went well, we should see <code>hello world!</code> as the output.</p>
<p>In the future I will write a post and how to implement a library to operate with complex numbers in C++ and its use in Python</p>
]]></content>
        </item>
        
        <item>
            <title>Databases MySQL: C&#43;&#43;</title>
            <link>https://blog.miguens.one/posts/2020/06/databases-mysql-c-/</link>
            <pubDate>Wed, 17 Jun 2020 00:00:00 +0000</pubDate>
            
            <guid>https://blog.miguens.one/posts/2020/06/databases-mysql-c-/</guid>
            <description>&lt;h2 id=&#34;installation&#34;&gt;Installation&lt;/h2&gt;
&lt;p&gt;In the first place, we need to install the MySQL Connector for C++. I am using Ubuntu, so I will use apt-get. Please adapt if you are using another distro not based on Debian.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;sudo apt-get install libmysqlcppconn-dev libmysqlcppconn7v5
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;We can try our database, for that I will use the example 2 included in the MySQL Connector. You can find the source code &lt;a href=&#34;https://dev.mysql.com/doc/connector-cpp/1.1/en/connector-cpp-examples-complete-example-2.html&#34;&gt;here&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;The test program is:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c++&#34; data-lang=&#34;c++&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;/* Standard C++ includes */&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;&amp;lt;stdlib.h&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;&amp;lt;iostream&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;/*
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;  Include directly the different
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;  headers from cppconn/ and mysql_driver.h + mysql_util.h
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;  (and mysql_connection.h). This will reduce your build time!
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;*/&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;&amp;#34;mysql_connection.h&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;&amp;lt;cppconn/driver.h&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;&amp;lt;cppconn/exception.h&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;&amp;lt;cppconn/resultset.h&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;&amp;lt;cppconn/statement.h&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;&amp;lt;cppconn/prepared_statement.h&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;using&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;namespace&lt;/span&gt; std;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;main&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    cout &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; endl;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    cout &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Let&amp;#39;s have MySQL count from 10 to 1...&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; endl;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;try&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    sql&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;Driver &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;driver;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    sql&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;Connection &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;con;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    sql&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;Statement &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;stmt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    sql&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;ResultSet &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;res;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    sql&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;PreparedStatement &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;pstmt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;/* Create a connection */&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    driver &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; get_driver_instance();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    con &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; driver&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;connect(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;tcp://127.0.0.1:3306&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;root&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;secret&amp;#34;&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;/* Connect to the MySQL test database */&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    con&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;setSchema(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;datab&amp;#34;&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    stmt &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; con&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;createStatement();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    stmt&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;execute(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;DROP TABLE IF EXISTS test&amp;#34;&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    stmt&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;execute(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;CREATE TABLE test(id INT)&amp;#34;&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;delete&lt;/span&gt; stmt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;/* &amp;#39;?&amp;#39; is the supported placeholder syntax */&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    pstmt &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; con&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;prepareStatement(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;INSERT INTO test(id) VALUES (?)&amp;#34;&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;; i &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;; i&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        pstmt&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;setInt(&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, i);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        pstmt&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;executeUpdate();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;delete&lt;/span&gt; pstmt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;/* Select in ascending order */&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    pstmt &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; con&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;prepareStatement(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;SELECT id FROM test ORDER BY id ASC&amp;#34;&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    res &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; pstmt&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;executeQuery();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;/* Fetch in reverse = descending order! */&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    res&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;afterLast();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt; (res&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;previous())
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        cout &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\t&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;... MySQL counts: &amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; res&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;getInt(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;id&amp;#34;&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; endl;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;delete&lt;/span&gt; res;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;delete&lt;/span&gt; pstmt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;delete&lt;/span&gt; con;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    } &lt;span style=&#34;color:#66d9ef&#34;&gt;catch&lt;/span&gt; (sql&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;SQLException &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;e) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    cout &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;# ERR: SQLException in &amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; __FILE__;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    cout &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;(&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; __FUNCTION__ &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;) on line &amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; __LINE__ &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; endl;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    cout &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;# ERR: &amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; e.what();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    cout &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34; (MySQL error code: &amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; e.getErrorCode();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    cout &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;, SQLState: &amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; e.getSQLState() &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34; )&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; endl;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    cout &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; endl;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; EXIT_SUCCESS;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;We can compile the program with the following command and execute it:&lt;/p&gt;</description>
            <content type="html"><![CDATA[<h2 id="installation">Installation</h2>
<p>In the first place, we need to install the MySQL Connector for C++. I am using Ubuntu, so I will use apt-get. Please adapt if you are using another distro not based on Debian.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>sudo apt-get install libmysqlcppconn-dev libmysqlcppconn7v5
</span></span></code></pre></div><p>We can try our database, for that I will use the example 2 included in the MySQL Connector. You can find the source code <a href="https://dev.mysql.com/doc/connector-cpp/1.1/en/connector-cpp-examples-complete-example-2.html">here</a></p>
<p>The test program is:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-c++" data-lang="c++"><span style="display:flex;"><span><span style="color:#75715e">/* Standard C++ includes */</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#include</span> <span style="color:#75715e">&lt;stdlib.h&gt;</span><span style="color:#75715e">
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">#include</span> <span style="color:#75715e">&lt;iostream&gt;</span><span style="color:#75715e">
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">/*
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">  Include directly the different
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">  headers from cppconn/ and mysql_driver.h + mysql_util.h
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">  (and mysql_connection.h). This will reduce your build time!
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">*/</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#include</span> <span style="color:#75715e">&#34;mysql_connection.h&#34;</span><span style="color:#75715e">
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#include</span> <span style="color:#75715e">&lt;cppconn/driver.h&gt;</span><span style="color:#75715e">
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">#include</span> <span style="color:#75715e">&lt;cppconn/exception.h&gt;</span><span style="color:#75715e">
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">#include</span> <span style="color:#75715e">&lt;cppconn/resultset.h&gt;</span><span style="color:#75715e">
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">#include</span> <span style="color:#75715e">&lt;cppconn/statement.h&gt;</span><span style="color:#75715e">
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">#include</span> <span style="color:#75715e">&lt;cppconn/prepared_statement.h&gt;</span><span style="color:#75715e">
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">using</span> <span style="color:#66d9ef">namespace</span> std;
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">int</span> <span style="color:#a6e22e">main</span>(<span style="color:#66d9ef">void</span>)
</span></span><span style="display:flex;"><span>{
</span></span><span style="display:flex;"><span>    cout <span style="color:#f92672">&lt;&lt;</span> endl;
</span></span><span style="display:flex;"><span>    cout <span style="color:#f92672">&lt;&lt;</span> <span style="color:#e6db74">&#34;Let&#39;s have MySQL count from 10 to 1...&#34;</span> <span style="color:#f92672">&lt;&lt;</span> endl;
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">try</span> {
</span></span><span style="display:flex;"><span>    sql<span style="color:#f92672">::</span>Driver <span style="color:#f92672">*</span>driver;
</span></span><span style="display:flex;"><span>    sql<span style="color:#f92672">::</span>Connection <span style="color:#f92672">*</span>con;
</span></span><span style="display:flex;"><span>    sql<span style="color:#f92672">::</span>Statement <span style="color:#f92672">*</span>stmt;
</span></span><span style="display:flex;"><span>    sql<span style="color:#f92672">::</span>ResultSet <span style="color:#f92672">*</span>res;
</span></span><span style="display:flex;"><span>    sql<span style="color:#f92672">::</span>PreparedStatement <span style="color:#f92672">*</span>pstmt;
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#75715e">/* Create a connection */</span>
</span></span><span style="display:flex;"><span>    driver <span style="color:#f92672">=</span> get_driver_instance();
</span></span><span style="display:flex;"><span>    con <span style="color:#f92672">=</span> driver<span style="color:#f92672">-&gt;</span>connect(<span style="color:#e6db74">&#34;tcp://127.0.0.1:3306&#34;</span>, <span style="color:#e6db74">&#34;root&#34;</span>, <span style="color:#e6db74">&#34;secret&#34;</span>);
</span></span><span style="display:flex;"><span>    <span style="color:#75715e">/* Connect to the MySQL test database */</span>
</span></span><span style="display:flex;"><span>    con<span style="color:#f92672">-&gt;</span>setSchema(<span style="color:#e6db74">&#34;datab&#34;</span>);
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    stmt <span style="color:#f92672">=</span> con<span style="color:#f92672">-&gt;</span>createStatement();
</span></span><span style="display:flex;"><span>    stmt<span style="color:#f92672">-&gt;</span>execute(<span style="color:#e6db74">&#34;DROP TABLE IF EXISTS test&#34;</span>);
</span></span><span style="display:flex;"><span>    stmt<span style="color:#f92672">-&gt;</span>execute(<span style="color:#e6db74">&#34;CREATE TABLE test(id INT)&#34;</span>);
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">delete</span> stmt;
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#75715e">/* &#39;?&#39; is the supported placeholder syntax */</span>
</span></span><span style="display:flex;"><span>    pstmt <span style="color:#f92672">=</span> con<span style="color:#f92672">-&gt;</span>prepareStatement(<span style="color:#e6db74">&#34;INSERT INTO test(id) VALUES (?)&#34;</span>);
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">for</span> (<span style="color:#66d9ef">int</span> i <span style="color:#f92672">=</span> <span style="color:#ae81ff">1</span>; i <span style="color:#f92672">&lt;=</span> <span style="color:#ae81ff">10</span>; i<span style="color:#f92672">++</span>) {
</span></span><span style="display:flex;"><span>        pstmt<span style="color:#f92672">-&gt;</span>setInt(<span style="color:#ae81ff">1</span>, i);
</span></span><span style="display:flex;"><span>        pstmt<span style="color:#f92672">-&gt;</span>executeUpdate();
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">delete</span> pstmt;
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#75715e">/* Select in ascending order */</span>
</span></span><span style="display:flex;"><span>    pstmt <span style="color:#f92672">=</span> con<span style="color:#f92672">-&gt;</span>prepareStatement(<span style="color:#e6db74">&#34;SELECT id FROM test ORDER BY id ASC&#34;</span>);
</span></span><span style="display:flex;"><span>    res <span style="color:#f92672">=</span> pstmt<span style="color:#f92672">-&gt;</span>executeQuery();
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#75715e">/* Fetch in reverse = descending order! */</span>
</span></span><span style="display:flex;"><span>    res<span style="color:#f92672">-&gt;</span>afterLast();
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">while</span> (res<span style="color:#f92672">-&gt;</span>previous())
</span></span><span style="display:flex;"><span>        cout <span style="color:#f92672">&lt;&lt;</span> <span style="color:#e6db74">&#34;</span><span style="color:#ae81ff">\t</span><span style="color:#e6db74">... MySQL counts: &#34;</span> <span style="color:#f92672">&lt;&lt;</span> res<span style="color:#f92672">-&gt;</span>getInt(<span style="color:#e6db74">&#34;id&#34;</span>) <span style="color:#f92672">&lt;&lt;</span> endl;
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">delete</span> res;
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">delete</span> pstmt;
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">delete</span> con;
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    } <span style="color:#66d9ef">catch</span> (sql<span style="color:#f92672">::</span>SQLException <span style="color:#f92672">&amp;</span>e) {
</span></span><span style="display:flex;"><span>    cout <span style="color:#f92672">&lt;&lt;</span> <span style="color:#e6db74">&#34;# ERR: SQLException in &#34;</span> <span style="color:#f92672">&lt;&lt;</span> __FILE__;
</span></span><span style="display:flex;"><span>    cout <span style="color:#f92672">&lt;&lt;</span> <span style="color:#e6db74">&#34;(&#34;</span> <span style="color:#f92672">&lt;&lt;</span> __FUNCTION__ <span style="color:#f92672">&lt;&lt;</span> <span style="color:#e6db74">&#34;) on line &#34;</span> <span style="color:#f92672">&lt;&lt;</span> __LINE__ <span style="color:#f92672">&lt;&lt;</span> endl;
</span></span><span style="display:flex;"><span>    cout <span style="color:#f92672">&lt;&lt;</span> <span style="color:#e6db74">&#34;# ERR: &#34;</span> <span style="color:#f92672">&lt;&lt;</span> e.what();
</span></span><span style="display:flex;"><span>    cout <span style="color:#f92672">&lt;&lt;</span> <span style="color:#e6db74">&#34; (MySQL error code: &#34;</span> <span style="color:#f92672">&lt;&lt;</span> e.getErrorCode();
</span></span><span style="display:flex;"><span>    cout <span style="color:#f92672">&lt;&lt;</span> <span style="color:#e6db74">&#34;, SQLState: &#34;</span> <span style="color:#f92672">&lt;&lt;</span> e.getSQLState() <span style="color:#f92672">&lt;&lt;</span> <span style="color:#e6db74">&#34; )&#34;</span> <span style="color:#f92672">&lt;&lt;</span> endl;
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    cout <span style="color:#f92672">&lt;&lt;</span> endl;
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">return</span> EXIT_SUCCESS;
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>We can compile the program with the following command and execute it:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-console" data-lang="console"><span style="display:flex;"><span>(base) luis@BARE:~/projects/How to use MySQL/mysql_conn$ g++ test.cc -o test -l mysqlcppconn
</span></span><span style="display:flex;"><span>(base) luis@BARE:~/projects/How to use MySQL/mysql_conn$ ./test 
</span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010">
</span></span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010"></span>Let&#39;s have MySQL count from 10 to 1...
</span></span><span style="display:flex;"><span>        ... MySQL counts: 10
</span></span><span style="display:flex;"><span>        ... MySQL counts: 9
</span></span><span style="display:flex;"><span>        ... MySQL counts: 8
</span></span><span style="display:flex;"><span>        ... MySQL counts: 7
</span></span><span style="display:flex;"><span>        ... MySQL counts: 6
</span></span><span style="display:flex;"><span>        ... MySQL counts: 5
</span></span><span style="display:flex;"><span>        ... MySQL counts: 4
</span></span><span style="display:flex;"><span>        ... MySQL counts: 3
</span></span><span style="display:flex;"><span>        ... MySQL counts: 2
</span></span><span style="display:flex;"><span>        ... MySQL counts: 1
</span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010">
</span></span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010"></span>(base) luis@BARE:~/projects/How to use MySQL/mysql_conn$ 
</span></span></code></pre></div><p>If everything went well, we should see the MySQL count down.</p>
<h2 id="using-our-database">Using our database</h2>
<p>Following the previous post, I will create a database to store pets. As we are going to use C++ the process won&rsquo;t be so interactive as the previously Python examples.</p>
<p>I have created the following <code>example.cc</code> to ilustrate how to use our database</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-c++" data-lang="c++"><span style="display:flex;"><span><span style="color:#75715e">/* Standard C++ includes */</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#include</span> <span style="color:#75715e">&lt;stdlib.h&gt;</span><span style="color:#75715e">
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">#include</span> <span style="color:#75715e">&lt;iostream&gt;</span><span style="color:#75715e">
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">/*
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">  Include directly the different
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">  headers from cppconn/ and mysql_driver.h + mysql_util.h
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">  (and mysql_connection.h). This will reduce your build time!
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">*/</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#include</span> <span style="color:#75715e">&#34;mysql_connection.h&#34;</span><span style="color:#75715e">
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#include</span> <span style="color:#75715e">&lt;cppconn/driver.h&gt;</span><span style="color:#75715e">
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">#include</span> <span style="color:#75715e">&lt;cppconn/exception.h&gt;</span><span style="color:#75715e">
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">#include</span> <span style="color:#75715e">&lt;cppconn/resultset.h&gt;</span><span style="color:#75715e">
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">#include</span> <span style="color:#75715e">&lt;cppconn/statement.h&gt;</span><span style="color:#75715e">
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">#include</span> <span style="color:#75715e">&lt;cppconn/prepared_statement.h&gt;</span><span style="color:#75715e">
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">using</span> <span style="color:#66d9ef">namespace</span> std;
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>sql<span style="color:#f92672">::</span>Connection <span style="color:#f92672">*</span> connect()
</span></span><span style="display:flex;"><span>{    
</span></span><span style="display:flex;"><span>    <span style="color:#75715e">/* Create a connection */</span>
</span></span><span style="display:flex;"><span>    sql<span style="color:#f92672">::</span>Driver <span style="color:#f92672">*</span>driver <span style="color:#f92672">=</span> get_driver_instance();
</span></span><span style="display:flex;"><span>    sql<span style="color:#f92672">::</span>Connection <span style="color:#f92672">*</span>con <span style="color:#f92672">=</span> driver<span style="color:#f92672">-&gt;</span>connect(<span style="color:#e6db74">&#34;tcp://127.0.0.1:3306&#34;</span>, <span style="color:#e6db74">&#34;root&#34;</span>, <span style="color:#e6db74">&#34;secret&#34;</span>);
</span></span><span style="display:flex;"><span>    <span style="color:#75715e">/* Connect to the MySQL test database */</span>
</span></span><span style="display:flex;"><span>    con<span style="color:#f92672">-&gt;</span>setSchema(<span style="color:#e6db74">&#34;datab&#34;</span>);
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">return</span> con;
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">void</span> <span style="color:#a6e22e">create_table</span>(sql<span style="color:#f92672">::</span>Connection <span style="color:#f92672">*</span>con)
</span></span><span style="display:flex;"><span>{
</span></span><span style="display:flex;"><span>    sql<span style="color:#f92672">::</span>Statement <span style="color:#f92672">*</span>stmt;
</span></span><span style="display:flex;"><span>    stmt <span style="color:#f92672">=</span> con<span style="color:#f92672">-&gt;</span>createStatement();
</span></span><span style="display:flex;"><span>    stmt<span style="color:#f92672">-&gt;</span>execute(<span style="color:#e6db74">&#34;DROP TABLE IF EXISTS Pets&#34;</span>);
</span></span><span style="display:flex;"><span>    stmt<span style="color:#f92672">-&gt;</span>execute(<span style="color:#e6db74">&#34; CREATE TABLE Pets (&#34;</span>
</span></span><span style="display:flex;"><span>                    <span style="color:#e6db74">&#34;PetID int NOT NULL AUTO_INCREMENT,&#34;</span>
</span></span><span style="display:flex;"><span>                    <span style="color:#e6db74">&#34;Name varchar(50) NOT NULL,&#34;</span>
</span></span><span style="display:flex;"><span>                    <span style="color:#e6db74">&#34;Category varchar(50) NOT NULL,&#34;</span>
</span></span><span style="display:flex;"><span>                    <span style="color:#e6db74">&#34;PRIMARY KEY (PetID)&#34;</span>
</span></span><span style="display:flex;"><span>                    <span style="color:#e6db74">&#34;);&#34;</span>
</span></span><span style="display:flex;"><span>                );
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">delete</span> stmt;
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">void</span> <span style="color:#a6e22e">insert_pet</span>(sql<span style="color:#f92672">::</span>Connection <span style="color:#f92672">*</span>con, string name, string category)
</span></span><span style="display:flex;"><span>{
</span></span><span style="display:flex;"><span>    sql<span style="color:#f92672">::</span>PreparedStatement <span style="color:#f92672">*</span>pstmt;
</span></span><span style="display:flex;"><span>    pstmt <span style="color:#f92672">=</span> con<span style="color:#f92672">-&gt;</span>prepareStatement(<span style="color:#e6db74">&#34;INSERT into Pets(Name, Category) values (?, ?)&#34;</span>);
</span></span><span style="display:flex;"><span>    pstmt<span style="color:#f92672">-&gt;</span>setString(<span style="color:#ae81ff">1</span>, name);
</span></span><span style="display:flex;"><span>    pstmt<span style="color:#f92672">-&gt;</span>setString(<span style="color:#ae81ff">2</span>, category);
</span></span><span style="display:flex;"><span>    pstmt<span style="color:#f92672">-&gt;</span>executeUpdate();
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">delete</span> pstmt;
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">void</span> <span style="color:#a6e22e">list_pets</span>(sql<span style="color:#f92672">::</span>Connection <span style="color:#f92672">*</span>con)
</span></span><span style="display:flex;"><span>{
</span></span><span style="display:flex;"><span>    sql<span style="color:#f92672">::</span>PreparedStatement <span style="color:#f92672">*</span>pstmt;
</span></span><span style="display:flex;"><span>    pstmt <span style="color:#f92672">=</span> con<span style="color:#f92672">-&gt;</span>prepareStatement(<span style="color:#e6db74">&#34;SELECT * FROM Pets&#34;</span>);
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    sql<span style="color:#f92672">::</span>ResultSet <span style="color:#f92672">*</span>res;
</span></span><span style="display:flex;"><span>    res <span style="color:#f92672">=</span> pstmt<span style="color:#f92672">-&gt;</span>executeQuery();
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">while</span> (res<span style="color:#f92672">-&gt;</span>next())
</span></span><span style="display:flex;"><span>        cout <span style="color:#f92672">&lt;&lt;</span> <span style="color:#e6db74">&#34;[&#34;</span> <span style="color:#f92672">&lt;&lt;</span> res<span style="color:#f92672">-&gt;</span>getInt(<span style="color:#e6db74">&#34;PetID&#34;</span>) <span style="color:#f92672">&lt;&lt;</span> <span style="color:#e6db74">&#34;] &#34;</span> <span style="color:#f92672">&lt;&lt;</span> res<span style="color:#f92672">-&gt;</span>getString(<span style="color:#e6db74">&#34;Name&#34;</span>) <span style="color:#f92672">&lt;&lt;</span> <span style="color:#e6db74">&#34;</span><span style="color:#ae81ff">\t</span><span style="color:#e6db74">&#34;</span> <span style="color:#f92672">&lt;&lt;</span> 
</span></span><span style="display:flex;"><span>        res<span style="color:#f92672">-&gt;</span>getString(<span style="color:#e6db74">&#34;Category&#34;</span>) <span style="color:#f92672">&lt;&lt;</span> endl;
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">delete</span> res;
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">void</span> <span style="color:#a6e22e">delete_pet</span>(sql<span style="color:#f92672">::</span>Connection <span style="color:#f92672">*</span>con, <span style="color:#66d9ef">int</span> id)
</span></span><span style="display:flex;"><span>{
</span></span><span style="display:flex;"><span>    sql<span style="color:#f92672">::</span>PreparedStatement <span style="color:#f92672">*</span>pstmt;
</span></span><span style="display:flex;"><span>    pstmt <span style="color:#f92672">=</span> con<span style="color:#f92672">-&gt;</span>prepareStatement(<span style="color:#e6db74">&#34;DELETE FROM Pets WHERE PetID=?&#34;</span>);
</span></span><span style="display:flex;"><span>    pstmt<span style="color:#f92672">-&gt;</span>setInt(<span style="color:#ae81ff">1</span>, id);
</span></span><span style="display:flex;"><span>    pstmt<span style="color:#f92672">-&gt;</span>executeUpdate();
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">int</span> <span style="color:#a6e22e">main</span>(<span style="color:#66d9ef">void</span>)
</span></span><span style="display:flex;"><span>{
</span></span><span style="display:flex;"><span>    cout <span style="color:#f92672">&lt;&lt;</span> <span style="color:#e6db74">&#34;Connecting&#34;</span> <span style="color:#f92672">&lt;&lt;</span> endl;
</span></span><span style="display:flex;"><span>    sql<span style="color:#f92672">::</span>Connection <span style="color:#f92672">*</span>con <span style="color:#f92672">=</span> connect();
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    cout <span style="color:#f92672">&lt;&lt;</span> <span style="color:#e6db74">&#34;Creating the table&#34;</span> <span style="color:#f92672">&lt;&lt;</span> endl;
</span></span><span style="display:flex;"><span>    create_table(con);
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    cout <span style="color:#f92672">&lt;&lt;</span> <span style="color:#e6db74">&#34;Adding Dog Luna&#34;</span> <span style="color:#f92672">&lt;&lt;</span> endl;
</span></span><span style="display:flex;"><span>    insert_pet(con, <span style="color:#e6db74">&#34;Luna&#34;</span>, <span style="color:#e6db74">&#34;Dog&#34;</span>);
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    cout <span style="color:#f92672">&lt;&lt;</span> <span style="color:#e6db74">&#34;Adding Silvester and Twetee&#34;</span> <span style="color:#f92672">&lt;&lt;</span> endl;
</span></span><span style="display:flex;"><span>    insert_pet(con, <span style="color:#e6db74">&#34;Silvester&#34;</span>, <span style="color:#e6db74">&#34;Cat&#34;</span>);
</span></span><span style="display:flex;"><span>    insert_pet(con, <span style="color:#e6db74">&#34;Twetee&#34;</span>, <span style="color:#e6db74">&#34;Bird&#34;</span>);
</span></span><span style="display:flex;"><span>    
</span></span><span style="display:flex;"><span>    cout <span style="color:#f92672">&lt;&lt;</span> <span style="color:#e6db74">&#34;Printing content of database&#34;</span> <span style="color:#f92672">&lt;&lt;</span> endl;
</span></span><span style="display:flex;"><span>    list_pets(con);
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    cout <span style="color:#f92672">&lt;&lt;</span> <span style="color:#e6db74">&#34;Delete last pet&#34;</span> <span style="color:#f92672">&lt;&lt;</span> endl;
</span></span><span style="display:flex;"><span>    delete_pet(con, <span style="color:#ae81ff">3</span>);
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    cout <span style="color:#f92672">&lt;&lt;</span> <span style="color:#e6db74">&#34;Printing content of database&#34;</span> <span style="color:#f92672">&lt;&lt;</span> endl;
</span></span><span style="display:flex;"><span>    list_pets(con);
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>If everything goes well, you should see this output after compiling and running the program</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-console" data-lang="console"><span style="display:flex;"><span>(base) luis@BARE:~/projects/How to use MySQL/mysql_conn$ g++ example.cc -o example -l mysqlcppconn; ./example
</span></span><span style="display:flex;"><span>Connecting
</span></span><span style="display:flex;"><span>Creating the table
</span></span><span style="display:flex;"><span>Adding Dog Luna
</span></span><span style="display:flex;"><span>Adding Silvester and Twetee
</span></span><span style="display:flex;"><span>Printing content of database
</span></span><span style="display:flex;"><span>[1] Luna        Dog
</span></span><span style="display:flex;"><span>[2] Silvester   Cat
</span></span><span style="display:flex;"><span>[3] Twetee      Bird
</span></span><span style="display:flex;"><span>Delete last pet
</span></span><span style="display:flex;"><span>Printing content of database
</span></span><span style="display:flex;"><span>[1] Luna        Dog
</span></span><span style="display:flex;"><span>[2] Silvester   Cat
</span></span><span style="display:flex;"><span>(base) luis@BARE:~/projects/How to use MySQL/mysql_conn$ 
</span></span></code></pre></div><h2 id="conclusion">Conclusion</h2>
<p>I see a disadvantage of this method as we are limited to use MySQL as our SQL server</p>
<p>We can solve this limitation using the SQL access of Qt. In this way, we will be independent of the brand of the SQL server, the problem is that Qt can be an overkill if we only need it for SQL. Also, please check the license of Qt before using it in a commercial project.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"></code></pre></div>]]></content>
        </item>
        
        <item>
            <title>Databases MySQL: Python Part 2</title>
            <link>https://blog.miguens.one/posts/2020/06/databases-mysql-python-part-2/</link>
            <pubDate>Sun, 14 Jun 2020 00:00:00 +0000</pubDate>
            
            <guid>https://blog.miguens.one/posts/2020/06/databases-mysql-python-part-2/</guid>
            <description>&lt;h2 id=&#34;introduction&#34;&gt;Introduction&lt;/h2&gt;
&lt;p&gt;In previous post we saw how to use SQLAlchemy and execute SQL commands to operate our database.&lt;/p&gt;
&lt;p&gt;Now we will see that there is a more convenient way to operate in Python using the SQLAlchemy&lt;/p&gt;
&lt;p&gt;In case you have reset your environment, we can start installing the package&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;!!&lt;/span&gt;pip3 install sqlalchemy
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;pre&gt;&lt;code&gt;[&#39;Requirement already satisfied: sqlalchemy in /home/luis/.local/lib/python3.8/site-packages (1.3.20)&#39;]
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;And before using the library, we need to import it&lt;/p&gt;</description>
            <content type="html"><![CDATA[<h2 id="introduction">Introduction</h2>
<p>In previous post we saw how to use SQLAlchemy and execute SQL commands to operate our database.</p>
<p>Now we will see that there is a more convenient way to operate in Python using the SQLAlchemy</p>
<p>In case you have reset your environment, we can start installing the package</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010">!!</span>pip3 install sqlalchemy
</span></span></code></pre></div><pre><code>['Requirement already satisfied: sqlalchemy in /home/luis/.local/lib/python3.8/site-packages (1.3.20)']
</code></pre>
<p>And before using the library, we need to import it</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#f92672">import</span> sqlalchemy <span style="color:#66d9ef">as</span> db
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># and for visualisation</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">import</span> pandas <span style="color:#66d9ef">as</span> pd
</span></span></code></pre></div><h2 id="connecting-to-the-database">Connecting to the database</h2>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span>database <span style="color:#f92672">=</span> db<span style="color:#f92672">.</span>create_engine(<span style="color:#e6db74">&#39;mysql+pymysql://user:password@localhost/datab&#39;</span>)
</span></span></code></pre></div><h2 id="creating-a-table">Creating a table</h2>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#f92672">from</span> sqlalchemy <span style="color:#f92672">import</span> Table, Column, Integer, String
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>metadata <span style="color:#f92672">=</span> db<span style="color:#f92672">.</span>MetaData()
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>pets_table <span style="color:#f92672">=</span> Table(
</span></span><span style="display:flex;"><span>                     <span style="color:#e6db74">&#34;Pets&#34;</span>,
</span></span><span style="display:flex;"><span>                     metadata,
</span></span><span style="display:flex;"><span>                     Column(<span style="color:#e6db74">&#39;PetID&#39;</span>, Integer, primary_key<span style="color:#f92672">=</span><span style="color:#66d9ef">True</span>, autoincrement<span style="color:#f92672">=</span><span style="color:#66d9ef">True</span>),
</span></span><span style="display:flex;"><span>                     Column(<span style="color:#e6db74">&#39;Name&#39;</span>, String(<span style="color:#ae81ff">50</span>)),
</span></span><span style="display:flex;"><span>                     Column(<span style="color:#e6db74">&#39;Category&#39;</span>, String(<span style="color:#ae81ff">50</span>))
</span></span><span style="display:flex;"><span>                    )
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>metadata<span style="color:#f92672">.</span>create_all(database)
</span></span></code></pre></div><h2 id="adding-entries">Adding entries</h2>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#f92672">from</span> sqlalchemy <span style="color:#f92672">import</span> insert
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">def</span> <span style="color:#a6e22e">add_pet</span>(name, category):
</span></span><span style="display:flex;"><span>    statement <span style="color:#f92672">=</span> insert(pets_table)<span style="color:#f92672">.</span>values(Name<span style="color:#f92672">=</span>name, Category<span style="color:#f92672">=</span>category)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">with</span> database<span style="color:#f92672">.</span>connect() <span style="color:#66d9ef">as</span> connection:
</span></span><span style="display:flex;"><span>        connection<span style="color:#f92672">.</span>execute(statement)
</span></span><span style="display:flex;"><span>    
</span></span></code></pre></div><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span>add_pet(<span style="color:#e6db74">&#39;Luna&#39;</span>, <span style="color:#e6db74">&#39;Dog&#39;</span>)
</span></span><span style="display:flex;"><span>add_pet(<span style="color:#e6db74">&#39;Silvester&#39;</span>, <span style="color:#e6db74">&#39;Cat&#39;</span>)
</span></span><span style="display:flex;"><span>add_pet(<span style="color:#e6db74">&#39;Twetee&#39;</span>, <span style="color:#e6db74">&#39;Bird&#39;</span>)
</span></span></code></pre></div><h2 id="read-data">Read data</h2>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#f92672">from</span> sqlalchemy <span style="color:#f92672">import</span> select
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">def</span> <span style="color:#a6e22e">get_pets</span>():
</span></span><span style="display:flex;"><span>    stmt <span style="color:#f92672">=</span> select([pets_table])
</span></span><span style="display:flex;"><span>    
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">with</span> database<span style="color:#f92672">.</span>connect() <span style="color:#66d9ef">as</span> connection:
</span></span><span style="display:flex;"><span>        results <span style="color:#f92672">=</span> connection<span style="color:#f92672">.</span>execute(stmt)
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">return</span> results<span style="color:#f92672">.</span>fetchall()
</span></span></code></pre></div><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span>get_pets()
</span></span></code></pre></div><pre><code>[(1, 'Luna', 'Dog'), (2, 'Silvester', 'Cat'), (3, 'Twetee', 'Bird')]
</code></pre>
<h2 id="delete-an-entry">Delete an entry</h2>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#f92672">from</span> sqlalchemy <span style="color:#f92672">import</span> delete
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">def</span> <span style="color:#a6e22e">delete_pet</span>(id):
</span></span><span style="display:flex;"><span>    stmt <span style="color:#f92672">=</span> delete(pets_table)<span style="color:#f92672">.</span>where(pets_table<span style="color:#f92672">.</span>c<span style="color:#f92672">.</span>PetID <span style="color:#f92672">==</span> id)
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">with</span> database<span style="color:#f92672">.</span>connect() <span style="color:#66d9ef">as</span> connection:
</span></span><span style="display:flex;"><span>        connection<span style="color:#f92672">.</span>execute(stmt)
</span></span></code></pre></div><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span>delete_pet(<span style="color:#ae81ff">1</span>)
</span></span></code></pre></div><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span>get_pets()
</span></span></code></pre></div><pre><code>[(2, 'Silvester', 'Cat'), (3, 'Twetee', 'Bird')]
</code></pre>
<h2 id="delete-a-table">Delete a table</h2>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#66d9ef">with</span> database<span style="color:#f92672">.</span>connect() <span style="color:#66d9ef">as</span> connection:
</span></span><span style="display:flex;"><span>    results <span style="color:#f92672">=</span> connection<span style="color:#f92672">.</span>execute(<span style="color:#e6db74">&#34;SHOW TABLES&#34;</span>)
</span></span><span style="display:flex;"><span>    display(pd<span style="color:#f92672">.</span>DataFrame(results<span style="color:#f92672">.</span>fetchall()))
</span></span></code></pre></div><!-- raw HTML omitted -->
<pre><code>.dataframe tbody tr th {
    vertical-align: top;
}

.dataframe thead th {
    text-align: right;
}
</code></pre>
<p><!-- raw HTML omitted --></p>
<!-- raw HTML omitted -->
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span>pets_table<span style="color:#f92672">.</span>drop(database)
</span></span></code></pre></div><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#66d9ef">with</span> database<span style="color:#f92672">.</span>connect() <span style="color:#66d9ef">as</span> connection:
</span></span><span style="display:flex;"><span>    results <span style="color:#f92672">=</span> connection<span style="color:#f92672">.</span>execute(<span style="color:#e6db74">&#34;SHOW TABLES&#34;</span>)
</span></span><span style="display:flex;"><span>    display(pd<span style="color:#f92672">.</span>DataFrame(results<span style="color:#f92672">.</span>fetchall()))
</span></span></code></pre></div><!-- raw HTML omitted -->
<pre><code>.dataframe tbody tr th {
    vertical-align: top;
}

.dataframe thead th {
    text-align: right;
}
</code></pre>
<p><!-- raw HTML omitted --></p>
<!-- raw HTML omitted -->
<p>We see an empty dataframe, and therefore we have deleted the only table in our database</p>
<p>This method of accesing data is more <code>pythonic</code>, and we can build classes and reusable functions easily.</p>
]]></content>
        </item>
        
        <item>
            <title>Databases MySQL: Python Part 1</title>
            <link>https://blog.miguens.one/posts/2020/06/databases-mysql-python-part-1/</link>
            <pubDate>Tue, 09 Jun 2020 00:00:00 +0000</pubDate>
            
            <guid>https://blog.miguens.one/posts/2020/06/databases-mysql-python-part-1/</guid>
            <description>&lt;h2 id=&#34;introduction&#34;&gt;Introduction&lt;/h2&gt;
&lt;p&gt;In previous post we saw how to install and use an SQL database, now I will introduce how to use inside Python&lt;/p&gt;
&lt;p&gt;We have several connectors from SQL to Python that are &amp;ldquo;flavour&amp;rdquo; dependant. For example, we can use &lt;a href=&#34;https://pypi.org/project/psycopg2/&#34;&gt;psycopg2&lt;/a&gt; to connect to a PostgreSQL database or &lt;a href=&#34;https://dev.mysql.com/doc/connector-python/en/connector-python-example-connecting.html&#34;&gt;MySQL Connector&lt;/a&gt; to connect to MySQL.&lt;/p&gt;
&lt;p&gt;I like to take a step back, and use a package that is not dependant of the brand of database we will install. For that my favourite is &lt;a href=&#34;https://www.sqlalchemy.org/&#34;&gt;SQLAlchemy&lt;/a&gt;&lt;/p&gt;</description>
            <content type="html"><![CDATA[<h2 id="introduction">Introduction</h2>
<p>In previous post we saw how to install and use an SQL database, now I will introduce how to use inside Python</p>
<p>We have several connectors from SQL to Python that are &ldquo;flavour&rdquo; dependant. For example, we can use <a href="https://pypi.org/project/psycopg2/">psycopg2</a> to connect to a PostgreSQL database or <a href="https://dev.mysql.com/doc/connector-python/en/connector-python-example-connecting.html">MySQL Connector</a> to connect to MySQL.</p>
<p>I like to take a step back, and use a package that is not dependant of the brand of database we will install. For that my favourite is <a href="https://www.sqlalchemy.org/">SQLAlchemy</a></p>
<p>As usual, we can start installing the package</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010">!!</span>pip3 install sqlalchemy
</span></span></code></pre></div><pre><code>['Requirement already satisfied: sqlalchemy in /home/luis/.local/lib/python3.8/site-packages (1.3.20)']
</code></pre>
<p>And before using the library, we need to import it</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#f92672">import</span> sqlalchemy <span style="color:#66d9ef">as</span> db
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># and for visualisation</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">import</span> pandas <span style="color:#66d9ef">as</span> pd
</span></span></code></pre></div><h2 id="connecting-to-the-database">Connecting to the database</h2>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span>database <span style="color:#f92672">=</span> db<span style="color:#f92672">.</span>create_engine(<span style="color:#e6db74">&#39;mysql+pymysql://user:password@localhost/datab&#39;</span>)
</span></span></code></pre></div><h2 id="creating-a-table">Creating a table</h2>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#66d9ef">with</span> database<span style="color:#f92672">.</span>connect() <span style="color:#66d9ef">as</span> connection:
</span></span><span style="display:flex;"><span>    connection<span style="color:#f92672">.</span>execute(
</span></span><span style="display:flex;"><span>        <span style="color:#e6db74">&#34;CREATE TABLE Pets (</span><span style="color:#ae81ff">\
</span></span></span><span style="display:flex;"><span><span style="color:#ae81ff"></span><span style="color:#e6db74">        PetID int NOT NULL AUTO_INCREMENT,</span><span style="color:#ae81ff">\
</span></span></span><span style="display:flex;"><span><span style="color:#ae81ff"></span><span style="color:#e6db74">        Name varchar(50) NOT NULL,</span><span style="color:#ae81ff">\
</span></span></span><span style="display:flex;"><span><span style="color:#ae81ff"></span><span style="color:#e6db74">        Category varchar(50) NOT NULL,</span><span style="color:#ae81ff">\
</span></span></span><span style="display:flex;"><span><span style="color:#ae81ff"></span><span style="color:#e6db74">        PRIMARY KEY (PetID)</span><span style="color:#ae81ff">\
</span></span></span><span style="display:flex;"><span><span style="color:#ae81ff"></span><span style="color:#e6db74">        )&#34;</span>
</span></span><span style="display:flex;"><span>    )
</span></span></code></pre></div><h2 id="adding-entries">Adding entries</h2>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#66d9ef">with</span> database<span style="color:#f92672">.</span>connect() <span style="color:#66d9ef">as</span> connection:
</span></span><span style="display:flex;"><span>    connection<span style="color:#f92672">.</span>execute(<span style="color:#e6db74">&#34;INSERT into Pets(Name, Category) values (&#39;Luna&#39;, &#39;Dog&#39;)&#34;</span>)
</span></span><span style="display:flex;"><span>    connection<span style="color:#f92672">.</span>execute(<span style="color:#e6db74">&#34;INSERT into Pets(Name, Category) values (&#39;Silvester&#39;, &#39;Cat&#39;)&#34;</span>)
</span></span><span style="display:flex;"><span>    connection<span style="color:#f92672">.</span>execute(<span style="color:#e6db74">&#34;INSERT into Pets(Name, Category) values (&#39;Twetee&#39;, &#39;Bird&#39;)&#34;</span>)
</span></span><span style="display:flex;"><span>    
</span></span></code></pre></div><h2 id="read-data">Read data</h2>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#66d9ef">with</span> database<span style="color:#f92672">.</span>connect() <span style="color:#66d9ef">as</span> connection:
</span></span><span style="display:flex;"><span>    results <span style="color:#f92672">=</span> connection<span style="color:#f92672">.</span>execute(<span style="color:#e6db74">&#34;SELECT * FROM Pets&#34;</span>)
</span></span><span style="display:flex;"><span>    display(pd<span style="color:#f92672">.</span>DataFrame(results<span style="color:#f92672">.</span>fetchall(), columns<span style="color:#f92672">=</span>[<span style="color:#e6db74">&#39;PetID&#39;</span>, <span style="color:#e6db74">&#39;Name&#39;</span>, <span style="color:#e6db74">&#39;Category&#39;</span>]))
</span></span></code></pre></div>

<div>
<style scoped>
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }

    .dataframe tbody tr th {
        vertical-align: top;
    }

    .dataframe thead th {
        text-align: right;
    }
</style>
<table border="1" class="dataframe">
  <thead>
    <tr style="text-align: right;">
      <th></th>
      <th>PetID</th>
      <th>Name</th>
      <th>Category</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>0</th>
      <td>1</td>
      <td>Luna</td>
      <td>Dog</td>
    </tr>
    <tr>
      <th>1</th>
      <td>2</td>
      <td>Silvester</td>
      <td>Cat</td>
    </tr>
    <tr>
      <th>2</th>
      <td>3</td>
      <td>Twetee</td>
      <td>Bird</td>
    </tr>
  </tbody>
</table>
</div>

<h2 id="delete-an-entry">Delete an entry</h2>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#66d9ef">with</span> database<span style="color:#f92672">.</span>connect() <span style="color:#66d9ef">as</span> connection:
</span></span><span style="display:flex;"><span>    results <span style="color:#f92672">=</span> connection<span style="color:#f92672">.</span>execute(<span style="color:#e6db74">&#34;DELETE FROM Pets WHERE PetID=3&#34;</span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">with</span> database<span style="color:#f92672">.</span>connect() <span style="color:#66d9ef">as</span> connection:
</span></span><span style="display:flex;"><span>    results <span style="color:#f92672">=</span> connection<span style="color:#f92672">.</span>execute(<span style="color:#e6db74">&#34;SELECT * FROM Pets&#34;</span>)
</span></span><span style="display:flex;"><span>    display(pd<span style="color:#f92672">.</span>DataFrame(results<span style="color:#f92672">.</span>fetchall(), columns<span style="color:#f92672">=</span>[<span style="color:#e6db74">&#39;PetID&#39;</span>, <span style="color:#e6db74">&#39;Name&#39;</span>, <span style="color:#e6db74">&#39;Category&#39;</span>]))
</span></span></code></pre></div>

<div>
<style scoped>
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }

    .dataframe tbody tr th {
        vertical-align: top;
    }

    .dataframe thead th {
        text-align: right;
    }
</style>
<table border="1" class="dataframe">
  <thead>
    <tr style="text-align: right;">
      <th></th>
      <th>PetID</th>
      <th>Name</th>
      <th>Category</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>0</th>
      <td>1</td>
      <td>Luna</td>
      <td>Dog</td>
    </tr>
    <tr>
      <th>1</th>
      <td>2</td>
      <td>Silvester</td>
      <td>Cat</td>
    </tr>
  </tbody>
</table>
</div>

<h2 id="delete-a-table">Delete a table</h2>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#66d9ef">with</span> database<span style="color:#f92672">.</span>connect() <span style="color:#66d9ef">as</span> connection:
</span></span><span style="display:flex;"><span>    results <span style="color:#f92672">=</span> connection<span style="color:#f92672">.</span>execute(<span style="color:#e6db74">&#34;SHOW TABLES&#34;</span>)
</span></span><span style="display:flex;"><span>    display(pd<span style="color:#f92672">.</span>DataFrame(results<span style="color:#f92672">.</span>fetchall()))
</span></span></code></pre></div>

<div>
<style scoped>
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }

    .dataframe tbody tr th {
        vertical-align: top;
    }

    .dataframe thead th {
        text-align: right;
    }
</style>
<table border="1" class="dataframe">
  <thead>
    <tr style="text-align: right;">
      <th></th>
      <th>0</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>0</th>
      <td>Pets</td>
    </tr>
  </tbody>
</table>
</div>

<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#66d9ef">with</span> database<span style="color:#f92672">.</span>connect() <span style="color:#66d9ef">as</span> connection:
</span></span><span style="display:flex;"><span>    connection<span style="color:#f92672">.</span>execute(<span style="color:#e6db74">&#34;DROP TABLES Pets&#34;</span>)
</span></span></code></pre></div><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#66d9ef">with</span> database<span style="color:#f92672">.</span>connect() <span style="color:#66d9ef">as</span> connection:
</span></span><span style="display:flex;"><span>    results <span style="color:#f92672">=</span> connection<span style="color:#f92672">.</span>execute(<span style="color:#e6db74">&#34;SHOW TABLES&#34;</span>)
</span></span><span style="display:flex;"><span>    display(pd<span style="color:#f92672">.</span>DataFrame(results<span style="color:#f92672">.</span>fetchall()))
</span></span></code></pre></div>

<div>
<style scoped>
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }

    .dataframe tbody tr th {
        vertical-align: top;
    }

    .dataframe thead th {
        text-align: right;
    }
</style>
<table border="1" class="dataframe">
  <thead>
    <tr style="text-align: right;">
      <th></th>
    </tr>
  </thead>
  <tbody>
  </tbody>
</table>
</div>

<p>We see an empty dataframe, and therefore we have deleted the only table in our database</p>
<p>This method of accesing data is not very <code>pythonic</code>, and in the next post we will see how to create the structure of the table in python and interact with our database using methods, rather than executing SQL commands.</p>
]]></content>
        </item>
        
        <item>
            <title>Databases MySQL: Integrate SQL in Jupyter Lab</title>
            <link>https://blog.miguens.one/posts/2020/06/databases-mysql-integrate-sql-in-jupyter-lab/</link>
            <pubDate>Sat, 06 Jun 2020 00:00:00 +0000</pubDate>
            
            <guid>https://blog.miguens.one/posts/2020/06/databases-mysql-integrate-sql-in-jupyter-lab/</guid>
            <description>&lt;h2 id=&#34;preparation-of-jupyter-notebook&#34;&gt;Preparation of Jupyter Notebook&lt;/h2&gt;
&lt;p&gt;In the previous post we saw how to install MySQL and prepare the external programs needed to use SQL in our Jupyter Notebook.&lt;/p&gt;
&lt;p&gt;Now let&amp;rsquo;s load the module and establish the connection and let&amp;rsquo;s start&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt;load_ext sql
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt;sql mysql&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;pymysql:&lt;span style=&#34;color:#f92672&#34;&gt;//&lt;/span&gt;user:password&lt;span style=&#34;color:#a6e22e&#34;&gt;@localhost&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;datab
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;how-to-create-a-table&#34;&gt;How to create a table&lt;/h2&gt;
&lt;p&gt;Imagine that we want to build a database to identify pets. Every pet has an ID, a category (dog, cat, bird) and a name&lt;/p&gt;</description>
            <content type="html"><![CDATA[<h2 id="preparation-of-jupyter-notebook">Preparation of Jupyter Notebook</h2>
<p>In the previous post we saw how to install MySQL and prepare the external programs needed to use SQL in our Jupyter Notebook.</p>
<p>Now let&rsquo;s load the module and establish the connection and let&rsquo;s start</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#f92672">%</span>load_ext sql
</span></span></code></pre></div><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#f92672">%</span>sql mysql<span style="color:#f92672">+</span>pymysql:<span style="color:#f92672">//</span>user:password<span style="color:#a6e22e">@localhost</span><span style="color:#f92672">/</span>datab
</span></span></code></pre></div><h2 id="how-to-create-a-table">How to create a table</h2>
<p>Imagine that we want to build a database to identify pets. Every pet has an ID, a category (dog, cat, bird) and a name</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-sql" data-lang="sql"><span style="display:flex;"><span><span style="color:#f92672">%%</span><span style="color:#66d9ef">sql</span> 
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">CREATE</span> <span style="color:#66d9ef">TABLE</span> Pets (
</span></span><span style="display:flex;"><span>    PetID int <span style="color:#66d9ef">NOT</span> <span style="color:#66d9ef">NULL</span> AUTO_INCREMENT,
</span></span><span style="display:flex;"><span>    Name varchar(<span style="color:#ae81ff">50</span>) <span style="color:#66d9ef">NOT</span> <span style="color:#66d9ef">NULL</span>,
</span></span><span style="display:flex;"><span>    Category varchar(<span style="color:#ae81ff">50</span>) <span style="color:#66d9ef">NOT</span> <span style="color:#66d9ef">NULL</span>,
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">PRIMARY</span> <span style="color:#66d9ef">KEY</span> (PetID)
</span></span><span style="display:flex;"><span>);
</span></span></code></pre></div><pre><code> * mysql+pymysql://user:***@localhost/datab
0 rows affected.





[]
</code></pre>
<h2 id="how-to-add-an-entry">How to add an entry</h2>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-sql" data-lang="sql"><span style="display:flex;"><span><span style="color:#f92672">%%</span><span style="color:#66d9ef">sql</span> 
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">INSERT</span> <span style="color:#66d9ef">into</span> Pets(Name, Category) <span style="color:#66d9ef">values</span> (<span style="color:#e6db74">&#39;Luna&#39;</span>, <span style="color:#e6db74">&#39;Dog&#39;</span>);
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">INSERT</span> <span style="color:#66d9ef">into</span> Pets(Name, Category) <span style="color:#66d9ef">values</span> (<span style="color:#e6db74">&#39;Silvester&#39;</span>, <span style="color:#e6db74">&#39;Cat&#39;</span>);
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">INSERT</span> <span style="color:#66d9ef">into</span> Pets(Name, Category) <span style="color:#66d9ef">values</span> (<span style="color:#e6db74">&#39;Twetee&#39;</span>, <span style="color:#e6db74">&#39;Bird&#39;</span>);
</span></span></code></pre></div><pre><code> * mysql+pymysql://user:***@localhost/datab
1 rows affected.
1 rows affected.
1 rows affected.





[]
</code></pre>
<h2 id="how-to-read-data">How to read data</h2>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-sql" data-lang="sql"><span style="display:flex;"><span><span style="color:#f92672">%%</span><span style="color:#66d9ef">sql</span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">SELECT</span> <span style="color:#f92672">*</span> <span style="color:#66d9ef">FROM</span> Pets;
</span></span></code></pre></div><pre><code> * mysql+pymysql://user:***@localhost/datab
1 rows affected.
</code></pre>


<table>
    <tr>
        <th>PetID</th>
        <th>Name</th>
        <th>Category</th>
    </tr>
    <tr>
        <td>1</td>
        <td>Luna</td>
        <td>Dog</td>
    </tr>
</table>


<h2 id="how-to-delete-an-entry">How to delete an entry</h2>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-sql" data-lang="sql"><span style="display:flex;"><span><span style="color:#f92672">%%</span><span style="color:#66d9ef">sql</span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">DELETE</span> <span style="color:#66d9ef">FROM</span> Pets <span style="color:#66d9ef">WHERE</span> PetID<span style="color:#f92672">=</span><span style="color:#ae81ff">3</span>;
</span></span></code></pre></div><pre><code> * mysql+pymysql://user:***@localhost/datab
1 rows affected.





[]
</code></pre>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-sql" data-lang="sql"><span style="display:flex;"><span><span style="color:#f92672">%%</span><span style="color:#66d9ef">sql</span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">SELECT</span> <span style="color:#f92672">*</span> <span style="color:#66d9ef">FROM</span> Pets;
</span></span></code></pre></div><pre><code> * mysql+pymysql://user:***@localhost/datab
2 rows affected.
</code></pre>


<table>
    <tr>
        <th>PetID</th>
        <th>Name</th>
        <th>Category</th>
    </tr>
    <tr>
        <td>1</td>
        <td>Luna</td>
        <td>Dog</td>
    </tr>
    <tr>
        <td>2</td>
        <td>Silvester</td>
        <td>Cat</td>
    </tr>
</table>

<h2 id="how-to-delete-a-table">How to delete a table</h2>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-sql" data-lang="sql"><span style="display:flex;"><span><span style="color:#f92672">%%</span><span style="color:#66d9ef">sql</span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">SHOW</span> TABLES;
</span></span></code></pre></div><pre><code> * mysql+pymysql://user:***@localhost/datab
1 rows affected.
</code></pre>


<table>
    <tr>
        <th>Tables_in_datab</th>
    </tr>
    <tr>
        <td>Pets</td>
    </tr>
</table>

<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-sql" data-lang="sql"><span style="display:flex;"><span><span style="color:#f92672">%%</span><span style="color:#66d9ef">sql</span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">DROP</span> TABLES Pets;
</span></span></code></pre></div><pre><code> * mysql+pymysql://user:***@localhost/datab
0 rows affected.





[]
</code></pre>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-sql" data-lang="sql"><span style="display:flex;"><span><span style="color:#f92672">%%</span><span style="color:#66d9ef">sql</span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">SHOW</span> TABLES;
</span></span></code></pre></div><pre><code> * mysql+pymysql://user:***@localhost/datab
0 rows affected.
</code></pre>


<table>
    <tr>
        <th>Tables_in_datab</th>
    </tr>
</table>

<p>In this post we saw the basics operations of SQL, for more information you can go to <a href="https://www.sqltutorial.org/">SQLTutorial</a></p>
]]></content>
        </item>
        
        <item>
            <title>Databases MySQL: Installation</title>
            <link>https://blog.miguens.one/posts/2020/06/databases-mysql-installation/</link>
            <pubDate>Wed, 03 Jun 2020 00:00:00 +0000</pubDate>
            
            <guid>https://blog.miguens.one/posts/2020/06/databases-mysql-installation/</guid>
            <description>&lt;h1 id=&#34;introduction-to-databases-mysql&#34;&gt;Introduction to Databases: MySQL&lt;/h1&gt;
&lt;p&gt;During the following days I will write about databases SQL, how to install, debug and use them via Python and C++.&lt;/p&gt;
&lt;h2 id=&#34;installation&#34;&gt;Installation&lt;/h2&gt;
&lt;p&gt;To install a MySQL I will use Docker, as it is the most easiest way in my opinion to quickly deploy a test database.&lt;/p&gt;
&lt;p&gt;In a Jupyter Notebook, let&amp;rsquo;s run:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;!!&lt;/span&gt;docker run &lt;span style=&#34;color:#f92672&#34;&gt;--&lt;/span&gt;name mysql&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;test &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;e MYSQL_ROOT_PASSWORD&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;secret &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;d &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;p &lt;span style=&#34;color:#ae81ff&#34;&gt;3306&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;3306&lt;/span&gt; mysql
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;pre&gt;&lt;code&gt;[&#39;b2946635401f23ee223861da235cc309af878dd0305d03285673b39962ca1311&#39;]
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We can check that the database is running with &lt;code&gt;docker ps&lt;/code&gt;&lt;/p&gt;</description>
            <content type="html"><![CDATA[<h1 id="introduction-to-databases-mysql">Introduction to Databases: MySQL</h1>
<p>During the following days I will write about databases SQL, how to install, debug and use them via Python and C++.</p>
<h2 id="installation">Installation</h2>
<p>To install a MySQL I will use Docker, as it is the most easiest way in my opinion to quickly deploy a test database.</p>
<p>In a Jupyter Notebook, let&rsquo;s run:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010">!!</span>docker run <span style="color:#f92672">--</span>name mysql<span style="color:#f92672">-</span>test <span style="color:#f92672">-</span>e MYSQL_ROOT_PASSWORD<span style="color:#f92672">=</span>secret <span style="color:#f92672">-</span>d <span style="color:#f92672">-</span>p <span style="color:#ae81ff">3306</span>:<span style="color:#ae81ff">3306</span> mysql
</span></span></code></pre></div><pre><code>['b2946635401f23ee223861da235cc309af878dd0305d03285673b39962ca1311']
</code></pre>
<p>We can check that the database is running with <code>docker ps</code></p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010">!!</span>docker ps <span style="color:#f92672">|</span> grep mysql<span style="color:#f92672">-</span>test
</span></span></code></pre></div><pre><code>['b2946635401f        mysql                                    &quot;docker-entrypoint.s…&quot;   14 minutes ago      Up 14 minutes           0.0.0.0:3306-&gt;3306/tcp, 33060/tcp                                            mysql-test']
</code></pre>
<p>We can create an user using the root credentials (password <code>secret</code>). For that let&rsquo;s run in a terminal</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>luis@BARE:~/projects/How to use MySQL$ docker exec -it mysql-test mysql -u root -p 
</span></span><span style="display:flex;"><span>Enter password: 
</span></span><span style="display:flex;"><span>Welcome to the MySQL monitor.  Commands end with ; or <span style="color:#ae81ff">\g</span>.
</span></span><span style="display:flex;"><span>Your MySQL connection id is <span style="color:#ae81ff">10</span>
</span></span><span style="display:flex;"><span>Server version: 8.0.23 MySQL Community Server - GPL
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>Copyright <span style="color:#f92672">(</span>c<span style="color:#f92672">)</span> 2000, 2021, Oracle and/or its affiliates.
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>Oracle is a registered trademark of Oracle Corporation and/or its
</span></span><span style="display:flex;"><span>affiliates. Other names may be trademarks of their respective
</span></span><span style="display:flex;"><span>owners.
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>Type <span style="color:#e6db74">&#39;help;&#39;</span> or <span style="color:#e6db74">&#39;\h&#39;</span> <span style="color:#66d9ef">for</span> help. Type <span style="color:#e6db74">&#39;\c&#39;</span> to clear the current input statement.
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>mysql&gt; CREATE USER <span style="color:#e6db74">&#39;user&#39;</span>@<span style="color:#e6db74">&#39;localhost&#39;</span> IDENTIFIED BY <span style="color:#e6db74">&#39;password&#39;</span>;
</span></span><span style="display:flex;"><span>Query OK, <span style="color:#ae81ff">0</span> rows affected <span style="color:#f92672">(</span>0.33 sec<span style="color:#f92672">)</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>mysql&gt; GRANT ALL PRIVILEGES ON * . * TO <span style="color:#e6db74">&#39;user&#39;</span>@<span style="color:#e6db74">&#39;localhost&#39;</span>;
</span></span><span style="display:flex;"><span>Query OK, <span style="color:#ae81ff">0</span> rows affected, <span style="color:#ae81ff">1</span> warning <span style="color:#f92672">(</span>0.05 sec<span style="color:#f92672">)</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>mysql&gt; exit
</span></span><span style="display:flex;"><span>Bye
</span></span><span style="display:flex;"><span>luis@BARE:~/projects/How to use MySQL$ 
</span></span></code></pre></div><p>We can reconnect (in a terminal) to our database and create a database, for that we run:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>luis@BARE:~/projects/How to use MySQL$ docker exec -it mysql-test mysql -u user -p 
</span></span><span style="display:flex;"><span>Enter password: 
</span></span><span style="display:flex;"><span>Welcome to the MySQL monitor.  Commands end with ; or <span style="color:#ae81ff">\g</span>.
</span></span><span style="display:flex;"><span>Your MySQL connection id is <span style="color:#ae81ff">11</span>
</span></span><span style="display:flex;"><span>Server version: 8.0.23 MySQL Community Server - GPL
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>Copyright <span style="color:#f92672">(</span>c<span style="color:#f92672">)</span> 2000, 2021, Oracle and/or its affiliates.
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>Oracle is a registered trademark of Oracle Corporation and/or its
</span></span><span style="display:flex;"><span>affiliates. Other names may be trademarks of their respective
</span></span><span style="display:flex;"><span>owners.
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>Type <span style="color:#e6db74">&#39;help;&#39;</span> or <span style="color:#e6db74">&#39;\h&#39;</span> <span style="color:#66d9ef">for</span> help. Type <span style="color:#e6db74">&#39;\c&#39;</span> to clear the current input statement.
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>mysql&gt; CREATE DATABASE datab;
</span></span><span style="display:flex;"><span>Query OK, <span style="color:#ae81ff">1</span> row affected <span style="color:#f92672">(</span>0.02 sec<span style="color:#f92672">)</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>mysql&gt; exit
</span></span><span style="display:flex;"><span>Bye
</span></span><span style="display:flex;"><span>luis@BARE:~/projects/How to use MySQL$ 
</span></span></code></pre></div><p>Now we can configure our Jupyter Notebook to connect to the database and execute SQL commands, for that we need to install the SQL extension for iPython</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010">!</span>pip3 install ipython<span style="color:#f92672">-</span>sql sqlalchemy
</span></span></code></pre></div><pre><code>Requirement already satisfied: ipython-sql in /home/luis/.local/lib/python3.8/site-packages (0.4.0)
Requirement already satisfied: sqlalchemy in /home/luis/.local/lib/python3.8/site-packages (1.3.20)
Requirement already satisfied: sqlparse in /home/luis/.local/lib/python3.8/site-packages (from ipython-sql) (0.4.1)
Requirement already satisfied: ipython-genutils&gt;=0.1.0 in /home/luis/.local/lib/python3.8/site-packages (from ipython-sql) (0.2.0)
Requirement already satisfied: six in /usr/lib/python3/dist-packages (from ipython-sql) (1.14.0)
Requirement already satisfied: ipython&gt;=1.0 in /home/luis/.local/lib/python3.8/site-packages (from ipython-sql) (7.18.1)
Requirement already satisfied: prettytable&lt;1 in /home/luis/.local/lib/python3.8/site-packages (from ipython-sql) (0.7.2)
Requirement already satisfied: jedi&gt;=0.10 in /home/luis/.local/lib/python3.8/site-packages (from ipython&gt;=1.0-&gt;ipython-sql) (0.17.2)
Requirement already satisfied: backcall in /home/luis/.local/lib/python3.8/site-packages (from ipython&gt;=1.0-&gt;ipython-sql) (0.2.0)
Requirement already satisfied: prompt-toolkit!=3.0.0,!=3.0.1,&lt;3.1.0,&gt;=2.0.0 in /home/luis/.local/lib/python3.8/site-packages (from ipython&gt;=1.0-&gt;ipython-sql) (3.0.8)
Requirement already satisfied: traitlets&gt;=4.2 in /home/luis/.local/lib/python3.8/site-packages (from ipython&gt;=1.0-&gt;ipython-sql) (5.0.5)
Requirement already satisfied: setuptools&gt;=18.5 in /usr/lib/python3/dist-packages (from ipython&gt;=1.0-&gt;ipython-sql) (45.2.0)
Requirement already satisfied: decorator in /home/luis/.local/lib/python3.8/site-packages (from ipython&gt;=1.0-&gt;ipython-sql) (4.4.2)
Requirement already satisfied: pickleshare in /home/luis/.local/lib/python3.8/site-packages (from ipython&gt;=1.0-&gt;ipython-sql) (0.7.5)
Requirement already satisfied: pygments in /home/luis/.local/lib/python3.8/site-packages (from ipython&gt;=1.0-&gt;ipython-sql) (2.7.1)
Requirement already satisfied: pexpect&gt;4.3; sys_platform != &quot;win32&quot; in /home/luis/.local/lib/python3.8/site-packages (from ipython&gt;=1.0-&gt;ipython-sql) (4.8.0)
Requirement already satisfied: parso&lt;0.8.0,&gt;=0.7.0 in /home/luis/.local/lib/python3.8/site-packages (from jedi&gt;=0.10-&gt;ipython&gt;=1.0-&gt;ipython-sql) (0.7.1)
Requirement already satisfied: wcwidth in /home/luis/.local/lib/python3.8/site-packages (from prompt-toolkit!=3.0.0,!=3.0.1,&lt;3.1.0,&gt;=2.0.0-&gt;ipython&gt;=1.0-&gt;ipython-sql) (0.2.5)
Requirement already satisfied: ptyprocess&gt;=0.5 in /home/luis/.local/lib/python3.8/site-packages (from pexpect&gt;4.3; sys_platform != &quot;win32&quot;-&gt;ipython&gt;=1.0-&gt;ipython-sql) (0.6.0)
</code></pre>
<p>And finally let&rsquo;s load the extension</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#f92672">%</span>reload_ext sql
</span></span></code></pre></div><p>Before we can connect to our database, we need to install the mysql driver</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010">!</span>pip3 install pymysql mysql<span style="color:#f92672">-</span>connector
</span></span></code></pre></div><pre><code>Requirement already satisfied: pymysql in /home/luis/.local/lib/python3.8/site-packages (1.0.2)
Requirement already satisfied: mysql-connector in /home/luis/.local/lib/python3.8/site-packages (2.2.9)
</code></pre>
<p>Now we can connect to our database in our localhost</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#f92672">%</span>sql mysql<span style="color:#f92672">+</span>pymysql:<span style="color:#f92672">//</span>user:password<span style="color:#a6e22e">@localhost</span><span style="color:#f92672">/</span>datab
</span></span></code></pre></div><p>If everything went OK, no output is produced with the above command</p>
<p>In the next post, we will create a table and explore how to add, read and delete entries in our database</p>
]]></content>
        </item>
        
        <item>
            <title>The Efficient Market Hypothesis in the real world</title>
            <link>https://blog.miguens.one/posts/2020/02/the-efficient-market-hypothesis-in-the-real-world/</link>
            <pubDate>Tue, 04 Feb 2020 00:00:00 +0000</pubDate>
            
            <guid>https://blog.miguens.one/posts/2020/02/the-efficient-market-hypothesis-in-the-real-world/</guid>
            <description>&lt;h2 id=&#34;higher-trading-profits-when-company-directors-trade-shares&#34;&gt;Higher trading profits when company directors trade shares&lt;/h2&gt;
&lt;p&gt;This empirically-backed statement represents a violation of the strong-form efficient market hypothesis. Due to their privileged position and continuous engagement with the issuer, insiders have great access to information. This gives them a trading advantage and they outperform the risk-adjusted benchmark and other traders in the market. Please note that, in principle, insiders are allowed to trade legally. It is only in a situation when they are in possession of material non-public information that they have to refrain from trading. Strong-form EMH states that even undisclosed information should be already discounted in stock prices. If this was true, insiders would be unable to generate abnormal trading profits.&lt;/p&gt;</description>
            <content type="html"><![CDATA[<h2 id="higher-trading-profits-when-company-directors-trade-shares">Higher trading profits when company directors trade shares</h2>
<p>This empirically-backed statement represents a violation of the strong-form efficient market hypothesis. Due to their privileged position and continuous engagement with the issuer, insiders have great access to information. This gives them a trading advantage and they outperform the risk-adjusted benchmark and other traders in the market. Please note that, in principle, insiders are allowed to trade legally. It is only in a situation when they are in possession of material non-public information that they have to refrain from trading. Strong-form EMH states that even undisclosed information should be already discounted in stock prices. If this was true, insiders would be unable to generate abnormal trading profits.</p>
<h2 id="research-showing-stock-returns-higher-in-sunny-days">Research showing stock returns higher in sunny days</h2>
<p>This would be a violation of the semi-strong EMH. Firstly, if we can predict weather and weather correlates with stock returns, making large trading profits would become very easy. Weather forecasts are part of the publicly available information. With the notable exception of electricity companies and farmers, weather should not be considered an economic fundamental. If the effect is observable in a broadly diversified stock market index, it indicates that people trade on irrelevant information. Their decisions seem to be driven by mood rather than logic. In fact, such observation supports the notion of behavioural finance.</p>
<h2 id="stock-returns-lower-on-mondays-because-bad-news-usually-communicated-in-weekends">Stock returns lower on Mondays because bad news usually communicated in weekends</h2>
<p>Any calendar anomaly represents a challenge to the semi-strong form EMH. It is no secret what day of the week it is – this is part of the publicly available information set. Technically, to exploit this anomaly, trades could sell their stocks on Friday close and repurchase them back on Monday close. This strategy, however, is problematic as transaction costs are likely to exceed the size of the anomaly. So, while a violation is observed from a statistical perspective, its practical ramifications are limited.</p>
<h2 id="information-of-earnings-announcements-is-fully-reflected-in-stocks-in-a-matter-of-minutes">Information of earnings announcements is fully reflected in stocks in a matter of minutes</h2>
<p>There is no violation of EMH in this case. This is exactly what one would expect in a case where traders are rational, and markets work smoothly. Information is impounded into stock prices in an expedient and accurate manner.</p>
]]></content>
        </item>
        
        <item>
            <title>Differences between the efficient market hypothesis and the behavioural finance approach</title>
            <link>https://blog.miguens.one/posts/2020/02/differences-between-the-efficient-market-hypothesis-and-the-behavioural-finance-approach/</link>
            <pubDate>Mon, 03 Feb 2020 00:00:00 +0000</pubDate>
            
            <guid>https://blog.miguens.one/posts/2020/02/differences-between-the-efficient-market-hypothesis-and-the-behavioural-finance-approach/</guid>
            <description>&lt;p&gt;The most substantial criticism of the EMH relies upon the assumption that all the investors are rational profit maximisers, and therefore, their investment is reasonable as well. Observations have shown that several investors are affected by herd instinct, a tendency to &amp;ldquo;churn&amp;rdquo; portfolios, to under-react or over-react to news and asymmetrical judgments about the causes of previous profits and losses.
With the concerns described above, a new theory was proposed based on psychology studies. The behavioural finance approach tries to find and explain the reason behind investors&amp;rsquo; behaviour, rather than assume their rationality like the EMH. In the behavioural approach, it is suggested that the investors could be prone to commit mistakes and errors originated by emotional and psychological forces and causing market anomalies (inefficiency in stocks markets) – e.g. the dot com bubble or the reactions seen in the recent global financial crisis.&lt;/p&gt;</description>
            <content type="html"><![CDATA[<p>The most substantial criticism of the EMH relies upon the assumption that all the investors are rational profit maximisers, and therefore, their investment is reasonable as well. Observations have shown that several investors are affected by herd instinct, a tendency to &ldquo;churn&rdquo; portfolios, to under-react or over-react to news and asymmetrical judgments about the causes of previous profits and losses.
With the concerns described above, a new theory was proposed based on psychology studies. The behavioural finance approach tries to find and explain the reason behind investors&rsquo; behaviour, rather than assume their rationality like the EMH. In the behavioural approach, it is suggested that the investors could be prone to commit mistakes and errors originated by emotional and psychological forces and causing market anomalies (inefficiency in stocks markets) – e.g. the dot com bubble or the reactions seen in the recent global financial crisis.</p>
]]></content>
        </item>
        
        <item>
            <title>The Efficient market hypothesis</title>
            <link>https://blog.miguens.one/posts/2020/02/the-efficient-market-hypothesis/</link>
            <pubDate>Sun, 02 Feb 2020 00:00:00 +0000</pubDate>
            
            <guid>https://blog.miguens.one/posts/2020/02/the-efficient-market-hypothesis/</guid>
            <description>&lt;h1 id=&#34;the-efficient-market-hypothesis&#34;&gt;The Efficient market hypothesis&lt;/h1&gt;
&lt;p&gt;The efficient market hypothesis (EMH) goes back to 1900, but its popularity is attributed to Roberts (1967) and Fama (1970).&lt;/p&gt;
&lt;p&gt;The hypothesis defined the efficient market as a place where many rational individuals compete to maximise profit. In this market, all current and essential information is available free to all participants, while at the same time, there are no transaction costs.&lt;/p&gt;
&lt;p&gt;The state of competition of intelligent participants leads to the situation where, at any point in time, the price of the stock reflects all past information, as well as any predictions of the future.
Fama (1970) identified three levels of efficiency of the market: the strong form, the semi-strong form and finally, the weak form of the EMH.&lt;/p&gt;</description>
            <content type="html"><![CDATA[<h1 id="the-efficient-market-hypothesis">The Efficient market hypothesis</h1>
<p>The efficient market hypothesis (EMH) goes back to 1900, but its popularity is attributed to Roberts (1967) and Fama (1970).</p>
<p>The hypothesis defined the efficient market as a place where many rational individuals compete to maximise profit. In this market, all current and essential information is available free to all participants, while at the same time, there are no transaction costs.</p>
<p>The state of competition of intelligent participants leads to the situation where, at any point in time, the price of the stock reflects all past information, as well as any predictions of the future.
Fama (1970) identified three levels of efficiency of the market: the strong form, the semi-strong form and finally, the weak form of the EMH.</p>
<h2 id="strong-form-emh">Strong-form EMH</h2>
<p>This form theorises that all the information relevant to the value of a share, regardless of the availability to potential investors, is always reflected promptly in the market price. This form is difficult to demonstrate, as the research lacks the cooperation of the insider dealers (members of the financial community and the executive board, with information not available to all investors).</p>
<h2 id="semi-strong-form-emh">Semi-strong-form EMH</h2>
<p>This form restricts the efficient market as the case where all the relevant public information is quickly reflected in the market price. The problem of this hypothesis is the identification of what constitutes the relevant public information.</p>
<h2 id="weak-form-emh">Weak-form EMH</h2>
<p>It is the least rigorous form of the EMH. In this form, the relevant public information considered is only the historical data about the share itself. The author argues that new information should be unrelated to previous knowledge to be defined as new. Therefore, the share price movement due to new information cannot be predicted from old data, and the price is characterised as a “random walk”.</p>
]]></content>
        </item>
        
        <item>
            <title>Alignment of managers’ actions and shareholders’ interests</title>
            <link>https://blog.miguens.one/posts/2020/01/alignment-of-managers-actions-and-shareholders-interests/</link>
            <pubDate>Mon, 06 Jan 2020 00:00:00 +0000</pubDate>
            
            <guid>https://blog.miguens.one/posts/2020/01/alignment-of-managers-actions-and-shareholders-interests/</guid>
            <description>&lt;p&gt;Although there is no miraculous panacea, there are three main tools for dealing with the agency problem:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Increasing disclosure requirements reduces the informational asymmetry between the agent and the principal, limiting managers&amp;rsquo; ability to prioritise their own selfish goals.&lt;/li&gt;
&lt;li&gt;Creating a close relationship between company performance and directors&amp;rsquo; remuneration. Their compensation package could be a function of the profits generated. Alternatively, directors could receive part of their compensation in stocks or call options, which would align their incentives with the shareholders&amp;rsquo; objectives.&lt;/li&gt;
&lt;li&gt;The introduction of corporate governance rules could, to some extent, force directors to act in the best interest of the company.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The area of corporate governance is defined as the rules that govern how the directors interact with each other inside the company for effective management and handle the directors&amp;rsquo; interactions with the shareholders&amp;rsquo; desired direction.&lt;/p&gt;</description>
            <content type="html"><![CDATA[<p>Although there is no miraculous panacea, there are three main tools for dealing with the agency problem:</p>
<ul>
<li>Increasing disclosure requirements reduces the informational asymmetry between the agent and the principal, limiting managers&rsquo; ability to prioritise their own selfish goals.</li>
<li>Creating a close relationship between company performance and directors&rsquo; remuneration. Their compensation package could be a function of the profits generated. Alternatively, directors could receive part of their compensation in stocks or call options, which would align their incentives with the shareholders&rsquo; objectives.</li>
<li>The introduction of corporate governance rules could, to some extent, force directors to act in the best interest of the company.</li>
</ul>
<p>The area of corporate governance is defined as the rules that govern how the directors interact with each other inside the company for effective management and handle the directors&rsquo; interactions with the shareholders&rsquo; desired direction.</p>
<p>The components of corporate governance include:</p>
<ul>
<li>The directors&rsquo; remuneration.</li>
<li>The accountability of the executive directors&rsquo; decisions.</li>
<li>The role of the non-executive directors as a check to the executive directors&rsquo; power.</li>
<li>The representation of small investors interest perceived as powerless.</li>
</ul>
<p>Even though corporate governance allows to align the manager and shareholders&rsquo; interests, some criticism has been raised, proposing to evaluate the directors&rsquo; performance based on metrics comparable with peer companies or accounting measures such as share earnings or the return on equity.</p>
]]></content>
        </item>
        
        <item>
            <title>Conflict of interest: Shareholders vs Managers</title>
            <link>https://blog.miguens.one/posts/2020/01/conflict-of-interest-shareholders-vs-managers/</link>
            <pubDate>Sun, 05 Jan 2020 00:00:00 +0000</pubDate>
            
            <guid>https://blog.miguens.one/posts/2020/01/conflict-of-interest-shareholders-vs-managers/</guid>
            <description>&lt;p&gt;Some stakeholders interest is not exclusively monetary. An example of such is &lt;a href=&#34;https://policy-practice.oxfam.org/resources/partnerships-in-fair-trade-reflections-from-a-case-study-of-cafe-direct-130427/&#34;&gt;Oxfam and Cafe Direct&amp;rsquo;s&lt;/a&gt; initial pursuit of promoting the Fairtrade brand.&lt;/p&gt;
&lt;p&gt;The above is not very common, and the working assumption is that the shareholders&amp;rsquo; objective is to maximise the wealth via the capital increase of the shares or the dividends. On the other hand, we should hypothesise that managers are more interested in their wealth and work security with the minimum effort possible.&lt;/p&gt;</description>
            <content type="html"><![CDATA[<p>Some stakeholders interest is not exclusively monetary. An example of such is <a href="https://policy-practice.oxfam.org/resources/partnerships-in-fair-trade-reflections-from-a-case-study-of-cafe-direct-130427/">Oxfam and Cafe Direct&rsquo;s</a> initial pursuit of promoting the Fairtrade brand.</p>
<p>The above is not very common, and the working assumption is that the shareholders&rsquo; objective is to maximise the wealth via the capital increase of the shares or the dividends. On the other hand, we should hypothesise that managers are more interested in their wealth and work security with the minimum effort possible.</p>
<p>This problem is studied by the &ldquo;agency theory&rdquo;, developed by Jensen and Meckling (1976). The theory established that the stakeholders&rsquo; relationship, called the principals, and the managers, defined as the agents, is done via a contract. This contract delegates some decision-making authority from the principals to the agents to perform services on behalf of the former.</p>
<p>The agency theory serves as a framework to determine a contract between the principals and agents optimally. It assumes that both parties, the principal and the agents, are individuals in a relationship searching for their own perceived self-interest.</p>
<p>Two common problems in establishing this contract are the asymmetry of information and the inherent uncertainty of the decision processes. The information asymmetry relies on that the information available to the principals and the agents is not the same. The uncertainty consists that the principal is not aware of the agents&rsquo; information to base the decisions. The principals do not know the degree to which a situation&rsquo;s activity outcomes are determined by the agents&rsquo; decisions or out of the agents&rsquo; control.</p>
<p>The agency theory identifies the problems described above are the reason for two issues: adverse selection and moral hazard.</p>
<p>The adverse selection problem consists of when the agents do not longer make the best decision based on their knowledge but rather what the agents consider to be the best decision in the principal&rsquo;s eyes.</p>
<p>The second problem is the moral hazards that describe the agents acting in their best interest, regardless of the principal&rsquo;s optimal benefit, when they know that the principal cannot monitor the actions.</p>
]]></content>
        </item>
        
        <item>
            <title>Core challenges of operations in a small aerospace software firm</title>
            <link>https://blog.miguens.one/posts/2019/09/core-challenges-of-operations-in-a-small-aerospace-software-firm/</link>
            <pubDate>Wed, 04 Sep 2019 00:00:00 +0000</pubDate>
            
            <guid>https://blog.miguens.one/posts/2019/09/core-challenges-of-operations-in-a-small-aerospace-software-firm/</guid>
            <description>&lt;h2 id=&#34;summary-of-the-core-challenges&#34;&gt;Summary of the core challenges&lt;/h2&gt;
&lt;p&gt;In order to analyse the areas that need more urgent action in operations, we will apply the concepts of market-qualifiers and order-winners from Hill 2005 and introduced by  (The Open University, 2012). Afterwards, we will analyse the limitations of growing operations or scalability&lt;/p&gt;
&lt;h3 id=&#34;qualifiers&#34;&gt;Qualifiers&lt;/h3&gt;
&lt;p&gt;It is defined as &amp;rsquo;entitle it to be considered by a customer&amp;rsquo;; in other words, the minimum threshold to be accepted by a customer. The organisation currently meets some of these criteria demanded by the public tenders, such as the curriculum of the staff, competence and geographical location. An element that disqualifies the organisation is the speed of delivery, and therefore a limitation in the future of the company&lt;/p&gt;</description>
            <content type="html"><![CDATA[<h2 id="summary-of-the-core-challenges">Summary of the core challenges</h2>
<p>In order to analyse the areas that need more urgent action in operations, we will apply the concepts of market-qualifiers and order-winners from Hill 2005 and introduced by  (The Open University, 2012). Afterwards, we will analyse the limitations of growing operations or scalability</p>
<h3 id="qualifiers">Qualifiers</h3>
<p>It is defined as &rsquo;entitle it to be considered by a customer&rsquo;; in other words, the minimum threshold to be accepted by a customer. The organisation currently meets some of these criteria demanded by the public tenders, such as the curriculum of the staff, competence and geographical location. An element that disqualifies the organisation is the speed of delivery, and therefore a limitation in the future of the company</p>
<h3 id="winners">Winners</h3>
<p>The order-winners are the elements that are a decisive factor in the final decision to gain a customer. As a difference from the qualifiers, the level cannot be defined as a yes or no answer, but rather as a continuum scale. In this category, we can find the dependability of the organisation and the cost. As discussed previously, the price-per-hour is in the lower end of the average of the Dutch market, and therefore not a critical point for improvement. On the other hand, dependability has been an issue lately, caused mostly for the low speed of operations, the increased turnover of the personnel of the organisation and the difficulty to recruit and train new members.</p>
<h3 id="scalability">Scalability</h3>
<p>Last, we must address the scalability to improve revenue developing more projects. The main limitation to apply this solution is the lack of enough senior staff. All the senior members of the organisation are currently directly involved in several projects and already working overtime; therefore, no more projects can be accepted by the organisation.</p>
<h2 id="the-main-issue-and-key-improvement">The main issue and key improvement</h2>
<p>We can make parallelism linking the course materials ideas about how a wrong layout is a waste of time and money  (The Open University, 2012). In our case, the problem resides in the digital world rather than in the physical, and we can discuss that is the wrong workflow or &lsquo;digital layout&rsquo; the source of our waste. This issue was also identified by The Toyota Production System (Slack et al. 2007) as process waste.</p>
<p>In the current production process, we can identify direct process technology as those that are required to develop software solutions. In this category, we can place the compilers and integrated development editors (IDE). We can also identify indirect process technologies, as those that contribute to everyday operations. In this category, we can place the issue tracking software and testing framework.</p>
<p>The lack of homogenisation in both, direct and indirect process technologies is one of the factors of low performance of newcomers and the difficulty of moving resources between projects as needed, as the time is wasted to familiarise the newcomers with the technologies used in each project.</p>
<p>The current transformation process is very linear, with little reusability of both components and supporting software tools. Figure 1 provides an example of a typical operation.</p>
<p><img src="#ZgotmplZ" alt=""></p>
<p><em>Figure 1 Current production process</em></p>
<p>The process starts with the design of the software based on the requirements of the customer. This step will identify submodules that should be developed to meet those demands. Figure 1 identifies several components needed, which are called: A, B and C. The production of the modules is carried linearly due to the lack of enough staff that prevent parallelism of such tasks, and even in occasions is not uncommon for a delay in the start of a new component for the same reason.</p>
<p>I think that a migration from the workflow of Figure 1 to Figure 2 will result in increased speed and affecting the dependability positively.</p>
<p><img src="#ZgotmplZ" alt=""></p>
<p><em>Figure 2 Proposed production process</em></p>
<p>In the new system, the senior staff will be in charge of two steps: (1) identifying and improve core utilities that will be part of the catalogue for future projects and (2) the monitoring of the integration step. The proposed system will improve the speed, reducing the developing time of the standard blocks, while increasing the parallelism of the system.</p>
<p>We can expand saying that the scalability will improve, mainly for two reasons: (1) the reduction of the workload of the senior staff and (2) the reduced induction period achieved after the homogenisation of the direct and indirect process technologies.</p>
<p>We should mention that the new system could affect the current flexibility negatively, and the team should be aware of this, providing ways to customise the core elements and not incurring in the development of rigid solutions.</p>
<p>Last, the proposed model of moving from a 100% custom-made solutions to reuse of core components and personalisation have shown its effectiveness in corporations of software development in the field of telecommunications in Finland (Mathiassen and Vainio, 2007)</p>
<h2 id="strategy-for-implementation-of-the-proposed-improvement">Strategy for implementation of the proposed improvement</h2>
<p>The implementation of the reusability of the software components, by its nature, is a gradual or continuous process. The senior staff should monitor existing projects and well as new developments to try to migrate the most common use functionality into separate packages. The reason behind is that the people working with operations know more about the processes than anyone else.</p>
<p>Nonetheless, this change will introduce new internal mechanisms in the organisation, especially the concepts of internal customers and internal suppliers, depending on the point of view: a developer in the core team or a system integrator respectively.</p>
<p>A second challenge is to switch the monitoring activities of the financial department, with a strong project-view presently. We proposed a separate budget that should be prepared for the core team to develop and incrementally update the tools, the funds for the core team should come from the projects, as internal purchases of software blocks.</p>
<p>A different approach to implementation can be taken to regards direct and indirect technologies. It is the opinion of the author than a radical change will be best suited. If new tools are inserted in the company without the migration of old tools into the new ones, people will see the new products as one more of the collection. At the same time, migration of all existing issue tracking tools into the new selected issue tracking is needed if we plan to improve operations significantly, as an incremental approach will only add complexity to the existing &lsquo;mess&rsquo; in operations with multiple tracking software.</p>
<p>Last, both improvements should be executed and therefore time and budget should be made available to senior staff, even at the cost of decreasing production for a short period. The alternative of waiting for idle time to implement the changes incurs in the risk of degrading the speed and dependability (which are qualifiers and winners respectively) to a level in which customers will be lost.</p>
<p><img src="#ZgotmplZ" alt=""></p>
<p><em>Working smart versus working harder (Himanshu, 2018)</em></p>
<h2 id="references">References</h2>
<ul>
<li>Copernicus ECMWF and Euronews (2017) Euronews and Copernicus to provide an exclusive daily 24-hour air quality forecast and a monthly climate update | Copernicus [Online]. Available at <a href="https://climate.copernicus.eu/euronews-and-copernicus-provide-exclusive-daily-24-hour-air-quality-forecast-and-monthly-climate">https://climate.copernicus.eu/euronews-and-copernicus-provide-exclusive-daily-24-hour-air-quality-forecast-and-monthly-climate</a> (Accessed 11 July 2019).</li>
<li>ESA (2019) ESA [Online]. Available at <a href="https://www.esa.int/ESA">https://www.esa.int/ESA</a> (Accessed 11 July 2019).</li>
<li>EUMETSAT (2019) Welcome to EUMETSAT [Online]. Available at <a href="https://www.eumetsat.int/website/home/index.html">https://www.eumetsat.int/website/home/index.html</a> (Accessed 11 July 2019).</li>
<li>Hetzner (2018) Dedicated Root Server, VPS &amp; Hosting - Hetzner Online GmbH [Online]. DOI: 10.1016/S0360-3016(98)00284-3 (Accessed 6 August 2019).</li>
<li>Himanshu, J. (2018) Do you work smart or hard? [Online]. Available at <a href="https://medium.com/@Himanshu00F/do-you-work-smart-or-hard-ad1fe04748b2">https://medium.com/@Himanshu00F/do-you-work-smart-or-hard-ad1fe04748b2</a> (Accessed 6 August 2019).</li>
<li>Mathiassen, L. and Vainio, A. M. (2007) &lsquo;Dynamic capabilities in small software firms: A sense-and-respond approach&rsquo;, IEEE Transactions on Engineering Management, vol. 54, no. 3, pp. 522&ndash;538 [Online]. DOI: 10.1109/TEM.2007.900782 (Accessed 16 May 2018).</li>
<li>The Open University (2011) Managing Marketing - Book 4, Milton Keynes.</li>
<li>The Open University (2012) Managing operations, The Open University (ed), Milton Keynes, The Open University.</li>
<li>The Open University (2015) Managing financial resources and performance, The Open University (ed), The Open University, Fourth edi., Milton Keynes, The Open University.</li>
</ul>
]]></content>
        </item>
        
        <item>
            <title>Messages between applications: MQTT and C</title>
            <link>https://blog.miguens.one/posts/2019/08/messages-between-applications-mqtt-and-c/</link>
            <pubDate>Sun, 04 Aug 2019 00:00:00 +0000</pubDate>
            
            <guid>https://blog.miguens.one/posts/2019/08/messages-between-applications-mqtt-and-c/</guid>
            <description>&lt;h2 id=&#34;installation&#34;&gt;Installation&lt;/h2&gt;
&lt;p&gt;To make use of MQTT in C, we need to install a library to communicate with the server. A populat choice is &lt;a href=&#34;https://www.eclipse.org/paho/&#34;&gt;Paho&lt;/a&gt; from Eclipse.&lt;/p&gt;
&lt;p&gt;We need to follow the next steps to install it:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;git clone https://github.com/eclipse/paho.mqtt.c.git
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;cd paho.mqtt.c
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;make
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;sudo make install
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Depending on your system, you might need to install the development package of OpenSSL (openssl-dev)&lt;/p&gt;
&lt;h2 id=&#34;writing-the-test-program&#34;&gt;Writing the test program&lt;/h2&gt;
&lt;p&gt;We need to create two files, &lt;code&gt;send.c&lt;/code&gt; and &lt;code&gt;receive.c&lt;/code&gt;. Both files are based upon the official examples of Paho&lt;/p&gt;</description>
            <content type="html"><![CDATA[<h2 id="installation">Installation</h2>
<p>To make use of MQTT in C, we need to install a library to communicate with the server. A populat choice is <a href="https://www.eclipse.org/paho/">Paho</a> from Eclipse.</p>
<p>We need to follow the next steps to install it:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>git clone https://github.com/eclipse/paho.mqtt.c.git
</span></span><span style="display:flex;"><span>cd paho.mqtt.c
</span></span><span style="display:flex;"><span>make
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>sudo make install
</span></span></code></pre></div><p>Depending on your system, you might need to install the development package of OpenSSL (openssl-dev)</p>
<h2 id="writing-the-test-program">Writing the test program</h2>
<p>We need to create two files, <code>send.c</code> and <code>receive.c</code>. Both files are based upon the official examples of Paho</p>
<h3 id="sendc">SEND.C</h3>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-c" data-lang="c"><span style="display:flex;"><span><span style="color:#75715e">#include</span> <span style="color:#75715e">&#34;stdio.h&#34;</span><span style="color:#75715e">
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">#include</span> <span style="color:#75715e">&#34;stdlib.h&#34;</span><span style="color:#75715e">
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">#include</span> <span style="color:#75715e">&#34;string.h&#34;</span><span style="color:#75715e">
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">#include</span> <span style="color:#75715e">&#34;MQTTClient.h&#34;</span><span style="color:#75715e">
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#define ADDRESS     &#34;tcp:</span><span style="color:#75715e">//localhost:1883&#34;
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span><span style="color:#75715e">#define CLIENTID    &#34;ExampleClientPub&#34;
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">#define TOPIC       &#34;MQTT Examples&#34;
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">#define PAYLOAD     &#34;Hello World!&#34;
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">#define QOS         1
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">#define TIMEOUT     10000L
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">int</span> <span style="color:#a6e22e">main</span>(<span style="color:#66d9ef">int</span> argc, <span style="color:#66d9ef">char</span><span style="color:#f92672">*</span> argv[])
</span></span><span style="display:flex;"><span>{
</span></span><span style="display:flex;"><span>    MQTTClient client;
</span></span><span style="display:flex;"><span>    MQTTClient_connectOptions conn_opts <span style="color:#f92672">=</span> MQTTClient_connectOptions_initializer;
</span></span><span style="display:flex;"><span>    MQTTClient_message pubmsg <span style="color:#f92672">=</span> MQTTClient_message_initializer;
</span></span><span style="display:flex;"><span>    MQTTClient_deliveryToken token;
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">int</span> rc;
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">MQTTClient_create</span>(<span style="color:#f92672">&amp;</span>client, ADDRESS, CLIENTID,
</span></span><span style="display:flex;"><span>        MQTTCLIENT_PERSISTENCE_NONE, NULL);
</span></span><span style="display:flex;"><span>    conn_opts.keepAliveInterval <span style="color:#f92672">=</span> <span style="color:#ae81ff">20</span>;
</span></span><span style="display:flex;"><span>    conn_opts.cleansession <span style="color:#f92672">=</span> <span style="color:#ae81ff">1</span>;
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">if</span> ((rc <span style="color:#f92672">=</span> <span style="color:#a6e22e">MQTTClient_connect</span>(client, <span style="color:#f92672">&amp;</span>conn_opts)) <span style="color:#f92672">!=</span> MQTTCLIENT_SUCCESS)
</span></span><span style="display:flex;"><span>    {
</span></span><span style="display:flex;"><span>        <span style="color:#a6e22e">printf</span>(<span style="color:#e6db74">&#34;Failed to connect, return code %d</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">&#34;</span>, rc);
</span></span><span style="display:flex;"><span>        <span style="color:#a6e22e">exit</span>(<span style="color:#f92672">-</span><span style="color:#ae81ff">1</span>);
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>    pubmsg.payload <span style="color:#f92672">=</span> PAYLOAD;
</span></span><span style="display:flex;"><span>    pubmsg.payloadlen <span style="color:#f92672">=</span> <span style="color:#a6e22e">strlen</span>(PAYLOAD);
</span></span><span style="display:flex;"><span>    pubmsg.qos <span style="color:#f92672">=</span> QOS;
</span></span><span style="display:flex;"><span>    pubmsg.retained <span style="color:#f92672">=</span> <span style="color:#ae81ff">1</span>;
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">MQTTClient_publishMessage</span>(client, TOPIC, <span style="color:#f92672">&amp;</span>pubmsg, <span style="color:#f92672">&amp;</span>token);
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">printf</span>(<span style="color:#e6db74">&#34;Waiting for up to %d seconds for publication of %s</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">&#34;</span>
</span></span><span style="display:flex;"><span>            <span style="color:#e6db74">&#34;on topic %s for client with ClientID: %s</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">&#34;</span>,
</span></span><span style="display:flex;"><span>            (<span style="color:#66d9ef">int</span>)(TIMEOUT<span style="color:#f92672">/</span><span style="color:#ae81ff">1000</span>), PAYLOAD, TOPIC, CLIENTID);
</span></span><span style="display:flex;"><span>    rc <span style="color:#f92672">=</span> <span style="color:#a6e22e">MQTTClient_waitForCompletion</span>(client, token, TIMEOUT);
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">printf</span>(<span style="color:#e6db74">&#34;Message with delivery token %d delivered</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">&#34;</span>, token);
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">MQTTClient_disconnect</span>(client, <span style="color:#ae81ff">10000</span>);
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">MQTTClient_destroy</span>(<span style="color:#f92672">&amp;</span>client);
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">return</span> rc;
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><h3 id="receivec">RECEIVE.C</h3>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-c" data-lang="c"><span style="display:flex;"><span><span style="color:#75715e">#include</span> <span style="color:#75715e">&lt;stdio.h&gt;</span><span style="color:#75715e">
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">#include</span> <span style="color:#75715e">&lt;stdlib.h&gt;</span><span style="color:#75715e">
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">#include</span> <span style="color:#75715e">&lt;string.h&gt;</span><span style="color:#75715e">
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">#include</span> <span style="color:#75715e">&#34;MQTTClient.h&#34;</span><span style="color:#75715e">
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">#define ADDRESS     &#34;tcp:</span><span style="color:#75715e">//localhost:1883&#34;
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span><span style="color:#75715e">#define CLIENTID    &#34;ExampleClientSub&#34;
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">#define TOPIC       &#34;MQTT Examples&#34;
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">#define PAYLOAD     &#34;Hello World!&#34;
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">#define QOS         1
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">#define TIMEOUT     10000L
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">volatile</span> MQTTClient_deliveryToken deliveredtoken;
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">void</span> <span style="color:#a6e22e">delivered</span>(<span style="color:#66d9ef">void</span> <span style="color:#f92672">*</span>context, MQTTClient_deliveryToken dt)
</span></span><span style="display:flex;"><span>{
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">printf</span>(<span style="color:#e6db74">&#34;Message with token value %d delivery confirmed</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">&#34;</span>, dt);
</span></span><span style="display:flex;"><span>    deliveredtoken <span style="color:#f92672">=</span> dt;
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">int</span> <span style="color:#a6e22e">msgarrvd</span>(<span style="color:#66d9ef">void</span> <span style="color:#f92672">*</span>context, <span style="color:#66d9ef">char</span> <span style="color:#f92672">*</span>topicName, <span style="color:#66d9ef">int</span> topicLen, MQTTClient_message <span style="color:#f92672">*</span>message)
</span></span><span style="display:flex;"><span>{
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">int</span> i;
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">char</span><span style="color:#f92672">*</span> payloadptr;
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">printf</span>(<span style="color:#e6db74">&#34;Message arrived</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">&#34;</span>);
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">printf</span>(<span style="color:#e6db74">&#34;     topic: %s</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">&#34;</span>, topicName);
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">printf</span>(<span style="color:#e6db74">&#34;   message: &#34;</span>);
</span></span><span style="display:flex;"><span>    payloadptr <span style="color:#f92672">=</span> message<span style="color:#f92672">-&gt;</span>payload;
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">for</span>(i<span style="color:#f92672">=</span><span style="color:#ae81ff">0</span>; i<span style="color:#f92672">&lt;</span>message<span style="color:#f92672">-&gt;</span>payloadlen; i<span style="color:#f92672">++</span>)
</span></span><span style="display:flex;"><span>    {
</span></span><span style="display:flex;"><span>        <span style="color:#a6e22e">putchar</span>(<span style="color:#f92672">*</span>payloadptr<span style="color:#f92672">++</span>);
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">putchar</span>(<span style="color:#e6db74">&#39;\n&#39;</span>);
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">MQTTClient_freeMessage</span>(<span style="color:#f92672">&amp;</span>message);
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">MQTTClient_free</span>(topicName);
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">return</span> <span style="color:#ae81ff">1</span>;
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">void</span> <span style="color:#a6e22e">connlost</span>(<span style="color:#66d9ef">void</span> <span style="color:#f92672">*</span>context, <span style="color:#66d9ef">char</span> <span style="color:#f92672">*</span>cause)
</span></span><span style="display:flex;"><span>{
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">printf</span>(<span style="color:#e6db74">&#34;</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">Connection lost</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">&#34;</span>);
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">printf</span>(<span style="color:#e6db74">&#34;     cause: %s</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">&#34;</span>, cause);
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">int</span> <span style="color:#a6e22e">main</span>(<span style="color:#66d9ef">int</span> argc, <span style="color:#66d9ef">char</span><span style="color:#f92672">*</span> argv[])
</span></span><span style="display:flex;"><span>{
</span></span><span style="display:flex;"><span>    MQTTClient client;
</span></span><span style="display:flex;"><span>    MQTTClient_connectOptions conn_opts <span style="color:#f92672">=</span> MQTTClient_connectOptions_initializer;
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">int</span> rc;
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">int</span> ch;
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">MQTTClient_create</span>(<span style="color:#f92672">&amp;</span>client, ADDRESS, CLIENTID,
</span></span><span style="display:flex;"><span>        MQTTCLIENT_PERSISTENCE_NONE, NULL);
</span></span><span style="display:flex;"><span>    conn_opts.keepAliveInterval <span style="color:#f92672">=</span> <span style="color:#ae81ff">20</span>;
</span></span><span style="display:flex;"><span>    conn_opts.cleansession <span style="color:#f92672">=</span> <span style="color:#ae81ff">1</span>;
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">MQTTClient_setCallbacks</span>(client, NULL, connlost, msgarrvd, delivered);
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">if</span> ((rc <span style="color:#f92672">=</span> <span style="color:#a6e22e">MQTTClient_connect</span>(client, <span style="color:#f92672">&amp;</span>conn_opts)) <span style="color:#f92672">!=</span> MQTTCLIENT_SUCCESS)
</span></span><span style="display:flex;"><span>    {
</span></span><span style="display:flex;"><span>        <span style="color:#a6e22e">printf</span>(<span style="color:#e6db74">&#34;Failed to connect, return code %d</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">&#34;</span>, rc);
</span></span><span style="display:flex;"><span>        <span style="color:#a6e22e">exit</span>(EXIT_FAILURE);
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">printf</span>(<span style="color:#e6db74">&#34;Subscribing to topic %s</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">for client %s using QoS%d</span><span style="color:#ae81ff">\n\n</span><span style="color:#e6db74">&#34;</span>
</span></span><span style="display:flex;"><span>           <span style="color:#e6db74">&#34;Press Q&lt;Enter&gt; to quit</span><span style="color:#ae81ff">\n\n</span><span style="color:#e6db74">&#34;</span>, TOPIC, CLIENTID, QOS);
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">MQTTClient_subscribe</span>(client, TOPIC, QOS);
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">do</span>
</span></span><span style="display:flex;"><span>    {
</span></span><span style="display:flex;"><span>        ch <span style="color:#f92672">=</span> <span style="color:#a6e22e">getchar</span>();
</span></span><span style="display:flex;"><span>    } <span style="color:#66d9ef">while</span>(ch<span style="color:#f92672">!=</span><span style="color:#e6db74">&#39;Q&#39;</span> <span style="color:#f92672">&amp;&amp;</span> ch <span style="color:#f92672">!=</span> <span style="color:#e6db74">&#39;q&#39;</span>);
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">MQTTClient_disconnect</span>(client, <span style="color:#ae81ff">10000</span>);
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">MQTTClient_destroy</span>(<span style="color:#f92672">&amp;</span>client);
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">return</span> rc;
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>Now we can compile both files:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>cc -o receive receive.c -lpaho-mqtt3c
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>cc -o send send.c -lpaho-mqtt3c
</span></span></code></pre></div><h2 id="testing">Testing</h2>
<p>Now se can run <code>./receive</code> and <code>./send</code> from different terminals and check if it is working.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>luis@BARE:~/projects/How to use MQTT$ ./receive
</span></span><span style="display:flex;"><span>Subscribing to topic MQTT Examples
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">for</span> client ExampleClientSub using QoS1
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>Press Q&lt;Enter&gt; to quit
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>Message arrived
</span></span><span style="display:flex;"><span>     topic: MQTT Examples
</span></span><span style="display:flex;"><span>   message: Hello World!
</span></span><span style="display:flex;"><span>Q
</span></span><span style="display:flex;"><span>luis@BARE:~/projects/How to use MQTT$ 
</span></span></code></pre></div><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>luis@BARE:~/projects/How to use MQTT$ ./send 
</span></span><span style="display:flex;"><span>Waiting <span style="color:#66d9ef">for</span> up to <span style="color:#ae81ff">10</span> seconds <span style="color:#66d9ef">for</span> publication of Hello World!
</span></span><span style="display:flex;"><span>on topic MQTT Examples <span style="color:#66d9ef">for</span> client with ClientID: ExampleClientPub
</span></span><span style="display:flex;"><span>Message with delivery token <span style="color:#ae81ff">1</span> delivered
</span></span><span style="display:flex;"><span>luis@BARE:~/projects/How to use MQTT$ 
</span></span></code></pre></div><p>If everything went well, we should see Hello world as output.</p>
<p>This is a very simple example, and Paho provides more callbacks functions. For more information refer to the official page.</p>
]]></content>
        </item>
        
        <item>
            <title>Messages between applications: MQTT and Python</title>
            <link>https://blog.miguens.one/posts/2019/08/messages-between-applications-mqtt-and-python/</link>
            <pubDate>Sat, 03 Aug 2019 00:00:00 +0000</pubDate>
            
            <guid>https://blog.miguens.one/posts/2019/08/messages-between-applications-mqtt-and-python/</guid>
            <description>&lt;h2 id=&#34;installation&#34;&gt;Installation&lt;/h2&gt;
&lt;p&gt;To make use of MQTT in Python, we need to install a library to communicate with the server. A populat choice is &lt;a href=&#34;https://www.eclipse.org/paho/&#34;&gt;Paho&lt;/a&gt; from Eclipse.&lt;/p&gt;
&lt;p&gt;As usual we can use pip to install it&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;!!&lt;/span&gt;pip3 install paho&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;mqtt 
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;pre&gt;&lt;code&gt;[&#39;Requirement already satisfied: paho-mqtt in /home/luis/.local/lib/python3.8/site-packages (1.5.1)&#39;]
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;publish-a-message&#34;&gt;Publish a message&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; paho.mqtt.client &lt;span style=&#34;color:#66d9ef&#34;&gt;as&lt;/span&gt; mqtt
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;help(mqtt&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;Client&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;publish)
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;pre&gt;&lt;code&gt;Help on function publish in module paho.mqtt.client:

publish(self, topic, payload=None, qos=0, retain=False, properties=None)
    Publish a message on a topic.
    
    This causes a message to be sent to the broker and subsequently from
    the broker to any clients subscribing to matching topics.
    
    topic: The topic that the message should be published on.
    payload: The actual message to send. If not given, or set to None a
    zero length message will be used. Passing an int or float will result
    in the payload being converted to a string representing that number. If
    you wish to send a true int/float, use struct.pack() to create the
    payload you require.
    qos: The quality of service level to use.
    retain: If set to true, the message will be set as the &amp;quot;last known
    good&amp;quot;/retained message for the topic.
    properties: (MQTT v5.0 only) the MQTT v5.0 properties to be included.
    Use the Properties class.
    
    Returns a MQTTMessageInfo class, which can be used to determine whether
    the message has been delivered (using info.is_published()) or to block
    waiting for the message to be delivered (info.wait_for_publish()). The
    message ID and return code of the publish() call can be found at
    info.mid and info.rc.
    
    For backwards compatibility, the MQTTMessageInfo class is iterable so
    the old construct of (rc, mid) = client.publish(...) is still valid.
    
    rc is MQTT_ERR_SUCCESS to indicate success or MQTT_ERR_NO_CONN if the
    client is not currently connected.  mid is the message ID for the
    publish request. The mid value can be used to track the publish request
    by checking against the mid argument in the on_publish() callback if it
    is defined.
    
    A ValueError will be raised if topic is None, has zero length or is
    invalid (contains a wildcard), except if the MQTT version used is v5.0.  
    For v5.0, a zero length topic can be used when a Topic Alias has been set.
    
    A ValueError will be raised if qos is not one of 0, 1 or 2, or if
    the length of the payload is greater than 268435455 bytes.
&lt;/code&gt;&lt;/pre&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;client &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; mqtt&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;Client()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;client&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;connect(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;localhost&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1883&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;60&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;client&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;publish(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;example/path&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Hello world!&amp;#39;&lt;/span&gt;, retain&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;True&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;pre&gt;&lt;code&gt;&amp;lt;paho.mqtt.client.MQTTMessageInfo at 0x7fa8440554f0&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;retrieve-message&#34;&gt;Retrieve message&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;client2 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; mqtt&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;Client()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;client2&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;connect(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;localhost&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1883&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;60&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;on_message&lt;/span&gt;(client, userdata, msg, properties&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;None&lt;/span&gt;):
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    print(msg&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;topic&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34; &amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;str(msg&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;payload))
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;client2&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;on_message &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; on_message
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;client2&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;subscribe(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;example/path&amp;#39;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;client2&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;loop_start()
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;pre&gt;&lt;code&gt;example/path b&#39;Hello world!&#39;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;If everything went well, we should see Hello world as output.&lt;/p&gt;</description>
            <content type="html"><![CDATA[<h2 id="installation">Installation</h2>
<p>To make use of MQTT in Python, we need to install a library to communicate with the server. A populat choice is <a href="https://www.eclipse.org/paho/">Paho</a> from Eclipse.</p>
<p>As usual we can use pip to install it</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010">!!</span>pip3 install paho<span style="color:#f92672">-</span>mqtt 
</span></span></code></pre></div><pre><code>['Requirement already satisfied: paho-mqtt in /home/luis/.local/lib/python3.8/site-packages (1.5.1)']
</code></pre>
<h2 id="publish-a-message">Publish a message</h2>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#f92672">import</span> paho.mqtt.client <span style="color:#66d9ef">as</span> mqtt
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>help(mqtt<span style="color:#f92672">.</span>Client<span style="color:#f92672">.</span>publish)
</span></span></code></pre></div><pre><code>Help on function publish in module paho.mqtt.client:

publish(self, topic, payload=None, qos=0, retain=False, properties=None)
    Publish a message on a topic.
    
    This causes a message to be sent to the broker and subsequently from
    the broker to any clients subscribing to matching topics.
    
    topic: The topic that the message should be published on.
    payload: The actual message to send. If not given, or set to None a
    zero length message will be used. Passing an int or float will result
    in the payload being converted to a string representing that number. If
    you wish to send a true int/float, use struct.pack() to create the
    payload you require.
    qos: The quality of service level to use.
    retain: If set to true, the message will be set as the &quot;last known
    good&quot;/retained message for the topic.
    properties: (MQTT v5.0 only) the MQTT v5.0 properties to be included.
    Use the Properties class.
    
    Returns a MQTTMessageInfo class, which can be used to determine whether
    the message has been delivered (using info.is_published()) or to block
    waiting for the message to be delivered (info.wait_for_publish()). The
    message ID and return code of the publish() call can be found at
    info.mid and info.rc.
    
    For backwards compatibility, the MQTTMessageInfo class is iterable so
    the old construct of (rc, mid) = client.publish(...) is still valid.
    
    rc is MQTT_ERR_SUCCESS to indicate success or MQTT_ERR_NO_CONN if the
    client is not currently connected.  mid is the message ID for the
    publish request. The mid value can be used to track the publish request
    by checking against the mid argument in the on_publish() callback if it
    is defined.
    
    A ValueError will be raised if topic is None, has zero length or is
    invalid (contains a wildcard), except if the MQTT version used is v5.0.  
    For v5.0, a zero length topic can be used when a Topic Alias has been set.
    
    A ValueError will be raised if qos is not one of 0, 1 or 2, or if
    the length of the payload is greater than 268435455 bytes.
</code></pre>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>client <span style="color:#f92672">=</span> mqtt<span style="color:#f92672">.</span>Client()
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>client<span style="color:#f92672">.</span>connect(<span style="color:#e6db74">&#34;localhost&#34;</span>, <span style="color:#ae81ff">1883</span>, <span style="color:#ae81ff">60</span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>client<span style="color:#f92672">.</span>publish(<span style="color:#e6db74">&#39;example/path&#39;</span>, <span style="color:#e6db74">&#39;Hello world!&#39;</span>, retain<span style="color:#f92672">=</span><span style="color:#66d9ef">True</span>)
</span></span></code></pre></div><pre><code>&lt;paho.mqtt.client.MQTTMessageInfo at 0x7fa8440554f0&gt;
</code></pre>
<h2 id="retrieve-message">Retrieve message</h2>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span>client2 <span style="color:#f92672">=</span> mqtt<span style="color:#f92672">.</span>Client()
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>client2<span style="color:#f92672">.</span>connect(<span style="color:#e6db74">&#34;localhost&#34;</span>, <span style="color:#ae81ff">1883</span>, <span style="color:#ae81ff">60</span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">def</span> <span style="color:#a6e22e">on_message</span>(client, userdata, msg, properties<span style="color:#f92672">=</span><span style="color:#66d9ef">None</span>):
</span></span><span style="display:flex;"><span>    print(msg<span style="color:#f92672">.</span>topic<span style="color:#f92672">+</span><span style="color:#e6db74">&#34; &#34;</span><span style="color:#f92672">+</span>str(msg<span style="color:#f92672">.</span>payload))
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>client2<span style="color:#f92672">.</span>on_message <span style="color:#f92672">=</span> on_message
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>client2<span style="color:#f92672">.</span>subscribe(<span style="color:#e6db74">&#39;example/path&#39;</span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>client2<span style="color:#f92672">.</span>loop_start()
</span></span></code></pre></div><pre><code>example/path b'Hello world!'
</code></pre>
<p>If everything went well, we should see Hello world as output.</p>
<p>This is a very simple example, and Paho provides support for reconnecting and more callbacks functions, while here we only saw <code>on_message</code></p>
]]></content>
        </item>
        
        <item>
            <title>Messages between applications: MQTT Server</title>
            <link>https://blog.miguens.one/posts/2019/08/messages-between-applications-mqtt-server/</link>
            <pubDate>Fri, 02 Aug 2019 00:00:00 +0000</pubDate>
            
            <guid>https://blog.miguens.one/posts/2019/08/messages-between-applications-mqtt-server/</guid>
            <description>&lt;h2 id=&#34;mqtt&#34;&gt;MQTT&lt;/h2&gt;
&lt;p&gt;In this series of post, I will explain how to use the message broker MQTT. From installation to submit and receive messages in Python and C++.&lt;/p&gt;
&lt;h2 id=&#34;a-bit-of-history&#34;&gt;A bit of history&lt;/h2&gt;
&lt;p&gt;MQTT was created way back in 1999 by two engineers — Andy Stanford-Clark (IBM) and Arlen Nipper (Eurotech). They had to invent a new protocol for connecting oil pipelines over unreliable, satellite networks.&lt;/p&gt;
&lt;p&gt;The motivation for designing MQTT was to create a lightweight and bandwidth-efficient protocol that was data agnostic with support for multiple levels of Quality of Service (QoS). Interestingly, even today, those are the same reasons for which MQTT is chosen for implementing IoT solutions.&lt;/p&gt;</description>
            <content type="html"><![CDATA[<h2 id="mqtt">MQTT</h2>
<p>In this series of post, I will explain how to use the message broker MQTT. From installation to submit and receive messages in Python and C++.</p>
<h2 id="a-bit-of-history">A bit of history</h2>
<p>MQTT was created way back in 1999 by two engineers — Andy Stanford-Clark (IBM) and Arlen Nipper (Eurotech). They had to invent a new protocol for connecting oil pipelines over unreliable, satellite networks.</p>
<p>The motivation for designing MQTT was to create a lightweight and bandwidth-efficient protocol that was data agnostic with support for multiple levels of Quality of Service (QoS). Interestingly, even today, those are the same reasons for which MQTT is chosen for implementing IoT solutions.</p>
<p>In 2011, IBM and Eurotech donated MQTT to the proposed Eclipse project called Paho. In 2013, it was submitted to OASIS for standardization. The latest version of the protocol specification, 3.11 has become an OASIS standard.</p>
<p>(Source: Eurotech)</p>
<h2 id="server">Server</h2>
<p>There are many message brokers that implement MQTT in the market. Some of them you can use as a service (via Azure, Amazon, Scaleway, etc), some other you need to install them.</p>
<p>People familiar with Python might know RabbitMQ, a general purpose message broker that contains a plug-in to operate an MQTT service.</p>
<p>Before going forward, we need to consider that MQTT supports only the pub-sub messaging technique. It is useful in cases where messages are short-lived, and there is active-routing of connected subscribers and publishers. Thus, it is troublesome to use MQTT for the classical long-lived messaging queues.</p>
<p>On the other hand, RabbitMQ supports almost all the messaging forms like pub-sub, round-robin, message-queues, etc. It also supports message grouping and idempotent messages. It supports a lot of fine-grain control in terms of accessing queues. One can restrict access to certain queues, manage the depth and a lot more.</p>
<p>Because of that, I decided to use a simple version of MQTT from Eclipse: <a href="https://mosquitto.org/">Mosquitto</a></p>
<h2 id="installation">Installation</h2>
<p>We can deploy a mosquitto server using Docker:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>docker create --name mosquitto-test -it --net host eclipse-mosquitto
</span></span></code></pre></div><pre><code>98b31b1bef35d915b291ba190add1fb03bbe0a135685ff93034078cb6d704d7c
</code></pre>
<p>and now we start the service</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>docker start mosquitto-test
</span></span></code></pre></div><pre><code>mosquitto-test
</code></pre>
<p>We can check that the server is running checking its logs</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>docker logs mosquitto-test
</span></span></code></pre></div><pre><code>1617438367: mosquitto version 2.0.9 starting
1617438367: Config loaded from /mosquitto/config/mosquitto.conf.
1617438367: Starting in local only mode. Connections will only be possible from clients running on this machine.
1617438367: Create a configuration file which defines a listener to allow remote access.
1617438367: Opening ipv4 listen socket on port 1883.
1617438367: Opening ipv6 listen socket on port 1883.
1617438367: Error: Address not available
1617438367: mosquitto version 2.0.9 running
</code></pre>
<h2 id="testing">Testing</h2>
<p>For this test, we will need to open two consoles: In the first place, one to execute the command to receive messages (mosquitto_sub) and in the second place, we send the messages.</p>
<p>Do not revert the order, as by default messages in mosquitto are not persistent, and if you publish and nobody was subscribed to that topic, the message is lost.</p>
<p>The result should look like</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span><span style="color:#f92672">(</span>base<span style="color:#f92672">)</span> luis@BARE:~$ docker exec mosquitto-test mosquitto_sub -h localhost -t hello/world -d
</span></span><span style="display:flex;"><span>Client <span style="color:#f92672">(</span>null<span style="color:#f92672">)</span> sending CONNECT
</span></span><span style="display:flex;"><span>Client <span style="color:#f92672">(</span>null<span style="color:#f92672">)</span> received CONNACK <span style="color:#f92672">(</span>0<span style="color:#f92672">)</span>
</span></span><span style="display:flex;"><span>Client <span style="color:#f92672">(</span>null<span style="color:#f92672">)</span> sending SUBSCRIBE <span style="color:#f92672">(</span>Mid: 1, Topic: hello/world, QoS: 0, Options: 0x00<span style="color:#f92672">)</span>
</span></span><span style="display:flex;"><span>Client <span style="color:#f92672">(</span>null<span style="color:#f92672">)</span> received SUBACK
</span></span><span style="display:flex;"><span>Subscribed <span style="color:#f92672">(</span>mid: 1<span style="color:#f92672">)</span>: <span style="color:#ae81ff">0</span>
</span></span><span style="display:flex;"><span>Client <span style="color:#f92672">(</span>null<span style="color:#f92672">)</span> received PUBLISH <span style="color:#f92672">(</span>d0, q0, r0, m0, <span style="color:#e6db74">&#39;hello/world&#39;</span>, ... <span style="color:#f92672">(</span><span style="color:#ae81ff">11</span> bytes<span style="color:#f92672">))</span>
</span></span><span style="display:flex;"><span>Hello world
</span></span><span style="display:flex;"><span>^C
</span></span><span style="display:flex;"><span><span style="color:#f92672">(</span>base<span style="color:#f92672">)</span> luis@BARE:~$ 
</span></span></code></pre></div><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span><span style="color:#75715e">#Sending messages </span>
</span></span><span style="display:flex;"><span>docker exec mosquitto-test mosquitto_pub -h localhost -m <span style="color:#e6db74">&#39;Hello world&#39;</span> -t hello/world -d
</span></span></code></pre></div><pre><code>Client (null) sending CONNECT
Client (null) received CONNACK (0)
Client (null) sending PUBLISH (d0, q0, r0, m1, 'hello/world', ... (11 bytes))
Client (null) sending DISCONNECT
</code></pre>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"></code></pre></div>]]></content>
        </item>
        
        <item>
            <title>Introduction to Ratio Analysis</title>
            <link>https://blog.miguens.one/posts/2019/07/introduction-to-ratio-analysis/</link>
            <pubDate>Tue, 02 Jul 2019 00:00:00 +0000</pubDate>
            
            <guid>https://blog.miguens.one/posts/2019/07/introduction-to-ratio-analysis/</guid>
            <description>&lt;h1 id=&#34;ratio-analysis&#34;&gt;Ratio Analysis&lt;/h1&gt;
&lt;p&gt;An investor or interested stakeholder, can use the financial statements to assess an organisation. But in most cases we would like to answer the question: Is organisation A better or not than B?.&lt;/p&gt;
&lt;p&gt;In this case, we should rely on a method to analyse and compare financial statements. One of the tools devised to analyse and asses the financial situation of an organisation is the ratio analysis.&lt;/p&gt;
&lt;p&gt;The definition of ratio (Oxford Dictionaries, 2019), states that is the quantitative relation between two amounts, showing the number of times one value contains or is contained within the other.&lt;/p&gt;</description>
            <content type="html"><![CDATA[<h1 id="ratio-analysis">Ratio Analysis</h1>
<p>An investor or interested stakeholder, can use the financial statements to assess an organisation. But in most cases we would like to answer the question: Is organisation A better or not than B?.</p>
<p>In this case, we should rely on a method to analyse and compare financial statements. One of the tools devised to analyse and asses the financial situation of an organisation is the ratio analysis.</p>
<p>The definition of ratio (Oxford Dictionaries, 2019), states that is the quantitative relation between two amounts, showing the number of times one value contains or is contained within the other.</p>
<p>The definition of financial ratios is very similar to the mathematical description exposed above and consist in the comparison of two numbers derived directly or indirectly from the balance sheet or the income statement.</p>
<p>As the interpretation of the financial statements is essential for all kind of stakeholders of a company, ratio analysis is an essential tool not only for analysis but also for management.</p>
<p>The advantages of ratio analysis rely on the simplification of complex accounting statements, helping (1) the validation or disproval of financial investment in a corporation, (2) the identification of problem areas for better treatment of management and (3) the comparison with other firms or sectors and previous financial periods.</p>
<p>Some of the disadvantages of the ratio analysis are that they do not consider some short-term measures to mask possible financial problems in the statements, they ignore the challenge of comparing values regardless of inflation and exchange rate in case of multinational companies and the lack of a single well-documented standard for reporting make the task of comparing two statements challenging.</p>
<p>The most important objectives of ratio analysis are: (1) Measure of Profitability, (2) Evaluation of Operational Efficiency, (3) Study liquidity and solvency, (4) Overall financial strength for stakeholders, (5) Comparison</p>
<h2 id="measure-of-profitability">Measure of profitability</h2>
<p>Profitability can be divided into ‘efficiency’ and ‘effectiveness’. Peter Drucker, as cited by (The Open University, 2015), stated that the first is about ‘doing things right’ and the second ‘doing the right things’. Some profitability ratios are, return on sales (ROS), assets utilisation ratio (AUR) and return on capital invested (ROCE).</p>
<h2 id="evaluation-of-operational-efficiency">Evaluation of operational efficiency</h2>
<p>Operational efficiency of an organisation means that it chooses the correct pool of assets and uses them in a precise way to achieve the maximum return for the shareholders of the organisation. Some efficiency ratios of interest are creditor days, stock days and debtor days</p>
<h2 id="study-of-liquidity-and-solvency">Study of liquidity and solvency</h2>
<p>The components that study if the activities of a corporation are properly funded are called liquidity and solvency, attending to short term and long term, respectively. Some liquidity ratios of interest are current ratio, quick ratio and working capital. In the other hand, some common solvency ratios are leverage and gearing.</p>
<h2 id="overall-financial-strength-for-stakeholders">Overall financial strength for stakeholders</h2>
<p>Investor ratios provide a measurement for current or prospective stakeholders interested in an organisation. In this category we have the following ratios commonly: return on equity, playout ratio, interest cover and earnings per share</p>
<h2 id="comparison">Comparison</h2>
<p>Ratios can allow us to compare an organisation against another, for example, a direct competitor or to compare our organisation of interest with the average of other organisations in the same sector. Nonetheless, we should be careful, as many organisations that could be perceived as direct competitors might be operating in different sectors as well, and their consolidated statements will not reflect a good study comparison.</p>
<p>Another possible comparison allowed by ratios is against the time evolution of the organisation, comparing the trend of ratios over a long period of time.</p>
]]></content>
        </item>
        
        <item>
            <title>Forms of control and motivation in regulated aerospace organizations</title>
            <link>https://blog.miguens.one/posts/2019/06/forms-of-control-and-motivation-in-regulated-aerospace-organizations/</link>
            <pubDate>Mon, 17 Jun 2019 00:00:00 +0000</pubDate>
            
            <guid>https://blog.miguens.one/posts/2019/06/forms-of-control-and-motivation-in-regulated-aerospace-organizations/</guid>
            <description>&lt;p&gt;An organisation can be defined as a group of individuals working together to achieve one or more goals (The Open University, 2019). Therefore, we must engage people to work on the goals that the organisation considers essential. Unit 2.1 of this MBA (The Open University, 2014a) introduced Knights and Willmott&amp;rsquo;s findings, which identified four types of control mechanisms: direct supervision, rules and procedures, culture and performance.&lt;/p&gt;
&lt;p&gt;The author&amp;rsquo;s experience relies on a software firm in the aerospace sector, doing contractual work for governmental-type organisations. In the author&amp;rsquo;s knowledge, two control types overlap: &amp;ldquo;rules and procedures&amp;rdquo; and &amp;ldquo;performance&amp;rdquo;.&lt;/p&gt;</description>
            <content type="html"><![CDATA[<p>An organisation can be defined as a group of individuals working together to achieve one or more goals (The Open University, 2019). Therefore, we must engage people to work on the goals that the organisation considers essential. Unit 2.1 of this MBA (The Open University, 2014a) introduced Knights and Willmott&rsquo;s findings, which identified four types of control mechanisms: direct supervision, rules and procedures, culture and performance.</p>
<p>The author&rsquo;s experience relies on a software firm in the aerospace sector, doing contractual work for governmental-type organisations. In the author&rsquo;s knowledge, two control types overlap: &ldquo;rules and procedures&rdquo; and &ldquo;performance&rdquo;.</p>
<p>The rules and procedures are presented as guidelines provided by the main contractors introduced above. It is not a form of control submitted by the author organisation&rsquo;s managers but instead imposed by a supra-organisation.</p>
<p>On the other hand, the control through performance is encouraged by the organisation&rsquo;s current management, measuring the results obtained and giving some degree of freedom for the employees to self-arrange their responsibilities if it does not contradict any rule supra-organisation.</p>
<p>The frameworks related to rules and procedures and performance were selected because of the author&rsquo;s professional practice&rsquo;s relevance.</p>
<h2 id="control-through-rules-and-procedures">Control through rules and procedures</h2>
<p>Weber introduced the concept of bureaucracy as a legal-rational form of organisation, as cited on page 22 (The Open University, 2012). The two components of the system, legal and rational, derives from:</p>
<ol>
<li>Legal because authority is exercised using a system of rules and procedures rather than the direct order of a supervisor. Informally, we could say that the &ldquo;person calling the shots is a book&rdquo;.</li>
<li>Rational, as the system is expressively designed to achieve the precise goals of the organisation.</li>
</ol>
<p>Even though Weber described bureaucracy as the ultimate efficient organisation model, he also recognised some risks in the system. He was concerned with the model lack of questioning of the value of the task carried out. Discussion and debates would disappear as people became imprisoned in a metaphorical iron cage.</p>
<p>Even with the disadvantages mentioned above, control through rules and procedures can be successfully applied in organisations that subcontract most of their work, providing an environment for the subcontractors to work together and achieve the supra-organisation goal as the professional practice of the author demonstrates.</p>
<p>The author&rsquo;s case is currently working, developing contractual work for governmental institutions, as explained in the introduction. The author is subjected to the bureaucracy of ESA, ECMWF or EUMETSAT[1], depending on the project assigned, even though the rules and procedures were not created by any member of the corporation&rsquo;s management in which the author is working. Thus, the bureaucracy system&rsquo;s motivation influence cannot be fully noted analysed in the author&rsquo;s organisation. Still, it can be studied from public statistics and observation of people employed in the three mentioned governmental institutions.</p>
<p>The impact of bureaucracy on motivation can be analysed from several theories. Attending to Maslow&rsquo;s hierarchy of needs and from the author&rsquo;s views, which resides in The Netherlands[2], the bureaucracy implementations observed in governmental institutes provide the satisfaction of physiological and safety needs due to a steady income job stability. Simultaneously, several social activities and continuous breaks during office hours allow for the fulfilment of social needs. Maslow&rsquo;s higher needs: Esteem and Self-actualisation are more challenging to meet under a bureaucracy system due to the disadvantages introduced before about the lack of questioning of the value of the tasks performed and the metaphorical iron cage. We should be cautious about mentioning that the individuals&rsquo; values also play a role, and we can find successful employees that can meet all the needs in a bureaucracy system.</p>
<p>Even though we have discussed that bureaucracy does not meet all of the needs identified by Maslow, the statistics  (Centraal Bureau voor de Statistiek, 2016) seem to suggest that people are satisfied in their governmental positions, which makes the author inclined to give more credibility to the theory ERG of Alderfer, and his three needs: Existence, Relatedness and Growth, which is very similar to Maslow needs, as illustrated in Figure 1, but Alderfer suggests that extra rewards at lower levels can compensate for lack of satisfaction at higher levels.</p>
<p><img src="#ZgotmplZ" alt="Maslow’s hierarchy of needs and Alderfer ERG Theory"></p>
<p><em>Figure 1. An annotated version of Maslow&rsquo;s hierarchy of needs (The Open University, 2012) and ERG Theory of Alderfer, 1972</em></p>
<p>Last, the author opinion is that people who are not satisfied by the lack of the &ldquo;G&rdquo; component in its work, and extra rewards in the rest of the components &ldquo;R&rdquo; and &ldquo;E&rdquo; is not enough for their fulfilment, will probably switch to private companies. This is possible because the job market is healthy in the aerospace industry, and several private companies, with less bureaucracy, develop similar activities in the same sector as the governmental institutions.</p>
<h2 id="control-through-performance">Control through performance</h2>
<p>In the Knights and Willmott framework, it is proposed that control through performance is perhaps the most effective way of control. The reason behind their proposal is financial: a self-disciplining individual will regulate itself, making unnecessary the monitoring through middle management or surveillance.</p>
<p>The author has observed performance-type of control during all his career, with some elements of direct supervision.</p>
<p>An example of direct supervision is that it is mandatory for activities carried out outside the office to keep a work diary available and deliver it over to management at request. The example shows some parallelism to Jeremy Bentham&rsquo;s panopticons (The Open University, 2014b). The writing of the journal is a way of direct control, in which the employees will carry out their activities and monitoring them in their work diary. In case a manager requests the document, the consequences of the lack of compliance can be severe. The fear acts as direct supervision, the same as the prisoner observed from the panopticons.</p>
<p>Therefore, the author thinks that Knights and Willmott&rsquo;s framework should be understood as guidelines for a dominant form of control, rather than a one-to-one assignment of the organization to a control category.</p>
<p>We have seen from the example above, but also in the course material when discussing the form of control of The Open University regarding the students (The Open University, 2014b), that both cases the main form of control is through performance or outputs, but with some elements of the other frameworks &ndash; in the example, direct control and the standard of the Open University, rules and procedures.</p>
<p>Employees&rsquo; motivation in a structure of control by performance relies heavily on job descriptions, performance appraisal and continuous education management (Dieleman et al., 2006).</p>
<p>It is discussed in chapter 3 (The Open University, 2012) that every employee must have a proper induction period to familiarise herself with the role. This is the time to set goals accordingly to its education, its interest and the business needs. This can be summarised as a clear job description for the new member. A way forward for setting goals is Locke&rsquo;s findings, which states that motivation and effective goal settings are related. He says that the goals should be challenging but at the same time realistic, the goals should be clearly understood, and complete, timely and acute feedback should be provided.</p>
<p>The author had observed Locke suggestion about realistic and challenging goals before in the literature, and his professional practice, with the phenomena of burn-out and bore-out (Schaufeli and Salanova, 2014), in which unrealistic goals leads to an excessive amount of work and demotivation (burn-out), but also the opposite has been found, the lack of activities or tasks too easy to perform for an individual had conducted to lack of satisfaction at work (bore-out).</p>
<p>It is also discussed in chapter 3 that appraisal meetings are a common way to evaluate performance. A range of theories is also discussed behind conducting an appraisal and assessing the results, with advantages and disadvantages. However, it is essential to note that these meetings should be done for both the line managers and human resource management team, as both roles will complement each other in the evaluation. The course material also warns about seeing the appraisal as a mere form-filling questioner. It is the author opinion that appraisal is an opportunity for active communication. The use of the questioner should be seen as an opportunity to initiate a genuine dialogue and remind the points to be discussed, without overlooking any potential issue identified previously in the meeting, such as updating goals and the need for more education. We should note that this is the moment to provide the complete, timely and acute feedback required by Locke motivation theory and to adapt the goals to avoid the burn-out or bore-out situation.</p>
<p>The appraisal meeting will also provide feedback to the individual as it could satisfy the esteem needs identified by Maslow.</p>
<p>We can note that the discussion above seems to follow McGregor Theory X/Y. According to him in Theory Y, people behave responsibly if we follow two rules: delegation of authority (self-management individuals) and providing people with resources to do a job (continuous education). The opposite Theory X states that satisfying immediate lower-level organizational needs are possible with theories such as Taylorism. Still, an organization managed in this way may not be sustainable over a more extended period in current society.</p>
<h2 id="conclusion">Conclusion</h2>
<p>We have seen several techniques to achieve motivation in the context of control frameworks, but as we discussed, no single model fits every single employee. We have seen that a bureaucracy model, that even not meeting all Maslow proposed needs make some people happy, other people engage in their work with clear goals but without the need for self-actualization, and others, such the author, require that need (Self-Actualization) to be fulfilled (via this MBA) while reducing some achievements in the professional career (Esteem needs of Maslow) as the focus is in a superior need, which completely contradicts Maslow theory of lower needs to be fulfilled before working in the upper-level needs.</p>
<p>Last, we should note that the field of motivation extends further that the topics discussed in this report (and further than the course materials, I am afraid), and issues including salary retribution and feelings of equality between employees were not discussed, even though they are also important motivation factors.</p>
<h2 id="notes">Notes</h2>
<ul>
<li>
<p>[1] ESA (European Space Agency), ECMWF (The European Centre for Medium-Range Weather Forecasts) and EUMETSAT (European Organisation for the Exploitation of Meteorological Satellites)</p>
</li>
<li>
<p>[2] The views of the author cannot be applied to countries with governmental bureaucracy systems in which the payment of salaries is linked to yearly approvals of the budget, as for example the Federal Shutdown crisis of United States in beginning of 2019: <a href="https://qz.com/1528214/us-government-shutdown-2019-the-average-fbi-salary-is-37000/">https://qz.com/1528214/us-government-shutdown-2019-the-average-fbi-salary-is-37000/</a></p>
</li>
</ul>
<h2 id="references">References</h2>
<ul>
<li>
<p>Centraal Bureau voor de Statistiek (2016) Trends in the Netherlands 2017 Colofon, <a href="http://Www.Cbs.Nl/Infoservice">Www.Cbs.Nl/Infoservice</a> [Online]. DOI: 10.1002/anie.200805606.</p>
</li>
<li>
<p>Cunliffe, A. (2014) &lsquo;Managing Ethical and &ldquo;Just&rdquo; Organizations&rsquo;, in A Very Short, Fairly Interesting and Reasonably Cheap Book about Management, 1 Oliver&rsquo;s Yard, 55 City Road, London EC1Y 1SP United Kingdom, SAGE Publications Ltd, pp. 111&ndash;138 [Online]. DOI: 10.4135/9781446280317.n5 (Accessed 14 May 2019).</p>
</li>
<li>
<p>Dieleman, M., Toonen, J., Touré, H. and Martineau, T. (2006) &lsquo;The match between motivation and performance management of health sector workers in Mali.&rsquo;, Human resources for health, BioMed Central, vol. 4, p. 2 [Online]. DOI: 10.1186/1478-4491-4-2 (Accessed 13 May 2019).</p>
</li>
<li>
<p>Finucane, M. L., Alhakami, A., Slovic, P. and Johnson, S. M. (2000) &lsquo;The affect heuristic in judgments of risks and benefits&rsquo;, Journal of Behavioral Decision Making, vol. 13, no. 1, pp. 1&ndash;17 [Online]. DOI: 10.1002/(SICI)1099-0771(200001/03)13:1&lt;1::AID-BDM333&gt;3.0.CO;2-S (Accessed 14 May 2019).</p>
</li>
<li>
<p>Raelin, J. A. (2002) &lsquo;&ldquo;I Don&rsquo;t Have Time to Think!&rdquo; versus the Art of Reflective Practice&rsquo;, Reflections: The SoL Journal, vol. 4, no. 1, pp. 66&ndash;79 [Online]. DOI: 10.1162/152417302320467571 (Accessed 14 May 2019).</p>
</li>
<li>
<p>Schaufeli, W. B. and Salanova, M. (2014) Burnout, Boredom and Engagement in the Workplace, [Online]. Available at <a href="http://www.want.uji.es/wp-content/uploads/2017/03/2014_Schaufeli-Salanova.pdf">http://www.want.uji.es/wp-content/uploads/2017/03/2014_Schaufeli-Salanova.pdf</a> (Accessed 13 May 2019).</p>
</li>
<li>
<p>The Open University (2012) Managing People and organisations - Book 2, The Open University (ed), Third Edit., Milton Keynes, The Open University.</p>
</li>
<li>
<p>The Open University (2014a) Unit 2 Session 2.1 Understanding organisations and culture, The Open University (ed), Milton Keynes, The Open University.</p>
</li>
<li>
<p>The Open University (2014b) Unit 2 Session 2.2 Motivation and identities, The Open University (ed), The Open University.</p>
</li>
<li>
<p>The Open University (2016) &lsquo;TU812 Managing Systemic Change&rsquo;, [Online]. Available at <a href="http://www.openuniversity.edu/courses/postgraduate/modules/tu812">http://www.openuniversity.edu/courses/postgraduate/modules/tu812</a>? (Accessed 14 May 2019).</p>
</li>
<li>
<p>The Open University (2019) Organisations and management accounting: 1 What is an organisation? [Online]. Available at <a href="https://www.open.edu/openlearn/money-management/organisations-and-management-accounting/content-section-1">https://www.open.edu/openlearn/money-management/organisations-and-management-accounting/content-section-1</a> (Accessed 13 May 2019).</p>
</li>
<li>
<p>Watson, T. J. (1996) &lsquo;Motivation: That&rsquo;s Maslow, isn&rsquo;t it?&rsquo;, Management Learning, vol. 27, no. 4, pp. 447&ndash;464 [Online]. DOI: 10.1177/1350507696274004</p>
</li>
</ul>
]]></content>
        </item>
        
        <item>
            <title>Critique Tony Watson’s article</title>
            <link>https://blog.miguens.one/posts/2019/06/critique-tony-watsons-article/</link>
            <pubDate>Sat, 15 Jun 2019 00:00:00 +0000</pubDate>
            
            <guid>https://blog.miguens.one/posts/2019/06/critique-tony-watsons-article/</guid>
            <description>&lt;h2 id=&#34;introduction&#34;&gt;Introduction&lt;/h2&gt;
&lt;p&gt;Watson (1996), in his article, propose an ethnographic experiment. His objective is to study the engagement of his students in the motivation theories he teaches.&lt;/p&gt;
&lt;p&gt;I admire Watson&amp;rsquo;s attempt to design an experiment as controllable in dealing with the irreproducibility of an experiment that treats human behaviour. That falls into the domain of a complex system. As we discussed in Unit 2, &amp;ldquo;Every person is a world&amp;rdquo;.&lt;/p&gt;
&lt;p&gt;During my life and my previous studies in System Thinking  (The Open University, 2016), I noted that it is complicated to separate the &amp;ldquo;self&amp;rdquo; component from the system to study. In Watson&amp;rsquo;s case, his inquiry about the study of better ways to teach motivation will irremediably change him about his teaching approach, making the experiment not reproducible anymore.&lt;/p&gt;</description>
            <content type="html"><![CDATA[<h2 id="introduction">Introduction</h2>
<p>Watson (1996), in his article, propose an ethnographic experiment. His objective is to study the engagement of his students in the motivation theories he teaches.</p>
<p>I admire Watson&rsquo;s attempt to design an experiment as controllable in dealing with the irreproducibility of an experiment that treats human behaviour. That falls into the domain of a complex system. As we discussed in Unit 2, &ldquo;Every person is a world&rdquo;.</p>
<p>During my life and my previous studies in System Thinking  (The Open University, 2016), I noted that it is complicated to separate the &ldquo;self&rdquo; component from the system to study. In Watson&rsquo;s case, his inquiry about the study of better ways to teach motivation will irremediably change him about his teaching approach, making the experiment not reproducible anymore.</p>
<p>I draw my attention to Watson&rsquo;s two competing goals: the &ldquo;researcher&rdquo; and his attempt to carry on with the experiment mean that he will not apply everything he learned until that moment to provide some reproducibility in the control group. While the &ldquo;lecturer&rdquo;, and the professional duty of performing his best, he cannot ignore the previous lessons of his practice to favour the experiment.</p>
<p>I think that is a dilemma of competing goals, similar to the managing ethical reading  (Cunliffe, 2014).</p>
<h2 id="me-as-a-professional">Me as a professional</h2>
<p>I would have liked for Watson to ask the goals of each student in his lectures. In my opinion, different students might have other goals when studying an MBA, ranging from a deep interest in motivation theories as the student goal might be to become a head of HRM corporation and in the other point a Financial Analyst for whom the concepts of motivation will play little part in its professional practice.</p>
<p>I also noted that the lack of time and an attitude of dealing with situations in &ldquo;Getting by&rdquo; mode instead of &ldquo;Getting on top&rdquo; as illustrated in the &ldquo;I don&rsquo;t have to think!&rdquo; paper (Raelin, 2002).</p>
<h2 id="me-as-a-student">Me as a student</h2>
<p>The observations of Watson and the students regarding a simplistic approach attractiveness is a flaw of most people (myself included) that have been analysed by cognitive psychology.</p>
<p>(Finucane et al., 2000), remarked an important reason for an excellent lecturer to slow down the lesson&rsquo;s pace and invite the students for a critical analysis of the information presented and prevent the &ldquo;swallowing&rdquo; of information.</p>
<p>Last, I should note that in my experience, the learning also occurs outside the classroom and even several years after the lessons.</p>
<p>I find myself understanding some concepts that were &ldquo;swallowed&rdquo; in the first year of my degree at a later time during my master&rsquo;s degree.</p>
<p>I think the job of a lecturer and a tutor is similar to planting a seed that will grow, and only after years, the results will be shown.</p>
<p>Therefore some of the feedback coming as exams or questioners at the end of the subject is just a snapshot of the learning after a short period that might not contain enough information to evaluate the big picture.</p>
<h2 id="conclusion">Conclusion</h2>
<p>Even though I can&rsquo;t entirely agree with the reliability of the ethnography experiment, I must admit that I share the conclusions and advice drawn by Watson. I like the irony of a motivation lecturer questioning the best way to motivate students to learn about motivation actively.</p>
]]></content>
        </item>
        
        <item>
            <title>System Thinking about a Situation of Concern</title>
            <link>https://blog.miguens.one/posts/2019/06/system-thinking-about-a-situation-of-concern/</link>
            <pubDate>Thu, 13 Jun 2019 00:00:00 +0000</pubDate>
            
            <guid>https://blog.miguens.one/posts/2019/06/system-thinking-about-a-situation-of-concern/</guid>
            <description>&lt;h1 id=&#34;system-thinking-about-a-situation-of-concern-practical-example&#34;&gt;System Thinking about a Situation of Concern: Practical example&lt;/h1&gt;
&lt;p&gt;Defining a system as a set of interacting components integrated in a whole, with structure that are related (directly or indirectly) to each other, behaviour and interconnectivity in which part or processes are connected, and any changes affect the whole, we can see how our SoC with management focus on the profitability and employees with a focus in professional development and learning are competing situations.&lt;/p&gt;</description>
            <content type="html"><![CDATA[<h1 id="system-thinking-about-a-situation-of-concern-practical-example">System Thinking about a Situation of Concern: Practical example</h1>
<p>Defining a system as a set of interacting components integrated in a whole, with structure that are related (directly or indirectly) to each other, behaviour and interconnectivity in which part or processes are connected, and any changes affect the whole, we can see how our SoC with management focus on the profitability and employees with a focus in professional development and learning are competing situations.</p>
<p>At the same time and due to the different divisions of each company departments , we have different goals each part. The situations where we have competing situations have been described by adjectives such as “messy” or “wicked” in the literature (Ison, 2010)</p>
<p>The situations with several complex elements interdependent which each other, in which an internal modification of either an element or connection will result in an uncertain outcome, and where conflict is present, due to the different goal of the elements of the situation and the different background (understood as history and perspective) of the stakeholders, can benefit of a systems thinking approach, and therefore we can introduce the concept of systemic inquiry as a meta-platform or process for project or program managing as discussed in Chapter 10 of (Ison, 2010).</p>
<p>We should note that engaging in situations with a systemic inquiry has the side effect of more time required for investigation and implementation, as several iterations are required and the difficulty to estimate an end date to the task.</p>
<h2 id="the-juggle-metaphor">The juggle metaphor</h2>
<p>Throughout chapter 4 to 8, (Ison, 2010) introduces a framework for system inquiry. The main idea of the framework is the metaphor of a juggler playing with four balls. The metaphor tries to emphasise the need to involve all the components or “balls” in the cycle of the system inquiry, as all parts are interdependent and the involvement in each “ball” considered as a separated entity, will affect the rest of the balls, showing the relational dynamic of the juggler.</p>
<p>The juggle metaphor is composed of four distinct balls:</p>
<h3 id="b-ball">B-Ball:</h3>
<p>The first ball, being, focus on the relationship of the practitioner and the ideas.  We, as human beings, are born in a culture, and during our development, we acquire knowledge via school, friends and parents. Once we, as practitioners, engage with situations, we tried to frame the situations with our previous conceptualisation of the world. We should be aware of this limitation and consider the situations from other perspectives.</p>
<p>In the SoC of this paper, the author focus is on the acquisition of new set of skills for his own professional practice, while a solution cannot focus only on the author goal, but instead trying to stand in the position of several people involved: owners of the company with a focus on profits or employees that see the position as a means to attend to their own financial needs.</p>
<p>The being-ball, besides reflecting on our own bias, constraints and possibilities, also incorporates an ethical component into our decision-making process while making the system&rsquo;s inquiry.</p>
<p>We can conclude that our proposed system to solve the SoC should meet three conditions: Being economically feasible, being able to promote the acquisition of new skills and knowledge and being optional and flexible regarding the time committed from each member of the team.</p>
<h3 id="e-ball">E-Ball:</h3>
<p>This ball of Chapter 6 of (Ison, 2010) refers to how we choose to engage with the situations. This is how the practitioner chooses to relate to the situation. A main consideration while engaging, with a situation is the framing or naming of that situation. In our case, we have described our SoC as “wicked” or “mess” due to the interdependent and competing sub-systems. The naming of the situation does not resolve the problem, but we should note that thanks to this framing we have avoided to use classical techniques to project management, which could have failed to engage successfully with the SoC.</p>
<h3 id="c-ball">C-Ball:</h3>
<p>The inquiry of the C-Ball refers to contextualising or adopting an approach to tackle the SoC. This does not mean to choose a “recipe” and follow it blindly but instead to “look” into the “bag of tools” and try to formulate a recipe to tackle the SoC. The practitioner “bag of tools” can include several project management techniques, methodologies and previous knowledge acquired while dealing with previous cases.</p>
<p>In our SoC, we might note that our members of the team can be described as computer literate, which makes the adoption of tools such as online forums and online meetings feasible and something easy to add to our proposed solution, but making it more difficult to apply to not IT literate communities without the application of extra steps.
While engaging with the B-Ball, we noted the need to meet the needs of the board of directors for profitability and the needs for professional development of the employees. While engaging with the C-Ball we see that an added benefit of contextualising the SoC is that an exchange of ideas or improvement of communication with result on knowledge transfer, resulting in a natural way to reuse components, increasing the profits, and at the same time providing new knowledge to the employees and increasing their satisfaction.</p>
<h3 id="m-ball">M-Ball:</h3>
<p>The last ball, M-Ball, was introduced by (Ison, 2010) in chapter 8 and relates how the practitioner adapts and engages with the real world, resulting in the desired changed. In our SoC, the goal of the board of directors is to decrease the turnover ratio of the organisation.</p>
<p>During the discussion of (Ison, 2010), three perspectives are presented:  (1) ‘Getting by’, (2) ‘Getting on top’ and (3) ‘Creating space for’. We can note that the current strategy of the organisation is in ‘Getting by’, trying to increase employee satisfaction with short-term rewards such a small holidays, sweets and free beverages on Fridays, but without considering the issue of lack of professional development. In the author experience, some corporations try to provide professional development via standardised training which has the risk of becoming obsolete in the fast-paced world of engineering and programming.</p>
<p>The author, alongside with (Ison, 2010) considers that the best solutions are in self-arrange systems that are framed in the third perspective: ‘Creating space for’.</p>
<p>Based on the discussion of the juggler balls and our SoC and paying attention to the self-arranged systems, we will introduce the communities of practice as a way forward to exchange ideas and build a self-maintained training programme for the organisation.</p>
<h2 id="communities-of-practice">Communities of Practice</h2>
<p>Etienne Wenger as cited by (Blackmore, 2010) defines a community of practice (CoP) as a group of people who share a craft or a profession, which can evolve naturally because of the members&rsquo; shared interest in a particular domain or area, or that can be created deliberately with the goal of gaining knowledge related to a specific field. Wenger adds that through the process of sharing information and experiences with the group that members learn from each other, and have an opportunity to develop personally and professionally.</p>
<p>The automotive company Chrysler has adopted the concept of CoP successfully as discussed in Chapter 7 (Blackmore, 2010). Therefore is the opinion of the author that an organization could benefit from the application of the concept of Social Learning Systems, which englobes the CoP, to share knowledge, train and provide personal growth.</p>
<p>Most of the engineers working in the company share a common interest for big data in the aerospace sector and a background of either Aerospace Engineering or Physics, a cross-departmental system to share ideas can benefit the company and the people working on it. This is generalised in Churchman studies cited by (Blackmore, 2010) establishing that social learning can accommodate the complex interrelationship of beliefs and worldviews</p>
<p>To implement a Community of Practice, we should initiate a set of brainstorming meetings in order to identify some common and specific interest. Once identified a small list of topics, some “leaders” should be appointed. The leadership role is not static, and their part will be to manage and arrange the space to exchange ideas.</p>
<p>In parallel, an online tool should be implemented to provide a space for communication. The main requirement of this space is to provide a place for asynchronous communication, for example, a forum.</p>
<p>After the first iteration of workshops, seminars and conversations in the forum, it is expected that the community will select its own leaders and that the list of interest will mutate, showing its dynamic nature. The mutation of the list can be grouped into two categories attending to the source of the influence: (1) internal and (2) external.</p>
<ul>
<li>
<p>(1) Internal changes of the list are caused because of consensus on the community of practise and represent the interest of the members</p>
</li>
<li>
<p>(2) External changes can be understood as innovations in the domain of interest. The innovation is brought into the community via the sensing capabilities of the brokers.</p>
</li>
</ul>
<p>Please note that both, the initial designation of “leaders” and “topics” are to initiate the system of social learning, but over time, both leaders and topics will mutate to the desired and agree state reached inside the system, making it self-sustained.</p>
<p>Last, it is essential to match the activities of the CoP with the benefit of the company, creating feedback between the two subsystems: the profitability of the company and our community of practice. A failure in linking both systems will destroy the CoP overtime due to the lack of funding for the practice activities.</p>
<p>We can discuss that the strengths of a community of practice are to provide a framework of ideas regarding the “how” to organise a system in which members can share ideas and develop themselves to proficient professionals. For example, the role of the business developers could exercise in the community of practice as brokers of ideas and information is based on Wenger’s model as cited in (Blackmore, 2010).</p>
<p>A possible downside of the proposed system is that even though the idea of a dynamic community of practice, in which once the domain grows, a  new community of practice could emerge is discussed, the framework does not provide with clear guidelines of what is really a new domain, with the risk of new CoPs being born only because of internal conflicts and point of views of the senior members, in which a power struggle appears to satisfy the need of personal importance, what is commonly known by the expression “big fish in a small pond”
Conclusion</p>
<p>The introduction of the juggling metaphor allows for balancing the different aspects to be considered while making a systemic inquiry, which should be understood as a mechanism to allow the consideration of complex situations, rather than a ‘recipe’ to be followed blindly to reach an end.</p>
<p>At the same time, while we have not discussed the influence of the CoP in the financial side of the business, we noted that the CoP can translate in profit in an indirect approach, via employee satisfaction and reducing turnover rates of the company.</p>
<p>We could also argue that the CoP does not provide a clear path of implementation like classical approaches to project management, but as explaining at the beginning of the briefing paper, the problems classified as “wicked” or “messy” cannot be solved with a “recipe” approach. In this context, CoPs are a framework providing ideas on how to develop a system to tackle complex situations.</p>
<p>Last, the possible conflict or tension that could arise between members recognised as “leaders” inside the CoP but with a lesser role inside a working team of the company was omitted. During the research, the author found nothing regarding this possible tension in the cases provided in the literature of (Blackmore, 2010).</p>
<p>A reader could be tempted to translate the role or position inside the CoP into the organisation, but we should note that the recognition as a technical expert inside a CoP may not include other skills such as accountability and management techniques that are deemed of sheer importance in a leadership role inside an organisation.</p>
]]></content>
        </item>
        
        <item>
            <title>Critique of recipe-based approach to managing change</title>
            <link>https://blog.miguens.one/posts/2019/05/critique-of-recipe-based-approach-to-managing-change/</link>
            <pubDate>Thu, 02 May 2019 00:00:00 +0000</pubDate>
            
            <guid>https://blog.miguens.one/posts/2019/05/critique-of-recipe-based-approach-to-managing-change/</guid>
            <description>&lt;p&gt;Grey and Sturdy (2003) criticised the focus on managerialism and universalism of managing change, making an argument against a recipe approach to change management and the existence of step by step guides on how to manage change successfully.&lt;/p&gt;
&lt;p&gt;I am not unfamiliar with that component of Grey and Sturdy&amp;rsquo;s critique, as it was one of the core ideas of the module TU812: Managing systemic change: inquiry, action, and interaction of the Open University.  Ison (2010), in his book &amp;ldquo;System practice: How to act in a climate-change world&amp;rdquo;, suggests that situations should be approached by a system thinking approach rather than a recipe-for-all theory.&lt;/p&gt;</description>
            <content type="html"><![CDATA[<p>Grey and Sturdy (2003) criticised the focus on managerialism and universalism of managing change, making an argument against a recipe approach to change management and the existence of step by step guides on how to manage change successfully.</p>
<p>I am not unfamiliar with that component of Grey and Sturdy&rsquo;s critique, as it was one of the core ideas of the module TU812: Managing systemic change: inquiry, action, and interaction of the Open University.  Ison (2010), in his book &ldquo;System practice: How to act in a climate-change world&rdquo;, suggests that situations should be approached by a system thinking approach rather than a recipe-for-all theory.</p>
<p>The disadvantage of system thinking is the significant commitment of resources to engage in a systemic enquiry, as explained by Ison.</p>
<p>In this context, Theory E&amp;O falls under the recipe-based approach and cannot englobe all details for an effective change.</p>
<p>The author&rsquo;s opinion that a recipe-based approach should be used as a first approach to deal with change, monitoring the progress of the change and switching to a &lsquo;meta platform based on system thinking when the complexity of the change starts to become apparent.</p>
<p>The main reason to attempt a recipe-based approach to managing change is the heavy burden of time and resources that a systemic approach requires.</p>
<h2 id="alternative-approach-staceys-complexity-zone">Alternative approach: Stacey&rsquo;s Complexity Zone</h2>
<p>The paper Complexity theories and organisational change (Burnes, 2005) introduces the concept of complexity theories with the following area of concern:</p>
<p><em>&quot;[…] the emergence of order in dynamic non-linear systems operating at the edge of chaos: in other words, systems which are constantly changing and where the laws of cause and effect appear not to apply &ldquo;.</em></p>
<p>The definition seems to expand on Stacey&rsquo;s zone 5 or zone of bounded instability/complexity zone. This zone is described as where the company can be more creative and make a considerable difference, and in which traditional management is least effective.</p>
<p>I consider that this approach will benefit an organisation by opening a dialogue to search for a new management system and providing a self-sustained model regarding the number of departments.</p>
<p>I have observed previously a system relying on several departments, but with the current personnel not enough to fill all departments. Simultaneously, people are exchangeable between departments as the education and competencies are identical between the sections.</p>
<p>A most efficient approach is to embrace the changing environment and create procedures for the emergence of functional areas based on the specialisation of knowledge rather than fixed departments.</p>
<p>The new areas will emerge as long as new people join the organisation. The idea is not new but rather a simplification of the existing concept of communities of practice (Blackmore, 2010).</p>
<p>I think the implementation of that concept will allow dissipating some of the resistance of change, as all stakeholders can share their ideas regarding the new system rather than being imposed by a director. At the same time, it will provide a system that overcomes the current limitation of bumping from a static situation A to a static situation B, being A the old small company single-departmental structure, and B the new multiple-departmental structure.</p>
<p>Last it will avoid the excessive overhead of middle management in the initial phase after the change: with several departments and barely enough people to populate them.</p>
<p>The views of a systemic approach are not free of risks. We have already discussed that system thinking approaches require more resources and time to engage with the situation. We should note the possibility of endless dialogues in which no solutions or commitments are agreed upon. Therefore no change is the most probable outcome.</p>
<h3 id="references">References</h3>
<ul>
<li>Blackmore, C. (2010) Social learning systems and communities of practice, Social Learning Systems and Communities of Practice [Online]. DOI: 10.1007/978-1-84996-133-2 (Accessed 16 March 2019).</li>
<li>Bruch, H. and Ghoshal, S. (2003) &lsquo;Unleashing Organizational Energy&rsquo;, MIT Sloan Management Review, vol. 45, no. 1.</li>
<li>Burnes, B. (2005) &lsquo;Complexity theories and organisational change&rsquo;, International Journal of Management Reviews, vol. 7, no. 2, pp. 73–90 [Online]. DOI: 10.1111/j.1468-2370.2005.00107.x.</li>
<li>Grey, C. and Sturdy, A. (2003) &lsquo;Beneath and Beyond Organizational Change Management: Exploring Alternatives&rsquo;, Organization, vol. 10, no. 4, pp. 651–662.</li>
<li>Ison, R. (2010) Systems practice: How to act in a climate-change world, London, Springer London [Online]. DOI: 10.1007/978-1-84996-125-7.</li>
<li>The Open University (2015) Book 1: Exploring management, Fifth edit. The Open University (ed), Milton Keynes, The Open University.</li>
</ul>
]]></content>
        </item>
        
        <item>
            <title>Critique of Communities of Practice</title>
            <link>https://blog.miguens.one/posts/2019/04/critique-of-communities-of-practice/</link>
            <pubDate>Mon, 08 Apr 2019 00:00:00 +0000</pubDate>
            
            <guid>https://blog.miguens.one/posts/2019/04/critique-of-communities-of-practice/</guid>
            <description>&lt;h2 id=&#34;critique-of-communities-of-practice&#34;&gt;Critique of Communities of Practice&lt;/h2&gt;
&lt;p&gt;The examples of Communities of Practice presented in (Blackmore, 2010) do not provide a practical implementation in a business environment and is lacking information about how CoP could translate in profit for an organisation.&lt;/p&gt;
&lt;p&gt;We have seen that CoP can translate in profit in an indirect approach, via employee satisfaction and reducing turnover rates of the company.&lt;/p&gt;
&lt;p&gt;We could also argue that the different interpretations of CoP make it challenging to apply the concepts or to take complete advantage of the benefits that the communities of practice could offer. Nonetheless, that is expected as the module deals with complex situations that cannot be solved with a “recipe” approach of classical project management. In this context, Communities of Practice are a framework providing ideas on how to develop a system to tackle complex situations.&lt;/p&gt;</description>
            <content type="html"><![CDATA[<h2 id="critique-of-communities-of-practice">Critique of Communities of Practice</h2>
<p>The examples of Communities of Practice presented in (Blackmore, 2010) do not provide a practical implementation in a business environment and is lacking information about how CoP could translate in profit for an organisation.</p>
<p>We have seen that CoP can translate in profit in an indirect approach, via employee satisfaction and reducing turnover rates of the company.</p>
<p>We could also argue that the different interpretations of CoP make it challenging to apply the concepts or to take complete advantage of the benefits that the communities of practice could offer. Nonetheless, that is expected as the module deals with complex situations that cannot be solved with a “recipe” approach of classical project management. In this context, Communities of Practice are a framework providing ideas on how to develop a system to tackle complex situations.</p>
<p>Last, we should note that the tension between satisfying the individual need for personal growth versus an organisation objective of creating monetary value is perhaps the most difficult of the issues that make CoPs difficult to implement.</p>
<h2 id="strengths-and-limitations-found-during-analysis-and-design">Strengths and limitations found during analysis and design</h2>
<p>An obvious strength I have found in the idea of a community of practice is to fight the sense of loneliness and isolation that may occur in companies formed by small and independent sections, providing a system to provide training and mentoring to junior members, while at the same time further developing the capabilities of the existing members.</p>
<p>Nonetheless, I have omitted a discussion regarding the possible conflict or tension that could arise between members recognised as “leaders” inside the CoP but with a lesser role inside a working team of the company. I have found nothing regarding this possible tension in the cases provided in (Blackmore, 2010). A reader could be tempted to translate the role or position inside the CoP into the organisation, but we should note that the recognition as a technical expert inside a CoP may not include other skills such as accountability and management techniques that are deemed of sheer importance in a leadership role inside an organisation.</p>
]]></content>
        </item>
        
        <item>
            <title>Strengths, weakness and missing elements of the theory of communities of practice</title>
            <link>https://blog.miguens.one/posts/2019/04/strengths-weakness-and-missing-elements-of-the-theory-of-communities-of-practice/</link>
            <pubDate>Sun, 07 Apr 2019 00:00:00 +0000</pubDate>
            
            <guid>https://blog.miguens.one/posts/2019/04/strengths-weakness-and-missing-elements-of-the-theory-of-communities-of-practice/</guid>
            <description>&lt;h2 id=&#34;strengths-weakness-and-missing-elements-of-the-theory-of-communities-of-practice&#34;&gt;Strengths, weakness and missing elements of the theory of communities of practice&lt;/h2&gt;
&lt;p&gt;We can discuss that the strengths of a community of practice are to provide a framework of ideas regarding the “how” to organise a system in which members can share ideas and develop themselves to proficient professionals. For example, without Wenger’s model, I would have overlooked the role those business developers could exercise in a community of practice as brokers of ideas and information.&lt;/p&gt;</description>
            <content type="html"><![CDATA[<h2 id="strengths-weakness-and-missing-elements-of-the-theory-of-communities-of-practice">Strengths, weakness and missing elements of the theory of communities of practice</h2>
<p>We can discuss that the strengths of a community of practice are to provide a framework of ideas regarding the “how” to organise a system in which members can share ideas and develop themselves to proficient professionals. For example, without Wenger’s model, I would have overlooked the role those business developers could exercise in a community of practice as brokers of ideas and information.</p>
<p>In the downside, even though the idea of a dynamic community of practice, in which once the domain grows, a  new community of practice could emerge is discussed, the framework does not provide with clear guidelines of what is really a new domain, with the risk of new CoPs being born only because of internal conflicts and point of views of the senior members.</p>
<p>The business side of communities of practice is missing from the framework, which is of great importance, as the time and materials required by the community of practice of my case of concern cannot survive without the financial commitment of upper management.</p>
<p>Last, I have been missing some ideas regarding how to gradually implement a community of practice and overcome the initial scepticism of the members. In my case of concern, an atmosphere of pessimism is present , and commitment is low to activities such as “Lunch &amp; Learn” with small technical presentations while lunch is provided. In this environment implementing a community of practice requires small and incremental steps over time and engage a considerable number of members to participate in order to start our system.</p>
<h2 id="design-proposal-for-an-intervention">Design proposal for an intervention</h2>
<p>To implement a Community of Practice in a company, we should initiate a set of brainstorming meetings in order to identify some common and specific interest. Once identified a small list of topics, some “leaders” should be appointed. The leadership role is not static, and their part will be to manage and arrange the space to exchange ideas.</p>
<p>In parallel, an online tool should be implemented to provide a space for communication. The main requirement of this space is to provide a place for asynchronous communication, for example, a forum.</p>
<p>After the first iteration of workshops, seminars and conversations in the forum, it is expected that the community will select its own leaders or representatives and that the list of interest will mutate, showing its dynamic nature. The mutation of the list can be grouped into two categories attending to the source of the influence: (1) internal and (2) external.</p>
<ul>
<li>
<p>(1) Internal changes of the list are caused because of consensus on the community of practise and represent the interest of the members</p>
</li>
<li>
<p>(2) External changes can be understood as innovations in the domain of interest. The innovation is brought into the community via the sensing capabilities of the brokers.</p>
</li>
</ul>
<p>Please note that both, the initial designation of “leaders” and “topics” are to initiate the system of social learning, but over time, both leaders and topics will mutate to the desired and agree state reached inside the system, making it self-sustained.</p>
<p>Last, it is important to match the activities of the CoP with the benefit of the company, creating feedback between the two subsystems: the profitability of the company and our community of practice. A failure in linking both systems will destroy the CoP overtime due to the lack of funding for the practice activities.</p>
]]></content>
        </item>
        
        <item>
            <title>Taking a design turn</title>
            <link>https://blog.miguens.one/posts/2019/04/taking-a-design-turn/</link>
            <pubDate>Sat, 06 Apr 2019 00:00:00 +0000</pubDate>
            
            <guid>https://blog.miguens.one/posts/2019/04/taking-a-design-turn/</guid>
            <description>&lt;p&gt;We have seen that in contrast to a systematic approach, there are no templates in the systemic approach. (Ison, 2010) introduces two orders in the learning system. The first order is characterised by a knowledge transfer, while the second order is about creating the environment to allow the student or practitioner to learn by itself.&lt;/p&gt;
&lt;p&gt;The transition from the first order mentality to the second order is what it is called ‘a design turn’.&lt;/p&gt;</description>
            <content type="html"><![CDATA[<p>We have seen that in contrast to a systematic approach, there are no templates in the systemic approach. (Ison, 2010) introduces two orders in the learning system. The first order is characterised by a knowledge transfer, while the second order is about creating the environment to allow the student or practitioner to learn by itself.</p>
<p>The transition from the first order mentality to the second order is what it is called ‘a design turn’.</p>
<p>In my journey I have experienced the ‘design turn’ while writing module assignments with the Juggle Methaphor framework , due to the relational dynamic of juggling the balls, my line of thinking was not linear, but instead every time a new concept “matures” in me, it opens several ramifications or different ways to pursue other concepts.</p>
<p>My classical approach to problem-solving was systematic: in which once a sub-problem is solved I moved to the next and forgot about all solved sub-problems.</p>
<p>Now I come to realise that not all problems can be solved dealing with several parts, but instead, I should consider the whole systems, its relationships and also myself as an element of the system.</p>
]]></content>
        </item>
        
        <item>
            <title>Project management vs System Inquiry</title>
            <link>https://blog.miguens.one/posts/2019/04/project-management-vs-system-inquiry/</link>
            <pubDate>Fri, 05 Apr 2019 00:00:00 +0000</pubDate>
            
            <guid>https://blog.miguens.one/posts/2019/04/project-management-vs-system-inquiry/</guid>
            <description>&lt;p&gt;From my previous studies in the module T848 in The Open University, I was introduced to quadrants in project management approaches. According to (Fernandez, 2016), a project is classified according to a binary answer to two characteristics: goal and solution, as summarised in figure (2):&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://blog.miguens.one/img/project_management.png&#34; alt=&#34;Project Management quadrants&#34;&gt;&lt;/p&gt;
&lt;p&gt;Figure 2: Project characteristics quadrants. Extracted from (Fernandez, 2016) &lt;/p&gt;
&lt;p&gt;We can appreciate the similarities of a project with unclear goal and unclear solution with the words of (Ison, 2010): “Thus, unlike most projects, a systemic inquiry does not specify outcomes or deliverables before it starts – though it may specify process or timing milestones – and thus maintains an openness to surprise, adaption and an underlying emotion of uncertainty…”
(Fernandez, 2016) adds that in quadrant 3, no business value is guaranteed and introduces a variation of project managing with shorter linear and template-based solutions. I agree, therefore, with (Ison, 2010) rationale and critique of a “projectified” world.&lt;/p&gt;</description>
            <content type="html"><![CDATA[<p>From my previous studies in the module T848 in The Open University, I was introduced to quadrants in project management approaches. According to (Fernandez, 2016), a project is classified according to a binary answer to two characteristics: goal and solution, as summarised in figure (2):</p>
<p><img src="/img/project_management.png" alt="Project Management quadrants"></p>
<p>Figure 2: Project characteristics quadrants. Extracted from (Fernandez, 2016) </p>
<p>We can appreciate the similarities of a project with unclear goal and unclear solution with the words of (Ison, 2010): “Thus, unlike most projects, a systemic inquiry does not specify outcomes or deliverables before it starts – though it may specify process or timing milestones – and thus maintains an openness to surprise, adaption and an underlying emotion of uncertainty…”
(Fernandez, 2016) adds that in quadrant 3, no business value is guaranteed and introduces a variation of project managing with shorter linear and template-based solutions. I agree, therefore, with (Ison, 2010) rationale and critique of a “projectified” world.</p>
<p>In my opinion, we should be able to deal with complex situations, even if the outcome is uncertain, although we should allow for some templates or project management techniques to take control in some of the subsystems of our system of interest.</p>
<p>A system inquiry, as described in the examples of the book (Ison, 2010) is a time consuming and demanding process, with several iterations. We should add that society is not used to confront problems in a systemic approach. Therefore we should benefit from the shortcuts provided by the project management techniques and incorporate those tools in our systems. We can expand on its importance, considering current management as a social technology, therefore, will be counter-intuitive not to use those techniques and allow members of the team to the benefit of the structure and easy-of-mind provided by project management.</p>
]]></content>
        </item>
        
        <item>
            <title>My understanding of System Inquiry</title>
            <link>https://blog.miguens.one/posts/2019/04/my-understanding-of-system-inquiry/</link>
            <pubDate>Tue, 02 Apr 2019 00:00:00 +0000</pubDate>
            
            <guid>https://blog.miguens.one/posts/2019/04/my-understanding-of-system-inquiry/</guid>
            <description>&lt;p&gt;After several examples during the course of Systems Thinking, part of Open University MBA, we can see that traditional approaches to project management had failed in tackling some difficult situations.&lt;/p&gt;
&lt;p&gt;In chapter 10 of (Ison, 2010), it is discussed that situations with several complex elements interdependent which each other, in which an internal modification of either an element or connection will result in an uncertain outcome, and where conflict is present, due to different goal of the elements of the situation and the different background (understood as history and perspective) of the stakeholders, can benefit of systems thinking approach, and therefore introducing the concept of systemic inquiry as a meta-platform or process for a project or program managing.&lt;/p&gt;</description>
            <content type="html"><![CDATA[<p>After several examples during the course of Systems Thinking, part of Open University MBA, we can see that traditional approaches to project management had failed in tackling some difficult situations.</p>
<p>In chapter 10 of (Ison, 2010), it is discussed that situations with several complex elements interdependent which each other, in which an internal modification of either an element or connection will result in an uncertain outcome, and where conflict is present, due to different goal of the elements of the situation and the different background (understood as history and perspective) of the stakeholders, can benefit of systems thinking approach, and therefore introducing the concept of systemic inquiry as a meta-platform or process for a project or program managing.</p>
<p>For example, my career and study path are complex situations, that evolves and where external factors do not only influence me but also my studies and new ideas modify my situation. If I were considering my studies under a classical project management approach, I should develop a new roadmap every time a change of goal occurs due to my changed perspective caused by my inquiry, resulting in a tedious task in which planning takes more effort than working towards the goal.</p>
<p>The discussion made by (Ison, 2010) of considering me as a systems practitioner (and defining my situation as S1) is influenced by my system inquiry about a situation of concern (denoted by S2), and therefore the second iteration of system inquiry of S2 will produce different results, due to the fact that S2 if influenced by the practitioner with a changing situation (S1). That is explained in figure (1) reproduced from the course materials.</p>
<p><img src="/img/S1_S2.png" alt="Ison and Blackmore Figure"></p>
<p>Figure 1: Extracted from page 58 of (Ison and Blackmore, 2010)</p>
<p>Chapter 5, (Ison, 2010) compares the relationship of S1 and S2 with the Heisenberg principle in quantum physics. In my opinion, as a physicist, I can appreciate the metaphor that Ray Ison tried to achieve. It must be noted though that although the measurement is affected by the observation of a phenomenon, it does not do that cyclical, and therefore a probabilistic system (that in our vocabulary of system thinking correspond with systematic) can be defined and studied, removing the complex system element from quantum physics.</p>
]]></content>
        </item>
        
        <item>
            <title>Definitions of system related concepts</title>
            <link>https://blog.miguens.one/posts/2018/12/definitions-of-system-related-concepts/</link>
            <pubDate>Sun, 02 Dec 2018 00:00:00 +0000</pubDate>
            
            <guid>https://blog.miguens.one/posts/2018/12/definitions-of-system-related-concepts/</guid>
            <description>&lt;p&gt;The different definitions of a system are:&lt;/p&gt;
&lt;p&gt;&amp;ldquo;A system, in general, is any part of the universe which may be defined by a boundary which distinguishes it from the rest of the universe.&amp;rdquo; &lt;em&gt;(&lt;a href=&#34;https://nptel.ac.in/courses/103101004/2&#34;&gt;https://nptel.ac.in/courses/103101004/2&lt;/a&gt;, 2018)&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&amp;ldquo;system (NOUN)&lt;/p&gt;
&lt;p&gt;1. set of things working together as parts of a mechanism or an interconnecting network; a complex whole.&lt;/p&gt;
&lt;p&gt;2. set of principles or procedures according to which something is done; an organized scheme or method.&amp;rdquo; &lt;em&gt;(&lt;a href=&#34;https://en.oxforddictionaries.com/definition/system&#34;&gt;https://en.oxforddictionaries.com/definition/system&lt;/a&gt;, 2018)&lt;/em&gt;&lt;/p&gt;</description>
            <content type="html"><![CDATA[<p>The different definitions of a system are:</p>
<p>&ldquo;A system, in general, is any part of the universe which may be defined by a boundary which distinguishes it from the rest of the universe.&rdquo; <em>(<a href="https://nptel.ac.in/courses/103101004/2">https://nptel.ac.in/courses/103101004/2</a>, 2018)</em></p>
<p>&ldquo;system (NOUN)</p>
<p>1. set of things working together as parts of a mechanism or an interconnecting network; a complex whole.</p>
<p>2. set of principles or procedures according to which something is done; an organized scheme or method.&rdquo; <em>(<a href="https://en.oxforddictionaries.com/definition/system">https://en.oxforddictionaries.com/definition/system</a>, 2018)</em></p>
<p>We can observe that the first definition, from the field of physics, is too generic, and it englobes from a nuclear reactor enclosed in a dome to a peanut enclosed in a jar. The second definition is more suitable according to the module material; there, a system is defined not only as the elements that form it, but also the connections between the constituent parts. Last, it introduces a definition that can be applied to not material objects, as it defines a system as a list of procedures, for example, the system to elaborate this assignment could be defined as a succession of steps such as reading the material, draft the main ideas that answer the formulated questions, write organized paragraphs and last review the whole document.</p>
<p>A search of the concept of reflexivity returns:</p>
<p>&ldquo;the fact of someone being able to examine his or her own feelings, reactions, and motives (= reasons for acting) and how these influence what he or she does or thinks in a situation.&rdquo; <em>(<a href="https://dictionary.cambridge.org/dictionary/english/reflexivity">https://dictionary.cambridge.org/dictionary/english/reflexivity</a>, 2018)</em></p>
<p>&ldquo;Reflexivity is the theory that a two-way feedback loop exists in which investors&rsquo; perceptions affect that environment, which in turn changes investor perceptions. The theory of reflexivity has its roots in social science, but in the world of economics and finance, its primary proponent is George Soros.&rdquo; <em>(<a href="https://www.investopedia.com/terms/r/reflexivity.asp">https://www.investopedia.com/terms/r/reflexivity.asp</a>, 2018)</em></p>
<p>We can observe that the Cambridge definition is limited to a single person, while the second definition, in the context of economics, introduces into the definition several people (the investors). Also, it introduces the concept of the two-way feedback loop, which comes from a concept of control theory. In short, we could say that the first definition is limited to the &ldquo;act&rdquo; of reflexivity, while in the second definition it is defined as an &ldquo;attribute&rdquo; of a system (or part of a system)</p>
<p>The course materials (Ison and Blackmore, 2010) in Box 1.6 states that while reflection is pausing to consider what is being done, reflexion is a higher order, that concerns about the &ldquo;what&rdquo; and the &ldquo;why&rdquo; of an action. In this context, we find the definition of Cambridge more in-line with the course materials, as it introduces the &ldquo;reasons for acting&rdquo; as part of the concept, which have parallelism with the &ldquo;why&rdquo; component explained in the material.</p>
<p>Last, we can find the following definitions of systemic change online:</p>
<p>&ldquo;systemic change occurs when change reaches all or most parts of a system, thus affecting the general behaviour of the entire system.&rdquo; <em>(Connolly, 2017)</em></p>
<p>&ldquo;&hellip;an intentional process designed to alter the status quo by shifting the function or structure of an identified system with purposeful interventions&hellip;Systems change aims to bring about lasting change by altering underlying structures and supporting mechanisms which make the system operate in a particular way. These can include policies, routines, relationships, resources, power structures and values.&rdquo; <em>(Taylor, 2016)</em></p>
<p>From both definitions we can infer that systemic change occurs once the complete system is modified, not only an element but several elements and the relationships between those elements, resulting in a new whole system. This concept is more specific that innovation, that englobes any new ideas of products, systems or processed, but more alike disruptive innovation, which is often accompanied by new elements and relationships. For example, the introduction of first minicomputers is a clear example of disruptive innovation (Donohue, 2005), that change profoundly systems in all companies and how their existing systems communicate which each other, offering an example of systemic change.</p>
]]></content>
        </item>
        
        <item>
            <title>Automate Plex Clean-up</title>
            <link>https://blog.miguens.one/posts/2018/11/automate-plex-clean-up/</link>
            <pubDate>Fri, 02 Nov 2018 00:00:00 +0000</pubDate>
            
            <guid>https://blog.miguens.one/posts/2018/11/automate-plex-clean-up/</guid>
            <description>&lt;p&gt;In an old post I teach how to create your own Netflix with Docker Compose. The problem is that over time you can download several movies with really low rating, or from a genre you are not a fan.&lt;/p&gt;
&lt;p&gt;I have created a small Jupyter Notebook to help me with my spring-cleaning (in this case winter). Feel free to modify it to your case.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;from&lt;/span&gt; plexapi.myplex &lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; MyPlexAccount
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;account &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; MyPlexAccount(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;USERNAME&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;PASSWORD&amp;#39;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;plex &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; account&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;resource(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;PLEX SERVER NAME&amp;#39;&lt;/span&gt;)&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;connect()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;movies_to_delete &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; list()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;movies_to_refresh &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; list()
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;movies &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; plex&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;library&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;section(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Films&amp;#39;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;liked_genres &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; {&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Comedy&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Horror&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Sci-Fi&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Mystery&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Adventure&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Action&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Fantasy&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Thriller&amp;#39;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;               &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Science Fiction&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Action/Adventure&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Crime&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Western&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Animation&amp;#39;&lt;/span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; movie &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; movies&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;search(unwatched&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;True&lt;/span&gt;): 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    genres &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; set()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; genre &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; movie&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;genres:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        genres&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;add(genre&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;tag)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; len(genres &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt; liked_genres) &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        print(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Movie &lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;{}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt; not with liked genres: &lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;{}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;format(movie&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;title, genres))
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        movies_to_delete&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;append(movie)
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;movies &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; plex&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;library&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;section(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Films&amp;#39;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; video &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; movies&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;search(unwatched&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;True&lt;/span&gt;):
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    title &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; video&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;title
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    rating &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; video&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;rating
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    audience &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; video&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;audienceRating
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; rating &lt;span style=&#34;color:#f92672&#34;&gt;is&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;not&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;None&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;and&lt;/span&gt; rating &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;4.0&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;and&lt;/span&gt; audience &lt;span style=&#34;color:#f92672&#34;&gt;is&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;None&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        print(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;title = &lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;{title}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;, rating = &lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;{rating}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;, audience = &lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;{audience}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;              format(title &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; title, rating &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; rating, audience &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; audience))
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        movies_to_delete&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;append(video)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;continue&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; rating &lt;span style=&#34;color:#f92672&#34;&gt;is&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;not&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;None&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;and&lt;/span&gt; rating &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;5.0&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;and&lt;/span&gt; \
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;       audience &lt;span style=&#34;color:#f92672&#34;&gt;is&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;not&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;None&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;and&lt;/span&gt; audience &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;5.0&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        print(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;title = &lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;{title}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;, rating = &lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;{rating}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;, audience = &lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;{audience}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;              format(title &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; title, rating &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; rating, audience &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; audience))
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        movies_to_delete&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;append(video)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;continue&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; rating &lt;span style=&#34;color:#f92672&#34;&gt;is&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;not&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;None&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;and&lt;/span&gt; audience &lt;span style=&#34;color:#f92672&#34;&gt;is&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;not&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;None&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;and&lt;/span&gt; \
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;       (rating &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; audience)&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;5.0&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        print(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;title = &lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;{title}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;, rating = &lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;{rating}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;, audience = &lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;{audience}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;              format(title &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; title, rating &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; rating, audience &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; audience))
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        movies_to_delete&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;append(video)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;continue&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; audience &lt;span style=&#34;color:#f92672&#34;&gt;is&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;not&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;None&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;and&lt;/span&gt; audience &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;4.0&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        print(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;title = &lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;{title}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;, rating = &lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;{rating}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;, audience = &lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;{audience}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;              format(title &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; title, rating &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; rating, audience &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; audience))
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        movies_to_delete&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;append(video)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;continue&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; audience &lt;span style=&#34;color:#f92672&#34;&gt;is&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;None&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;or&lt;/span&gt; rating &lt;span style=&#34;color:#f92672&#34;&gt;is&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;None&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        movies_to_refresh&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;append(video)
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;movies &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; plex&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;library&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;section(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Films&amp;#39;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; movie &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; movies&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;search(unwatched&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;True&lt;/span&gt;):
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    movie&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;reload()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; media &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; movie&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;media:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; part &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; media&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;parts:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            languages &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; list()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; audioStream &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; part&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;audioStreams():
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                language &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; audioStream&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;language
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; language &lt;span style=&#34;color:#f92672&#34;&gt;is&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;not&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;None&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                    languages&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;append(language)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; len(languages) &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;and&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;English&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;not&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; languages:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                print(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;The movie &lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;{}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt; is not in English (&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;{}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;)&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;format(movie&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;title, languages))
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                movies_to_delete&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;append(movie)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                    
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# for movie in movies_to_delete:&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#     print(&amp;#34;Deleting {}&amp;#34;.format(movie.title))&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#     movie.delete()&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# for movie in movies_to_refresh:&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#     print(&amp;#34;Refresing metadata of movie for next run: {}&amp;#34;.format(movie.title))&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#     video.refresh()&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;For safety I have commented the lines that delete or trigger a refresh in Plex, so you can copy/paste and try it without risk&lt;/p&gt;</description>
            <content type="html"><![CDATA[<p>In an old post I teach how to create your own Netflix with Docker Compose. The problem is that over time you can download several movies with really low rating, or from a genre you are not a fan.</p>
<p>I have created a small Jupyter Notebook to help me with my spring-cleaning (in this case winter). Feel free to modify it to your case.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#f92672">from</span> plexapi.myplex <span style="color:#f92672">import</span> MyPlexAccount
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>account <span style="color:#f92672">=</span> MyPlexAccount(<span style="color:#e6db74">&#39;USERNAME&#39;</span>, <span style="color:#e6db74">&#39;PASSWORD&#39;</span>)
</span></span><span style="display:flex;"><span>plex <span style="color:#f92672">=</span> account<span style="color:#f92672">.</span>resource(<span style="color:#e6db74">&#39;PLEX SERVER NAME&#39;</span>)<span style="color:#f92672">.</span>connect()
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>movies_to_delete <span style="color:#f92672">=</span> list()
</span></span><span style="display:flex;"><span>movies_to_refresh <span style="color:#f92672">=</span> list()
</span></span></code></pre></div><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span>movies <span style="color:#f92672">=</span> plex<span style="color:#f92672">.</span>library<span style="color:#f92672">.</span>section(<span style="color:#e6db74">&#39;Films&#39;</span>)
</span></span><span style="display:flex;"><span>liked_genres <span style="color:#f92672">=</span> {<span style="color:#e6db74">&#39;Comedy&#39;</span>, <span style="color:#e6db74">&#39;Horror&#39;</span>, <span style="color:#e6db74">&#39;Sci-Fi&#39;</span>, <span style="color:#e6db74">&#39;Mystery&#39;</span>, <span style="color:#e6db74">&#39;Adventure&#39;</span>, <span style="color:#e6db74">&#39;Action&#39;</span>, <span style="color:#e6db74">&#39;Fantasy&#39;</span>, <span style="color:#e6db74">&#39;Thriller&#39;</span>,
</span></span><span style="display:flex;"><span>               <span style="color:#e6db74">&#39;Science Fiction&#39;</span>, <span style="color:#e6db74">&#39;Action/Adventure&#39;</span>, <span style="color:#e6db74">&#39;Crime&#39;</span>, <span style="color:#e6db74">&#39;Western&#39;</span>, <span style="color:#e6db74">&#39;Animation&#39;</span>}
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">for</span> movie <span style="color:#f92672">in</span> movies<span style="color:#f92672">.</span>search(unwatched<span style="color:#f92672">=</span><span style="color:#66d9ef">True</span>): 
</span></span><span style="display:flex;"><span>    genres <span style="color:#f92672">=</span> set()
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">for</span> genre <span style="color:#f92672">in</span> movie<span style="color:#f92672">.</span>genres:
</span></span><span style="display:flex;"><span>        genres<span style="color:#f92672">.</span>add(genre<span style="color:#f92672">.</span>tag)
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">if</span> len(genres <span style="color:#f92672">&amp;</span> liked_genres) <span style="color:#f92672">==</span> <span style="color:#ae81ff">0</span>:
</span></span><span style="display:flex;"><span>        print(<span style="color:#e6db74">&#34;Movie </span><span style="color:#e6db74">{}</span><span style="color:#e6db74"> not with liked genres: </span><span style="color:#e6db74">{}</span><span style="color:#e6db74">&#34;</span><span style="color:#f92672">.</span>format(movie<span style="color:#f92672">.</span>title, genres))
</span></span><span style="display:flex;"><span>        movies_to_delete<span style="color:#f92672">.</span>append(movie)
</span></span></code></pre></div><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span>movies <span style="color:#f92672">=</span> plex<span style="color:#f92672">.</span>library<span style="color:#f92672">.</span>section(<span style="color:#e6db74">&#39;Films&#39;</span>)
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">for</span> video <span style="color:#f92672">in</span> movies<span style="color:#f92672">.</span>search(unwatched<span style="color:#f92672">=</span><span style="color:#66d9ef">True</span>):
</span></span><span style="display:flex;"><span>    title <span style="color:#f92672">=</span> video<span style="color:#f92672">.</span>title
</span></span><span style="display:flex;"><span>    rating <span style="color:#f92672">=</span> video<span style="color:#f92672">.</span>rating
</span></span><span style="display:flex;"><span>    audience <span style="color:#f92672">=</span> video<span style="color:#f92672">.</span>audienceRating
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">if</span> rating <span style="color:#f92672">is</span> <span style="color:#f92672">not</span> <span style="color:#66d9ef">None</span> <span style="color:#f92672">and</span> rating <span style="color:#f92672">&lt;</span> <span style="color:#ae81ff">4.0</span> <span style="color:#f92672">and</span> audience <span style="color:#f92672">is</span> <span style="color:#66d9ef">None</span>:
</span></span><span style="display:flex;"><span>        print(<span style="color:#e6db74">&#34;title = </span><span style="color:#e6db74">{title}</span><span style="color:#e6db74">, rating = </span><span style="color:#e6db74">{rating}</span><span style="color:#e6db74">, audience = </span><span style="color:#e6db74">{audience}</span><span style="color:#e6db74">&#34;</span><span style="color:#f92672">.</span>
</span></span><span style="display:flex;"><span>              format(title <span style="color:#f92672">=</span> title, rating <span style="color:#f92672">=</span> rating, audience <span style="color:#f92672">=</span> audience))
</span></span><span style="display:flex;"><span>        movies_to_delete<span style="color:#f92672">.</span>append(video)
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">continue</span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">if</span> rating <span style="color:#f92672">is</span> <span style="color:#f92672">not</span> <span style="color:#66d9ef">None</span> <span style="color:#f92672">and</span> rating <span style="color:#f92672">&lt;</span> <span style="color:#ae81ff">5.0</span> <span style="color:#f92672">and</span> \
</span></span><span style="display:flex;"><span>       audience <span style="color:#f92672">is</span> <span style="color:#f92672">not</span> <span style="color:#66d9ef">None</span> <span style="color:#f92672">and</span> audience <span style="color:#f92672">&lt;</span> <span style="color:#ae81ff">5.0</span>:
</span></span><span style="display:flex;"><span>        print(<span style="color:#e6db74">&#34;title = </span><span style="color:#e6db74">{title}</span><span style="color:#e6db74">, rating = </span><span style="color:#e6db74">{rating}</span><span style="color:#e6db74">, audience = </span><span style="color:#e6db74">{audience}</span><span style="color:#e6db74">&#34;</span><span style="color:#f92672">.</span>
</span></span><span style="display:flex;"><span>              format(title <span style="color:#f92672">=</span> title, rating <span style="color:#f92672">=</span> rating, audience <span style="color:#f92672">=</span> audience))
</span></span><span style="display:flex;"><span>        movies_to_delete<span style="color:#f92672">.</span>append(video)
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">continue</span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">if</span> rating <span style="color:#f92672">is</span> <span style="color:#f92672">not</span> <span style="color:#66d9ef">None</span> <span style="color:#f92672">and</span> audience <span style="color:#f92672">is</span> <span style="color:#f92672">not</span> <span style="color:#66d9ef">None</span> <span style="color:#f92672">and</span> \
</span></span><span style="display:flex;"><span>       (rating <span style="color:#f92672">+</span> audience)<span style="color:#f92672">/</span><span style="color:#ae81ff">2</span> <span style="color:#f92672">&lt;</span> <span style="color:#ae81ff">5.0</span>:
</span></span><span style="display:flex;"><span>        print(<span style="color:#e6db74">&#34;title = </span><span style="color:#e6db74">{title}</span><span style="color:#e6db74">, rating = </span><span style="color:#e6db74">{rating}</span><span style="color:#e6db74">, audience = </span><span style="color:#e6db74">{audience}</span><span style="color:#e6db74">&#34;</span><span style="color:#f92672">.</span>
</span></span><span style="display:flex;"><span>              format(title <span style="color:#f92672">=</span> title, rating <span style="color:#f92672">=</span> rating, audience <span style="color:#f92672">=</span> audience))
</span></span><span style="display:flex;"><span>        movies_to_delete<span style="color:#f92672">.</span>append(video)
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">continue</span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">if</span> audience <span style="color:#f92672">is</span> <span style="color:#f92672">not</span> <span style="color:#66d9ef">None</span> <span style="color:#f92672">and</span> audience <span style="color:#f92672">&lt;</span> <span style="color:#ae81ff">4.0</span>:
</span></span><span style="display:flex;"><span>        print(<span style="color:#e6db74">&#34;title = </span><span style="color:#e6db74">{title}</span><span style="color:#e6db74">, rating = </span><span style="color:#e6db74">{rating}</span><span style="color:#e6db74">, audience = </span><span style="color:#e6db74">{audience}</span><span style="color:#e6db74">&#34;</span><span style="color:#f92672">.</span>
</span></span><span style="display:flex;"><span>              format(title <span style="color:#f92672">=</span> title, rating <span style="color:#f92672">=</span> rating, audience <span style="color:#f92672">=</span> audience))
</span></span><span style="display:flex;"><span>        movies_to_delete<span style="color:#f92672">.</span>append(video)
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">continue</span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">if</span> audience <span style="color:#f92672">is</span> <span style="color:#66d9ef">None</span> <span style="color:#f92672">or</span> rating <span style="color:#f92672">is</span> <span style="color:#66d9ef">None</span>:
</span></span><span style="display:flex;"><span>        movies_to_refresh<span style="color:#f92672">.</span>append(video)
</span></span></code></pre></div><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span>movies <span style="color:#f92672">=</span> plex<span style="color:#f92672">.</span>library<span style="color:#f92672">.</span>section(<span style="color:#e6db74">&#39;Films&#39;</span>)
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">for</span> movie <span style="color:#f92672">in</span> movies<span style="color:#f92672">.</span>search(unwatched<span style="color:#f92672">=</span><span style="color:#66d9ef">True</span>):
</span></span><span style="display:flex;"><span>    movie<span style="color:#f92672">.</span>reload()
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">for</span> media <span style="color:#f92672">in</span> movie<span style="color:#f92672">.</span>media:
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">for</span> part <span style="color:#f92672">in</span> media<span style="color:#f92672">.</span>parts:
</span></span><span style="display:flex;"><span>            languages <span style="color:#f92672">=</span> list()
</span></span><span style="display:flex;"><span>            <span style="color:#66d9ef">for</span> audioStream <span style="color:#f92672">in</span> part<span style="color:#f92672">.</span>audioStreams():
</span></span><span style="display:flex;"><span>                language <span style="color:#f92672">=</span> audioStream<span style="color:#f92672">.</span>language
</span></span><span style="display:flex;"><span>                <span style="color:#66d9ef">if</span> language <span style="color:#f92672">is</span> <span style="color:#f92672">not</span> <span style="color:#66d9ef">None</span>:
</span></span><span style="display:flex;"><span>                    languages<span style="color:#f92672">.</span>append(language)
</span></span><span style="display:flex;"><span>            <span style="color:#66d9ef">if</span> len(languages) <span style="color:#f92672">&gt;</span> <span style="color:#ae81ff">0</span> <span style="color:#f92672">and</span> <span style="color:#e6db74">&#39;English&#39;</span> <span style="color:#f92672">not</span> <span style="color:#f92672">in</span> languages:
</span></span><span style="display:flex;"><span>                print(<span style="color:#e6db74">&#34;The movie </span><span style="color:#e6db74">{}</span><span style="color:#e6db74"> is not in English (</span><span style="color:#e6db74">{}</span><span style="color:#e6db74">)&#34;</span><span style="color:#f92672">.</span>format(movie<span style="color:#f92672">.</span>title, languages))
</span></span><span style="display:flex;"><span>                movies_to_delete<span style="color:#f92672">.</span>append(movie)
</span></span><span style="display:flex;"><span>                    
</span></span></code></pre></div><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#75715e"># for movie in movies_to_delete:</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#     print(&#34;Deleting {}&#34;.format(movie.title))</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#     movie.delete()</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># for movie in movies_to_refresh:</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#     print(&#34;Refresing metadata of movie for next run: {}&#34;.format(movie.title))</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#     video.refresh()</span>
</span></span></code></pre></div><p>For safety I have commented the lines that delete or trigger a refresh in Plex, so you can copy/paste and try it without risk</p>
<p>Happy cleaning</p>
]]></content>
        </item>
        
        <item>
            <title>Dynamic capabilities in small software firms</title>
            <link>https://blog.miguens.one/posts/2018/06/dynamic-capabilities-in-small-software-firms/</link>
            <pubDate>Wed, 27 Jun 2018 00:00:00 +0000</pubDate>
            
            <guid>https://blog.miguens.one/posts/2018/06/dynamic-capabilities-in-small-software-firms/</guid>
            <description>&lt;p&gt;Today I wish to summarise and critique a paper I found quite insightful.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Mathiassen, L. and Vainio, A. M. (2007) &amp;lsquo;Dynamic capabilities in small software firms: A sense-and-respond approach&amp;rsquo;, IEEE Transactions on Engineering Management, vol. 54, no. 3, pp. 522&amp;ndash;538 [Online]. DOI: 10.1109/TEM.2007.900782&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The paper describes two organisations in different phases of expansion. Both are in the category of small companies in the field of mobile applications.&lt;/p&gt;
&lt;h2 id=&#34;summary&#34;&gt;Summary&lt;/h2&gt;
&lt;p&gt;The paper starts by defining the object of study, small software firms, depending on integration and reconfiguration capabilities to operate in high-velocity markets. This type of companies&amp;rsquo; constraints is limited resources (schedule, fixed costs) and a high dependency on a few big players. The paper takes as a base the Sense-and-Respond approach to managing dynamic capabilities of Haeckel (1995). The study relies on interviews with CEOs, the Department Managers and Team Leaders of two firms with different levels of evolution, named &amp;ldquo;Starter, Inc&amp;rdquo; and &amp;ldquo;Mature, Inc&amp;rdquo;. Also introduces that successful adaptive organisations can monitor (Sense) environment signals quickly and translate into action (Respond) in three areas:&lt;/p&gt;</description>
            <content type="html"><![CDATA[<p>Today I wish to summarise and critique a paper I found quite insightful.</p>
<ul>
<li>Mathiassen, L. and Vainio, A. M. (2007) &lsquo;Dynamic capabilities in small software firms: A sense-and-respond approach&rsquo;, IEEE Transactions on Engineering Management, vol. 54, no. 3, pp. 522&ndash;538 [Online]. DOI: 10.1109/TEM.2007.900782</li>
</ul>
<p>The paper describes two organisations in different phases of expansion. Both are in the category of small companies in the field of mobile applications.</p>
<h2 id="summary">Summary</h2>
<p>The paper starts by defining the object of study, small software firms, depending on integration and reconfiguration capabilities to operate in high-velocity markets. This type of companies&rsquo; constraints is limited resources (schedule, fixed costs) and a high dependency on a few big players. The paper takes as a base the Sense-and-Respond approach to managing dynamic capabilities of Haeckel (1995). The study relies on interviews with CEOs, the Department Managers and Team Leaders of two firms with different levels of evolution, named &ldquo;Starter, Inc&rdquo; and &ldquo;Mature, Inc&rdquo;. Also introduces that successful adaptive organisations can monitor (Sense) environment signals quickly and translate into action (Respond) in three areas:</p>
<ul>
<li>How knowledge is created and shared (input)</li>
<li>How to configure and manage the development (process)</li>
<li>How to design and structure the resulting software (output).</li>
</ul>
<p>A detailed comparison between the principles of the corporations is made between &ldquo;Starter, Inc&rdquo; and &ldquo;Mature, Inc&rdquo; with the following results:</p>
<table>
  <thead>
      <tr>
          <th>Principle</th>
          <th>Starter Inc</th>
          <th>Mature Inc</th>
      </tr>
  </thead>
  <tbody>
      <tr>
          <td>Processes that learn</td>
          <td>Centralised learning cycle with the delegation of tasks</td>
          <td>Autonomous but coordinated learning cycles with partly overlapping responsibilities</td>
      </tr>
      <tr>
          <td>Value-based governance</td>
          <td>Centralised decision making and delegating specific responses</td>
          <td>Intensive networking, internally (departments) and externally (customers and partners). Conclusions shared across the firm</td>
      </tr>
      <tr>
          <td>Dynamic personal accountabilities</td>
          <td>Employees reassigned ad-hoc to respond to new emerging needs</td>
          <td>Accountabilities re-negotiated. Dedicated integrators were responsible for the link between the firm employees and customer</td>
      </tr>
      <tr>
          <td>Modular processes and products</td>
          <td>Not reuse of the previous component. Management generates unique responses to emerging needs</td>
          <td>Ability to adjust individual dynamically and group responsibilities and utilise component-based software. Dedicated integrators to ensure alignment between emerging needs and organisational priorities</td>
      </tr>
  </tbody>
</table>
<p>The authors found that &ldquo;Started, Inc&rdquo; had recently grown to become more complex, which caused the processes and governance structures to become loose compared to the steady growth of &ldquo;Mature, Inc&rdquo;. Last, it extrapolates the findings giving the following advice to managers of small software firms inside the Haeckel framework (Haeckel, 1995).</p>
<ul>
<li>Cultivate External Relationships: Customers and users are sources of innovation that can help determine the future direction of a software project.</li>
<li>Distribute Sense-and-Respond Cycles: Being able to create responses to new situations.</li>
<li>Ensure Firm-Level Coordination: Fostering a culture of communication and integration to collect and learn from past projects and applied the knowledge to new developments.</li>
<li>Leverage Component-Based Architectures: Helping small firms to develop flexible software that can quickly adapt to new scenarios.</li>
<li>Balance Standardisation and Customisation: Due to the software&rsquo;s customisation to fit a purpose or demand, it is challenging to develop a market strategy only in the standardised solutions. Still, organisations should reach a balance for long-term sustainability.</li>
</ul>
<p>The paper concludes by noticing the study&rsquo;s exploratory nature, with only two software firms and under the Sense-and-Response approach without considering other frameworks. The method used helped to identify and evaluate the core dynamic capabilities, appreciating the enablers and barriers. Also, by decentralising into smaller and quick-responding teams, the companies can detect customer needs and respond quickly even to the tight schedule and budget. Last it warns that the conclusion is limited to the object of study: small software firms, as dynamic capabilities can change between industries.</p>
<h2 id="critique">Critique</h2>
<p>The research method is a set of interviews with different members of the two companies, from CEO to Team Leads. The questions were based on the Sense-and-Respond framework, but keeping the questions open allowed the interview to evolve. I consider the approach&rsquo;s positive effect, as it can gather answers and perspectives that the researcher did not initially plan. On the other hand, it makes it more challenging to replicate the study and apply statistical methods to compare more companies.</p>
<p>Regarding the paper&rsquo;s provenance, I would like to note that the source for the article (Haeckel, 1995) described an implementation of Sensing Capabilities as described in the course materials (Horrocks and Savory, 2018) oriented to technological enterprises. The Sense-and-Respond approach was published by Haeckel, a management theorist and former director of Strategic Studies of IBM Advanced Business Institute. The strategy has been implemented in corporations worldwide with success and the main topic of books and thousands of papers.</p>
<p>Even though ten years have passed since the publication of the paper, the assumptions and the description of the market matches what is observed nowadays, with mobile devices and wireless equipment as commodities. We can notice the failure to mention the increase in cloud computing. I have found in my activities that cloud computing enters the category of enabling capabilities because it no longer provides any competitive advantage and can be easily subcontracted to external providers with negligible cost. We can appreciate this in Amazon AWS, which provide without cost one year (Amazon Web Services, 2018a) and a few cents for extensions (Amazon Web Services, 2018b). Following the argument, we can assume that the paper results are still valid as 2018.</p>
<p>Regarding the conclusions, we can agree that agile methodologies are the best approach for a small software firm in a highly changing environment. I have learned two approaches to project management; the linear-rational approach and the organic approach (Fortune, 2018). In (Fernandez, 2016) it is argued that when the goal and solutions are not clear, like the paper&rsquo;s situation, the best approach is the organic approaches to project management, for example, Agile.</p>
<p>I&rsquo;m afraid I have to disagree with the critique of the lack of reusability of software components discussed in the paper regarding &ldquo;Starter Inc&rdquo;. I consider it reasonable that a young enterprise has not many previous projects to approach an internal phase of abstraction of software components reused in future projects. Nonetheless, I agree that the transition to component-based software development is necessary once the conditions and resources are available.</p>
<p>I agree with the authors that the paper&rsquo;s focus is exploratory because of the few cases studied and the lack of repeatability of the results. The authors can also not extrapolate the conclusions to other industries because the dynamic capabilities can be completely different. Finally, a comparative study using different approaches or frameworks is necessary.</p>
<p>Even with the disadvantages described above, I consider this article informative. The reason relies on that is a compressive study of the several dynamic capabilities required for companies&rsquo; success where software plays a predominant part. The study provides ideas and a framework to contribute and give sounded ideas regarding the best approach to consolidate a position in the market and assure its evolution.</p>
<h2 id="references">References</h2>
<ul>
<li>Amazon Web Services (2018a) AWS Free Tier [Online]. Available at <a href="https://aws.amazon.com/free/">https://aws.amazon.com/free/</a></li>
<li>Amazon Web Services (2018b) AWS Cloud Pricing Principles &ndash; Amazon Web Services (AWS) [Online]. Available at <a href="https://aws.amazon.com/pricing/">https://aws.amazon.com/pricing/</a></li>
<li>Fernandez, D. J. (2016) &lsquo;Agile Project Management - Agilism Versus Traditional Approaches&rsquo;, Journal of Computer Information Systems [Online].</li>
<li>Fortune, J. (2018) &lsquo;Block 5 Project Management&rsquo;, [Online].</li>
<li>Haeckel, S. H. (1995) &lsquo;Adaptive enterprise design: The sense‐and‐respond model&rsquo;, Planning Review, MCB UP Ltd, vol. 23, no. 3, pp. 6&ndash;42 [Online]. DOI: 10.1108/eb054506</li>
<li>Mathiassen, L. and Vainio, A. M. (2007) &lsquo;Dynamic capabilities in small software firms: A sense-and-respond approach&rsquo;, IEEE Transactions on Engineering Management, vol. 54, no. 3, pp. 522&ndash;538 [Online]. DOI: 10.1109/TEM.2007.900782</li>
</ul>
]]></content>
        </item>
        
        <item>
            <title>Remove the password protection of Excel Macros</title>
            <link>https://blog.miguens.one/posts/2018/03/remove-the-password-protection-of-excel-macros/</link>
            <pubDate>Fri, 02 Mar 2018 00:00:00 +0000</pubDate>
            
            <guid>https://blog.miguens.one/posts/2018/03/remove-the-password-protection-of-excel-macros/</guid>
            <description>&lt;p&gt;Way too often, people find themselves trying to update an existing macro in an excel file to reflect the organisation&amp;rsquo;s procedure changes.&lt;/p&gt;
&lt;p&gt;In some of those cases, the author has protected the macro code with a password. Whatever the reason that author might have had for that, it does not prevent future use, modifications, or preserve the code&amp;rsquo;s secrecy.&lt;/p&gt;
&lt;p&gt;As shown below, it is straightforward to remove such a password.&lt;/p&gt;</description>
            <content type="html"><![CDATA[<p>Way too often, people find themselves trying to update an existing macro in an excel file to reflect the organisation&rsquo;s procedure changes.</p>
<p>In some of those cases, the author has protected the macro code with a password. Whatever the reason that author might have had for that, it does not prevent future use, modifications, or preserve the code&rsquo;s secrecy.</p>
<p>As shown below, it is straightforward to remove such a password.</p>
<p>Here are the steps to remove the password</p>
<h2 id="for-older-xls-files">For older <code>.XLS</code> files:</h2>
<ul>
<li>Open file in any hex editor</li>
<li>Search for the text <code>DPB=</code></li>
<li>Change it to <code>DPx=</code>, save and close the file</li>
<li>Open the file in Excel and press Yes if the following warning pops up</li>
<li>Open the VBA editor (Alt+F11) and press OK whenever warning pops up</li>
<li>Right-click the VBA project name, select Properties, go to the Protection tab and delete the existing passwords as well as uncheck the Lock project for viewing checkbox and set a new password</li>
<li>Click OK in the pop-up windows of Excel, and now the VBA code is accessible!</li>
</ul>
<h2 id="for-newer-xlsm-files">For newer <code>.XLSM</code> files:</h2>
<ul>
<li>Change the file&rsquo;s extension to <code>.ZIP</code></li>
<li>Open the file in any program you use for compressed files. I suggest <a href="https://www.7-zip.org/">7-Zip</a></li>
<li>Go into the xl directory and extract <code>vbaProject.bin</code>:</li>
<li>Perform steps above with <code>vbaProject.bin</code></li>
<li>Replace the old <code>vbaProject.bin</code> in the <code>ZIP</code> file with the new hex edited version</li>
<li>Change the file&rsquo;s extension back to <code>.XLSM</code></li>
<li>Perform steps above share</li>
</ul>
<p>You can use any hex editor; I suggest this light freeware program: <a href="https://mh-nexus.de/en/hxd/">HxD</a></p>
]]></content>
        </item>
        
        <item>
            <title>Eco-innovation discussion for modern vehicles</title>
            <link>https://blog.miguens.one/posts/2018/02/eco-innovation-discussion-for-modern-vehicles/</link>
            <pubDate>Tue, 27 Feb 2018 00:00:00 +0000</pubDate>
            
            <guid>https://blog.miguens.one/posts/2018/02/eco-innovation-discussion-for-modern-vehicles/</guid>
            <description>&lt;p&gt;During my MBA in Technology Management, I have studied three approaches to Eco-innovation:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;(1) Life cycle thinking&lt;/li&gt;
&lt;li&gt;(2) Close loop production and&lt;/li&gt;
&lt;li&gt;(3) Industrial ecology.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;When dealing with an eco-innovation discussion for batteries or hydrogen cell of electric vehicles, it is my opinion that the primary approach is (1) trying to incorporate some elements of (2) when possible. Point (3) will be relevant from the point of view of the manufacturing process.&lt;/p&gt;</description>
            <content type="html"><![CDATA[<p>During my MBA in Technology Management, I have studied three approaches to Eco-innovation:</p>
<ul>
<li>(1) Life cycle thinking</li>
<li>(2) Close loop production and</li>
<li>(3) Industrial ecology.</li>
</ul>
<p>When dealing with an eco-innovation discussion for batteries or hydrogen cell of electric vehicles, it is my opinion that the primary approach is (1) trying to incorporate some elements of (2) when possible. Point (3) will be relevant from the point of view of the manufacturing process.</p>
<p>Nowadays, we already have car scrapping mechanisms that could be expanded and improved based on the lesson learned. Still, the main topic here is the recycling and disposal of car batteries or hydrogen cells at the end of their life, as it is a new element that was not covered before. We should note that the end of life of the batteries or cells can be shorter than the end of life of the complete vehicle, making it a priority to set a system to handle the devices&rsquo; lifespan.</p>
<p>With Tesla and Toyota approach, which released the patents as open license, it is essential that the design takes into consideration the manufacturing of the devices with the fewer pollutant materials available now and set a scheme for environmentally harmful materials to be either disposed of adequately or even better, used as raw materials in the manufacturing of new devices, as the closed-loop approach. This will require considering new materials and processes; recycling old batteries and cells could also reduce the cost of manufacturing new components while preserving the environment.</p>
<p>All these manufacturing mechanisms, disposing and recycling the devices, is not the main goal of a car manufacturer, which is to design and build cars, so opening their licenses allows new green companies to emerge and develop systems to handle this auxiliary market.</p>
<p>Nonetheless, the car manufacturers, particularly Toyota and Tesla, are very interested in these auxiliary companies&rsquo; success, as it will help introduce the new technology into the market and increase their sales and, therefore, their profitability.</p>
<p>Once the new companies start handling the batteries and cells, for their profitability, they will minimize the waste, and incorporating a scheme to collect used devices, will maximize the recycling. This will also allow the companies to be ahead of legislation and avoid penalties regarding waste production. The Eco-Innovation approach of being ahead of regulations will also introduce vehicles in markets with traffic restrictions inside cities due to high pollution levels.</p>
<p>Another advantage of this technology is related to society. It will create new jobs for highly skilled people to design new devices and methods for manufacturing, disposing and recycling, and jobs regarding transportation and storage of used cells or batteries.</p>
<p>An important point to take into consideration is the environmental benefits of this type of vehicle. As pollution and CO2 (the main contributor to the greenhouse effect) emission are two big problems nowadays, both issues can be diminished for the diffusion of ecological cars.</p>
<p>From the economic point of view, as the batteries and hydrogen cells become more mass-produced, they can be introduced in emerging markets, combining with renewable energy sources in charging stations or local hydrogen production, reducing the vehicle&rsquo;s operational cost.
Last, it is also in the car manufacturers&rsquo; interest that the new companies, which will manufacture and distribute the batteries or hydrogen-cells, use an Eco-Innovation approach, as it will improve the public image of the technology and therefore make their diffusion easier.
The main challenge arises with the derived work license based on the patent of Tesla and Toyota.</p>
<p>Suppose the approach chosen for the improvements is to be open source as well. In that case, we should convince new companies to improve, via research and development, the systems released by Toyota and Tesla, even though that means that the knowledge will be public. Many companies could benefit even without the investment in R&amp;D. The main point that the stakeholders should consider that being the first to develop new techniques or methods of production will help themselves, as the companies that did not invest in R&amp;D will need more time to adapt their newly found knowledge.</p>
<p>On the other hand, is the improvements are made private, that could lead to a monopoly or oligopoly. The situation introduces the risk of a possible scenario in which few parties control the price. The expansion plan will be in the hands of only one or a few companies, which could lead to market penetration that does not benefit Toyota and Tesla. At least, it does not help and a complete open-source system.</p>
]]></content>
        </item>
        
        <item>
            <title>Discussion of Project Management Approaches for Ecological Vehicles</title>
            <link>https://blog.miguens.one/posts/2018/02/discussion-of-project-management-approaches-for-ecological-vehicles/</link>
            <pubDate>Sun, 18 Feb 2018 00:00:00 +0000</pubDate>
            
            <guid>https://blog.miguens.one/posts/2018/02/discussion-of-project-management-approaches-for-ecological-vehicles/</guid>
            <description>&lt;p&gt;From the point of view of a car manufacturer that wishes to create a network of recharging stations for its ecological vehicle, whatever it is electric or hydrogen cell-based, it will find some elements that it cannot fully control, such as:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;(1) Public reception of the new technology&lt;/li&gt;
&lt;li&gt;(2) Economic situation&lt;/li&gt;
&lt;li&gt;(3) Public policies.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Those three factors are not the same in all countries and can even change inside the same country&amp;rsquo;s regions.&lt;/p&gt;</description>
            <content type="html"><![CDATA[<p>From the point of view of a car manufacturer that wishes to create a network of recharging stations for its ecological vehicle, whatever it is electric or hydrogen cell-based, it will find some elements that it cannot fully control, such as:</p>
<ul>
<li>(1) Public reception of the new technology</li>
<li>(2) Economic situation</li>
<li>(3) Public policies.</li>
</ul>
<p>Those three factors are not the same in all countries and can even change inside the same country&rsquo;s regions.</p>
<p>For example, a newly elected government could push the decisions&rsquo; ecological agenda. A marketing campaign could shift public reception, or an economic recovery could push a large part of the population to change their current vehicle.</p>
<p>Even though some elements could be influenced to some degrees by a car manufacturer, employing the launch of marketing campaigns, organize informative meetings and fund congress with public representatives and ecological organizations to explain the advantages for their citizens of introducing an environmentally friendly technology for transportation, all elements mentioned cannot be fully controlled by the car industry.</p>
<p>Keeping the previous discussion in mind, we can see that the market situation will impact the feasibility of developing the infrastructure for electric cars.</p>
<p>Due to the high changing environment, the requirements are not fixed: the number of charging stations, distribution across the region and timeline is not clear, while the goal of expanding the technology of ecological vehicles is the only certainty, we can develop the project using an organic approach. Going further and applying the research (Fernandez, 2016), the recommended method is an adaptive strategy, such as agile, due to the known goal and unknown requirements.</p>
<p>The overall project, described above, directed by an organic approach, could dictate the go or hold the decision to invest in a region, as the gates described in Block 5 (Fortune, 2018).</p>
<p>Management should review those decisions annually if a factor is used to make previous decision changes and the amount of effort in a period invested in introducing the technology.</p>
<p>The go decision will translate into the installation of new charging stations, that could be the property of the car manufacturing, directly or creating a new company for that purpose, but we should also consider reaching agreements with current petrol stations, such Shell, or even starting a franchise model, where the car manufacturer will provide the know-how of building and running the station, while a third party will manage and fund the process of building and maintaining the station.</p>
<p>Either way, the installation of a new charging station, after some initial errors, is a process highly repetitive, with well-defined requirements and goals and therefore, we consider a linear approach to be the acceptable form of developing such a project.</p>
]]></content>
        </item>
        
        <item>
            <title>Challenges of fully autonomous driving</title>
            <link>https://blog.miguens.one/posts/2018/01/challenges-of-fully-autonomous-driving/</link>
            <pubDate>Tue, 30 Jan 2018 00:00:00 +0000</pubDate>
            
            <guid>https://blog.miguens.one/posts/2018/01/challenges-of-fully-autonomous-driving/</guid>
            <description>&lt;p&gt;From Level 4 and onwards, we can face challenges in the adoption of autonomous driving technology. These can be classified into (1) Legal challenges, (2) Certification and intellectual property, (3) Ethical challenges, (4) Social challenges.&lt;/p&gt;
&lt;h2 id=&#34;legal-challenges&#34;&gt;Legal challenges&lt;/h2&gt;
&lt;p&gt;We can note two cases in which society should adapt to this innovation. In the first case, if we apply autonomous driving to trucks to make the transportation of goods more cost-efficient, it will be natural to cross the country&amp;rsquo;s borders.&lt;/p&gt;</description>
            <content type="html"><![CDATA[<p>From Level 4 and onwards, we can face challenges in the adoption of autonomous driving technology. These can be classified into (1) Legal challenges, (2) Certification and intellectual property, (3) Ethical challenges, (4) Social challenges.</p>
<h2 id="legal-challenges">Legal challenges</h2>
<p>We can note two cases in which society should adapt to this innovation. In the first case, if we apply autonomous driving to trucks to make the transportation of goods more cost-efficient, it will be natural to cross the country&rsquo;s borders.</p>
<p>In that case, the different legislations should have a common ground so that a truck certified to operate autonomously in country A should be allowed to do so in country B.</p>
<p>A second case is a liability in case of an accident. Up to and including Level 3, the driver is required to maintain or acquire control of the car in all moments, so the current legislation which makes liable the human driver is enough, but in Level 4, the system should inform the driver with enough time to regain the control of the car, is the conditions for autonomous driving are not met anymore.</p>
<p>In this case, it will be challenging to establish without doubt the driver&rsquo;s liability or the system if an accident is to happen during the transition. A certified black box installed by a third party could be a possible solution, although this will increase the car&rsquo;s final cost. (Douma &amp; Palodichuk, 2012)</p>
<h2 id="certification-challenges-and-intellectual-property">Certification challenges and intellectual property</h2>
<p>An autonomous driving device that can be liable will be required to meet severe governmental certifications to be allowed to operate.</p>
<p>During those certifications, sensitive information about the technology behind the system can be required to be shared with the authorities. The challenge is how to share such information with countries that have been proven to be unfriendly regarding foreign countries&rsquo; intellectual property.</p>
<p>In such a case, a decision should be made regarding the risk of losing trade secrets or market share.</p>
<h2 id="ethical-challenges">Ethical challenges</h2>
<p>Costa (1986) analyses a thought experiment called the trolley problem. In a nutshell, the dilemma is:</p>
<p>There is a runaway trolley barreling down the railway tracks. Ahead, on the tracks, there are five people tied up and unable to move. The trolley is headed straight for them. You are standing some distance off in the train yard, next to a lever. If you pull this lever, the trolley will switch to a different set of tracks. However, you notice that there is one person on the sidetrack. You have two options:</p>
<ul>
<li>(1) Do nothing, and the trolley kills the five people on the main track.</li>
<li>(2) Pull the lever, diverting the trolley onto the side track where it will kill one person. Which is the most ethical choice?</li>
</ul>
<p>This problem can be translated in the case of autonomous driving, as follows: the person with the lever control is the artificial intelligence, the innocent bystander can be the person inside the car or a pedestrian, and the five people in the way of the train a bus full of people on a collision course with the autonomous vehicle. Should the autonomous car sacrifice the life of its occupants or a pedestrian for the greater good?</p>
<p>The solution to that dilemma will have a considerable impact on:</p>
<ul>
<li>(a) Legal: If a car, to prevent a collision with a bus full of people, decides to switch the path, killing a pedestrian, will the manufacturer of the system is liable for that death?</li>
<li>(b) Marketing: If the materialistic solution is adopted, the car will decide for the smaller number of casualties. Are you going to rely on a system that may choose to sacrifice you for the greater good?</li>
</ul>
<h2 id="social-challenges">Social challenges</h2>
<p>Even though not directly related to the innovation itself, the adoption of autonomous driving will require governmental help regarding law changes and investment in new systems to make collaborative driving a reality.</p>
<p>Asking for help could be met with some lack of collaboration, as autonomous driving will affect a considerable segment of the population, such as taxi, bus and truck drivers.</p>
<p>To solve that problem, industry and government should work together to provide solutions to that problem, such as aid to reconversion programs and minimize the social disturbance such as unemployment that this innovation will cause.</p>
<p>Even though the challenges faced by the autonomous driving endeavour, the use of the Open Innovation (Savory, 2016a) approach, with several independents companies (with ties to several car manufacturers and not only one) developing different solutions to the problem, and with car manufacturers acting as integrators and financing several approaches to develop the technology, give the idea that the project can be completed in a reasonable amount of time, and that an internal change of goals in one integrator, will not affect the overall research and development.</p>
<p>It should also be noted how this approach uses technology transfer (Savory, 2016b) between all companies. For example, the sensors (camera, laser, radar, etc.) and actuators (interface to accelerate, brake, change gear) are controlled by the integrators (car manufacturers) that will share their technology and trade secrets, after signing a non-disclosure agreement, with companies to develop the autonomous driving algorithms. The algorithms can be commercialized as a license of use to the integrator or could be sold completely.</p>
<p>As software without maintenance can become quickly useless, a knowledge transfer should be in place in case of a property change of the algorithm. A contract of use for part of the integrator could avoid this problem.</p>
<h2 id="references">References</h2>
<ul>
<li>Costa, M. J. (1986). The Trolley Problem Revisited. <em>The Southern Journal of Philosophy</em>, <em>24</em>(4), 437&ndash;449. <a href="https://doi.org/10.1111/j.2041-6962.1986.tb01581.x">https://doi.org/10.1111/j.2041-6962.1986.tb01581.x</a></li>
<li>Douma, F., &amp; Palodichuk, S. A. (2012). Criminal liability issues created by autonomous vehicles. <em>Santa Clara Law Review</em>, <em>52</em>(4), 1157&ndash;1169. Retrieved from <a href="http://heinonline.org.libezproxy.open.ac.uk/HOL/Page?handle=hein.journals/saclr52&amp;id=1213&amp;div=37&amp;collection=journals">http://heinonline.org.libezproxy.open.ac.uk/HOL/Page?handle=hein.journals/saclr52&id=1213&div=37&collection=journals</a></li>
<li>Horrocks, I., &amp; Walker, S. (2016). <em>Block 1 Technology, Innovation and Management</em> (WEB033868). The Open University.</li>
<li>Kate Bergman. (n.d.). Boeing Sees Greatest Demand for Pilots, Technicians in Asia Pacific Region - September 10, 2015. Retrieved January 8, 2017, from <a href="http://boeing.mediaroom.com/2015-09-10-Boeing-Sees-Greatest-Demand-for-Pilots-Technicians-in-Asia-Pacific-Region">http://boeing.mediaroom.com/2015-09-10-Boeing-Sees-Greatest-Demand-for-Pilots-Technicians-in-Asia-Pacific-Region</a></li>
<li>Phaal, R. (2004). Technology road mapping - A planning framework for evolution and revolution. <em>Technological Forecasting and Social Change</em>, <em>71</em>(1&ndash;2), 5&ndash;26. <a href="https://doi.org/10.1016/S0040-1625%2803%2900072-6">https://doi.org/10.1016/S0040-1625(03)00072-6</a></li>
<li>SAE International. (, 2014). Taxonomy and Definitions for Terms Related to On-Road Motor Vehicle Automated Driving Systems. <em>SAE International</em>, <em>J3016</em>, 1&ndash;12. Retrieved from <a href="http://standards.sae.org/j3016_201609/">http://standards.sae.org/j3016_201609/</a></li>
<li>Savory, C. (2016a). <em>Block 2 Open Innovation</em>. The Open University.</li>
<li>Savory, C. (2016b). <em>Block 3 Technology Transfer: Building Value</em>. The Open University.</li>
<li>Vahidi, A., &amp; Eskandarian, A. (2003). Research advances in intelligent collision avoidance and adaptive cruise control. <em>IEEE Transactions on Intelligent Transportation Systems</em>, <em>4</em>(3), 143&ndash;153. <a href="https://doi.org/10.1109/TITS.2003.821292">https://doi.org/10.1109/TITS.2003.821292</a></li>
</ul>
]]></content>
        </item>
        
        <item>
            <title>Roadmap: Technology Innovation for fully autonomous car</title>
            <link>https://blog.miguens.one/posts/2018/01/roadmap-technology-innovation-for-fully-autonomous-car/</link>
            <pubDate>Sun, 28 Jan 2018 00:00:00 +0000</pubDate>
            
            <guid>https://blog.miguens.one/posts/2018/01/roadmap-technology-innovation-for-fully-autonomous-car/</guid>
            <description>&lt;p&gt;Many cars sold today are capable of some level of automated operation.&lt;/p&gt;
&lt;p&gt;This roadmap&amp;rsquo;s objective is to show the relevant events in technology innovation that have allowed current day features, and we will try to draw the future designs required for a fully autonomous car.&lt;/p&gt;
&lt;p&gt;The automation of driving has several steps. We can range between the autonomous system&amp;rsquo;s levels of operation from no control (human driver has to remain in control all the time) to fully autonomous driving (the occupant is only required to set the destination).&lt;/p&gt;</description>
            <content type="html"><![CDATA[<p>Many cars sold today are capable of some level of automated operation.</p>
<p>This roadmap&rsquo;s objective is to show the relevant events in technology innovation that have allowed current day features, and we will try to draw the future designs required for a fully autonomous car.</p>
<p>The automation of driving has several steps. We can range between the autonomous system&rsquo;s levels of operation from no control (human driver has to remain in control all the time) to fully autonomous driving (the occupant is only required to set the destination).</p>
<p>SAE International (2014) has defined six levels of automation:</p>
<ul>
<li><strong>Level 0</strong> - No Automation: This level lack automation, although the manufacturer can install several sensing systems in the vehicle, which can provide warnings and advice to the driver. This level is implemented currently by several car companies with products such as the lane departure warning system.</li>
<li><strong>Level 1</strong> - Driver Assistance: This level will provide some automation, such keep the speed constant with the cruise control, or activate the brake is an obstacle is detected, usually know as a collision-avoidance system.</li>
<li><strong>Level 2</strong> - Partial Automation: This level will use different technologies developed from the previous level and combine them into new functionality. An example of such a system is adaptive cruise control  (Vahidi &amp; Eskandarian, 2003), which is an evolution of cruise control. The speed can be dynamically set by the autonomous system based on the collision avoidance system&rsquo;s sensors.</li>
<li><strong>Level 3</strong> - Conditional Automation: Until now, the driver was expected to control the steering wheel in all of our examples. At this level, we can further develop the lane departure warning system, which will control the steering wheel. This, in combination with the adaptive cruise control, has been commercialized by Tesla under the name AutoPilot. This step of automation is expected for the driver to be completely aware and intervene without notification of the autonomous system to avoid an accident.</li>
<li><strong>Level 4</strong> - No products have been developed until the current date in this category. Still, it is expected that an autonomous system could drive and solve unexpected situations without a human driver&rsquo;s intervention. When the system cannot, it should provide enough warning to the driver to return to the control of the vehicle. A possible example of such an innovation could be an autonomous driving system for motorways, transitioning from autonomous driving to human driving in the deceleration lane.</li>
<li><strong>Level 5</strong> - All aspects of driving and solving unexpected conditions should be done with autonomous driving without a human driving intervention. This will be the end goal of the autonomous driving system.</li>
</ul>
<p><img src="/img/roadmap.png" alt="Roadmap"></p>
<p>The format of program planning focuses on implementing the strategy to reach a fully autonomous driving system that can be applied to cars, buses or trucks.</p>
<p>This roadmap allows us to see how manufacturers can combine different products and technology developments to reach the milestones, which, in our case, matches the SAE defined levels. The milestones can be matched with an actual society need, such as reducing motorway driving fatigue, avoiding accidents with other cars or pedestrians, or minimizing people and goods&rsquo; transportation cost.</p>
<p>Therefore the format is divided into three parts: Innovations, Milestone, and the result or society need satisfied. With blue lines, we can see how the combination of innovations can lead to innovation. The innovation meets the requirements set by SAE International for automation levels represented with green lines. Last, in grey lines, we can see the first milestone that meets the need (or result). Further development will improve those needs, but this will over complicate the resulting roadmap.</p>
<p>The innovations are named by the most used familiar names, although car manufacturers for marketing reasons could change the innovation name. Nonetheless, the concept will remain unchanged.</p>
<p>We should understand the collaborative driving concept as the possible technology with more diffusion in the future. There is no standard, and it is quite probable that several companies develop several different technologies to meet this demand. With time, a standard will be made combining other technologies&rsquo; best ideas while keeping backwards compatibility, not to affect the diffusion rate.</p>
<p>The timeline shown in the map is an approximation. Even nowadays, we can see cars in the markets that do not meet all current innovations that have been developed until today, as the diffusion rate is not constant between the different innovations. The timeline is based on the SAE International (2014) paper. It is essential to note that the last step of automation or Level 5 will rely heavily on the collaborative driving idea, which means that the development of the previous step will depend upon the previous level&rsquo;s diffusion rate and, therefore, the difficulty of estimating a concrete date.</p>
<p>Last, we wanted to explain the possible change of paradigm regarding private cars ownership that could be reached once the fully autonomous vehicle is on the market. An example could be a travel service operated by a company with a fleet of autonomous cars or small buses, where the client will require a route, and an algorithm similar to the one used nowadays by courier companies could send a shared vehicle to meet the demand of the client in an appropriate time. A more detailed study of such a case is out of the scope of this roadmap.</p>
<p>In the next post, I will introduce the challenges of fully autonomous driving.</p>
<h2 id="references">References</h2>
<p>In the next post</p>
]]></content>
        </item>
        
        <item>
            <title>Flight Simulators as Product Innovation</title>
            <link>https://blog.miguens.one/posts/2018/01/flight-simulators-as-product-innovation/</link>
            <pubDate>Mon, 15 Jan 2018 00:00:00 +0000</pubDate>
            
            <guid>https://blog.miguens.one/posts/2018/01/flight-simulators-as-product-innovation/</guid>
            <description>&lt;p&gt;Boeing anticipates that, only in the Asian region, the aviation industry will require almost half million of pilots and qualified technicians to meet the demand for air travel in the next 20 years.&lt;/p&gt;
&lt;p&gt;Due to the high cost of buying and maintaining an airplane, the investment in a real aircraft for only training purposes is out of the question, therefore the training centres should rely on simulations to provide the education that future pilots and technicians demand.&lt;/p&gt;</description>
            <content type="html"><![CDATA[<p>Boeing anticipates that, only in the Asian region, the aviation industry will require almost half million of pilots and qualified technicians to meet the demand for air travel in the next 20 years.</p>
<p>Due to the high cost of buying and maintaining an airplane, the investment in a real aircraft for only training purposes is out of the question, therefore the training centres should rely on simulations to provide the education that future pilots and technicians demand.</p>
<p>Flight simulators have been in the market as early as the Second World War, although such simulations were meant to provide pilots a first contact with a real cockpit, train students in common procedures and providing the means to be familiar with the positions of the controls of the aircraft.</p>
<p>Those devices were evolving with the introduction of computers, which made possible to develop partial simulation software and provide limited feedback when a pilot pushed a button, turn a knob or operated the controls of the airplane.</p>
<p>With the 21st century, new innovations as the development of real-time parallel computers, and advance in motion platforms, provide flight simulators manufacturers, the possibility of implementing software to fully simulate all components of an airplane, provide realistic graphics and last to provide movement feedback.</p>
<p>This development was acknowledged by governmental institutions such as the US Federal Aviation Administration (FAA) which classify the simulators in several categories. The category with more realism is called FFS Level D, and such classification was adopted as well by the European Aviation Safety Agency (EASA).</p>
<p>Flight simulators with the level D, should provide motion simulation to at least 6 degrees of freedom, a realistic aerodynamic model, graphical outside world simulation of at least 150 degrees and realistic sounds in the cockpit.</p>
<p>As we can see for everything described above, we are in a case of product innovation, which is defined by Horrocks &amp; Walker (2016) as “a good or service that is new or significantly improved”. This product innovation was pushed by the need of training centres to provide an adequate education to future pilots and technicians.</p>
<p>Therefore, the new flight simulators are goods with an innovation similar to the step from a classical mobile phone to a smart phone, in which the capabilities of the “good” were improved up to a point in which only the name remained.</p>
<h2 id="references">References</h2>
<p>Horrocks, I., &amp; Walker, S. (2016). Block 1 Technology, Innovation and Management (WEB033868). The Open University.</p>
]]></content>
        </item>
        
        <item>
            <title>How to make your own Netflix with Docker</title>
            <link>https://blog.miguens.one/posts/2017/05/how-to-make-your-own-netflix-with-docker/</link>
            <pubDate>Mon, 01 May 2017 00:00:00 +0000</pubDate>
            
            <guid>https://blog.miguens.one/posts/2017/05/how-to-make-your-own-netflix-with-docker/</guid>
            <description>&lt;h1 id=&#34;how-to-create-your-own-netflix&#34;&gt;How to create your own Netflix&lt;/h1&gt;
&lt;p&gt;&lt;strong&gt;This is post is only for educational purposes. I am not condoning media piracy in any way&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;I was asking myself, how can I build my own Netflix. That questions derived in more specific questions like &amp;ldquo;how can I&amp;hellip;&amp;rdquo;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;easily stream content from my storage device to my TV?&lt;/li&gt;
&lt;li&gt;automate the gathering of content to put onto my storage device?&lt;/li&gt;
&lt;li&gt;securely control the resulting system?&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;In this post, we will see how I managed to answer such questions, while at the same time, it was an excellent exercise to learn about Docker, combining several open sources or free programs.&lt;/p&gt;</description>
            <content type="html"><![CDATA[<h1 id="how-to-create-your-own-netflix">How to create your own Netflix</h1>
<p><strong>This is post is only for educational purposes. I am not condoning media piracy in any way</strong></p>
<p>I was asking myself, how can I build my own Netflix. That questions derived in more specific questions like &ldquo;how can I&hellip;&rdquo;:</p>
<ul>
<li>easily stream content from my storage device to my TV?</li>
<li>automate the gathering of content to put onto my storage device?</li>
<li>securely control the resulting system?</li>
</ul>
<p>In this post, we will see how I managed to answer such questions, while at the same time, it was an excellent exercise to learn about Docker, combining several open sources or free programs.</p>
<p>To carry out this project, you will need:</p>
<ul>
<li>A Linux OS and Docker</li>
<li>A PC or Laptop turned on 24 hours.</li>
</ul>
<p>In my case, I used:</p>
<ul>
<li>Ubuntu 16.04 LTS (LTS stands for Long Term Support)</li>
<li>Gigabyte Barebone</li>
</ul>
<p>I choose an Ubuntu with long term support, as once the system is set-up, it will be connected to the Internet 24 hours. With that in mind, I want a stable operating system. You are free to choose other Linux distributions, such as Debian or CentOS, only make sure that the distribution is stable and maintained for the following years, as you do not wish to update the OS too frequently.</p>
<p>I also bought a Mini-Barebone and RAM on Amazon:</p>
<ul>
<li><a href="https://www.amazon.de/gp/product/B015EV086U/">Gigabyte Brix BACE-3000 Ultra-Compact Barebone PC</a></li>
<li><a href="https://www.amazon.de/gp/product/B00CQ35HBQ/">Kingston ValueRam 8 GB DDR3L 1600 MHz SODIMM CL11 Memory Module</a></li>
</ul>
<p>I recycled one 512 GB internal hard disk for my project, two USB hard disks of 1 TB, and one USB hard disk of 2 TB.</p>
<p>After assembling the barebone, I <a href="https://ubuntu.com/#download">download</a> an ISO image of Ubuntu, and follow the instructions to copy the installation image in one of the USB hard drives, following the instructions at the Ubuntu webpage: <a href="https://ubuntu.com/tutorials/create-a-usb-stick-on-windows">Create a USB Stick on Windows</a>. Similar instructions are available is your main computer runs on Linux or macOS.</p>
<p>Installing Ubuntu is out of this post&rsquo;s scope, but it is a relatively straightforward process of answering some questions and click Next several times.</p>
<h2 id="installing-docker">Installing Docker</h2>
<p>Docker offers us the possibility of installing a small operating system with some libraries and a program and everything encapsulated in a container. This encapsulation allows us to deploy programs consistently.</p>
<p>The official definition of Docker, according to Wikipedia:</p>
<p>Docker is a platform as a service (PaaS) products that use OS-level virtualization to deliver software packages called containers. Containers are isolated from one another and bundle their software, libraries, and configuration files to communicate through well-defined channels. Because all of the containers share a single operating system kernel&rsquo;s services, they use fewer resources than virtual machines.</p>
<p>The instructions to install Docker in our Ubuntu server are explained step by step in the <a href="https://docs.docker.com/engine/install/ubuntu/">official documentation</a></p>
<h2 id="installing-docker-compose">Installing Docker Compose</h2>
<p>Docker allows us to create containers, but in our case, we want to make several containers (each with one program). For that, we have docker-compose.</p>
<p>The instructions to install Docker Compose are well explained in the <a href="https://docs.docker.com/compose/install/">official documentation</a></p>
<h2 id="description-of-the-programs-to-use">Description of the programs to use</h2>
<h3 id="plex">Plex</h3>
<p>From their <a href="https://www.plex.tv/">website</a>:</p>
<p>Plex is like mission control for your media collections. With our easy-to-install Plex Media Server software and your Plex apps, available on all your favourite phones, tablets, streaming devices, gaming consoles, and smart TVs, you can stream your video, music, and photo collections anytime anywhere, to any device.</p>
<p>What this means is that you can install Plex Media Server on your main content storage device (most likely a server or PC of some kind running on your network) and can stream it to any Plex viewer app available (on iOS, Android, Raspberry, Chromecast, etc.)</p>
<p>This program is the answer to the question:</p>
<ul>
<li>How can I easily stream content from my storage device to my TV?</li>
</ul>
<h3 id="sonarr">Sonarr</h3>
<p>From their <a href="https://github.com/Sonarr/Sonarr">GitHub</a> page:</p>
<p>Sonarr is a PVR for Usenet and BitTorrent users. It can monitor multiple RSS feeds for new episodes of your favourite shows and grab, sort and rename them. It can also be configured to automatically upgrade the quality of files already downloaded when a better quality format becomes available.</p>
<p>This program is a partial answer to the question:</p>
<ul>
<li>How can I automate the gathering of content to put onto my storage device?</li>
</ul>
<p>I have an answer to how to download TV Shows, but not Movies, and it open a new question:</p>
<ul>
<li>How can I scan several torrents sites for the media content?</li>
<li>How can I download a torrent?</li>
</ul>
<h3 id="radarr">Radarr</h3>
<p>From their <a href="https://github.com/Radarr/Radarr">GitHub</a> page:</p>
<p>Radarr is an independent fork of Sonarr reworked for automatically downloading movies via Usenet and BitTorrent. The project was inspired by other Usenet/BitTorrent movie downloaders such as CouchPotato.</p>
<p>This program closes the automated gathering of content, as it will handle Movies, but with the same limitations of scanning torrent sites and download the torrent.</p>
<h3 id="jackett">Jackett</h3>
<p>From their <a href="https://github.com/Jackett/Jackett">GitHub</a> page:</p>
<p>Jackett works as a proxy server: it translates queries from apps (Sonarr, Radarr, SickRage, CouchPotato, Mylar, etc) into tracker-site-specific HTTP queries, parses the HTML response, then sends results back to the requesting software. This allows for getting recent uploads (like RSS) and performing searches. Jackett is a single repository of maintained indexer scraping &amp; translation logic - removing the burden from other apps.</p>
<p>This program allows us to scan several torrent sites, proving a standard API that Radarr and Sonarr can understand.</p>
<h3 id="deluge">Deluge</h3>
<p>From <a href="https://en.wikipedia.org/wiki/Deluge_%28software%29">Wikipedia</a>:</p>
<p>Deluge is a free and open-source, cross-platform BitTorrent client written in Python. Deluge uses a front and back end architecture where libtorrent, a software library written in C++ which provides the application&rsquo;s networking logic, is connected to one of various front ends, including a text console, the web interface and a graphical desktop interface using GTK+ through the project&rsquo;s Python bindings.</p>
<p>This program closes the loop, answering the question of how I download a torrent?</p>
<h3 id="jwildernginx-proxy">jwilder/nginx-proxy</h3>
<p>From <a href="https://hub.docker.com/r/jwilder/nginx-proxy">Docker Hub</a>:</p>
<p>nginx-proxy sets up a container running nginx and docker-gen. Docker-gen generates reverse proxy configs for nginx and reloads nginx when containers are started and stopped.</p>
<p>Only a question has remained: How can I securely control the system?</p>
<p>With this docker image, I partially solve the question, as it allows to expose the programs presented above via the web.</p>
<h3 id="jrcsletsencrypt-nginx-proxy-companion">jrcs/letsencrypt-nginx-proxy-companion</h3>
<p>From <a href="https://hub.docker.com/r/jrcs/letsencrypt-nginx-proxy-companion">Docker Hub</a>:</p>
<p>lets-encrypt-Nginx-proxy-companion is a lightweight companion container for Nginx-proxy. It handles the automated creation, renewal and use of Let&rsquo;s Encrypt certificates for proxied Docker containers.</p>
<p>This program closes the last question, as it will secure via HTTPS the web access of the programs presented above.</p>
<h2 id="preparing-the-storage">Preparing the storage</h2>
<p>In my case, I decided to use several external USB hard-drives and concatenate the space into a single virtual drive. For that, I made use of LVM (Logical Volume Management).</p>
<p>The detailed instructions are outside the scope of this post, but the reader can find more information in <a href="https://www.makeuseof.com/tag/combine-hard-drives-seamless-storage-container-lvm-linux/">Combine All Your Hard Drives Into One Seamless Storage Container With LVM</a>.</p>
<p>After the virtual device was created, I format it with <code>mkfs.ext4</code> and mounted the device in <code>/mnt/storage/</code>.</p>
<h2 id="creating-the-configuration-for-docker-compose">Creating the configuration for Docker Compose</h2>
<p>Create a folder in your home folder, for example, <code>media_centre and create a file with the name </code>docker-compose.yml` inside the folder with the following code:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-YAML" data-lang="YAML"><span style="display:flex;"><span><span style="color:#f92672">version</span>: <span style="color:#e6db74">&#39;2&#39;</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">volumes</span>:
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">radarr-config</span>:
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">external</span>: <span style="color:#66d9ef">true</span>
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">sonarr-config</span>:
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">external</span>: <span style="color:#66d9ef">true</span>
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">deluge-config</span>:
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">external</span>: <span style="color:#66d9ef">true</span>
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">jackett-config</span>:
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">external</span>: <span style="color:#66d9ef">true</span>
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">nginx-vhostd</span>:
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">external</span>: <span style="color:#66d9ef">true</span>
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">nginx-confd</span>:
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">external</span>: <span style="color:#66d9ef">true</span>
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">nginx-html</span>:
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">external</span>: <span style="color:#66d9ef">true</span>
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">nginx-certs</span>:
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">external</span>: <span style="color:#66d9ef">true</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">services</span>:
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">plex</span>:
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">image</span>: <span style="color:#ae81ff">linuxserver/plex</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">volumes</span>:
</span></span><span style="display:flex;"><span>      - <span style="color:#ae81ff">/etc/localtime:/etc/localtime:ro</span>
</span></span><span style="display:flex;"><span>      - <span style="color:#ae81ff">/mnt/storage/apps/plex/config:/config</span>
</span></span><span style="display:flex;"><span>      - <span style="color:#ae81ff">/mnt/storage/media:/media/</span>
</span></span><span style="display:flex;"><span>      - <span style="color:#ae81ff">/mnt/storage/apps/plex/transcode:/transcode</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">environment</span>:
</span></span><span style="display:flex;"><span>      - <span style="color:#ae81ff">VERSION=latest</span>
</span></span><span style="display:flex;"><span>      - <span style="color:#ae81ff">PUID=1000</span>
</span></span><span style="display:flex;"><span>      - <span style="color:#ae81ff">PGID=1000</span>
</span></span><span style="display:flex;"><span>      - <span style="color:#ae81ff">TZ=Europe/Amsterdam</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">network_mode</span>: <span style="color:#e6db74">&#34;host&#34;</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">restart</span>: <span style="color:#ae81ff">unless-stopped</span>
</span></span><span style="display:flex;"><span>    
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">radarr</span>:
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">image</span>: <span style="color:#ae81ff">linuxserver/radarr</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">volumes</span>:
</span></span><span style="display:flex;"><span>      - <span style="color:#ae81ff">/etc/localtime:/etc/localtime:ro</span>
</span></span><span style="display:flex;"><span>      - <span style="color:#ae81ff">radarr-config:/config</span>
</span></span><span style="display:flex;"><span>      - <span style="color:#ae81ff">/mnt/storage/downloads:/downloads</span>
</span></span><span style="display:flex;"><span>      - <span style="color:#ae81ff">/mnt/storage/media/Movies/:/movies</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">environment</span>:
</span></span><span style="display:flex;"><span>      - <span style="color:#ae81ff">PUID=1000</span>
</span></span><span style="display:flex;"><span>      - <span style="color:#ae81ff">PGID=1000</span>
</span></span><span style="display:flex;"><span>      - <span style="color:#ae81ff">TZ=Europe/Amsterdam</span>
</span></span><span style="display:flex;"><span>      - <span style="color:#ae81ff">VIRTUAL_HOST=radarr.your.hostname.com</span>
</span></span><span style="display:flex;"><span>      - <span style="color:#ae81ff">LETSENCRYPT_HOST=radarr.your.hostname.com</span>
</span></span><span style="display:flex;"><span>      - <span style="color:#ae81ff">VIRTUAL_PORT=7878</span>
</span></span><span style="display:flex;"><span>      - <span style="color:#ae81ff">HTTPS_METHOD=redirect</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">restart</span>: <span style="color:#ae81ff">unless-stopped</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">sonarr</span>:
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">image</span>: <span style="color:#ae81ff">linuxserver/sonarr</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">volumes</span>:
</span></span><span style="display:flex;"><span>      - <span style="color:#ae81ff">/etc/localtime:/etc/localtime:ro</span>
</span></span><span style="display:flex;"><span>      - <span style="color:#ae81ff">sonarr-config:/config</span>
</span></span><span style="display:flex;"><span>      - <span style="color:#ae81ff">/mnt/storage/downloads:/downloads</span>
</span></span><span style="display:flex;"><span>      - <span style="color:#ae81ff">/mnt/storage/media/TV Shows/:/tv</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">environment</span>:
</span></span><span style="display:flex;"><span>      - <span style="color:#ae81ff">PUID=1000</span>
</span></span><span style="display:flex;"><span>      - <span style="color:#ae81ff">PGID=1000</span>
</span></span><span style="display:flex;"><span>      - <span style="color:#ae81ff">TZ=Europe/Amsterdam</span>
</span></span><span style="display:flex;"><span>      - <span style="color:#ae81ff">VIRTUAL_HOST=sonarr.your.hostname.com</span>
</span></span><span style="display:flex;"><span>      - <span style="color:#ae81ff">LETSENCRYPT_HOST=sonarr.your.hostname.com</span>
</span></span><span style="display:flex;"><span>      - <span style="color:#ae81ff">VIRTUAL_PORT=8989</span>
</span></span><span style="display:flex;"><span>      - <span style="color:#ae81ff">HTTPS_METHOD=redirect</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">restart</span>: <span style="color:#ae81ff">unless-stopped</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">nginx-proxy</span>:
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">image</span>: <span style="color:#ae81ff">jwilder/nginx-proxy</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">ports</span>:
</span></span><span style="display:flex;"><span>      - <span style="color:#e6db74">&#34;80:80&#34;</span>
</span></span><span style="display:flex;"><span>      - <span style="color:#e6db74">&#34;443:443&#34;</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">volumes</span>:
</span></span><span style="display:flex;"><span>      - <span style="color:#ae81ff">nginx-vhostd:/etc/nginx/vhost.d</span>
</span></span><span style="display:flex;"><span>      - <span style="color:#ae81ff">nginx-confd:/etc/nginx/conf.d</span>
</span></span><span style="display:flex;"><span>      - <span style="color:#ae81ff">nginx-html:/usr/share/nginx/html</span>
</span></span><span style="display:flex;"><span>      - <span style="color:#ae81ff">nginx-certs:/etc/nginx/certs:ro</span>
</span></span><span style="display:flex;"><span>      - <span style="color:#ae81ff">/var/run/docker.sock:/tmp/docker.sock:ro</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">labels</span>:
</span></span><span style="display:flex;"><span>      - <span style="color:#e6db74">&#34;com.github.jrcs.letsencrypt_nginx_proxy_companion.nginx_proxy=true&#34;</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">restart</span>: <span style="color:#ae81ff">unless-stopped</span>
</span></span><span style="display:flex;"><span>      
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">letsencrypt-nginx-proxy-companion</span>:
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">depends_on</span>: 
</span></span><span style="display:flex;"><span>      - <span style="color:#ae81ff">nginx-proxy</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">image</span>: <span style="color:#ae81ff">jrcs/letsencrypt-nginx-proxy-companion</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">volumes</span>:
</span></span><span style="display:flex;"><span>      - <span style="color:#ae81ff">nginx-vhostd:/etc/nginx/vhost.d</span>
</span></span><span style="display:flex;"><span>      - <span style="color:#ae81ff">nginx-confd:/etc/nginx/conf.d</span>
</span></span><span style="display:flex;"><span>      - <span style="color:#ae81ff">nginx-html:/usr/share/nginx/html</span>
</span></span><span style="display:flex;"><span>      - <span style="color:#ae81ff">nginx-certs:/etc/nginx/certs:rw</span>
</span></span><span style="display:flex;"><span>      - <span style="color:#ae81ff">/var/run/docker.sock:/var/run/docker.sock:ro</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">restart</span>: <span style="color:#ae81ff">unless-stopped</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">deluge</span>:
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">image</span>: <span style="color:#ae81ff">ghcr.io/linuxserver/deluge</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">environment</span>:
</span></span><span style="display:flex;"><span>      - <span style="color:#ae81ff">PUID=1000 </span>
</span></span><span style="display:flex;"><span>      - <span style="color:#ae81ff">PGID=1000 </span>
</span></span><span style="display:flex;"><span>      - <span style="color:#ae81ff">TZ=Europe/Amsterdam </span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">volumes</span>:
</span></span><span style="display:flex;"><span>      - <span style="color:#ae81ff">deluge-config:/config </span>
</span></span><span style="display:flex;"><span>      - <span style="color:#ae81ff">/mnt/storage/downloads:/downloads </span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">network_mode</span>: <span style="color:#e6db74">&#34;host&#34;</span> 
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">restart</span>: <span style="color:#ae81ff">unless-stopped</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">jackett</span>:
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">image</span>: <span style="color:#ae81ff">ghcr.io/linuxserver/jackett</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">volumes</span>:
</span></span><span style="display:flex;"><span>      - <span style="color:#ae81ff">/etc/localtime:/etc/localtime:ro</span>
</span></span><span style="display:flex;"><span>      - <span style="color:#ae81ff">jackett-config:/config</span>
</span></span><span style="display:flex;"><span>      - <span style="color:#ae81ff">/mnt/storage/downloads:/downloads</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">environment</span>:
</span></span><span style="display:flex;"><span>      - <span style="color:#ae81ff">PUID=1000</span>
</span></span><span style="display:flex;"><span>      - <span style="color:#ae81ff">PGID=1000</span>
</span></span><span style="display:flex;"><span>      - <span style="color:#ae81ff">TZ=Europe/Amsterdam</span>
</span></span><span style="display:flex;"><span>      - <span style="color:#ae81ff">VIRTUAL_HOST=jackett.your.hostname.com</span>
</span></span><span style="display:flex;"><span>      - <span style="color:#ae81ff">LETSENCRYPT_HOST=jackett.your.hostname.com</span>
</span></span><span style="display:flex;"><span>      - <span style="color:#ae81ff">VIRTUAL_PORT=9117</span>
</span></span><span style="display:flex;"><span>      - <span style="color:#ae81ff">HTTPS_METHOD=redirect</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">restart</span>: <span style="color:#ae81ff">unless-stopped</span>
</span></span></code></pre></div><p>Remember to replace <code>your.hostname.com</code> for your user-friendly and easy to remember hostname. If you don&rsquo;t have a domain, do not despair, you can find several Internet services providing DDNS. I am currently using <a href="https://www.dynu.com/DynamicDNS">Dynu</a>.</p>
<p>Also, remember to replace <code>192.168.178.30</code> for the IP address of your server.</p>
<h2 id="starting-up-the-system">Starting up the system</h2>
<p>Before starting the system, we must create the volumes specified at the beginning of the configuration. For that, we must type:</p>
<p><code>$ docker volume create --name radarr-config</code></p>
<p>And we repeat with all the external volumes defined in our <code>docker-compose.yml</code> file.</p>
<p>In the folder we created before, we start up our system by typing:</p>
<p><code>$ docker-compose up -d</code></p>
<p>It will take a while to download all images and create the HTTPS certificates with Let&rsquo;s Encrypt, but do not worry. Everything is automatic, and no questions or pushing next is required. So, relax, and go to drink a coffee.</p>
<h2 id="configuring-the-system">Configuring the system</h2>
<p>After everything have been installed, our last step is to configure the system. For that, we must go to every program and follow the instructions in the welcome tutorial of each program.</p>
<p>We can enter into every program, pointing our web browser to:</p>
<ul>
<li><code>192.168.178.30:32400</code> or your IP address for Plex</li>
<li><code>192.168.178.30:8112</code> or your IP address for Deluge</li>
<li><code>radarr.your.hostname.com</code> for Radar</li>
<li><code>sonarr.your.hostname.com</code> for Sonarr</li>
<li><code>jackett.your.hostname.com</code> for Jackett</li>
</ul>
<p>Congratulations, you just created your own Netflix.</p>
]]></content>
        </item>
        
        <item>
            <title>Why I am writing a blog</title>
            <link>https://blog.miguens.one/posts/2017/02/why-i-am-writing-a-blog/</link>
            <pubDate>Thu, 02 Feb 2017 00:00:00 +0000</pubDate>
            
            <guid>https://blog.miguens.one/posts/2017/02/why-i-am-writing-a-blog/</guid>
            <description>&lt;p&gt;The benefits of journaling have been discussed worldwide (ex. &lt;a href=&#34;https://www.huffpost.com/entry/benefits-of-journaling-_b_6648884&#34;&gt;Benefits of Journaling&lt;/a&gt;).&lt;/p&gt;
&lt;p&gt;Most authors emphasise the improved creativity and self-reflection aspects of journaling. While we could stop there and always use our journal to record feeling, ideas and, in general, record everything we consider worth analysing, we could take a step further and make some of our entries public.&lt;/p&gt;
&lt;p&gt;Like that, a blog is born!&lt;/p&gt;
&lt;p&gt;Making our thoughts available for the world to read come with some side-effects: We will become better writers.&lt;/p&gt;</description>
            <content type="html"><![CDATA[<p>The benefits of journaling have been discussed worldwide (ex. <a href="https://www.huffpost.com/entry/benefits-of-journaling-_b_6648884">Benefits of Journaling</a>).</p>
<p>Most authors emphasise the improved creativity and self-reflection aspects of journaling. While we could stop there and always use our journal to record feeling, ideas and, in general, record everything we consider worth analysing, we could take a step further and make some of our entries public.</p>
<p>Like that, a blog is born!</p>
<p>Making our thoughts available for the world to read come with some side-effects: We will become better writers.</p>
<p>If we sustain our blogging habit, we will gain better writing skills, but we could boost our confidence levels and become better communicators in general.</p>
<p>After all, writing is simply a type of communication that people use to exchange thoughts and feelings.</p>
<p>As a result, bloggers begin to see, literally, their writing as a process rather than something written to hand off as a report or to fulfil an assignment. Writers can share germs of an idea and ask for feedback, develop that idea as a draft, and publish a more polished result for readers who have been engaged in watching a piece of writing grow.</p>
<p>You see, a lot of advantages, and if you often journal, the extra step of making some of your stories public will help you grow.</p>
]]></content>
        </item>
        
    </channel>
</rss>
