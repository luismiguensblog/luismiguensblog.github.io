<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Mqtt on Luis Miguens Blog</title>
    <link>https://blog.miguens.one/tags/mqtt/</link>
    <description>Recent content in Mqtt on Luis Miguens Blog</description>
    <generator>Hugo</generator>
    <language>en</language>
    <lastBuildDate>Sun, 04 Aug 2019 00:00:00 +0000</lastBuildDate>
    <atom:link href="https://blog.miguens.one/tags/mqtt/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Messages between applications: MQTT and C</title>
      <link>https://blog.miguens.one/posts/2019/08/messages-between-applications-mqtt-and-c/</link>
      <pubDate>Sun, 04 Aug 2019 00:00:00 +0000</pubDate>
      <guid>https://blog.miguens.one/posts/2019/08/messages-between-applications-mqtt-and-c/</guid>
      <description>&lt;h2 id=&#34;installation&#34;&gt;Installation&lt;/h2&gt;&#xA;&lt;p&gt;To make use of MQTT in C, we need to install a library to communicate with the server. A populat choice is &lt;a href=&#34;https://www.eclipse.org/paho/&#34;&gt;Paho&lt;/a&gt; from Eclipse.&lt;/p&gt;&#xA;&lt;p&gt;We need to follow the next steps to install it:&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;git clone https://github.com/eclipse/paho.mqtt.c.git&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;cd paho.mqtt.c&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;make&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;sudo make install&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Depending on your system, you might need to install the development package of OpenSSL (openssl-dev)&lt;/p&gt;&#xA;&lt;h2 id=&#34;writing-the-test-program&#34;&gt;Writing the test program&lt;/h2&gt;&#xA;&lt;p&gt;We need to create two files, &lt;code&gt;send.c&lt;/code&gt; and &lt;code&gt;receive.c&lt;/code&gt;. Both files are based upon the official examples of Paho&lt;/p&gt;</description>
    </item>
    <item>
      <title>Messages between applications: MQTT and Python</title>
      <link>https://blog.miguens.one/posts/2019/08/messages-between-applications-mqtt-and-python/</link>
      <pubDate>Sat, 03 Aug 2019 00:00:00 +0000</pubDate>
      <guid>https://blog.miguens.one/posts/2019/08/messages-between-applications-mqtt-and-python/</guid>
      <description>&lt;h2 id=&#34;installation&#34;&gt;Installation&lt;/h2&gt;&#xA;&lt;p&gt;To make use of MQTT in Python, we need to install a library to communicate with the server. A populat choice is &lt;a href=&#34;https://www.eclipse.org/paho/&#34;&gt;Paho&lt;/a&gt; from Eclipse.&lt;/p&gt;&#xA;&lt;p&gt;As usual we can use pip to install it&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;!!&lt;/span&gt;pip3 install paho&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;mqtt &#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;pre&gt;&lt;code&gt;[&#39;Requirement already satisfied: paho-mqtt in /home/luis/.local/lib/python3.8/site-packages (1.5.1)&#39;]&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;h2 id=&#34;publish-a-message&#34;&gt;Publish a message&lt;/h2&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; paho.mqtt.client &lt;span style=&#34;color:#66d9ef&#34;&gt;as&lt;/span&gt; mqtt&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;help(mqtt&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;Client&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;publish)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;pre&gt;&lt;code&gt;Help on function publish in module paho.mqtt.client:&#xA;&#xA;publish(self, topic, payload=None, qos=0, retain=False, properties=None)&#xA;    Publish a message on a topic.&#xA;    &#xA;    This causes a message to be sent to the broker and subsequently from&#xA;    the broker to any clients subscribing to matching topics.&#xA;    &#xA;    topic: The topic that the message should be published on.&#xA;    payload: The actual message to send. If not given, or set to None a&#xA;    zero length message will be used. Passing an int or float will result&#xA;    in the payload being converted to a string representing that number. If&#xA;    you wish to send a true int/float, use struct.pack() to create the&#xA;    payload you require.&#xA;    qos: The quality of service level to use.&#xA;    retain: If set to true, the message will be set as the &amp;quot;last known&#xA;    good&amp;quot;/retained message for the topic.&#xA;    properties: (MQTT v5.0 only) the MQTT v5.0 properties to be included.&#xA;    Use the Properties class.&#xA;    &#xA;    Returns a MQTTMessageInfo class, which can be used to determine whether&#xA;    the message has been delivered (using info.is_published()) or to block&#xA;    waiting for the message to be delivered (info.wait_for_publish()). The&#xA;    message ID and return code of the publish() call can be found at&#xA;    info.mid and info.rc.&#xA;    &#xA;    For backwards compatibility, the MQTTMessageInfo class is iterable so&#xA;    the old construct of (rc, mid) = client.publish(...) is still valid.&#xA;    &#xA;    rc is MQTT_ERR_SUCCESS to indicate success or MQTT_ERR_NO_CONN if the&#xA;    client is not currently connected.  mid is the message ID for the&#xA;    publish request. The mid value can be used to track the publish request&#xA;    by checking against the mid argument in the on_publish() callback if it&#xA;    is defined.&#xA;    &#xA;    A ValueError will be raised if topic is None, has zero length or is&#xA;    invalid (contains a wildcard), except if the MQTT version used is v5.0.  &#xA;    For v5.0, a zero length topic can be used when a Topic Alias has been set.&#xA;    &#xA;    A ValueError will be raised if qos is not one of 0, 1 or 2, or if&#xA;    the length of the payload is greater than 268435455 bytes.&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;client &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; mqtt&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;Client()&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;client&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;connect(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;localhost&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1883&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;60&lt;/span&gt;)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;client&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;publish(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;example/path&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Hello world!&amp;#39;&lt;/span&gt;, retain&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;True&lt;/span&gt;)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;pre&gt;&lt;code&gt;&amp;lt;paho.mqtt.client.MQTTMessageInfo at 0x7fa8440554f0&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;h2 id=&#34;retrieve-message&#34;&gt;Retrieve message&lt;/h2&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;client2 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; mqtt&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;Client()&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;client2&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;connect(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;localhost&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1883&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;60&lt;/span&gt;)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;on_message&lt;/span&gt;(client, userdata, msg, properties&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;None&lt;/span&gt;):&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    print(msg&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;topic&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34; &amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;str(msg&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;payload))&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;client2&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;on_message &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; on_message&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;client2&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;subscribe(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;example/path&amp;#39;&lt;/span&gt;)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;client2&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;loop_start()&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;pre&gt;&lt;code&gt;example/path b&#39;Hello world!&#39;&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;If everything went well, we should see Hello world as output.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Messages between applications: MQTT Server</title>
      <link>https://blog.miguens.one/posts/2019/08/messages-between-applications-mqtt-server/</link>
      <pubDate>Fri, 02 Aug 2019 00:00:00 +0000</pubDate>
      <guid>https://blog.miguens.one/posts/2019/08/messages-between-applications-mqtt-server/</guid>
      <description>&lt;h2 id=&#34;mqtt&#34;&gt;MQTT&lt;/h2&gt;&#xA;&lt;p&gt;In this series of post, I will explain how to use the message broker MQTT. From installation to submit and receive messages in Python and C++.&lt;/p&gt;&#xA;&lt;h2 id=&#34;a-bit-of-history&#34;&gt;A bit of history&lt;/h2&gt;&#xA;&lt;p&gt;MQTT was created way back in 1999 by two engineers — Andy Stanford-Clark (IBM) and Arlen Nipper (Eurotech). They had to invent a new protocol for connecting oil pipelines over unreliable, satellite networks.&lt;/p&gt;&#xA;&lt;p&gt;The motivation for designing MQTT was to create a lightweight and bandwidth-efficient protocol that was data agnostic with support for multiple levels of Quality of Service (QoS). Interestingly, even today, those are the same reasons for which MQTT is chosen for implementing IoT solutions.&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
