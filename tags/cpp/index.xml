<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Cpp on Luis Miguens Blog</title>
    <link>https://blog.miguens.one/tags/cpp/</link>
    <description>Recent content in Cpp on Luis Miguens Blog</description>
    <generator>Hugo</generator>
    <language>en</language>
    <lastBuildDate>Thu, 08 Apr 2021 00:00:00 +0000</lastBuildDate>
    <atom:link href="https://blog.miguens.one/tags/cpp/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>How to use C&#43;&#43; in Jupyter Lab</title>
      <link>https://blog.miguens.one/posts/2021/04/how-to-use-c-in-jupyter-lab/</link>
      <pubDate>Thu, 08 Apr 2021 00:00:00 +0000</pubDate>
      <guid>https://blog.miguens.one/posts/2021/04/how-to-use-c-in-jupyter-lab/</guid>
      <description>&lt;h2 id=&#34;how-to-use-c-in-jupyter-lab&#34;&gt;How to use C++ in Jupyter Lab&lt;/h2&gt;&#xA;&lt;p&gt;One of the main extension points of the Jupyter stack is the kernel, the part of the infrastructure responsible for executing the userâ€™s code. Jupyter kernels exist for numerous programming languages.&#xA;Most Jupyter kernels are implemented in the target programming language: the reference implementation ipykernel in Python, IJulia in Julia&lt;/p&gt;&#xA;&lt;p&gt;Xeus is a C++ implementation of the Jupyter kernel protocol. It is not a kernel itself but a library that facilitates the authoring of kernels, and other applications making use of the Jupyter kernel protocol.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Writing Python modules in C&#43;&#43;</title>
      <link>https://blog.miguens.one/posts/2020/08/writing-python-modules-in-c-/</link>
      <pubDate>Tue, 04 Aug 2020 00:00:00 +0000</pubDate>
      <guid>https://blog.miguens.one/posts/2020/08/writing-python-modules-in-c-/</guid>
      <description>&lt;h2 id=&#34;how-to-build-libraries-in-c-and-use-them-in-python&#34;&gt;How to build libraries in C++ and use them in Python&lt;/h2&gt;&#xA;&lt;p&gt;In this post I will expose one way to create libraries in C++ and expose them to Python.&lt;/p&gt;&#xA;&lt;p&gt;This can be very useful when we want to integrate existing piece of code, or write new code that perform better than Python.&lt;/p&gt;&#xA;&lt;p&gt;The way exposed in this post will make use of &lt;a href=&#34;https://www.boost.org/&#34;&gt;Boost&lt;/a&gt;, a peer reviewed C++ set of libraries. In paticular, we will use &lt;a href=&#34;https://www.boost.org/doc/libs/1_75_0/libs/python/doc/html/index.html&#34;&gt;Boost-Python&lt;/a&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>Databases MySQL: C&#43;&#43;</title>
      <link>https://blog.miguens.one/posts/2020/06/databases-mysql-c-/</link>
      <pubDate>Wed, 17 Jun 2020 00:00:00 +0000</pubDate>
      <guid>https://blog.miguens.one/posts/2020/06/databases-mysql-c-/</guid>
      <description>&lt;h2 id=&#34;installation&#34;&gt;Installation&lt;/h2&gt;&#xA;&lt;p&gt;In the first place, we need to install the MySQL Connector for C++. I am using Ubuntu, so I will use apt-get. Please adapt if you are using another distro not based on Debian.&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;sudo apt-get install libmysqlcppconn-dev libmysqlcppconn7v5&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;We can try our database, for that I will use the example 2 included in the MySQL Connector. You can find the source code &lt;a href=&#34;https://dev.mysql.com/doc/connector-cpp/1.1/en/connector-cpp-examples-complete-example-2.html&#34;&gt;here&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;The test program is:&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c++&#34; data-lang=&#34;c++&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;/* Standard C++ includes */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;&amp;lt;stdlib.h&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;&amp;lt;iostream&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;/*&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;  Include directly the different&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;  headers from cppconn/ and mysql_driver.h + mysql_util.h&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;  (and mysql_connection.h). This will reduce your build time!&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;*/&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;&amp;#34;mysql_connection.h&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;&amp;lt;cppconn/driver.h&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;&amp;lt;cppconn/exception.h&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;&amp;lt;cppconn/resultset.h&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;&amp;lt;cppconn/statement.h&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;&amp;lt;cppconn/prepared_statement.h&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;using&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;namespace&lt;/span&gt; std;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;main&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt;)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    cout &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; endl;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    cout &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Let&amp;#39;s have MySQL count from 10 to 1...&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; endl;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;try&lt;/span&gt; {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    sql&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;Driver &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;driver;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    sql&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;Connection &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;con;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    sql&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;Statement &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;stmt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    sql&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;ResultSet &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;res;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    sql&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;PreparedStatement &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;pstmt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;/* Create a connection */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    driver &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; get_driver_instance();&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    con &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; driver&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;connect(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;tcp://127.0.0.1:3306&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;root&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;secret&amp;#34;&lt;/span&gt;);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;/* Connect to the MySQL test database */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    con&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;setSchema(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;datab&amp;#34;&lt;/span&gt;);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    stmt &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; con&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;createStatement();&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    stmt&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;execute(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;DROP TABLE IF EXISTS test&amp;#34;&lt;/span&gt;);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    stmt&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;execute(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;CREATE TABLE test(id INT)&amp;#34;&lt;/span&gt;);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;delete&lt;/span&gt; stmt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;/* &amp;#39;?&amp;#39; is the supported placeholder syntax */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    pstmt &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; con&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;prepareStatement(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;INSERT INTO test(id) VALUES (?)&amp;#34;&lt;/span&gt;);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;; i &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;; i&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        pstmt&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;setInt(&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, i);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        pstmt&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;executeUpdate();&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;delete&lt;/span&gt; pstmt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;/* Select in ascending order */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    pstmt &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; con&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;prepareStatement(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;SELECT id FROM test ORDER BY id ASC&amp;#34;&lt;/span&gt;);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    res &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; pstmt&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;executeQuery();&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;/* Fetch in reverse = descending order! */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    res&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;afterLast();&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt; (res&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;previous())&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        cout &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\t&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;... MySQL counts: &amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; res&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;getInt(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;id&amp;#34;&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; endl;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;delete&lt;/span&gt; res;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;delete&lt;/span&gt; pstmt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;delete&lt;/span&gt; con;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    } &lt;span style=&#34;color:#66d9ef&#34;&gt;catch&lt;/span&gt; (sql&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;SQLException &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;e) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    cout &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;# ERR: SQLException in &amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; __FILE__;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    cout &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;(&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; __FUNCTION__ &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;) on line &amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; __LINE__ &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; endl;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    cout &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;# ERR: &amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; e.what();&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    cout &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34; (MySQL error code: &amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; e.getErrorCode();&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    cout &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;, SQLState: &amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; e.getSQLState() &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34; )&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; endl;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    cout &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; endl;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; EXIT_SUCCESS;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;We can compile the program with the following command and execute it:&lt;/p&gt;</description>
    </item>
    <item>
      <title>Databases MySQL: Python Part 2</title>
      <link>https://blog.miguens.one/posts/2020/06/databases-mysql-python-part-2/</link>
      <pubDate>Sun, 14 Jun 2020 00:00:00 +0000</pubDate>
      <guid>https://blog.miguens.one/posts/2020/06/databases-mysql-python-part-2/</guid>
      <description>&lt;h2 id=&#34;introduction&#34;&gt;Introduction&lt;/h2&gt;&#xA;&lt;p&gt;In previous post we saw how to use SQLAlchemy and execute SQL commands to operate our database.&lt;/p&gt;&#xA;&lt;p&gt;Now we will see that there is a more convenient way to operate in Python using the SQLAlchemy&lt;/p&gt;&#xA;&lt;p&gt;In case you have reset your environment, we can start installing the package&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;!!&lt;/span&gt;pip3 install sqlalchemy&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;pre&gt;&lt;code&gt;[&#39;Requirement already satisfied: sqlalchemy in /home/luis/.local/lib/python3.8/site-packages (1.3.20)&#39;]&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;And before using the library, we need to import it&lt;/p&gt;</description>
    </item>
    <item>
      <title>Databases MySQL: Python Part 1</title>
      <link>https://blog.miguens.one/posts/2020/06/databases-mysql-python-part-1/</link>
      <pubDate>Tue, 09 Jun 2020 00:00:00 +0000</pubDate>
      <guid>https://blog.miguens.one/posts/2020/06/databases-mysql-python-part-1/</guid>
      <description>&lt;h2 id=&#34;introduction&#34;&gt;Introduction&lt;/h2&gt;&#xA;&lt;p&gt;In previous post we saw how to install and use an SQL database, now I will introduce how to use inside Python&lt;/p&gt;&#xA;&lt;p&gt;We have several connectors from SQL to Python that are &amp;ldquo;flavour&amp;rdquo; dependant. For example, we can use &lt;a href=&#34;https://pypi.org/project/psycopg2/&#34;&gt;psycopg2&lt;/a&gt; to connect to a PostgreSQL database or &lt;a href=&#34;https://dev.mysql.com/doc/connector-python/en/connector-python-example-connecting.html&#34;&gt;MySQL Connector&lt;/a&gt; to connect to MySQL.&lt;/p&gt;&#xA;&lt;p&gt;I like to take a step back, and use a package that is not dependant of the brand of database we will install. For that my favourite is &lt;a href=&#34;https://www.sqlalchemy.org/&#34;&gt;SQLAlchemy&lt;/a&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>Databases MySQL: Integrate SQL in Jupyter Lab</title>
      <link>https://blog.miguens.one/posts/2020/06/databases-mysql-integrate-sql-in-jupyter-lab/</link>
      <pubDate>Sat, 06 Jun 2020 00:00:00 +0000</pubDate>
      <guid>https://blog.miguens.one/posts/2020/06/databases-mysql-integrate-sql-in-jupyter-lab/</guid>
      <description>&lt;h2 id=&#34;preparation-of-jupyter-notebook&#34;&gt;Preparation of Jupyter Notebook&lt;/h2&gt;&#xA;&lt;p&gt;In the previous post we saw how to install MySQL and prepare the external programs needed to use SQL in our Jupyter Notebook.&lt;/p&gt;&#xA;&lt;p&gt;Now let&amp;rsquo;s load the module and establish the connection and let&amp;rsquo;s start&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt;load_ext sql&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt;sql mysql&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;pymysql:&lt;span style=&#34;color:#f92672&#34;&gt;//&lt;/span&gt;user:password&lt;span style=&#34;color:#a6e22e&#34;&gt;@localhost&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;datab&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;how-to-create-a-table&#34;&gt;How to create a table&lt;/h2&gt;&#xA;&lt;p&gt;Imagine that we want to build a database to identify pets. Every pet has an ID, a category (dog, cat, bird) and a name&lt;/p&gt;</description>
    </item>
    <item>
      <title>Databases MySQL: Installation</title>
      <link>https://blog.miguens.one/posts/2020/06/databases-mysql-installation/</link>
      <pubDate>Wed, 03 Jun 2020 00:00:00 +0000</pubDate>
      <guid>https://blog.miguens.one/posts/2020/06/databases-mysql-installation/</guid>
      <description>&lt;h1 id=&#34;introduction-to-databases-mysql&#34;&gt;Introduction to Databases: MySQL&lt;/h1&gt;&#xA;&lt;p&gt;During the following days I will write about databases SQL, how to install, debug and use them via Python and C++.&lt;/p&gt;&#xA;&lt;h2 id=&#34;installation&#34;&gt;Installation&lt;/h2&gt;&#xA;&lt;p&gt;To install a MySQL I will use Docker, as it is the most easiest way in my opinion to quickly deploy a test database.&lt;/p&gt;&#xA;&lt;p&gt;In a Jupyter Notebook, let&amp;rsquo;s run:&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;!!&lt;/span&gt;docker run &lt;span style=&#34;color:#f92672&#34;&gt;--&lt;/span&gt;name mysql&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;test &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;e MYSQL_ROOT_PASSWORD&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;secret &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;d &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;p &lt;span style=&#34;color:#ae81ff&#34;&gt;3306&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;3306&lt;/span&gt; mysql&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;pre&gt;&lt;code&gt;[&#39;b2946635401f23ee223861da235cc309af878dd0305d03285673b39962ca1311&#39;]&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;We can check that the database is running with &lt;code&gt;docker ps&lt;/code&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>Messages between applications: MQTT and C</title>
      <link>https://blog.miguens.one/posts/2019/08/messages-between-applications-mqtt-and-c/</link>
      <pubDate>Sun, 04 Aug 2019 00:00:00 +0000</pubDate>
      <guid>https://blog.miguens.one/posts/2019/08/messages-between-applications-mqtt-and-c/</guid>
      <description>&lt;h2 id=&#34;installation&#34;&gt;Installation&lt;/h2&gt;&#xA;&lt;p&gt;To make use of MQTT in C, we need to install a library to communicate with the server. A populat choice is &lt;a href=&#34;https://www.eclipse.org/paho/&#34;&gt;Paho&lt;/a&gt; from Eclipse.&lt;/p&gt;&#xA;&lt;p&gt;We need to follow the next steps to install it:&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;git clone https://github.com/eclipse/paho.mqtt.c.git&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;cd paho.mqtt.c&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;make&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;sudo make install&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Depending on your system, you might need to install the development package of OpenSSL (openssl-dev)&lt;/p&gt;&#xA;&lt;h2 id=&#34;writing-the-test-program&#34;&gt;Writing the test program&lt;/h2&gt;&#xA;&lt;p&gt;We need to create two files, &lt;code&gt;send.c&lt;/code&gt; and &lt;code&gt;receive.c&lt;/code&gt;. Both files are based upon the official examples of Paho&lt;/p&gt;</description>
    </item>
    <item>
      <title>Messages between applications: MQTT and Python</title>
      <link>https://blog.miguens.one/posts/2019/08/messages-between-applications-mqtt-and-python/</link>
      <pubDate>Sat, 03 Aug 2019 00:00:00 +0000</pubDate>
      <guid>https://blog.miguens.one/posts/2019/08/messages-between-applications-mqtt-and-python/</guid>
      <description>&lt;h2 id=&#34;installation&#34;&gt;Installation&lt;/h2&gt;&#xA;&lt;p&gt;To make use of MQTT in Python, we need to install a library to communicate with the server. A populat choice is &lt;a href=&#34;https://www.eclipse.org/paho/&#34;&gt;Paho&lt;/a&gt; from Eclipse.&lt;/p&gt;&#xA;&lt;p&gt;As usual we can use pip to install it&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;!!&lt;/span&gt;pip3 install paho&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;mqtt &#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;pre&gt;&lt;code&gt;[&#39;Requirement already satisfied: paho-mqtt in /home/luis/.local/lib/python3.8/site-packages (1.5.1)&#39;]&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;h2 id=&#34;publish-a-message&#34;&gt;Publish a message&lt;/h2&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; paho.mqtt.client &lt;span style=&#34;color:#66d9ef&#34;&gt;as&lt;/span&gt; mqtt&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;help(mqtt&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;Client&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;publish)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;pre&gt;&lt;code&gt;Help on function publish in module paho.mqtt.client:&#xA;&#xA;publish(self, topic, payload=None, qos=0, retain=False, properties=None)&#xA;    Publish a message on a topic.&#xA;    &#xA;    This causes a message to be sent to the broker and subsequently from&#xA;    the broker to any clients subscribing to matching topics.&#xA;    &#xA;    topic: The topic that the message should be published on.&#xA;    payload: The actual message to send. If not given, or set to None a&#xA;    zero length message will be used. Passing an int or float will result&#xA;    in the payload being converted to a string representing that number. If&#xA;    you wish to send a true int/float, use struct.pack() to create the&#xA;    payload you require.&#xA;    qos: The quality of service level to use.&#xA;    retain: If set to true, the message will be set as the &amp;quot;last known&#xA;    good&amp;quot;/retained message for the topic.&#xA;    properties: (MQTT v5.0 only) the MQTT v5.0 properties to be included.&#xA;    Use the Properties class.&#xA;    &#xA;    Returns a MQTTMessageInfo class, which can be used to determine whether&#xA;    the message has been delivered (using info.is_published()) or to block&#xA;    waiting for the message to be delivered (info.wait_for_publish()). The&#xA;    message ID and return code of the publish() call can be found at&#xA;    info.mid and info.rc.&#xA;    &#xA;    For backwards compatibility, the MQTTMessageInfo class is iterable so&#xA;    the old construct of (rc, mid) = client.publish(...) is still valid.&#xA;    &#xA;    rc is MQTT_ERR_SUCCESS to indicate success or MQTT_ERR_NO_CONN if the&#xA;    client is not currently connected.  mid is the message ID for the&#xA;    publish request. The mid value can be used to track the publish request&#xA;    by checking against the mid argument in the on_publish() callback if it&#xA;    is defined.&#xA;    &#xA;    A ValueError will be raised if topic is None, has zero length or is&#xA;    invalid (contains a wildcard), except if the MQTT version used is v5.0.  &#xA;    For v5.0, a zero length topic can be used when a Topic Alias has been set.&#xA;    &#xA;    A ValueError will be raised if qos is not one of 0, 1 or 2, or if&#xA;    the length of the payload is greater than 268435455 bytes.&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;client &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; mqtt&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;Client()&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;client&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;connect(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;localhost&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1883&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;60&lt;/span&gt;)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;client&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;publish(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;example/path&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Hello world!&amp;#39;&lt;/span&gt;, retain&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;True&lt;/span&gt;)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;pre&gt;&lt;code&gt;&amp;lt;paho.mqtt.client.MQTTMessageInfo at 0x7fa8440554f0&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;h2 id=&#34;retrieve-message&#34;&gt;Retrieve message&lt;/h2&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;client2 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; mqtt&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;Client()&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;client2&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;connect(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;localhost&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1883&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;60&lt;/span&gt;)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;on_message&lt;/span&gt;(client, userdata, msg, properties&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;None&lt;/span&gt;):&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    print(msg&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;topic&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34; &amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;str(msg&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;payload))&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;client2&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;on_message &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; on_message&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;client2&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;subscribe(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;example/path&amp;#39;&lt;/span&gt;)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;client2&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;loop_start()&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;pre&gt;&lt;code&gt;example/path b&#39;Hello world!&#39;&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;If everything went well, we should see Hello world as output.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Messages between applications: MQTT Server</title>
      <link>https://blog.miguens.one/posts/2019/08/messages-between-applications-mqtt-server/</link>
      <pubDate>Fri, 02 Aug 2019 00:00:00 +0000</pubDate>
      <guid>https://blog.miguens.one/posts/2019/08/messages-between-applications-mqtt-server/</guid>
      <description>&lt;h2 id=&#34;mqtt&#34;&gt;MQTT&lt;/h2&gt;&#xA;&lt;p&gt;In this series of post, I will explain how to use the message broker MQTT. From installation to submit and receive messages in Python and C++.&lt;/p&gt;&#xA;&lt;h2 id=&#34;a-bit-of-history&#34;&gt;A bit of history&lt;/h2&gt;&#xA;&lt;p&gt;MQTT was created way back in 1999 by two engineers â€” Andy Stanford-Clark (IBM) and Arlen Nipper (Eurotech). They had to invent a new protocol for connecting oil pipelines over unreliable, satellite networks.&lt;/p&gt;&#xA;&lt;p&gt;The motivation for designing MQTT was to create a lightweight and bandwidth-efficient protocol that was data agnostic with support for multiple levels of Quality of Service (QoS). Interestingly, even today, those are the same reasons for which MQTT is chosen for implementing IoT solutions.&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
